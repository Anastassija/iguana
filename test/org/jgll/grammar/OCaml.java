package org.jgll.grammar;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.jgll.grammar.Grammar;
import org.jgll.grammar.condition.ConditionType;
import org.jgll.grammar.condition.RegularExpressionCondition;
import org.jgll.grammar.patterns.ExceptPattern;
import org.jgll.grammar.patterns.PrecedencePattern;
import org.jgll.grammar.symbol.CharacterRange;
import org.jgll.grammar.symbol.Nonterminal;
import org.jgll.grammar.symbol.Rule;
import org.jgll.grammar.symbol.Character;
import org.jgll.grammar.symbol.Terminal;
import org.jgll.regex.Alt;
import org.jgll.regex.Opt;
import org.jgll.regex.Plus;
import org.jgll.regex.Sequence;
import org.jgll.regex.Star;

import com.google.common.collect.Sets;

import static org.jgll.grammar.symbol.LayoutStrategy.*;

public class OCaml {
	public static Grammar grammar = 
		Grammar.builder()
		.setLayout(Nonterminal.builder("Layout").build())
		// PackageConstraint ::= (t y p e) TypeConstr (=) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("PackageConstraint").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("TypeConstr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// PackageType ::= ModTypePath 
		.addRule(Rule.withHead(Nonterminal.builder("PackageType").build()).addSymbol(Nonterminal.builder("ModTypePath").build()).build())
		// PackageType ::= ModTypePath (w i t h) PackageConstraint ((a n d) PackageConstraint)* 
		.addRule(Rule.withHead(Nonterminal.builder("PackageType").build()).addSymbol(Nonterminal.builder("ModTypePath").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build()).addSymbol(Nonterminal.builder("PackageConstraint").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("PackageConstraint").build()).build()).build()).build())
		// TypeParam ::= Variance? (') Ident 
		.addRule(Rule.withHead(Nonterminal.builder("TypeParam").build()).addSymbol(Opt.builder(Nonterminal.builder("Variance").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Nonterminal.builder("Ident").build()).build())
		// TypeParam ::= Variance? (_)  !>>  (0-9 | A-Z | a-z) 
		.addRule(Rule.withHead(Nonterminal.builder("TypeParam").build()).addSymbol(Opt.builder(Nonterminal.builder("Variance").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(97, 122).build()).build()))).build()).build())
		// StringLiteral1 ::= " StringCharacter* " 
		.addRule(Rule.withHead(Nonterminal.builder("StringLiteral1").build()).addSymbol(Character.builder(34).build()).addSymbol(Star.builder(Nonterminal.builder("StringCharacter").build()).build()).addSymbol(Character.builder(34).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ExtendedModulePath ::= ExtendedModulePath (() ExtendedModulePath ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ExtendedModulePath").build()).addSymbol(Nonterminal.builder("ExtendedModulePath").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ExtendedModulePath").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ExtendedModulePath ::= (ExtendedModulePath (.))? ModuleName 
		.addRule(Rule.withHead(Nonterminal.builder("ExtendedModulePath").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ExtendedModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).build())
		// TypeInformation ::= TypeEquation? TypeRepresentation? TypeConstraint* 
		.addRule(Rule.withHead(Nonterminal.builder("TypeInformation").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeEquation").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeRepresentation").build()).build()).addSymbol(Star.builder(Nonterminal.builder("TypeConstraint").build()).build()).build())
		// ClassDefinition ::= (c l a s s) ClassBinding+ 
		.addRule(Rule.withHead(Nonterminal.builder("ClassDefinition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("ClassBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build()).build())
		// ConstrDecl ::= ConstrName ((o f) Typexpr_+)? 
		.addRule(Rule.withHead(Nonterminal.builder("ConstrDecl").build()).addSymbol(Nonterminal.builder("ConstrName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()).build()).build()).build())
		// ConstrDecl ::= ConstrName (:) Typexpr_+ (- >) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("ConstrDecl").build()).addSymbol(Nonterminal.builder("ConstrName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// MethodName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("MethodName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// InfixSymbol3 ::= ((+ | -) OperatorChar*)  \  ((- >)) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol3").build()).addSymbol(Sequence.builder(Alt.builder(CharacterRange.builder(43, 43).build(), CharacterRange.builder(45, 45).build()).build(), Star.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// TagName ::= Ident 
		.addRule(Rule.withHead(Nonterminal.builder("TagName").build()).addSymbol(Nonterminal.builder("Ident").build()).build())
		// OptLabelColon ::= (?) LowercaseIdentifier (:) 
		.addRule(Rule.withHead(Nonterminal.builder("OptLabelColon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Expr_1 ::= Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr_1").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// ClassExpr ::= (l e t) (r e c)? LetBinding ((a n d) LetBinding)* (i n) ClassExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build()).addSymbol(Nonterminal.builder("LetBinding").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("LetBinding").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("ClassExpr").build()).build())
		// ClassExpr ::= (f u n) Parameter+ (- >) ClassExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Parameter").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("ClassExpr").build()).build())
		// ClassExpr ::= ClassExpr Arg+ 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Nonterminal.builder("ClassExpr").build()).addSymbol(Plus.builder(Nonterminal.builder("Arg").build()).build()).build())
		// ClassExpr ::= ([) Typexpr ((,) Typexpr)* (]) ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// ClassExpr ::= (() ClassExpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ClassExpr ::= (() ClassExpr (:) ClassType ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ClassType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ClassExpr ::= (o b j e c t) ClassBody (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(98).build(), Character.builder(106).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("ClassBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build())
		// ClassExpr ::= ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("ClassExpr").build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// FieldDecl ::= (m u t a b l e)? FieldName (:) PolyTypExpr 
		.addRule(Rule.withHead(Nonterminal.builder("FieldDecl").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Nonterminal.builder("FieldName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("PolyTypExpr").build()).build())
		// ClassBody ::= ((() Pattern ((:) Typexpr)? ()))? ClassField* 
		.addRule(Rule.withHead(Nonterminal.builder("ClassBody").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Pattern").build(), Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("ClassField").build()).build()).build())
		// InfixSymbol1Exclude ::= ()) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol1Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// TypeParams ::= TypeParam 
		.addRule(Rule.withHead(Nonterminal.builder("TypeParams").build()).addSymbol(Nonterminal.builder("TypeParam").build()).build())
		// TypeParams ::= (() TypeParam+ ()) 
		.addRule(Rule.withHead(Nonterminal.builder("TypeParams").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("TypeParam").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// TopLevel ::= TopLevelPhrase* 
		.addRule(Rule.withHead(Nonterminal.builder("TopLevel").build()).addSymbol(Star.builder(Nonterminal.builder("TopLevelPhrase").build()).build()).build())
		// ClassSpec ::= (v i r t u a l)? (([) TypeParameters (]))? ClassName (:) ClassType 
		.addRule(Rule.withHead(Nonterminal.builder("ClassSpec").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Nonterminal.builder("TypeParameters").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ClassType").build()).build())
		// CharLiteral ::= ' (RegularChar | EscapeSequence) ' 
		.addRule(Rule.withHead(Nonterminal.builder("CharLiteral").build()).addSymbol(Character.builder(39).build()).addSymbol(Alt.builder(Nonterminal.builder("RegularChar").build(), Nonterminal.builder("EscapeSequence").build()).build()).addSymbol(Character.builder(39).build()).setLayoutStrategy(NO_LAYOUT).build())
		// TypeParameters ::= (') Ident ((,) (') Ident)* 
		.addRule(Rule.withHead(Nonterminal.builder("TypeParameters").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Nonterminal.builder("Ident").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build(), Nonterminal.builder("Ident").build()).build()).build()).build())
		// NegativeIntegerLiteral ::= - IntegerLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("NegativeIntegerLiteral").build()).addSymbol(Character.builder(45).build()).addSymbol(Nonterminal.builder("IntegerLiteral").build()).setLayoutStrategy(NO_LAYOUT).build())
		// ModuleType ::= (m o d u l e) (t y p e) (o f) ModuleExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).build())
		// ModuleType ::= ModuleType (() ModuleType ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ModuleType ::= ModTypePath 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Nonterminal.builder("ModTypePath").build()).build())
		// ModuleType ::= ModuleType (w i t h) ModConstraint ((a n d) ModConstraint)* 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build()).addSymbol(Nonterminal.builder("ModConstraint").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ModConstraint").build()).build()).build()).build())
		// ModuleType ::= (f u n c t o r) (() ModuleName (:) ModuleType ()) (- >) ModuleType 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).build())
		// ModuleType ::= (() ModuleType ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ModuleType ::= (s i g) (Definition (; ;)?)* (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(105).build(), Character.builder(103).build()).build()).build()).addSymbol(Star.builder(Sequence.builder(Nonterminal.builder("Definition").build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build(), Character.builder(59).build()).build()).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build())
		// CapitalizedIdentifier ::= ((A-Z) (' | 0-9 | A-Z | _ | a-z)*)  \  ((e l s e) | (f u n c t o r) | (a s) | (r e c) | (s t r u c t) | (l a z y) | (o p e n) | (i n c l u d e) | (t r u e) | (m o d u l e) | (t o) | (l e t) | (t r y) | (e n d) | (i n h e r i t) | (w h e n) | (t y p e) | (f u n c t i o n) | (c l a s s) | (o b j e c t) | (f u n) | (_) | (t h e n) | (d o w n t o) | (i f) | (c o n s t r a i n t) | (w h i l e) | (s i g) | (a n d) | (o f) | (v i r t u a l) | (l a n d) | (d o) | (e x t e r n a l) | (l s r) | (f o r) | (b e g i n) | (l o r) | (e x c e p t i o n) | (l x o r) | (f a l s e) | (o r) | (p r i v a t e) | (m o d) | (d o n e) | (i n i t i a l i z e r) | (v a l) | (m e t h o d) | (a s r) | (n e w) | (a s s e r t) | (m u t a b l e) | (w i t h) | (l s l) | (i n) | (m a t c h)) 
		.addRule(Rule.withHead(Nonterminal.builder("CapitalizedIdentifier").build()).addSymbol(Sequence.builder(Alt.builder(CharacterRange.builder(65, 90).build()).addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build(), Star.builder(Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(100).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(98).build(), Character.builder(106).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(105).build(), Character.builder(103).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(101).build(), Character.builder(103).build(), Character.builder(105).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(112).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(120).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// RegularCharStr ::= (\u0001-! | #-[ | ]-\u10FFFF) 
		.addRule(Rule.withHead(Nonterminal.builder("RegularCharStr").build()).addSymbol(Alt.builder(CharacterRange.builder(1, 33).build(), CharacterRange.builder(35, 91).build(), CharacterRange.builder(93, 1114111).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol2 ::= ((l a n d) | (m o d) | (l o r) | (l x o r))  !>>  (0-9 | a-z) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol2").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(120).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol2 ::= ((% | * | /) OperatorChar*)  \  ((* *)) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol2").build()).addSymbol(Sequence.builder(Alt.builder(CharacterRange.builder(37, 37).build(), CharacterRange.builder(42, 42).build(), CharacterRange.builder(47, 47).build()).build(), Star.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(42).build(), Character.builder(42).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassBodyType ::= (([) Typexpr ((,) Typexpr)* (]))? ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("ClassBodyType").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// ClassBodyType ::= (o b j e c t) ((() Typexpr ()))? ClassFieldSpec* (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("ClassBodyType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(98).build(), Character.builder(106).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("ClassFieldSpec").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build())
		// ModuleItems ::= (; ;)? (Expr | (Definition (;)?)) (((; ;) Expr) | ((; ;)? Definition (;)?))* (; ;)? 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleItems").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build(), Character.builder(59).build()).build()).build()).build()).addSymbol(Alt.builder(Nonterminal.builder("Expr").build(), Sequence.builder(Nonterminal.builder("Definition").build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).build()).build()).addSymbol(Star.builder(Alt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build(), Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()).build(), Sequence.builder(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build(), Character.builder(59).build()).build()).build()).build(), Nonterminal.builder("Definition").build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build(), Character.builder(59).build()).build()).build()).build()).build())
		// TypeConstraint ::= (c o n s t r a i n t) (') Ident (=) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("TypeConstraint").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Nonterminal.builder("Ident").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// ModuleName ::= CapitalizedIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleName").build()).addSymbol(Nonterminal.builder("CapitalizedIdentifier").build()).build())
		// $default$ ::= 
		.addRule(Rule.withHead(Nonterminal.builder("$default$").build()).setLayoutStrategy(NO_LAYOUT).build())
		// Parameter ::= OptLabelColon Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Nonterminal.builder("OptLabelColon").build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Parameter ::= LabelColon Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Nonterminal.builder("LabelColon").build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Parameter ::= (~) (() LabelName ((:) Typexpr)? ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("LabelName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Parameter ::= OptLabelColon (() Pattern (:) Typexpr (=) Expr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Nonterminal.builder("OptLabelColon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Parameter ::= (() (t y p e) TypeconstrName ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("TypeconstrName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Parameter ::= OptLabel 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Nonterminal.builder("OptLabel").build()).build())
		// Parameter ::= (?) (() LabelName ((:) Typexpr)? ((=) Expr)? ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("LabelName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Parameter ::= Label 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Nonterminal.builder("Label").build()).build())
		// Parameter ::= Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Parameter").build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Ident ::= CapitalizedIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("Ident").build()).addSymbol(Nonterminal.builder("CapitalizedIdentifier").build()).setLayoutStrategy(NO_LAYOUT).build())
		// Ident ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("Ident").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).setLayoutStrategy(NO_LAYOUT).build())
		// Arg ::= LabelColon Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Arg").build()).addSymbol(Nonterminal.builder("LabelColon").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Arg ::= OptLabel 
		.addRule(Rule.withHead(Nonterminal.builder("Arg").build()).addSymbol(Nonterminal.builder("OptLabel").build()).build())
		// Arg ::= Label 
		.addRule(Rule.withHead(Nonterminal.builder("Arg").build()).addSymbol(Nonterminal.builder("Label").build()).build())
		// Arg ::= OptLabelColon Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Arg").build()).addSymbol(Nonterminal.builder("OptLabelColon").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Arg ::= Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Arg").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// StringCharacter ::= \ \\u000A 
		.addRule(Rule.withHead(Nonterminal.builder("StringCharacter").build()).addSymbol(Character.builder(92).build()).addSymbol(Character.builder(10).build()).setLayoutStrategy(NO_LAYOUT).build())
		// StringCharacter ::= EscapeSequence 
		.addRule(Rule.withHead(Nonterminal.builder("StringCharacter").build()).addSymbol(Nonterminal.builder("EscapeSequence").build()).setLayoutStrategy(NO_LAYOUT).build())
		// StringCharacter ::= RegularCharStr 
		.addRule(Rule.withHead(Nonterminal.builder("StringCharacter").build()).addSymbol(Nonterminal.builder("RegularCharStr").build()).setLayoutStrategy(NO_LAYOUT).build())
		// StringCharacter ::= \ \u0020 
		.addRule(Rule.withHead(Nonterminal.builder("StringCharacter").build()).addSymbol(Character.builder(92).build()).addSymbol(Character.builder(32).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Label ::= (~) LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("Label").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassField ::= (c o n s t r a i n t) Typexpr (=) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// ClassField ::= ((i n h e r i t !) | (i n h e r i t)) ClassExpr ((a s) ValueName)? 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(33).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(116).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassExpr").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build()).build()).build()).build())
		// ClassField ::= (i n i t i a l i z e r) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// ClassField ::= (m e t h o d) (p r i v a t e)? (v i r t u a l) MethodName (:) PolyTypExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("MethodName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("PolyTypExpr").build()).build())
		// ClassField ::= (v a l) (m u t a b l e)? (v i r t u a l) InstVarName (:) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("InstVarName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// ClassField ::= ((m e t h o d) | (m e t h o d !)) (p r i v a t e)? MethodName Parameter* ((:) PolyTypExpr)? (=) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(33).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Nonterminal.builder("MethodName").build()).addSymbol(Star.builder(Nonterminal.builder("Parameter").build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("PolyTypExpr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// ClassField ::= ((v a l) | (v a l !)) (m u t a b l e)? InstVarName ((:) Typexpr)? (=) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassField").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(33).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Nonterminal.builder("InstVarName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Keywords ::= (d o n e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l a z y) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (i n i t i a l i z e r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (o p e n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (i f) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l x o r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(120).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (a s) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (f u n c t o r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (s t r u c t) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (f u n c t i o n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (e x t e r n a l) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l s r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l s l) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l o r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (a s s e r t) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (o b j e c t) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(98).build(), Character.builder(106).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (w h e n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (t y p e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (m u t a b l e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (v a l) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (w h i l e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (m o d) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (v i r t u a l) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (d o w n t o) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (a s r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (m o d u l e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (t o) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l e t) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (t h e n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (l a n d) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (o r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (c o n s t r a i n t) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (o f) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (a n d) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (m a t c h) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (n e w) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (t r y) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (p r i v a t e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (t r u e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (c l a s s) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (f u n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (f a l s e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (i n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (e l s e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (i n h e r i t) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (m e t h o d) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (w i t h) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (s i g) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(105).build(), Character.builder(103).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (f o r) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (b e g i n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(101).build(), Character.builder(103).build(), Character.builder(105).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (i n c l u d e) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(100).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (r e c) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (d o) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (_) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Keywords ::= (e x c e p t i o n) 
		.addRule(Rule.withHead(Nonterminal.builder("Keywords").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(112).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// PrefixSymbol ::= (! OperatorChar*)  !>>  (! | $-& | *-+ | --/ | : | <-@ | ^ | | | ~)  \  ((! =)) 
		.addRule(Rule.withHead(Nonterminal.builder("PrefixSymbol").build()).addSymbol(Sequence.builder(Character.builder(33).build(), Star.builder(Nonterminal.builder("OperatorChar").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// PrefixSymbol ::= (? | ~) OperatorChar+  !>>  (! | $-& | *-+ | --/ | : | <-@ | ^ | | | ~) 
		.addRule(Rule.withHead(Nonterminal.builder("PrefixSymbol").build()).addSymbol(Alt.builder(CharacterRange.builder(63, 63).build(), CharacterRange.builder(126, 126).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassTypeDefinition ::= (c l a s s) (t y p e) ClasstypeDef ((a n d) ClasstypeDef)* 
		.addRule(Rule.withHead(Nonterminal.builder("ClassTypeDefinition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ClasstypeDef").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ClasstypeDef").build()).build()).build()).build())
		// ClasstypeDef ::= (v i r t u a l)? (([) TypeParameters (]))? ClassName (=) ClassBodyType 
		.addRule(Rule.withHead(Nonterminal.builder("ClasstypeDef").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Nonterminal.builder("TypeParameters").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ClassBodyType").build()).build())
		// EscapeSequence ::= (\ x (0-9 | A-F | a-f) (0-9 | A-F | a-f)) 
		.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Sequence.builder(Character.builder(92).build(), Character.builder(120).build(), Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build(), Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// EscapeSequence ::= (\ (0-9) (0-9) (0-9)) 
		.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Sequence.builder(Character.builder(92).build(), Alt.builder(CharacterRange.builder(48, 57).build()).build(), Alt.builder(CharacterRange.builder(48, 57).build()).build(), Alt.builder(CharacterRange.builder(48, 57).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// EscapeSequence ::= (\ (" | ' | \ | b | n | r | t)) 
		.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Sequence.builder(Character.builder(92).build(), Alt.builder(CharacterRange.builder(34, 34).build(), CharacterRange.builder(39, 39).build(), CharacterRange.builder(92, 92).build(), CharacterRange.builder(98, 98).build(), CharacterRange.builder(110, 110).build(), CharacterRange.builder(114, 114).build(), CharacterRange.builder(116, 116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Expr ::= (() Expr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Expr ::= Expr (. [) Expr (]) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// Expr ::= Expr ((,) Expr_2)+ 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()).build())
		// Expr ::= Expr (: :) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr InfixSymbol3 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol3").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr (#) MethodName 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("MethodName").build()).build())
		// Expr ::= (n e w) ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// Expr ::= (w h i l e) Expr (d o) Expr (;)? (d o n e) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(101).build()).build()).build()).build())
		// Expr ::= (i f) Expr (t h e n) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build()).build())
		// Expr ::= Expr InfixSymbol4 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol4").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr (. [) Expr (]) (< -) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (a s s e r t) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= ({) Expr (w i t h) Field ((=) Expr_1)? ((;) Field ((=) Expr_1)?)* (;)? (}) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build()).addSymbol(Nonterminal.builder("Field").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr_1").build()).build()).build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Field").build(), Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr_1").build()).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).build())
		// Expr ::= Expr (. () Expr ()) (< -) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= ({) Field ((=) Expr_1)? ((;) Field ((=) Expr_1)?)* (;)? (}) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Field").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr_1").build()).build()).build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Field").build(), Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr_1").build()).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).build())
		// Expr ::= InstVarName (< -) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InstVarName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (l a z y) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr Arg+ 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Plus.builder(Nonterminal.builder("Arg").build()).build()).build())
		// Expr ::= (() Expr (: >) Typexpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Expr ::= Expr (. () Expr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Expr ::= Expr InfixSymbol5 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol5").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr InfixSymbol2 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol2").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= PrefixSymbol Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("PrefixSymbol").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (f u n) MultipleMatching 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("MultipleMatching").build()).build())
		// Expr ::= (f o r) Ident (=) Expr ((d o w n t o) | (t o)) Expr (d o) Expr (;)? (d o n e) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).addSymbol(Nonterminal.builder("Ident").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(111).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(101).build()).build()).build()).build())
		// Expr ::= Expr (. {) Expr (}) (< -) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr (.) Field (< -) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Field").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= ([) Expr_1+ (;)? (]) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Expr_1").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// Expr ::= (l e t) (o p e n) ModulePath (i n) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("ModulePath").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (i f) Expr (t h e n) Expr_1 (e l s e) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Expr_1").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr (! =) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (f u n c t i o n) PatternMatching 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("PatternMatching").build()).build())
		// Expr ::= Expr (. {) Expr (}) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).build())
		// Expr ::= (- .) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr InfixSymbol8 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol8").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (() Expr (:) Typexpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Expr ::= (t r y) Expr (w i t h) PatternMatching 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build()).addSymbol(Nonterminal.builder("PatternMatching").build()).build())
		// Expr ::= Expr (.) Field 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Field").build()).build())
		// Expr ::= Expr (;) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr InfixSymbol7 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol7").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= (o b j e c t) ClassBody (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(98).build(), Character.builder(106).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("ClassBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build())
		// Expr ::= (-) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= ([ |) Expr_1+ (;)? (| ]) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Expr_1").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).build())
		// Expr ::= Expr InfixSymbol6 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol6").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Constant 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Constant").build()).build())
		// Expr ::= ({ <) InstVarName (=) Expr_1 ((;) InstVarName (=) Expr)* (;)? (> }) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build(), Character.builder(60).build()).build()).build()).addSymbol(Nonterminal.builder("InstVarName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr_1").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(125).build()).build()).build()).build())
		// Expr ::= (m a t c h) Expr (w i t h) PatternMatching 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build()).addSymbol(Nonterminal.builder("PatternMatching").build()).build())
		// Expr ::= (() Expr (:) Typexpr (: >) Typexpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Expr ::= ValueName 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("ValueName").build()).build())
		// Expr ::= (() (m o d u l e) ModuleExpr ((:) PackageType)? ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("PackageType").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Expr ::= (b e g i n) Expr (;)? (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(101).build(), Character.builder(103).build(), Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build())
		// Expr ::= (l e t) (r e c)? LetBinding+ (i n) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Expr ::= Expr InfixSymbol1 Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Nonterminal.builder("InfixSymbol1").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// InfixSymbol1 ::= ((l s r) | (l s l) | (a s r))  !>>  (0-9 | a-z) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol1").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol1 ::= (* * OperatorChar*)  \  (())) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol1").build()).addSymbol(Sequence.builder(Character.builder(42).build(), Character.builder(42).build(), Star.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Int64Literal ::= SpecialInt L 
		.addRule(Rule.withHead(Nonterminal.builder("Int64Literal").build()).addSymbol(Nonterminal.builder("SpecialInt").build()).addSymbol(Character.builder(76).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Field ::= (ModulePath (.))? FieldName 
		.addRule(Rule.withHead(Nonterminal.builder("Field").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("FieldName").build()).build())
		// ExceptionDefinition ::= (e x c e p t i o n) ConstrName (=) Constr 
		.addRule(Rule.withHead(Nonterminal.builder("ExceptionDefinition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(112).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("ConstrName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Constr").build()).build())
		// ExceptionDefinition ::= (e x c e p t i o n) ConstrName ((o f) Typexpr_ ((*) Typexpr_)*)? 
		.addRule(Rule.withHead(Nonterminal.builder("ExceptionDefinition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(112).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("ConstrName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Typexpr_").build(), Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Nonterminal.builder("Typexpr_").build()).build()).build()).build()).build()).build())
		// PolyTypExpr ::= Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("PolyTypExpr").build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// PolyTypExpr ::= ((') Ident)+ (.) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("PolyTypExpr").build()).addSymbol(Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build(), Nonterminal.builder("Ident").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// TypeDef ::= TypeParams? TypeconstrName TypeInformation 
		.addRule(Rule.withHead(Nonterminal.builder("TypeDef").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParams").build()).build()).addSymbol(Nonterminal.builder("TypeconstrName").build()).addSymbol(Nonterminal.builder("TypeInformation").build()).build())
		// TypeDefinition ::= (t y p e) TypeDef+ 
		.addRule(Rule.withHead(Nonterminal.builder("TypeDefinition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("TypeDef").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build()).build())
		// Typexpr ::= (#) ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// Typexpr ::= (() Typexpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Typexpr ::= TypeConstr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("TypeConstr").build()).build())
		// Typexpr ::= Typexpr (*) Typexpr_+ 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()).build())
		// Typexpr ::= (() Typexpr ((,) Typexpr)+ ()) TypeConstr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("TypeConstr").build()).build())
		// Typexpr ::= Typexpr (a s) (') Ident 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Nonterminal.builder("Ident").build()).build())
		// Typexpr ::= Typexpr (#) ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// Typexpr ::= (_)  !>>  (0-9 | A-Z | a-z) 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(97, 122).build()).build()))).build()).build())
		// Typexpr ::= (<) (. .)? (>) 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).build())
		// Typexpr ::= (<) MethodType+ ((;) (. .))? (>) 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("MethodType").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).build())
		// Typexpr ::= (() (m o d u l e) PackageType ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("PackageType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Typexpr ::= Typexpr (- >) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// Typexpr ::= Typexpr TypeConstr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("TypeConstr").build()).build())
		// Typexpr ::= (p r i v a t e) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// Typexpr ::= (?)? LabelName (:) Typexpr (- >) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build()).addSymbol(Nonterminal.builder("LabelName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// Typexpr ::= PolymorphicVariantType 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Nonterminal.builder("PolymorphicVariantType").build()).build())
		// Typexpr ::= (() Typexpr+ ()) (#) ClassPath 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Typexpr").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("ClassPath").build()).build())
		// Typexpr ::= (') Ident 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Nonterminal.builder("Ident").build()).build())
		// InfixSymbol8 ::= (: =) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol8").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ValueName ::= (() OperatorChar+  !>>  (! | : | <-@ | ^ | | | ~) ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ValueName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ValueName ::= (() ((l s l) | (a s r) | (m o d) | (l o r) | (l x o r) | (l s r) | (l a n d)) ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ValueName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(120).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ValueName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("ValueName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// ModTypName ::= Ident 
		.addRule(Rule.withHead(Nonterminal.builder("ModTypName").build()).addSymbol(Nonterminal.builder("Ident").build()).build())
		// InfixSymbol5Exclude ::= (< -) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol5Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol5Exclude ::= (| |) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol5Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol5Exclude ::= (&) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol5Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol5Exclude ::= (|) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol5Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol5Exclude ::= (& &) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol5Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build(), Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ModulePath ::= (ModuleName (.))* ModuleName 
		.addRule(Rule.withHead(Nonterminal.builder("ModulePath").build()).addSymbol(Star.builder(Sequence.builder(Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).build())
		// LowercaseIdentifier ::= ((_ | a-z) (' | 0-9 | A-Z | _ | a-z)*)  \  ((e l s e) | (f u n c t o r) | (a s) | (r e c) | (s t r u c t) | (l a z y) | (o p e n) | (i n c l u d e) | (t r u e) | (m o d u l e) | (t o) | (l e t) | (t r y) | (e n d) | (i n h e r i t) | (w h e n) | (t y p e) | (f u n c t i o n) | (c l a s s) | (o b j e c t) | (f u n) | (_) | (t h e n) | (d o w n t o) | (i f) | (c o n s t r a i n t) | (w h i l e) | (s i g) | (a n d) | (o f) | (v i r t u a l) | (l a n d) | (d o) | (e x t e r n a l) | (l s r) | (f o r) | (b e g i n) | (l o r) | (e x c e p t i o n) | (l x o r) | (f a l s e) | (o r) | (p r i v a t e) | (m o d) | (d o n e) | (i n i t i a l i z e r) | (v a l) | (m e t h o d) | (a s r) | (n e w) | (a s s e r t) | (m u t a b l e) | (w i t h) | (l s l) | (i n) | (m a t c h)) 
		.addRule(Rule.withHead(Nonterminal.builder("LowercaseIdentifier").build()).addSymbol(Sequence.builder(Alt.builder(CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build(), Star.builder(Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(100).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(98).build(), Character.builder(106).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(105).build(), Character.builder(103).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(101).build(), Character.builder(103).build(), Character.builder(105).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(112).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(120).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(115).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Layout ::= (Whitespace | Comment)*  !>>  (( *)  !>>  (\u0009-\\u000D | \u0020) 
		.addRule(Rule.withHead(Nonterminal.builder("Layout").build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Comment").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(40).build(), Character.builder(42).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(9, 13).build(), CharacterRange.builder(32, 32).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Expr_2 ::= Expr 
		.addRule(Rule.withHead(Nonterminal.builder("Expr_2").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// ClassPath ::= (ModulePath (.))? ClassName 
		.addRule(Rule.withHead(Nonterminal.builder("ClassPath").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassName").build()).build())
		// Pattern_ ::= Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern_").build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// ModTypeName ::= Ident 
		.addRule(Rule.withHead(Nonterminal.builder("ModTypeName").build()).addSymbol(Nonterminal.builder("Ident").build()).build())
		// Pattern ::= ({) Field ((=) Pattern)? ((;) Field (=) Pattern)* (;)? (}) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Field").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Pattern").build()).build()).build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Pattern").build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).build())
		// Pattern ::= Pattern (a s) ValueName 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build()).addSymbol(Nonterminal.builder("ValueName").build()).build())
		// Pattern ::= (() (m o d u l e) ModuleName ((:) PackageType)? ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("PackageType").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Pattern ::= (_)  !>>  (0-9 | A-Z | a-z) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(97, 122).build()).build()))).build()).build())
		// Pattern ::= Pattern (|) Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Pattern ::= (l a z y) Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Pattern ::= Pattern (: :) Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Pattern ::= (`) TagName Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("TagName").build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Pattern ::= ValueName 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("ValueName").build()).build())
		// Pattern ::= (() Pattern (:) Typexpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Pattern ::= NegativeIntegerLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("NegativeIntegerLiteral").build()).build())
		// Pattern ::= ([) Pattern+ (;)? (]) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Pattern").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// Pattern ::= Pattern (,) Pattern_+ 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).build())
		// Pattern ::= (#) TypeconstrName 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("TypeconstrName").build()).build())
		// Pattern ::= Constant 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("Constant").build()).build())
		// Pattern ::= Constr Pattern 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("Constr").build()).addSymbol(Nonterminal.builder("Pattern").build()).build())
		// Pattern ::= (() Pattern ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Pattern ::= ([ |) Pattern+ (;)? (| ]) 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Pattern").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).build())
		// Pattern ::= CharLiteral (. .) CharLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("Pattern").build()).addSymbol(Nonterminal.builder("CharLiteral").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("CharLiteral").build()).build())
		// Comment ::= (( *) ((*) | (\u0001-' | ) | +-\u10FFFF) | Comment | (())* (* )) 
		.addRule(Rule.withHead(Nonterminal.builder("Comment").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build(), Character.builder(42).build()).build()).build()).addSymbol(Star.builder(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(41).build()))).build(), Alt.builder(CharacterRange.builder(1, 39).build(), CharacterRange.builder(41, 41).build(), CharacterRange.builder(43, 1114111).build()).build(), Nonterminal.builder("Comment").build(), Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(42).build()))).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build(), Character.builder(41).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// RegularChar ::= (\u0001-& | (-[ | ]-\u10FFFF) 
		.addRule(Rule.withHead(Nonterminal.builder("RegularChar").build()).addSymbol(Alt.builder(CharacterRange.builder(1, 38).build(), CharacterRange.builder(40, 91).build(), CharacterRange.builder(93, 1114111).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// IntegerLiteral ::= ((0 X) | (0 x)) (0-9 | A-F | a-f) (0-9 | A-F | _ | a-f)*  !>>  (. | 0-9 | A-F | L | _ | a-f | l | n) 
		.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(88).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(120).build()).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 102).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(76, 76).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 102).build(), CharacterRange.builder(108, 108).build(), CharacterRange.builder(110, 110).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// IntegerLiteral ::= ((0 b) | (0 B)) (0-1) (0-1 | _)*  !>>  (. | 0-1 | E | L | _ | e | l | n) 
		.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(98).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(66).build()).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 49).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 49).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 49).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(76, 76).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build(), CharacterRange.builder(108, 108).build(), CharacterRange.builder(110, 110).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// IntegerLiteral ::= (0-9) (0-9 | _)*  !>>  (. | 0-9 | E | L | _ | e | l | n) 
		.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(76, 76).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build(), CharacterRange.builder(108, 108).build(), CharacterRange.builder(110, 110).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// IntegerLiteral ::= ((0 o) | (0 O)) (0-7) (0-7 | _)*  !>>  (. | 0-7 | E | L | _ | e | l | n) 
		.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(79).build()).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 55).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 55).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 55).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(76, 76).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build(), CharacterRange.builder(108, 108).build(), CharacterRange.builder(110, 110).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol7 ::= (o r)  !>>  (0-9 | a-z) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol7").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(114).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol7 ::= (| |) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol7").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InstVarName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("InstVarName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// ModuleExpr ::= (() ModuleExpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ModuleExpr ::= (() (v a l) Expr ((:) PackageType)? ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("PackageType").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ModuleExpr ::= (() ModuleExpr (:) ModuleType ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ModuleExpr ::= ModulePath 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Nonterminal.builder("ModulePath").build()).build())
		// ModuleExpr ::= ModuleExpr (() ModuleExpr ()) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// ModuleExpr ::= (f u n c t o r) (() ModuleName (:) ModuleType ()) (- >) ModuleExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).build())
		// ModuleExpr ::= (s t r u c t) ModuleItems? (e n d) 
		.addRule(Rule.withHead(Nonterminal.builder("ModuleExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ModuleItems").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build()).build())
		// PolymorphicVariantType ::= ([ <) (|)? TagSpecFull+ ((>) ((`) TagName)+)? (]) 
		.addRule(Rule.withHead(Nonterminal.builder("PolymorphicVariantType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(60).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("TagSpecFull").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build())).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build(), Nonterminal.builder("TagName").build()).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// PolymorphicVariantType ::= ([ >) TagSpec* (]) 
		.addRule(Rule.withHead(Nonterminal.builder("PolymorphicVariantType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(62).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("TagSpec").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// PolymorphicVariantType ::= ([) (|)? TagSpec* (]) 
		.addRule(Rule.withHead(Nonterminal.builder("PolymorphicVariantType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("TagSpec").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// ClassSpecification ::= (c l a s s) ClassSpec ((a n d) ClassSpec)* 
		.addRule(Rule.withHead(Nonterminal.builder("ClassSpecification").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).addSymbol(Nonterminal.builder("ClassSpec").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ClassSpec").build()).build()).build()).build())
		// FloatLiteral ::= (0-9) (0-9 | _)* . (0-9 | _)*  !>>  (--. | 0-9 | E | _ | e) 
		.addRule(Rule.withHead(Nonterminal.builder("FloatLiteral").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).build()).addSymbol(Character.builder(46).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(45, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// FloatLiteral ::= (0-9) (0-9 | _)* . (0-9 | _)* (E | e) (+ | -)? (0-9) (0-9 | _)*  !>>  (--. | 0-9 | E | _ | e) 
		.addRule(Rule.withHead(Nonterminal.builder("FloatLiteral").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).build()).addSymbol(Character.builder(46).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(69, 69).build(), CharacterRange.builder(101, 101).build()).build()).addSymbol(Opt.builder(Alt.builder(CharacterRange.builder(43, 43).build(), CharacterRange.builder(45, 45).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(45, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// FloatLiteral ::= (0-9) (0-9 | _)* (E | e) (+ | -)? (0-9) (0-9 | _)*  !>>  (--. | 0-9 | E | _ | e) 
		.addRule(Rule.withHead(Nonterminal.builder("FloatLiteral").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(69, 69).build(), CharacterRange.builder(101, 101).build()).build()).addSymbol(Opt.builder(Alt.builder(CharacterRange.builder(43, 43).build(), CharacterRange.builder(45, 45).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(45, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// OperatorChar ::= (! | $-& | *-+ | --/ | : | <-@ | ^ | | | ~) 
		.addRule(Rule.withHead(Nonterminal.builder("OperatorChar").build()).addSymbol(Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// SpecialInt ::= ((0 X) | (0 x)) (0-9 | A-F | a-f) (0-9 | A-F | _ | a-f)*  !>>  (. | 0-9 | A-F | _ | a-f) 
		.addRule(Rule.withHead(Nonterminal.builder("SpecialInt").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(88).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(120).build()).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 102).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 102).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// SpecialInt ::= ((0 b) | (0 B)) (0-1) (0-1 | _)*  !>>  (. | 0-1 | E | _ | e) 
		.addRule(Rule.withHead(Nonterminal.builder("SpecialInt").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(98).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(66).build()).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 49).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 49).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 49).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// SpecialInt ::= (0-9) (0-9 | _)*  !>>  (. | 0-9 | E | _ | e) 
		.addRule(Rule.withHead(Nonterminal.builder("SpecialInt").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// SpecialInt ::= ((0 o) | (0 O)) (0-7) (0-7 | _)*  !>>  (. | 0-7 | E | _ | e) 
		.addRule(Rule.withHead(Nonterminal.builder("SpecialInt").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(79).build()).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(48, 55).build()).build()).addSymbol(Star.builder(Alt.builder(CharacterRange.builder(48, 55).build(), CharacterRange.builder(95, 95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(46, 46).build(), CharacterRange.builder(48, 55).build(), CharacterRange.builder(69, 69).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(101, 101).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassFieldSpec ::= (v a l) (m u t a b l e)? (v i r t u a l)? InstVarName (:) PolyTypExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassFieldSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(117).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).build()).addSymbol(Nonterminal.builder("InstVarName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("PolyTypExpr").build()).build())
		// ClassFieldSpec ::= (c o n s t r a i n t) Typexpr (=) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassFieldSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// ClassFieldSpec ::= (m e t h o d) (p r i v a t e)? (v i r t u a l)? MethodName (:) PolyTypExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassFieldSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(100).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).build()).addSymbol(Nonterminal.builder("MethodName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("PolyTypExpr").build()).build())
		// ClassFieldSpec ::= (i n h e r i t) ClassType 
		.addRule(Rule.withHead(Nonterminal.builder("ClassFieldSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("ClassType").build()).build())
		// InfixSymbol2Exclude ::= (* *) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol2Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build(), Character.builder(42).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("ClassName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// InnerPatternMatching ::= (;)? (|) Pattern ((w h e n) Expr)? (- >) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("InnerPatternMatching").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// ModTypePath ::= (ExtendedModulePath (.))? ModTypName 
		.addRule(Rule.withHead(Nonterminal.builder("ModTypePath").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ExtendedModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ModTypName").build()).build())
		// InfixSymbol6 ::= (&)  !>>  & 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol6").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(38).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// InfixSymbol6 ::= (& &) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol6").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build(), Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassType ::= (((?)? LabelName (:))? Typexpr (- >))* ClassBodyType 
		.addRule(Rule.withHead(Nonterminal.builder("ClassType").build()).addSymbol(Star.builder(Sequence.builder(Opt.builder(Sequence.builder(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassBodyType").build()).build())
		// TagSpec ::= Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("TagSpec").build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// TagSpec ::= (`) TagName ((o f) Typexpr)? 
		.addRule(Rule.withHead(Nonterminal.builder("TagSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("TagName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).build())
		// TypeconstrName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("TypeconstrName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// Definition ::= (l e t) (r e c)? LetBinding ((a n d) LetBinding)* 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build()).addSymbol(Nonterminal.builder("LetBinding").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("LetBinding").build()).build()).build()).build())
		// Definition ::= TypeDefinition 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Nonterminal.builder("TypeDefinition").build()).build())
		// Definition ::= (o p e n) ModulePath 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("ModulePath").build()).build())
		// Definition ::= (e x t e r n a l) ValueName (:) Typexpr (=) ExternalDeclaration 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("ValueName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ExternalDeclaration").build()).build())
		// Definition ::= ClassDefinition 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Nonterminal.builder("ClassDefinition").build()).build())
		// Definition ::= (m o d u l e) ModuleName ((() ModuleName (:) ModuleType ()))* (:) ModuleType 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).build())
		// Definition ::= (i n c l u d e) ModuleExpr 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(100).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).build())
		// Definition ::= ClassSpecification 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Nonterminal.builder("ClassSpecification").build()).build())
		// Definition ::= (v a l) ValueName (:) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("ValueName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// Definition ::= ExceptionDefinition 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Nonterminal.builder("ExceptionDefinition").build()).build())
		// Definition ::= (m o d u l e) (r e c) ModuleName (:) ModuleType ((a n d) ModuleName (:) ModuleType)* 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build()).build()).build()).build())
		// Definition ::= (m o d u l e) ModuleName ((() ModuleName (:) ModuleType ()))* ((:) ModuleType)? (=) ModuleExpr 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).build())
		// Definition ::= (m o d u l e) (r e c) ModuleName (:) ModuleType (=) ModuleExpr ((a n d) ModuleName (:) ModuleType (=) ModuleExpr)* 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleExpr").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build()).build()).build()).build())
		// Definition ::= (m o d u l e) (t y p e) ModTypeName 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModTypeName").build()).build())
		// Definition ::= ClassTypeDefinition 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Nonterminal.builder("ClassTypeDefinition").build()).build())
		// Definition ::= (m o d u l e) (t y p e) ModTypeName (=) ModuleType 
		.addRule(Rule.withHead(Nonterminal.builder("Definition").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModTypeName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleType").build()).build())
		// LabelName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("LabelName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// ValuePath ::= (ModulePath (.))? ValueName 
		.addRule(Rule.withHead(Nonterminal.builder("ValuePath").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ValueName").build()).build())
		// TypeRepresentation ::= (=) (p r i v a t e)? (|)? ConstrDecl+ 
		.addRule(Rule.withHead(Nonterminal.builder("TypeRepresentation").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("ConstrDecl").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build())).build()).build())
		// TypeRepresentation ::= (=) (p r i v a t e)? ({) FieldDecl+ (;)? (}) 
		.addRule(Rule.withHead(Nonterminal.builder("TypeRepresentation").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("FieldDecl").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).build())
		// Int32Literal ::= SpecialInt l 
		.addRule(Rule.withHead(Nonterminal.builder("Int32Literal").build()).addSymbol(Nonterminal.builder("SpecialInt").build()).addSymbol(Character.builder(108).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ConstrName ::= CapitalizedIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("ConstrName").build()).addSymbol(Nonterminal.builder("CapitalizedIdentifier").build()).build())
		// LabelColon ::= (~) LowercaseIdentifier (:) 
		.addRule(Rule.withHead(Nonterminal.builder("LabelColon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// TopLevelPhrase ::= Expr 
		.addRule(Rule.withHead(Nonterminal.builder("TopLevelPhrase").build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// TopLevelPhrase ::= Definition 
		.addRule(Rule.withHead(Nonterminal.builder("TopLevelPhrase").build()).addSymbol(Nonterminal.builder("Definition").build()).build())
		// LetBinding ::= Pattern (=) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("LetBinding").build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// LetBinding ::= ValueName Parameter* ((:) PolyTypExpr)? ((: >) Typexpr)? (=) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("LetBinding").build()).addSymbol(Nonterminal.builder("ValueName").build()).addSymbol(Star.builder(Nonterminal.builder("Parameter").build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("PolyTypExpr").build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// LetBinding ::= ValueName (:) (t y p e) TypeConstr* (.) Typexpr (=) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("LetBinding").build()).addSymbol(Nonterminal.builder("ValueName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("TypeConstr").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// TagSpecFull ::= Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("TagSpecFull").build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// TagSpecFull ::= (`) TagName ((o f) Typexpr)? ((&) Typexpr)* 
		.addRule(Rule.withHead(Nonterminal.builder("TagSpecFull").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("TagName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build(), Nonterminal.builder("Typexpr").build()).build()).build()).build())
		// MethodType ::= MethodName (:) PolyTypExpr 
		.addRule(Rule.withHead(Nonterminal.builder("MethodType").build()).addSymbol(Nonterminal.builder("MethodName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("PolyTypExpr").build()).build())
		// Whitespace ::= (\u0009-\\u000D | \u0020) 
		.addRule(Rule.withHead(Nonterminal.builder("Whitespace").build()).addSymbol(Alt.builder(CharacterRange.builder(9, 13).build(), CharacterRange.builder(32, 32).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// Constant ::= (f a l s e) 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).build())
		// Constant ::= (() ()) 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build())
		// Constant ::= IntegerLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("IntegerLiteral").build()).build())
		// Constant ::= Constr 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("Constr").build()).build())
		// Constant ::= NativeIntLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("NativeIntLiteral").build()).build())
		// Constant ::= (t r u e) 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build()).build())
		// Constant ::= ([) (]) 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build())
		// Constant ::= (`) TagName 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("TagName").build()).build())
		// Constant ::= FloatLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("FloatLiteral").build()).build())
		// Constant ::= Int64Literal 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("Int64Literal").build()).build())
		// Constant ::= ({ <) (> }) 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build(), Character.builder(60).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(125).build()).build()).build()).build())
		// Constant ::= Int32Literal 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("Int32Literal").build()).build())
		// Constant ::= ([ |) (| ]) 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).build())
		// Constant ::= CharLiteral 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("CharLiteral").build()).build())
		// Constant ::= StringLiteral1 
		.addRule(Rule.withHead(Nonterminal.builder("Constant").build()).addSymbol(Nonterminal.builder("StringLiteral1").build()).build())
		// PatternMatching ::= (|)? Pattern ((w h e n) Expr)? (- >) Expr InnerPatternMatching*  !>>>  (|) 
		.addRule(Rule.withHead(Nonterminal.builder("PatternMatching").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Pattern").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).addSymbol(Star.builder(Nonterminal.builder("InnerPatternMatching").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()))).build()).build())
		// Constr ::= (ModulePath (.))? ConstrName 
		.addRule(Rule.withHead(Nonterminal.builder("Constr").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ConstrName").build()).build())
		// InfixSymbol5 ::= (($ | & | <-> | |) OperatorChar*)  \  ((|) | (< -) | (&) | (| |) | (& &)) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol5").build()).addSymbol(Sequence.builder(Alt.builder(CharacterRange.builder(36, 36).build(), CharacterRange.builder(38, 38).build(), CharacterRange.builder(60, 62).build(), CharacterRange.builder(124, 124).build()).build(), Star.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(124).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(38).build(), Character.builder(38).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// FieldName ::= LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("FieldName").build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").build()).build())
		// ModConstraint ::= (m o d u l e) ModuleName (: =) ExtendedModulePath 
		.addRule(Rule.withHead(Nonterminal.builder("ModConstraint").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModuleName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ExtendedModulePath").build()).build())
		// ModConstraint ::= (t y p e) TypeParams? TypeConstr (=) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("ModConstraint").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParams").build()).build()).addSymbol(Nonterminal.builder("TypeConstr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// ModConstraint ::= (m o d u l e) ModulePath (=) ExtendedModulePath 
		.addRule(Rule.withHead(Nonterminal.builder("ModConstraint").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ModulePath").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ExtendedModulePath").build()).build())
		// ModConstraint ::= (t y p e) TypeParameters? TypeconstrName (: =) TypeParameters? TypeConstr 
		.addRule(Rule.withHead(Nonterminal.builder("ModConstraint").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Nonterminal.builder("TypeconstrName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(61).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Nonterminal.builder("TypeConstr").build()).build())
		// InfixSymbol3Exclude ::= (- >) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol3Exclude").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).build())
		// ClassBinding ::= (v i r t u a l)? (([) TypeParameters (]))? ClassName Parameter* ((:) ClassType)? (=) ClassExpr 
		.addRule(Rule.withHead(Nonterminal.builder("ClassBinding").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(105).build(), Character.builder(114).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Nonterminal.builder("TypeParameters").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ClassName").build()).addSymbol(Star.builder(Nonterminal.builder("Parameter").build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ClassType").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ClassExpr").build()).build())
		// ExternalDeclaration ::= StringLiteral1+ 
		.addRule(Rule.withHead(Nonterminal.builder("ExternalDeclaration").build()).addSymbol(Plus.builder(Nonterminal.builder("StringLiteral1").build()).build()).build())
		// CompilationUnit ::= ModuleItems? 
		.addRule(Rule.withHead(Nonterminal.builder("CompilationUnit").build()).addSymbol(Opt.builder(Nonterminal.builder("ModuleItems").build()).build()).build())
		// TypeEquation ::= (=) Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("TypeEquation").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// Variance ::= (-) 
		.addRule(Rule.withHead(Nonterminal.builder("Variance").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).build())
		// Variance ::= (+) 
		.addRule(Rule.withHead(Nonterminal.builder("Variance").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).build()).build())
		// TypeConstr ::= (ExtendedModulePath (.))? TypeconstrName 
		.addRule(Rule.withHead(Nonterminal.builder("TypeConstr").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ExtendedModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("TypeconstrName").build()).build())
		// InfixSymbol4 ::= (@ | ^) OperatorChar*  !>>  (! | $-& | *-+ | --/ | : | <-@ | ^ | | | ~) 
		.addRule(Rule.withHead(Nonterminal.builder("InfixSymbol4").build()).addSymbol(Alt.builder(CharacterRange.builder(64, 64).build(), CharacterRange.builder(94, 94).build()).build()).addSymbol(Star.builder(Nonterminal.builder("OperatorChar").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(36, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		// NativeIntLiteral ::= SpecialInt n 
		.addRule(Rule.withHead(Nonterminal.builder("NativeIntLiteral").build()).addSymbol(Nonterminal.builder("SpecialInt").build()).addSymbol(Character.builder(110).build()).setLayoutStrategy(NO_LAYOUT).build())
		// MultipleMatching ::= Parameter+ ((w h e n) Expr)? (- >) Expr 
		.addRule(Rule.withHead(Nonterminal.builder("MultipleMatching").build()).addSymbol(Plus.builder(Nonterminal.builder("Parameter").build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Expr").build()).build())
		// Typexpr_ ::= Typexpr 
		.addRule(Rule.withHead(Nonterminal.builder("Typexpr_").build()).addSymbol(Nonterminal.builder("Typexpr").build()).build())
		// OptLabel ::= (?) LowercaseIdentifier 
		.addRule(Rule.withHead(Nonterminal.builder("OptLabel").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).addSymbol(Nonterminal.builder("LowercaseIdentifier").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).build())
		.build();

	public static List<PrecedencePattern> precedencePatterns() {
		   List<PrecedencePattern> list = new ArrayList<>();
		   list.addAll(precedencePatterns1());
		   list.addAll(precedencePatterns2());
		   list.addAll(precedencePatterns3());
		   return list;
		}
		private static List<PrecedencePattern> precedencePatterns1() {
		  return Arrays.asList(
		  // (Expr, (i f) Expr (t h e n) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build()), 3, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr Arg+, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr Arg+, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr Arg+, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr Arg+, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, . Expr Arg+, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr Arg+, (- .) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (-) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr Arg+, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol3 . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol4 . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol7 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (. [) Expr (]) (< -) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (. [) Expr (]) (< -) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Typexpr, . Typexpr (*) Typexpr_+, Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, . Typexpr (*) Typexpr_+, Typexpr (*) Typexpr_+)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build())), 
		  // (Typexpr, . Typexpr (*) Typexpr_+, (p r i v a t e) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, . Typexpr (*) Typexpr_+, (?)? LabelName (:) Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 0, Arrays.asList(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol5 . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol2 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol3 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, Constr . Pattern, Pattern (,) Pattern_+)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Constr").build(), Nonterminal.builder("Pattern").build()), 1, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
		  // (Pattern, Constr . Pattern, Pattern (a s) ValueName)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Constr").build(), Nonterminal.builder("Pattern").build()), 1, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build())), 
		  // (Pattern, Constr . Pattern, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Constr").build(), Nonterminal.builder("Pattern").build()), 1, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Pattern, Constr . Pattern, Pattern (: :) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Constr").build(), Nonterminal.builder("Pattern").build()), 1, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, (- .) . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, (- .) . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (- .) . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr (: :) . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (: :) . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, . Pattern (|) Pattern, (l a z y) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, . Expr (: :) Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (: :) Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (: :) Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (: :) Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (: :) Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (: :) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (: :) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (: :) Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, Pattern (|) . Pattern, Pattern (a s) ValueName)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build())), 
		  // (Pattern, Pattern (|) . Pattern, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (. () Expr ()), (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. () Expr ()), (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. () Expr ()), (- .) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (-) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()), Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Typexpr, Typexpr (*) . Typexpr_+, Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, Typexpr (*) . Typexpr_+, Typexpr (*) Typexpr_+)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build())), 
		  // (Typexpr, Typexpr (*) . Typexpr_+, Typexpr (a s) (') Ident)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build(), Nonterminal.builder("Ident").build())), 
		  // (Typexpr, Typexpr (*) . Typexpr_+, Typexpr (#) ClassPath)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("ClassPath").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol2 . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol5 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (ModuleType, . ModuleType (() ModuleType ()), (f u n c t o r) (() ModuleName (:) ModuleType ()) (- >) ModuleType)
		     new PrecedencePattern(Nonterminal.builder("ModuleType").build(), Arrays.asList(Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("ModuleType").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. () Expr ()) (< -) Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Typexpr, . Typexpr (- >) Typexpr, Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, . Typexpr (- >) Typexpr, (p r i v a t e) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, . Typexpr (- >) Typexpr, (?)? LabelName (:) Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 0, Arrays.asList(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Pattern, . Pattern (,) Pattern_+, Pattern (,) Pattern_+)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
		  // (Pattern, . Pattern (,) Pattern_+, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Pattern, . Pattern (,) Pattern_+, (l a z y) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Typexpr, . Typexpr TypeConstr, Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Nonterminal.builder("TypeConstr").build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, . Typexpr TypeConstr, Typexpr (*) Typexpr_+)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Nonterminal.builder("TypeConstr").build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build())), 
		  // (Typexpr, . Typexpr TypeConstr, (p r i v a t e) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Nonterminal.builder("TypeConstr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Typexpr, . Typexpr TypeConstr, (?)? LabelName (:) Typexpr (- >) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Nonterminal.builder("TypeConstr").build()), 0, Arrays.asList(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Expr, Expr (.) Field (< -) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 4, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (.) Field (< -) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 4, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (. {) Expr (}) (< -) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (. {) Expr (}) (< -) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())) 
		);
		}
		private static List<PrecedencePattern> precedencePatterns2() {
		  return Arrays.asList(
		  // (Expr, . Expr (. [) Expr (]) (< -) Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (i f) Expr (t h e n) Expr_1 (e l s e) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, InstVarName (< -) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, InstVarName (< -) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, Pattern (,) . Pattern_+, Pattern (,) Pattern_+)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
		  // (Pattern, Pattern (,) . Pattern_+, Pattern (a s) ValueName)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build())), 
		  // (Pattern, Pattern (,) . Pattern_+, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]), (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]), (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. [) Expr (]), (- .) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (-) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. [) Expr (]), Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Typexpr, Typexpr (- >) . Typexpr, Typexpr (a s) (') Ident)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 2, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build(), Nonterminal.builder("Ident").build())), 
		  // (Typexpr, Typexpr (- >) . Typexpr, Typexpr (#) ClassPath)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 2, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("ClassPath").build())), 
		  // (Expr, (-) . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, (-) . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (-) . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr ((,) Expr_2)+, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol6 . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol1 Expr, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Typexpr, (?)? LabelName (:) Typexpr (- >) . Typexpr, Typexpr (a s) (') Ident)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 5, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build(), Nonterminal.builder("Ident").build())), 
		  // (Typexpr, (?)? LabelName (:) Typexpr (- >) . Typexpr, Typexpr (#) ClassPath)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 5, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("ClassPath").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol7 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (;) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (;) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (;) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (;) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (;) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (;) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (;) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (;) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol1 . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol6 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . ((,) Expr_2)+, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol4 Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (a s s e r t) . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (. () Expr ()) (< -) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (. () Expr ()) (< -) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 5, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}), (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}), (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}), (- .) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (-) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}), Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, . Pattern (: :) Pattern, Pattern (,) Pattern_+)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
		  // (Pattern, . Pattern (: :) Pattern, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Pattern, . Pattern (: :) Pattern, (l a z y) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Pattern, . Pattern (: :) Pattern, Pattern (: :) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr InfixSymbol8 Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr (! =) . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr (! =) . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (ModuleType, . ModuleType (w i t h) ModConstraint ((a n d) ModConstraint)*, (f u n c t o r) (() ModuleName (:) ModuleType ()) (- >) ModuleType)
		     new PrecedencePattern(Nonterminal.builder("ModuleType").build(), Arrays.asList(Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("ModConstraint").build(), Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ModConstraint").build()).build()).build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("ModuleType").build())), 
		  // (Expr, . Expr (.) Field, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (.) Field, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (.) Field, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (.) Field, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (.) Field, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, . Expr (.) Field, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (.) Field, (- .) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())) 
		);
		}
		private static List<PrecedencePattern> precedencePatterns3() {
		  return Arrays.asList(
		  // (Expr, . Expr (.) Field, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (-) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (. [) Expr (]))
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build())), 
		  // (Expr, PrefixSymbol . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (#) MethodName)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (.) Field)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (. () Expr ()))
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (. {) Expr (}))
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, PrefixSymbol . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("PrefixSymbol").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (. {) Expr (}) (< -) Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (.) Field (< -) Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Typexpr, . Typexpr (a s) (') Ident, (p r i v a t e) Typexpr)
		     new PrecedencePattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build(), Nonterminal.builder("Ident").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
		  // (Expr, Expr . Arg+, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, Expr . Arg+, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, Expr . Arg+, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr . Arg+, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, (l a z y) . Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, (l a z y) . Expr, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, (l a z y) . Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, (`) TagName . Pattern, Pattern (,) Pattern_+)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build(), Nonterminal.builder("TagName").build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
		  // (Pattern, (`) TagName . Pattern, Pattern (a s) ValueName)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build(), Nonterminal.builder("TagName").build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build())), 
		  // (Pattern, (`) TagName . Pattern, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build(), Nonterminal.builder("TagName").build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Pattern, (`) TagName . Pattern, Pattern (: :) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build(), Nonterminal.builder("TagName").build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, . Expr (! =) Expr, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (! =) Expr, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (! =) Expr, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (! =) Expr, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (! =) Expr, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (! =) Expr, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (! =) Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (! =) Expr, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, Expr InfixSymbol8 . Expr, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build()), 2, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Pattern, Pattern (: :) . Pattern, Pattern (,) Pattern_+)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
		  // (Pattern, Pattern (: :) . Pattern, Pattern (a s) ValueName)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build())), 
		  // (Pattern, Pattern (: :) . Pattern, Pattern (|) Pattern)
		     new PrecedencePattern(Nonterminal.builder("Pattern").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Pattern").build()), 2, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
		  // (Expr, . Expr (#) MethodName, Expr ((,) Expr_2)+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
		  // (Expr, . Expr (#) MethodName, Expr (. () Expr ()) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr (: :) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol5 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol2 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol3 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (f u n) MultipleMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
		  // (Expr, . Expr (#) MethodName, (t r y) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (#) MethodName, (i f) Expr (t h e n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol4 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (m a t c h) Expr (w i t h) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (#) MethodName, Expr (. [) Expr (]) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (a s s e r t) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, InstVarName (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (l a z y) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr Arg+)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
		  // (Expr, . Expr (#) MethodName, Expr (.) Field (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr (. {) Expr (}) (< -) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (l e t) (o p e n) ModulePath (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("ModulePath").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr (! =) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (f u n c t i o n) PatternMatching)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
		  // (Expr, . Expr (#) MethodName, (- .) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol8 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr (;) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol7 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (-) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol6 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, (l e t) (r e c)? LetBinding+ (i n) Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
		  // (Expr, . Expr (#) MethodName, Expr InfixSymbol1 Expr)
		     new PrecedencePattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Nonterminal.builder("MethodName").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())) 
		);
		}

	public static List<ExceptPattern> exceptPatterns() {
		return Arrays.asList(
				// (ClassExpr, . ClassExpr Arg+, ClassExpr Arg+)
				new ExceptPattern(Nonterminal.builder("ClassExpr").build(), Arrays.asList(Nonterminal.builder("ClassExpr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("ClassExpr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
				// (Expr, . Expr Arg+, Expr ((,) Expr_2)+)
				new ExceptPattern(Nonterminal.builder("Expr").build(), Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
				// (Arg, OptLabelColon . Expr, Expr ((,) Expr_2)+)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
				// (Arg, OptLabelColon . Expr, Expr (. () Expr ()) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr (: :) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol5 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol2 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol3 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (f u n) MultipleMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
				// (Arg, OptLabelColon . Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (t r y) Expr (w i t h) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, OptLabelColon . Expr, (i f) Expr (t h e n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol4 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (m a t c h) Expr (w i t h) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, OptLabelColon . Expr, Expr (. [) Expr (]) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (a s s e r t) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, InstVarName (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (l a z y) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr Arg+)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
				// (Arg, OptLabelColon . Expr, Expr (.) Field (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr (. {) Expr (}) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr (! =) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (f u n c t i o n) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, OptLabelColon . Expr, (- .) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol8 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr (;) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol7 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (-) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol6 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, OptLabelColon . Expr, Expr InfixSymbol1 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("OptLabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
				// (ModuleType, . ModuleType (() ModuleType ()), ModuleType (w i t h) ModConstraint ((a n d) ModConstraint)*)
				new ExceptPattern(Nonterminal.builder("ModuleType").build(), Arrays.asList(Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()), 0, Arrays.asList(Nonterminal.builder("ModuleType").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("ModConstraint").build(), Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build(), Nonterminal.builder("ModConstraint").build()).build()).build())), 
				// (Expr_2, . Expr, Expr ((,) Expr_2)+)
				new ExceptPattern(Nonterminal.builder("Expr_2").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
				// (Expr_2, . Expr, Expr (;) Expr)
				new ExceptPattern(Nonterminal.builder("Expr_2").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Expr_1, . Expr, Expr (;) Expr)
				new ExceptPattern(Nonterminal.builder("Expr_1").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Pattern_, . Pattern, Pattern (,) Pattern_+)
				new ExceptPattern(Nonterminal.builder("Pattern_").build(), Arrays.asList(Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Plus.builder(Nonterminal.builder("Pattern_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build())), 
				// (Pattern_, . Pattern, Pattern (a s) ValueName)
				new ExceptPattern(Nonterminal.builder("Pattern_").build(), Arrays.asList(Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("ValueName").build())), 
				// (Pattern_, . Pattern, Pattern (|) Pattern)
				new ExceptPattern(Nonterminal.builder("Pattern_").build(), Arrays.asList(Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
				// (Pattern_, . Pattern, (l a z y) Pattern)
				new ExceptPattern(Nonterminal.builder("Pattern_").build(), Arrays.asList(Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Pattern").build())), 
				// (Typexpr, (?)? LabelName (:) Typexpr (- >) . Typexpr, Typexpr (- >) Typexpr)
				new ExceptPattern(Nonterminal.builder("Typexpr").build(), Arrays.asList(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).build(), Nonterminal.builder("LabelName").build(), Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build()), 5, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
				// (Arg, LabelColon . Expr, Expr ((,) Expr_2)+)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
				// (Arg, LabelColon . Expr, Expr (. () Expr ()) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr (: :) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol5 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol2 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol3 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (f u n) MultipleMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
				// (Arg, LabelColon . Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (t r y) Expr (w i t h) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, LabelColon . Expr, (i f) Expr (t h e n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol4 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (m a t c h) Expr (w i t h) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, LabelColon . Expr, Expr (. [) Expr (]) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (a s s e r t) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, InstVarName (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (l a z y) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr Arg+)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
				// (Arg, LabelColon . Expr, Expr (.) Field (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr (. {) Expr (}) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr (! =) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (f u n c t i o n) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, LabelColon . Expr, (- .) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol8 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr (;) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol7 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (-) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol6 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, LabelColon . Expr, Expr InfixSymbol1 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("LabelColon").build(), Nonterminal.builder("Expr").build()), 1, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
				// (LetBinding, . Pattern (=) Expr, ValueName)
				new ExceptPattern(Nonterminal.builder("LetBinding").build(), Arrays.asList(Nonterminal.builder("Pattern").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("ValueName").build())), 
				// (Arg, . Expr, Expr ((,) Expr_2)+)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Expr_2").build()).build()).build())), 
				// (Arg, . Expr, Expr (. () Expr ()) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(40).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr (: :) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol5 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol5").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol2 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol2").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol3 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol3").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (f u n) MultipleMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("MultipleMatching").build())), 
				// (Arg, . Expr, (i f) Expr (t h e n) Expr_1 (e l s e) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr_1").build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (t r y) Expr (w i t h) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, . Expr, (i f) Expr (t h e n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW_IGNORE_LAYOUT, Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()))).build())), 
				// (Arg, . Expr, Expr InfixSymbol4 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol4").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (m a t c h) Expr (w i t h) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(104).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, . Expr, Expr (. [) Expr (]) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(91).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (a s s e r t) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (l e t) (m o d u l e) ModuleName (=) ModuleExpr (i n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("ModuleName").build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("ModuleExpr").build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, InstVarName (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("InstVarName").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (l a z y) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(97).build(), Character.builder(122).build(), Character.builder(121).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr Arg+)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Plus.builder(Nonterminal.builder("Arg").build()).build())), 
				// (Arg, . Expr, Expr (.) Field (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Field").build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr (. {) Expr (}) (< -) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(123).build()).build()).build(), Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr (! =) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (f u n c t i o n) PatternMatching)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(117).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(111).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("PatternMatching").build())), 
				// (Arg, . Expr, (- .) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol8 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol8").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr (;) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol7 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol7").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (-) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol6 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol6").build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, (l e t) (r e c)? LetBinding+ (i n) Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).build(), Plus.builder(Nonterminal.builder("LetBinding").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(110).build(), Character.builder(100).build()).build()).build())).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build(), Nonterminal.builder("Expr").build())), 
				// (Arg, . Expr, Expr InfixSymbol1 Expr)
				new ExceptPattern(Nonterminal.builder("Arg").build(), Arrays.asList(Nonterminal.builder("Expr").build()), 0, Arrays.asList(Nonterminal.builder("Expr").build(), Nonterminal.builder("InfixSymbol1").build(), Nonterminal.builder("Expr").build())), 
				// (Parameter, . Pattern, Constr Pattern)
				new ExceptPattern(Nonterminal.builder("Parameter").build(), Arrays.asList(Nonterminal.builder("Pattern").build()), 0, Arrays.asList(Nonterminal.builder("Constr").build(), Nonterminal.builder("Pattern").build())), 
				// (Typexpr_, . Typexpr, Typexpr (- >) Typexpr)
				new ExceptPattern(Nonterminal.builder("Typexpr_").build(), Arrays.asList(Nonterminal.builder("Typexpr").build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Typexpr").build())), 
				// (Typexpr_, . Typexpr, Typexpr (*) Typexpr_+)
				new ExceptPattern(Nonterminal.builder("Typexpr_").build(), Arrays.asList(Nonterminal.builder("Typexpr").build()), 0, Arrays.asList(Nonterminal.builder("Typexpr").build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Plus.builder(Nonterminal.builder("Typexpr_").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build())).build())) 
				);
	}
}
