package org.jgll.parser.datadependent.java;
import java.io.IOException;
import java.util.Arrays;

import org.jgll.datadependent.ast.AST;
import org.jgll.grammar.Grammar;
import org.jgll.grammar.GrammarGraph;
import org.jgll.grammar.condition.ConditionType;
import org.jgll.grammar.condition.RegularExpressionCondition;
import org.jgll.grammar.symbol.*;
import org.jgll.grammar.symbol.Character;

import static org.jgll.grammar.symbol.LayoutStrategy.*;

import org.jgll.grammar.transformation.DesugarPrecedenceAndAssociativity;
import org.jgll.grammar.transformation.EBNFToBNF;
import org.jgll.grammar.transformation.LayoutWeaver;
import org.jgll.parser.GLLParser;
import org.jgll.parser.ParseResult;
import org.jgll.parser.ParserFactory;
import org.jgll.regex.*;
import org.jgll.util.Configuration;
import org.jgll.util.Input;
import org.jgll.util.Visualization;
import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

@SuppressWarnings("unused")
public class Java {

    @Test
    public void test() {
         Grammar grammar =

Grammar.builder()
.setLayout(Nonterminal.builder("Layout").build())
// LocalVariableDeclaration ::= VariableModifier* Type VariableDeclarator+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LocalVariableDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("VariableModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Plus.builder(Nonterminal.builder("VariableDeclarator").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InputCharacter ::= UnicodeInputCharacter \  ((\\u000A | \\u000D))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InputCharacter").build()).addSymbol(Nonterminal.builder("UnicodeInputCharacter").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(10, 10).build(), CharacterRange.builder(13, 13).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InputCharacter ::= \u0000  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InputCharacter").build()).addSymbol(Character.builder(0).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeName ::= QualifiedIdentifier  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeName").build()).addSymbol(Nonterminal.builder("QualifiedIdentifier").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ReferenceType ::= TypeDeclSpecifier TypeArguments?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReferenceType").build()).addSymbol(Nonterminal.builder("TypeDeclSpecifier").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeArguments").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ReferenceType ::= ArrayType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReferenceType").build()).addSymbol(Nonterminal.builder("ArrayType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ElementValueArrayInitializer ::= ({) ElementValues? (,)? (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ElementValueArrayInitializer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ElementValues").build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SwitchLabel ::= (d e f a u l t) (:)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SwitchLabel").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SwitchLabel ::= (c a s e) ConstantExpression (:)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SwitchLabel").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("ConstantExpression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstructorDeclarator ::= TypeParameters? Identifier (() FormalParameterList? ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorDeclarator").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("FormalParameterList").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Primary ::= Identifier  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Primary").build()).addSymbol(Nonterminal.builder("Identifier").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Primary ::= (t h i s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Primary").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(115).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Primary ::= (s u p e r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Primary").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(117).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Primary ::= Literal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Primary").build()).addSymbol(Nonterminal.builder("Literal").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodName ::= QualifiedIdentifier  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodName").build()).addSymbol(Nonterminal.builder("QualifiedIdentifier").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// StringLiteral ::= " StringCharacter* "  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("StringLiteral").build()).addSymbol(Character.builder(34).build()).addSymbol(Star.builder(Nonterminal.builder("StringCharacter").build()).build()).addSymbol(Character.builder(34).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EnumBodyDeclarations ::= (;) ClassBodyDeclaration*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EnumBodyDeclarations").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("ClassBodyDeclaration").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CommentTail ::= (*) CommentTailStar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CommentTail").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).addSymbol(Nonterminal.builder("CommentTailStar").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// CommentTail ::= NotStar CommentTail  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CommentTail").build()).addSymbol(Nonterminal.builder("NotStar").build()).addSymbol(Nonterminal.builder("CommentTail").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// ExplicitGenericInvocationSuffix ::= (s u p e r) SuperSuffix  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ExplicitGenericInvocationSuffix").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(117).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).addSymbol(Nonterminal.builder("SuperSuffix").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ExplicitGenericInvocationSuffix ::= Identifier Arguments  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ExplicitGenericInvocationSuffix").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Nonterminal.builder("Arguments").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// LineTerminator ::= (\\u000A | \\u000D)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LineTerminator").build()).addSymbol(Alt.builder(CharacterRange.builder(10, 10).build(), CharacterRange.builder(13, 13).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexDigit ::= (0-9 | A-F | a-f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (p r o t e c t e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (s t r i c t f p)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(102).build(), Character.builder(112).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (f i n a l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (p r i v a t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (a b s t r a c t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(98).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (s t a t i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceBody ::= ({) InterfaceMemberDeclaration* (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("InterfaceMemberDeclaration").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassBody ::= ({) ClassBodyDeclaration* (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("ClassBodyDeclaration").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodDeclarator ::= MethodDeclarator ([) (])  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodDeclarator").build()).addSymbol(Nonterminal.builder("MethodDeclarator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// MethodDeclarator ::= Identifier (() FormalParameterList? ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodDeclarator").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("FormalParameterList").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// TypeVariable ::= Identifier  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeVariable").build()).addSymbol(Nonterminal.builder("Identifier").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (d o u b l e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (i n t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (c a t c h)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (t h r o w)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(119).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (s t r i c t f p)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(102).build(), Character.builder(112).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (c o n t i n u e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (f o r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (b r e a k)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(97).build(), Character.builder(107).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (n a t i v e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (p a c k a g e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(107).build(), Character.builder(97).build(), Character.builder(103).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (s h o r t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (i m p o r t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (p r o t e c t e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (i m p l e m e n t s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(109).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (c a s e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (w h i l e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (s w i t c h)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (a s s e r t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (c h a r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(104).build(), Character.builder(97).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (s u p e r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(117).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (c o n s t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (t h i s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (t r a n s i e n t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(105).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (d e f a u l t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (t h r o w s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (f l o a t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(108).build(), Character.builder(111).build(), Character.builder(97).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (l o n g)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (s t a t i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (v o l a t i l e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (v o i d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(105).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (f i n a l l y)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (p r i v a t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (t r y)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (n e w)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (b y t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(121).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (e n u m)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(117).build(), Character.builder(109).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (s y n c h r o n i z e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(121).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (i f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (i n t e r f a c e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (i n s t a n c e o f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(111).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (r e t u r n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(114).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (e l s e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (f i n a l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (c l a s s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (g o t o)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(103).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (e x t e n d s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (d o)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (a b s t r a c t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(98).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Keyword ::= (b o o l e a n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Keyword").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(111).build(), Character.builder(111).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(97).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CharacterLiteral ::= ' EscapeSequence '  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharacterLiteral").build()).addSymbol(Character.builder(39).build()).addSymbol(Nonterminal.builder("EscapeSequence").build()).addSymbol(Character.builder(39).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CharacterLiteral ::= ' SingleCharacter '  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharacterLiteral").build()).addSymbol(Character.builder(39).build()).addSymbol(Nonterminal.builder("SingleCharacter").build()).addSymbol(Character.builder(39).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodDeclaration ::= MethodHeader MethodBody  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodDeclaration").build()).addSymbol(Nonterminal.builder("MethodHeader").build()).addSymbol(Nonterminal.builder("MethodBody").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// JavaLetterOrDigit ::= ($ | 0-9 | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("JavaLetterOrDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(36, 36).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// UnicodeInputCharacter ::= RawInputCharacter  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("UnicodeInputCharacter").build()).addSymbol(Nonterminal.builder("RawInputCharacter").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// UnicodeInputCharacter ::= UnicodeEscape  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("UnicodeInputCharacter").build()).addSymbol(Nonterminal.builder("UnicodeEscape").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalIntegerLiteral ::= OctalNumeral IntegerTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalIntegerLiteral").build()).addSymbol(Nonterminal.builder("OctalNumeral").build()).addSymbol(Opt.builder(Nonterminal.builder("IntegerTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryDigitOrUnderscore ::= BinaryDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryDigitOrUnderscore").build()).addSymbol(Nonterminal.builder("BinaryDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryDigitOrUnderscore ::= _  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryDigitOrUnderscore").build()).addSymbol(Character.builder(95).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeParameters ::= (<) TypeParameter+ (>)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeParameters").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("TypeParameter").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeArgumentsOrDiamond ::= (<) (>)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeArgumentsOrDiamond").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeArgumentsOrDiamond ::= TypeArguments  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeArgumentsOrDiamond").build()).addSymbol(Nonterminal.builder("TypeArguments").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Backslash ::= \  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(92).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Backslash ::= \ u+ (0 0 5) (C | c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(92).build()).addSymbol(Plus.builder(Character.builder(117).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(48).build(), Character.builder(53).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(67, 67).build(), CharacterRange.builder(99, 99).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ArgumentList ::= Expression+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ArgumentList").build()).addSymbol(Plus.builder(Nonterminal.builder("Expression").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalNumeral ::= 0  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalNumeral").build()).addSymbol(Character.builder(48).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalNumeral ::= NonZeroDigit _+ Digits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalNumeral").build()).addSymbol(Nonterminal.builder("NonZeroDigit").build()).addSymbol(Plus.builder(Character.builder(95).build()).build()).addSymbol(Nonterminal.builder("Digits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalNumeral ::= NonZeroDigit Digits?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalNumeral").build()).addSymbol(Nonterminal.builder("NonZeroDigit").build()).addSymbol(Opt.builder(Nonterminal.builder("Digits").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EnumDeclaration ::= ClassModifier* (e n u m) Identifier ((i m p l e m e n t s) TypeList)? EnumBody  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EnumDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("ClassModifier").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(117).build(), Character.builder(109).build()).build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(109).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("TypeList").build()).build()).build()).addSymbol(Nonterminal.builder("EnumBody").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (- =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (/ =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(47).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (* =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (+ =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (& =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (> > =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (^ =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(94).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (=)  !>>  (=)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (| =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (> > > =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(62).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (< < =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(60).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AssignmentOperator ::= (% =)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(37).build(), Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryNumeral ::= 0 b BinaryDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryNumeral").build()).addSymbol(Character.builder(48).build()).addSymbol(Character.builder(98).build()).addSymbol(Nonterminal.builder("BinaryDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryNumeral ::= 0 B BinaryDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryNumeral").build()).addSymbol(Character.builder(48).build()).addSymbol(Character.builder(66).build()).addSymbol(Nonterminal.builder("BinaryDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EnumConstant ::= Annotation* Identifier Arguments? ClassBody?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EnumConstant").build()).addSymbol(Star.builder(Nonterminal.builder("Annotation").build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Opt.builder(Nonterminal.builder("Arguments").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ClassBody").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PackageDeclaration ::= Annotation* (p a c k a g e) QualifiedIdentifier (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PackageDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("Annotation").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(107).build(), Character.builder(97).build(), Character.builder(103).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("QualifiedIdentifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ZeroToThree ::= (0-3)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ZeroToThree").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 51).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalDigit ::= (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 55).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FormalParameter ::= VariableModifier* Type VariableDeclaratorId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FormalParameter").build()).addSymbol(Star.builder(Nonterminal.builder("VariableModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("VariableDeclaratorId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// $default$ ::=  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("$default$").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SignedInteger ::= Sign? Digits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SignedInteger").build()).addSymbol(Opt.builder(Nonterminal.builder("Sign").build()).build()).addSymbol(Nonterminal.builder("Digits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// StringCharacter ::= EscapeSequence  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("StringCharacter").build()).addSymbol(Nonterminal.builder("EscapeSequence").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// StringCharacter ::= InputCharacter \  ((" | \))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("StringCharacter").build()).addSymbol(Nonterminal.builder("InputCharacter").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(34, 34).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexSignificand ::= 0 x HexDigits? . HexDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexSignificand").build()).addSymbol(Character.builder(48).build()).addSymbol(Character.builder(120).build()).addSymbol(Opt.builder(Nonterminal.builder("HexDigits").build()).build()).addSymbol(Character.builder(46).build()).addSymbol(Nonterminal.builder("HexDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexSignificand ::= HexNumeral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexSignificand").build()).addSymbol(Nonterminal.builder("HexNumeral").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexSignificand ::= 0 X HexDigits? . HexDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexSignificand").build()).addSymbol(Character.builder(48).build()).addSymbol(Character.builder(88).build()).addSymbol(Opt.builder(Nonterminal.builder("HexDigits").build()).build()).addSymbol(Character.builder(46).build()).addSymbol(Nonterminal.builder("HexDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexSignificand ::= HexNumeral .  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexSignificand").build()).addSymbol(Nonterminal.builder("HexNumeral").build()).addSymbol(Character.builder(46).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassDeclaration ::= NormalClassDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassDeclaration").build()).addSymbol(Nonterminal.builder("NormalClassDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassDeclaration ::= EnumDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassDeclaration").build()).addSymbol(Nonterminal.builder("EnumDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ResourceSpecification ::= (() Resources (;)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ResourceSpecification").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Resources").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FloatTypeSuffix ::= (D | F | d | f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FloatTypeSuffix").build()).addSymbol(Alt.builder(CharacterRange.builder(68, 68).build(), CharacterRange.builder(70, 70).build(), CharacterRange.builder(100, 100).build(), CharacterRange.builder(102, 102).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// StaticInitializer ::= (s t a t i c) Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("StaticInitializer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryIntegerLiteral ::= BinaryNumeral IntegerTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryIntegerLiteral").build()).addSymbol(Nonterminal.builder("BinaryNumeral").build()).addSymbol(Opt.builder(Nonterminal.builder("IntegerTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexDigits ::= HexDigit HexDigitOrUnderscore* HexDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexDigits").build()).addSymbol(Nonterminal.builder("HexDigit").build()).addSymbol(Star.builder(Nonterminal.builder("HexDigitOrUnderscore").build()).build()).addSymbol(Nonterminal.builder("HexDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexDigits ::= HexDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexDigits").build()).addSymbol(Nonterminal.builder("HexDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= \ u+ (0 0 5) (C | c) \ u+ (0 0 5) (C | c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Character.builder(92).build()).addSymbol(Plus.builder(Character.builder(117).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(48).build(), Character.builder(53).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(67, 67).build(), CharacterRange.builder(99, 99).build()).build()).addSymbol(Character.builder(92).build()).addSymbol(Plus.builder(Character.builder(117).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(48).build(), Character.builder(53).build()).build()).build()).addSymbol(Alt.builder(CharacterRange.builder(67, 67).build(), CharacterRange.builder(99, 99).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= OctalEscape  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("OctalEscape").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash n  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(110).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash t  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(116).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash f  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(102).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash '  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(39).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash "  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(34).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash r  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(114).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EscapeSequence ::= Backslash b  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EscapeSequence").build()).addSymbol(Nonterminal.builder("Backslash").build()).addSymbol(Character.builder(98).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Sign ::= (+ | -)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Sign").build()).addSymbol(Alt.builder(CharacterRange.builder(43, 43).build(), CharacterRange.builder(45, 45).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InstanceInitializer ::= Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InstanceInitializer").build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ImportDeclaration ::= (i m p o r t) (s t a t i c)? Identifier+ ((.) (*))? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ImportDeclaration").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("Identifier").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build())).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SuperSuffix ::= (.) Identifier Arguments?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SuperSuffix").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Opt.builder(Nonterminal.builder("Arguments").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SuperSuffix ::= Arguments  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SuperSuffix").build()).addSymbol(Nonterminal.builder("Arguments").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ArrayCreationExpression ::= (PrimitiveType | ReferenceType) DimExpr+ (([) (]))*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ArrayCreationExpression").build()).addSymbol(Alt.builder(Nonterminal.builder("PrimitiveType").build(), Nonterminal.builder("ReferenceType").build()).build()).addSymbol(Plus.builder(Nonterminal.builder("DimExpr").build()).build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ArrayCreationExpression ::= (ReferenceTypeNonArrayType | PrimitiveType) (([) (]))+ ArrayInitializer  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ArrayCreationExpression").build()).addSymbol(Alt.builder(Nonterminal.builder("ReferenceTypeNonArrayType").build(), Nonterminal.builder("PrimitiveType").build()).build()).addSymbol(Plus.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ArrayInitializer").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ElementValue ::= ElementValueArrayInitializer  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ElementValue").build()).addSymbol(Nonterminal.builder("ElementValueArrayInitializer").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ElementValue ::= Expression  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ElementValue").build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ElementValue ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ElementValue").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Resource ::= VariableModifier* ReferenceType VariableDeclaratorId (=) Expression  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Resource").build()).addSymbol(Star.builder(Nonterminal.builder("VariableModifier").build()).build()).addSymbol(Nonterminal.builder("ReferenceType").build()).addSymbol(Nonterminal.builder("VariableDeclaratorId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableDeclaratorId ::= Identifier (([) (]))*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableDeclaratorId").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CatchClause ::= (c a t c h) (() VariableModifier* CatchType Identifier ()) Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CatchClause").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("VariableModifier").build()).build()).addSymbol(Nonterminal.builder("CatchType").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodBody ::= Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodBody").build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodBody ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// QualifiedIdentifierList ::= QualifiedIdentifier+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QualifiedIdentifierList").build()).addSymbol(Plus.builder(Nonterminal.builder("QualifiedIdentifier").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeArgument ::= (?) (((e x t e n d s) | (s u p e r)) Type)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeArgument").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(117).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).build(), Nonterminal.builder("Type").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeArgument ::= Type  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeArgument").build()).addSymbol(Nonterminal.builder("Type").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableDeclarator ::= VariableDeclaratorId ((=) VariableInitializer)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableDeclarator").build()).addSymbol(Nonterminal.builder("VariableDeclaratorId").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("VariableInitializer").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Statement ::= (s w i t c h) (() Expression ()) ({) SwitchBlockStatementGroup* SwitchLabel* (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("SwitchBlockStatementGroup").build()).build()).addSymbol(Star.builder(Nonterminal.builder("SwitchLabel").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (t r y) Block (CatchClause+ | (CatchClause* Finally))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build()).addSymbol(Nonterminal.builder("Block").build()).addSymbol(Alt.builder(Plus.builder(Nonterminal.builder("CatchClause").build()).build(), Sequence.builder(Star.builder(Nonterminal.builder("CatchClause").build()).build(), Nonterminal.builder("Finally").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (t h r o w) Expression (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(119).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (i f) (() Expression ()) Statement (e l s e) Statement  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (r e t u r n) Expression? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(114).build(), Character.builder(110).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("Expression").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (t r y) ResourceSpecification Block CatchClause* Finally?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build()).addSymbol(Nonterminal.builder("ResourceSpecification").build()).addSymbol(Nonterminal.builder("Block").build()).addSymbol(Star.builder(Nonterminal.builder("CatchClause").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("Finally").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (i f) (() Expression ()) Statement  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= Identifier (:) Statement  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (b r e a k) Identifier? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(97).build(), Character.builder(107).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("Identifier").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (s y n c h r o n i z e d) (() Expression ()) Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(121).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (w h i l e) (() Expression ()) Statement  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (d o) Statement (w h i l e) (() Expression ()) (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= StatementExpression (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Nonterminal.builder("StatementExpression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (a s s e r t) Expression ((:) Expression)? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Nonterminal.builder("Expression").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (f o r) (() ForInit? (;) Expression? (;) ForUpdate? ()) Statement  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ForInit").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("Expression").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ForUpdate").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (f o r) (() FormalParameter (:) Expression ()) Statement  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("FormalParameter").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= (c o n t i n u e) Identifier? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("Identifier").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// Statement ::= Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Statement").build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// QualifiedIdentifier ::= Identifier+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QualifiedIdentifier").build()).addSymbol(Plus.builder(Nonterminal.builder("Identifier").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Digit ::= 0  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Digit").build()).addSymbol(Character.builder(48).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Digit ::= NonZeroDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Digit").build()).addSymbol(Nonterminal.builder("NonZeroDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// UnicodeEscape ::= \ u+ HexDigit HexDigit HexDigit HexDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("UnicodeEscape").build()).addSymbol(Character.builder(92).build()).addSymbol(Plus.builder(Character.builder(117).build()).build()).addSymbol(Nonterminal.builder("HexDigit").build()).addSymbol(Nonterminal.builder("HexDigit").build()).addSymbol(Nonterminal.builder("HexDigit").build()).addSymbol(Nonterminal.builder("HexDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryExponentIndicator ::= (P | p)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryExponentIndicator").build()).addSymbol(Alt.builder(CharacterRange.builder(80, 80).build(), CharacterRange.builder(112, 112).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeDeclaration ::= InterfaceModifier* (@) (i n t e r f a c e) Identifier AnnotationTypeBody  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("InterfaceModifier").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Nonterminal.builder("AnnotationTypeBody").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeArguments ::= (<) TypeArgument+ (>)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeArguments").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("TypeArgument").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Type ::= ReferenceType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("ReferenceType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Type ::= PrimitiveType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("PrimitiveType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CatchType ::= QualifiedIdentifier+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CatchType").build()).addSymbol(Plus.builder(Nonterminal.builder("QualifiedIdentifier").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Annotation ::= (@) TypeName ((() ElementValue ()))?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Annotation").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).addSymbol(Nonterminal.builder("TypeName").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("ElementValue").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Annotation ::= (@) TypeName (() ElementValuePair* ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Annotation").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).addSymbol(Nonterminal.builder("TypeName").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("ElementValuePair").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexNumeral ::= 0 X HexDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexNumeral").build()).addSymbol(Character.builder(48).build()).addSymbol(Character.builder(88).build()).addSymbol(Nonterminal.builder("HexDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexNumeral ::= 0 x HexDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexNumeral").build()).addSymbol(Character.builder(48).build()).addSymbol(Character.builder(120).build()).addSymbol(Nonterminal.builder("HexDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassBodyDeclaration ::= InstanceInitializer  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassBodyDeclaration").build()).addSymbol(Nonterminal.builder("InstanceInitializer").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassBodyDeclaration ::= StaticInitializer  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassBodyDeclaration").build()).addSymbol(Nonterminal.builder("StaticInitializer").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassBodyDeclaration ::= ClassMemberDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassBodyDeclaration").build()).addSymbol(Nonterminal.builder("ClassMemberDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassBodyDeclaration ::= ConstructorDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassBodyDeclaration").build()).addSymbol(Nonterminal.builder("ConstructorDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ForUpdate ::= StatementExpression+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ForUpdate").build()).addSymbol(Plus.builder(Nonterminal.builder("StatementExpression").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NotStarNotSlash ::= InputCharacter \  ((* | /))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NotStarNotSlash").build()).addSymbol(Nonterminal.builder("InputCharacter").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(42, 42).build(), CharacterRange.builder(47, 47).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NotStarNotSlash ::= LineTerminator  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NotStarNotSlash").build()).addSymbol(Nonterminal.builder("LineTerminator").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Layout ::= (WhiteSpace | Comment)*  !>>  (/ *)  !>>  (/ /)  !>>  (\u0009-\\u000A | \u000C-\\u000D | \u0020)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Layout").build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("WhiteSpace").build(), Nonterminal.builder("Comment").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(47).build(), Character.builder(42).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(47).build(), Character.builder(47).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(9, 10).build(), CharacterRange.builder(12, 13).build(), CharacterRange.builder(32, 32).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Throws ::= (t h r o w s) ExceptionType+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Throws").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(115).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("ExceptionType").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// StatementExpression ::= Expression  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("StatementExpression").build()).addSymbol(Nonterminal.builder("Expression").addExcept("gt") .addExcept("lt").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Comment ::= TraditionalComment  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Comment").build()).addSymbol(Nonterminal.builder("TraditionalComment").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Comment ::= EndOfLineComment  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Comment").build()).addSymbol(Nonterminal.builder("EndOfLineComment").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ExponentPart ::= ExponentIndicator SignedInteger  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ExponentPart").build()).addSymbol(Nonterminal.builder("ExponentIndicator").build()).addSymbol(Nonterminal.builder("SignedInteger").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ElementValues ::= ElementValue+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ElementValues").build()).addSymbol(Plus.builder(Nonterminal.builder("ElementValue").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IntegerLiteral ::= BinaryIntegerLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Nonterminal.builder("BinaryIntegerLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IntegerLiteral ::= DecimalIntegerLiteral !>>  .  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Nonterminal.builder("DecimalIntegerLiteral").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(46).build()))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IntegerLiteral ::= HexIntegerLiteral !>>  .  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Nonterminal.builder("HexIntegerLiteral").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(46).build()))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IntegerLiteral ::= OctalIntegerLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IntegerLiteral").build()).addSymbol(Nonterminal.builder("OctalIntegerLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstantModifier ::= (f i n a l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstantModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstantModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstantModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstantModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstantModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstantModifier ::= (s t a t i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstantModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// WhiteSpace ::= (\u0009-\\u000A | \u000C-\\u000D | \u001A | \u0020)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("WhiteSpace").build()).addSymbol(Alt.builder(CharacterRange.builder(9, 10).build(), CharacterRange.builder(12, 13).build(), CharacterRange.builder(26, 26).build(), CharacterRange.builder(32, 32).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EnumBody ::= ({) EnumConstant* (,)? EnumBodyDeclarations? (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EnumBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("EnumConstant").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("EnumBodyDeclarations").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Result ::= (v o i d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Result").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(105).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Result ::= Type  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Result").build()).addSymbol(Nonterminal.builder("Type").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NormalClassDeclaration ::= ClassModifier* (c l a s s) Identifier TypeParameters? ((e x t e n d s) Type)? ((i m p l e m e n t s) TypeList)? ClassBody  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NormalClassDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("ClassModifier").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("Type").build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(109).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("TypeList").build()).build()).build()).addSymbol(Nonterminal.builder("ClassBody").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeParameter ::= TypeVariable TypeBound?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeParameter").build()).addSymbol(Nonterminal.builder("TypeVariable").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeBound").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NormalInterfaceDeclaration ::= InterfaceModifier* (i n t e r f a c e) Identifier TypeParameters? ((e x t e n d s) TypeList)? InterfaceBody  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NormalInterfaceDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("InterfaceModifier").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("TypeList").build()).build()).build()).addSymbol(Nonterminal.builder("InterfaceBody").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TraditionalComment ::= (/ *) CommentTail  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TraditionalComment").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(47).build(), Character.builder(42).build()).build()).build()).addSymbol(Nonterminal.builder("CommentTail").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodHeader ::= MethodModifier* TypeParameters? Result MethodDeclarator Throws?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodHeader").build()).addSymbol(Star.builder(Nonterminal.builder("MethodModifier").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Nonterminal.builder("Result").build()).addSymbol(Nonterminal.builder("MethodDeclarator").build()).addSymbol(Opt.builder(Nonterminal.builder("Throws").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* BinaryDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryDigits").build()).addSymbol(Nonterminal.builder("BinaryDigit").build()).addSymbol(Star.builder(Nonterminal.builder("BinaryDigitOrUnderscore").build()).build()).addSymbol(Nonterminal.builder("BinaryDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryDigits ::= BinaryDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryDigits").build()).addSymbol(Nonterminal.builder("BinaryDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AbstractMethodModifier ::= (a b s t r a c t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AbstractMethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(98).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AbstractMethodModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AbstractMethodModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AbstractMethodModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AbstractMethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeBody ::= ({) AnnotationTypeElementDeclaration* (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeBody").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassName ::= QualifiedIdentifier  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassName").build()).addSymbol(Nonterminal.builder("QualifiedIdentifier").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent FloatTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexadecimalFloatingPointLiteral").build()).addSymbol(Nonterminal.builder("HexSignificand").build()).addSymbol(Nonterminal.builder("BinaryExponent").build()).addSymbol(Opt.builder(Nonterminal.builder("FloatTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CommentTailStar ::= (*) CommentTailStar  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CommentTailStar").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).addSymbol(Nonterminal.builder("CommentTailStar").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// CommentTailStar ::= (/)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CommentTailStar").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(47).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// CommentTailStar ::= NotStarNotSlash CommentTail  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CommentTailStar").build()).addSymbol(Nonterminal.builder("NotStarNotSlash").build()).addSymbol(Nonterminal.builder("CommentTail").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// ConstructorBody ::= Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorBody").build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// EndOfLineComment ::= (/ /) InputCharacter*  !>>  (\u0001-\u0009 | \u000B-\u000C | \u000E-\u10FFFF)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("EndOfLineComment").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(47).build(), Character.builder(47).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("InputCharacter").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(1, 9).build(), CharacterRange.builder(11, 12).build(), CharacterRange.builder(14, 1114111).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalEscape ::= \ ZeroToThree OctalDigit OctalDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalEscape").build()).addSymbol(Character.builder(92).build()).addSymbol(Nonterminal.builder("ZeroToThree").build()).addSymbol(Nonterminal.builder("OctalDigit").build()).addSymbol(Nonterminal.builder("OctalDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalEscape ::= \ OctalDigit OctalDigit !>>  (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalEscape").build()).addSymbol(Character.builder(92).build()).addSymbol(Nonterminal.builder("OctalDigit").build()).addSymbol(Nonterminal.builder("OctalDigit").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 55).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalEscape ::= \ OctalDigit !>>  (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalEscape").build()).addSymbol(Character.builder(92).build()).addSymbol(Nonterminal.builder("OctalDigit").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 55).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalDigits ::= OctalDigit OctalDigitOrUnderscore* OctalDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalDigits").build()).addSymbol(Nonterminal.builder("OctalDigit").build()).addSymbol(Star.builder(Nonterminal.builder("OctalDigitOrUnderscore").build()).build()).addSymbol(Nonterminal.builder("OctalDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalDigits ::= OctalDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalDigits").build()).addSymbol(Nonterminal.builder("OctalDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstantExpression ::= Expression  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstantExpression").build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldDeclaration ::= FieldModifier* Type VariableDeclarators (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("FieldModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("VariableDeclarators").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstructorModifier ::= (p r i v a t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstructorModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstructorModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstructorModifier ::= (p r o t e c t e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeBound ::= (e x t e n d s) ReferenceType+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeBound").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build(), Character.builder(115).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("ReferenceType").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalNumeral ::= 0 OctalDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalNumeral").build()).addSymbol(Character.builder(48).build()).addSymbol(Nonterminal.builder("OctalDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalNumeral ::= 0 _+ OctalDigits  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalNumeral").build()).addSymbol(Character.builder(48).build()).addSymbol(Plus.builder(Character.builder(95).build()).build()).addSymbol(Nonterminal.builder("OctalDigits").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ReferenceTypeNonArrayType ::= TypeDeclSpecifier TypeArguments?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReferenceTypeNonArrayType").build()).addSymbol(Nonterminal.builder("TypeDeclSpecifier").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeArguments").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BlockStatement ::= LocalVariableDeclarationStatement  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BlockStatement").build()).addSymbol(Nonterminal.builder("LocalVariableDeclarationStatement").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BlockStatement ::= ClassDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BlockStatement").build()).addSymbol(Nonterminal.builder("ClassDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BlockStatement ::= Statement  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BlockStatement").build()).addSymbol(Nonterminal.builder("Statement").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NullLiteral ::= (n u l l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NullLiteral").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DimExpr ::= ([) Expression (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DimExpr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstantDeclaration ::= ConstantModifier* Type VariableDeclarators (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstantDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("ConstantModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("VariableDeclarators").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalFloatingPointLiteral ::= . Digits ExponentPart? FloatTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalFloatingPointLiteral").build()).addSymbol(Character.builder(46).build()).addSymbol(Nonterminal.builder("Digits").build()).addSymbol(Opt.builder(Nonterminal.builder("ExponentPart").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("FloatTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalFloatingPointLiteral ::= Digits ExponentPart  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalFloatingPointLiteral").build()).addSymbol(Nonterminal.builder("Digits").build()).addSymbol(Nonterminal.builder("ExponentPart").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalFloatingPointLiteral ::= Digits ExponentPart FloatTypeSuffix  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalFloatingPointLiteral").build()).addSymbol(Nonterminal.builder("Digits").build()).addSymbol(Nonterminal.builder("ExponentPart").build()).addSymbol(Nonterminal.builder("FloatTypeSuffix").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalFloatingPointLiteral ::= Digits . Digits? ExponentPart? FloatTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalFloatingPointLiteral").build()).addSymbol(Nonterminal.builder("Digits").build()).addSymbol(Character.builder(46).build()).addSymbol(Opt.builder(Nonterminal.builder("Digits").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ExponentPart").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("FloatTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalFloatingPointLiteral ::= Digits FloatTypeSuffix  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalFloatingPointLiteral").build()).addSymbol(Nonterminal.builder("Digits").build()).addSymbol(Nonterminal.builder("FloatTypeSuffix").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Digits ::= Digit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Digits").build()).addSymbol(Nonterminal.builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Digits ::= Digit DigitOrUnderscore* Digit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Digits").build()).addSymbol(Nonterminal.builder("Digit").build()).addSymbol(Star.builder(Nonterminal.builder("DigitOrUnderscore").build()).build()).addSymbol(Nonterminal.builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceDeclaration ::= NormalInterfaceDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceDeclaration").build()).addSymbol(Nonterminal.builder("NormalInterfaceDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceDeclaration ::= AnnotationTypeDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceDeclaration").build()).addSymbol(Nonterminal.builder("AnnotationTypeDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DefaultValue ::= (d e f a u l t) ElementValue  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DefaultValue").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("ElementValue").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AbstractMethodDeclaration ::= AbstractMethodModifier* TypeParameters? Result MethodDeclarator Throws? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AbstractMethodDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("AbstractMethodModifier").build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeParameters").build()).build()).addSymbol(Nonterminal.builder("Result").build()).addSymbol(Nonterminal.builder("MethodDeclarator").build()).addSymbol(Opt.builder(Nonterminal.builder("Throws").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FormalParameterList ::= (FormalParameter (,))* LastFormalParameter  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FormalParameterList").build()).addSymbol(Star.builder(Sequence.builder(Nonterminal.builder("FormalParameter").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("LastFormalParameter").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NonZeroDigit ::= (1-9)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NonZeroDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(49, 57).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ArrayInitializer ::= ({) VariableInitializer* (,)? (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ArrayInitializer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("VariableInitializer").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ConstructorDeclaration ::= ConstructorModifier* ConstructorDeclarator Throws? ConstructorBody  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConstructorDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("ConstructorModifier").build()).build()).addSymbol(Nonterminal.builder("ConstructorDeclarator").build()).addSymbol(Opt.builder(Nonterminal.builder("Throws").build()).build()).addSymbol(Nonterminal.builder("ConstructorBody").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ForInit ::= StatementExpression+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ForInit").build()).addSymbol(Plus.builder(Nonterminal.builder("StatementExpression").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ForInit ::= LocalVariableDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ForInit").build()).addSymbol(Nonterminal.builder("LocalVariableDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Block ::= ({) BlockStatement* (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Block").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(Nonterminal.builder("BlockStatement").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// LocalVariableDeclarationStatement ::= VariableModifier* Type VariableDeclarators (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LocalVariableDeclarationStatement").build()).addSymbol(Star.builder(Nonterminal.builder("VariableModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("VariableDeclarators").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ExponentIndicator ::= (E | e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ExponentIndicator").build()).addSymbol(Alt.builder(CharacterRange.builder(69, 69).build(), CharacterRange.builder(101, 101).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DigitOrUnderscore ::= _  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DigitOrUnderscore").build()).addSymbol(Character.builder(95).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DigitOrUnderscore ::= Digit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DigitOrUnderscore").build()).addSymbol(Nonterminal.builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// LastFormalParameter ::= VariableModifier* Type (. . .) VariableDeclaratorId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LastFormalParameter").build()).addSymbol(Star.builder(Nonterminal.builder("VariableModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build(), Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("VariableDeclaratorId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// LastFormalParameter ::= FormalParameter  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LastFormalParameter").build()).addSymbol(Nonterminal.builder("FormalParameter").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FloatingPointLiteral ::= HexadecimalFloatingPointLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FloatingPointLiteral").build()).addSymbol(Nonterminal.builder("HexadecimalFloatingPointLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FloatingPointLiteral ::= DecimalFloatingPointLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FloatingPointLiteral").build()).addSymbol(Nonterminal.builder("DecimalFloatingPointLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SwitchBlockStatementGroup ::= SwitchLabel+ BlockStatement+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SwitchBlockStatementGroup").build()).addSymbol(Plus.builder(Nonterminal.builder("SwitchLabel").build()).build()).addSymbol(Plus.builder(Nonterminal.builder("BlockStatement").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).addSymbol(Nonterminal.builder("AnnotationTypeDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeElementDeclaration ::= InterfaceDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).addSymbol(Nonterminal.builder("InterfaceDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeElementDeclaration ::= ConstantDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).addSymbol(Nonterminal.builder("ConstantDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeElementDeclaration ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeElementDeclaration ::= AbstractMethodModifier* Type Identifier (() ()) (([) (]))* DefaultValue? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).addSymbol(Star.builder(Nonterminal.builder("AbstractMethodModifier").build()).build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("DefaultValue").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// AnnotationTypeElementDeclaration ::= ClassDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AnnotationTypeElementDeclaration").build()).addSymbol(Nonterminal.builder("ClassDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// DecimalIntegerLiteral ::= DecimalNumeral IntegerTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DecimalIntegerLiteral").build()).addSymbol(Nonterminal.builder("DecimalNumeral").build()).addSymbol(Opt.builder(Nonterminal.builder("IntegerTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableDeclarators ::= VariableDeclarator+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableDeclarators").build()).addSymbol(Plus.builder(Nonterminal.builder("VariableDeclarator").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// JavaLetter ::= ($ | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("JavaLetter").build()).addSymbol(Alt.builder(CharacterRange.builder(36, 36).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexIntegerLiteral ::= HexNumeral IntegerTypeSuffix?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexIntegerLiteral").build()).addSymbol(Nonterminal.builder("HexNumeral").build()).addSymbol(Opt.builder(Nonterminal.builder("IntegerTypeSuffix").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= (a b s t r a c t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(98).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= (p r i v a t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= (s t r i c t f p)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(102).build(), Character.builder(112).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= (p r o t e c t e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceModifier ::= (s t a t i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// SingleCharacter ::= InputCharacter \  ((' | \))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SingleCharacter").build()).addSymbol(Nonterminal.builder("InputCharacter").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceMemberDeclaration ::= InterfaceDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceMemberDeclaration").build()).addSymbol(Nonterminal.builder("InterfaceDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceMemberDeclaration ::= ConstantDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceMemberDeclaration").build()).addSymbol(Nonterminal.builder("ConstantDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceMemberDeclaration ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceMemberDeclaration").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceMemberDeclaration ::= AbstractMethodDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceMemberDeclaration").build()).addSymbol(Nonterminal.builder("AbstractMethodDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// InterfaceMemberDeclaration ::= ClassDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InterfaceMemberDeclaration").build()).addSymbol(Nonterminal.builder("ClassDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BooleanLiteral ::= (f a l s e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BooleanLiteral").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BooleanLiteral ::= (t r u e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BooleanLiteral").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NonWildTypeArguments ::= (<) ReferenceType+ (>)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NonWildTypeArguments").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).addSymbol(Plus.builder(Nonterminal.builder("ReferenceType").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Literal ::= CharacterLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Literal").build()).addSymbol(Nonterminal.builder("CharacterLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Literal ::= NullLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Literal").build()).addSymbol(Nonterminal.builder("NullLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Literal ::= IntegerLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Literal").build()).addSymbol(Nonterminal.builder("IntegerLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Literal ::= StringLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Literal").build()).addSymbol(Nonterminal.builder("StringLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Literal ::= BooleanLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Literal").build()).addSymbol(Nonterminal.builder("BooleanLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Literal ::= FloatingPointLiteral  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Literal").build()).addSymbol(Nonterminal.builder("FloatingPointLiteral").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassMemberDeclaration ::= InterfaceDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassMemberDeclaration").build()).addSymbol(Nonterminal.builder("InterfaceDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassMemberDeclaration ::= ClassDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassMemberDeclaration").build()).addSymbol(Nonterminal.builder("ClassDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassMemberDeclaration ::= MethodDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassMemberDeclaration").build()).addSymbol(Nonterminal.builder("MethodDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassMemberDeclaration ::= FieldDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassMemberDeclaration").build()).addSymbol(Nonterminal.builder("FieldDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassMemberDeclaration ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassMemberDeclaration").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Identifier ::=  !<<  ($ | A-Z | _ | a-z)IdentifierChars !>>  ($ | 0-9 | A-Z | _ | a-z), \  ((c l a s s) | (b r e a k) | (t h i s) | (i f) | (s t r i c t f p) | (n a t i v e) | (d o) | (t r a n s i e n t) | (i n t) | (t h r o w s) | (i n s t a n c e o f) | (a b s t r a c t) | (n e w) | (i m p o r t) | (s u p e r) | (c a t c h) | (t r y) | (e x t e n d s) | (i n t e r f a c e) | (e l s e) | (f l o a t) | (l o n g) | (v o l a t i l e) | (s h o r t) | (w h i l e) | (d o u b l e) | (c a s e) | (i m p l e m e n t s) | (r e t u r n) | (c h a r) | (f i n a l) | (s w i t c h) | (s y n c h r o n i z e d) | (v o i d) | (p u b l i c) | (f o r) | (b y t e) | (b o o l e a n) | (p r o t e c t e d) | (s t a t i c) | (t r u e) | (c o n s t) | (g o t o) | (f a l s e) | (f i n a l l y) | (p r i v a t e) | (d e f a u l t) | (e n u m) | (n u l l) | (c o n t i n u e) | (a s s e r t) | (t h r o w) | (p a c k a g e))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Identifier").build()).addSymbol(Nonterminal.builder("IdentifierChars").addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(36, 36).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(36, 36).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(97).build(), Character.builder(107).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(102).build(), Character.builder(112).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(105).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(119).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(111).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(98).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(117).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(121).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(100).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(108).build(), Character.builder(111).build(), Character.builder(97).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(109).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(116).build(), Character.builder(117).build(), Character.builder(114).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(104).build(), Character.builder(97).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(119).build(), Character.builder(105).build(), Character.builder(116).build(), Character.builder(99).build(), Character.builder(104).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(121).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(105).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(121).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(111).build(), Character.builder(111).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(97).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(103).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(110).build(), Character.builder(117).build(), Character.builder(109).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(117).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(119).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(107).build(), Character.builder(97).build(), Character.builder(103).build(), Character.builder(101).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (p r i v a t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (s y n c h r o n i z e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(121).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(104).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(105).build(), Character.builder(122).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (f i n a l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (s t r i c t f p)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(102).build(), Character.builder(112).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (a b s t r a c t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(98).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(99).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (n a t i v e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (p r o t e c t e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// MethodModifier ::= (s t a t i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("MethodModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableModifier ::= (f i n a l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IntegerTypeSuffix ::= l  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IntegerTypeSuffix").build()).addSymbol(Character.builder(108).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IntegerTypeSuffix ::= L  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IntegerTypeSuffix").build()).addSymbol(Character.builder(76).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (f l o a t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(108).build(), Character.builder(111).build(), Character.builder(97).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (l o n g)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(111).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (d o u b l e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (i n t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (c h a r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(104).build(), Character.builder(97).build(), Character.builder(114).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (b o o l e a n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(111).build(), Character.builder(111).build(), Character.builder(108).build(), Character.builder(101).build(), Character.builder(97).build(), Character.builder(110).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (s h o r t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(104).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// PrimitiveType ::= (b y t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build(), Character.builder(121).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableInitializer ::= Expression  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableInitializer").build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// VariableInitializer ::= ArrayInitializer  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VariableInitializer").build()).addSymbol(Nonterminal.builder("ArrayInitializer").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NotStar ::= InputCharacter \  (*)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NotStar").build()).addSymbol(Nonterminal.builder("InputCharacter").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Character.builder(42).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// NotStar ::= LineTerminator  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NotStar").build()).addSymbol(Nonterminal.builder("LineTerminator").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (f i n a l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (t r a n s i e n t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(105).build(), Character.builder(101).build(), Character.builder(110).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= Annotation  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Nonterminal.builder("Annotation").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (p r o t e c t e d)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(99).build(), Character.builder(116).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (v o l a t i l e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (p r i v a t e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (s t a t i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// FieldModifier ::= (p u b l i c)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldModifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(117).build(), Character.builder(98).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(99).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// IdentifierChars ::= JavaLetter  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IdentifierChars").build()).addSymbol(Nonterminal.builder("JavaLetter").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// IdentifierChars ::= IdentifierChars JavaLetterOrDigit  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("IdentifierChars").build()).addSymbol(Nonterminal.builder("IdentifierChars").build()).addSymbol(Nonterminal.builder("JavaLetterOrDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,false)).build())
// ExceptionType ::= TypeName  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ExceptionType").build()).addSymbol(Nonterminal.builder("TypeName").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ArrayType ::= Type ([) (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ArrayType").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CompilationUnit ::= PackageDeclaration? ImportDeclaration* TypeDeclaration*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CompilationUnit").build()).addSymbol(Opt.builder(Nonterminal.builder("PackageDeclaration").build()).build()).addSymbol(Star.builder(Nonterminal.builder("ImportDeclaration").build()).build()).addSymbol(Star.builder(Nonterminal.builder("TypeDeclaration").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// CompilationUnit ::= PackageDeclaration? ImportDeclaration* TypeDeclaration*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CompilationUnit").build()).addSymbol(Opt.builder(Nonterminal.builder("PackageDeclaration").build()).build()).addSymbol(Star.builder(Nonterminal.builder("ImportDeclaration").build()).build()).addSymbol(Star.builder(Nonterminal.builder("TypeDeclaration").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeList ::= Type+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeList").build()).addSymbol(Plus.builder(Nonterminal.builder("Type").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Arguments ::= (() ArgumentList? ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Arguments").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ArgumentList").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Finally ::= (f i n a l l y) Block  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Finally").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build()).addSymbol(Nonterminal.builder("Block").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Resources ::= Resource+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Resources").build()).addSymbol(Plus.builder(Nonterminal.builder("Resource").build()).addSeparators(Arrays.asList(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryExponent ::= BinaryExponentIndicator SignedInteger  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryExponent").build()).addSymbol(Nonterminal.builder("BinaryExponentIndicator").build()).addSymbol(Nonterminal.builder("SignedInteger").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// BinaryDigit ::= (0-1)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BinaryDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 49).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeDeclSpecifier ::= Identifier (TypeArguments? (.) Identifier)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeDeclSpecifier").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Star.builder(Sequence.builder(Opt.builder(Nonterminal.builder("TypeArguments").build()).build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Identifier").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ElementValuePair ::= Identifier (=) ElementValue  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ElementValuePair").build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("ElementValue").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Expression ::= Primary  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Primary").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Expression ::= (() Expression ())  {UNDEFINED,-1,NON_REC} PREC(1,1) brackets
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).setLabel("brackets").build())
// Expression ::= Expression AssignmentOperator Expression  {RIGHT,1,LEFT_RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").addExcept("gt") .addExcept("lt").build()).addSymbol(Nonterminal.builder("AssignmentOperator").build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.RIGHT).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// Expression ::= Expression (?) Expression (:) Expression  {RIGHT,2,LEFT_RIGHT_REC} PREC(2,2) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.RIGHT).setPrecedence(2).setPrecedenceLevel(PrecedenceLevel.from(2,2,-1,false,false)).build())
// Expression ::= Expression (| |) Expression  {LEFT,3,LEFT_RIGHT_REC} PREC(3,3) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(3).setPrecedenceLevel(PrecedenceLevel.from(3,3,-1,false,false)).build())
// Expression ::= Expression (& &) Expression  {LEFT,4,LEFT_RIGHT_REC} PREC(4,4) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build(), Character.builder(38).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(4).setPrecedenceLevel(PrecedenceLevel.from(4,4,-1,false,false)).build())
// Expression ::= Expression (|)  !>>  (|) Expression  {LEFT,5,LEFT_RIGHT_REC} PREC(5,5) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(5).setPrecedenceLevel(PrecedenceLevel.from(5,5,-1,false,false)).build())
// Expression ::= Expression (^) Expression  {LEFT,6,LEFT_RIGHT_REC} PREC(6,6) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(94).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(6).setPrecedenceLevel(PrecedenceLevel.from(6,6,-1,false,false)).build())
// Expression ::= Expression (&)  !>>  (&) Expression  {LEFT,7,LEFT_RIGHT_REC} PREC(7,7) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(7).setPrecedenceLevel(PrecedenceLevel.from(7,7,-1,false,false)).build())
// Expression ::= Expression (! =) Expression  {LEFT,8,LEFT_RIGHT_REC} LEFT(8,8,8) PREC(8,8) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(33).build(), Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(8).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(8,8,-1,false,false),8,8,8)).setPrecedenceLevel(PrecedenceLevel.from(8,8,-1,false,false)).build())
// Expression ::= Expression (= =) Expression  {LEFT,8,LEFT_RIGHT_REC} LEFT(8,8,8) PREC(8,8) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(8).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(8,8,-1,false,false),8,8,8)).setPrecedenceLevel(PrecedenceLevel.from(8,8,-1,false,false)).build())
// Expression ::= Expression (>)  !>>  (>)  !>>  (=) Expression  {LEFT,9,LEFT_RIGHT_REC} LEFT(9,9,9) PREC(9,9) gt
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(9).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(9,9,-1,false,false),9,9,9)).setPrecedenceLevel(PrecedenceLevel.from(9,9,-1,false,false)).setLabel("gt").build())
// Expression ::= Expression (<)  !>>  (=)  !>>  (<) Expression  {LEFT,9,LEFT_RIGHT_REC} LEFT(9,9,9) PREC(9,9) lt
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(9).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(9,9,-1,false,false),9,9,9)).setPrecedenceLevel(PrecedenceLevel.from(9,9,-1,false,false)).setLabel("lt").build())
// Expression ::= Expression (i n s t a n c e o f) Type  {UNDEFINED,9,LEFT_REC} LEFT(9,9,9) PREC(9,9) io
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build(), Character.builder(111).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("Type").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(9).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(9,9,-1,false,false),9,9,9)).setPrecedenceLevel(PrecedenceLevel.from(9,9,-1,false,false)).setLabel("io").build())
// Expression ::= Expression (> =) Expression  {LEFT,9,LEFT_RIGHT_REC} LEFT(9,9,9) PREC(9,9) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(9).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(9,9,-1,false,false),9,9,9)).setPrecedenceLevel(PrecedenceLevel.from(9,9,-1,false,false)).build())
// Expression ::= Expression (< =) Expression  {LEFT,9,LEFT_RIGHT_REC} LEFT(9,9,9) PREC(9,9) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(9).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(9,9,-1,false,false),9,9,9)).setPrecedenceLevel(PrecedenceLevel.from(9,9,-1,false,false)).build())
// Expression ::= Expression (> > >) Expression  {LEFT,10,LEFT_RIGHT_REC} LEFT(10,10,10) PREC(10,10) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(10).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(10,10,-1,false,false),10,10,10)).setPrecedenceLevel(PrecedenceLevel.from(10,10,-1,false,false)).build())
// Expression ::= Expression (> >)  !>>  (>) Expression  {LEFT,10,LEFT_RIGHT_REC} LEFT(10,10,10) PREC(10,10) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(10).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(10,10,-1,false,false),10,10,10)).setPrecedenceLevel(PrecedenceLevel.from(10,10,-1,false,false)).build())
// Expression ::= Expression (< <) Expression  {LEFT,10,LEFT_RIGHT_REC} LEFT(10,10,10) PREC(10,10) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(60).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(10).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(10,10,-1,false,false),10,10,10)).setPrecedenceLevel(PrecedenceLevel.from(10,10,-1,false,false)).build())
// Expression ::= Expression (+)  !>>  (+) Expression  {LEFT,11,LEFT_RIGHT_REC} LEFT(11,11,11) PREC(11,11) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(11).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(11,11,-1,false,false),11,11,11)).setPrecedenceLevel(PrecedenceLevel.from(11,11,-1,false,false)).build())
// Expression ::= Expression (-)  !>>  (-) Expression  {LEFT,11,LEFT_RIGHT_REC} LEFT(11,11,11) PREC(11,11) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(11).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(11,11,-1,false,false),11,11,11)).setPrecedenceLevel(PrecedenceLevel.from(11,11,-1,false,false)).build())
// Expression ::= Expression (%) Expression  {LEFT,12,LEFT_RIGHT_REC} LEFT(12,12,12) PREC(12,12) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(37).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(12).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(12,12,-1,false,false),12,12,12)).setPrecedenceLevel(PrecedenceLevel.from(12,12,-1,false,false)).build())
// Expression ::= Expression (/) Expression  {LEFT,12,LEFT_RIGHT_REC} LEFT(12,12,12) PREC(12,12) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(47).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(12).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(12,12,-1,false,false),12,12,12)).setPrecedenceLevel(PrecedenceLevel.from(12,12,-1,false,false)).build())
// Expression ::= Expression (*) Expression  {LEFT,12,LEFT_RIGHT_REC} LEFT(12,12,12) PREC(12,12) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.LEFT_RIGHT_REC).setAssociativity(Associativity.LEFT).setPrecedence(12).setAssociativityGroup(new AssociativityGroup(Associativity.LEFT,PrecedenceLevel.from(12,12,-1,false,false),12,12,12)).setPrecedenceLevel(PrecedenceLevel.from(12,12,-1,false,false)).build())
// Expression ::= (n e w) ArrayCreationExpression  {UNDEFINED,-1,NON_REC} PREC(13,13) newArray
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build()).addSymbol(Nonterminal.builder("ArrayCreationExpression").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).setLabel("newArray").build())
// Expression ::= (n e w) ClassInstanceCreationExpression  {UNDEFINED,-1,NON_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build()).addSymbol(Nonterminal.builder("ClassInstanceCreationExpression").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= (+)  !>>  (+) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) up
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).setLabel("up").build())
// Expression ::= (!) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= (-)  !>>  (-) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) um
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).setLabel("um").build())
// Expression ::= (+ +) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build(), Character.builder(43).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= (~) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= (() PrimitiveType ()) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("PrimitiveType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= (() ReferenceType ()) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("ReferenceType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").addExcept("um") .addExcept("up").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= (- -) Expression  {UNDEFINED,13,RIGHT_REC} PREC(13,13) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(13).setPrecedenceLevel(PrecedenceLevel.from(13,13,13,false,false)).build())
// Expression ::= Expression (+ +)  {UNDEFINED,14,LEFT_REC} PREC(14,14) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build(), Character.builder(43).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(14).setPrecedenceLevel(PrecedenceLevel.from(14,14,14,true,false)).build())
// Expression ::= Expression (- -)  {UNDEFINED,14,LEFT_REC} PREC(14,14) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(45).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(14).setPrecedenceLevel(PrecedenceLevel.from(14,14,14,true,false)).build())
// Expression ::= Expression (.) (s u p e r) ((.) Identifier)? Arguments  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(117).build(), Character.builder(112).build(), Character.builder(101).build(), Character.builder(114).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Nonterminal.builder("Identifier").build()).build()).build()).addSymbol(Nonterminal.builder("Arguments").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Type (.) (c l a s s)  {UNDEFINED,-1,NON_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Expression (.) Identifier  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").addExcept("io").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Expression (.) (t h i s)  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(105).build(), Character.builder(115).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= (v o i d) (.) (c l a s s)  {UNDEFINED,-1,NON_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build(), Character.builder(111).build(), Character.builder(105).build(), Character.builder(100).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Expression ([) Expression (])  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").addExcept("newArray").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Expression (.) NonWildTypeArguments ExplicitGenericInvocationSuffix  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("NonWildTypeArguments").build()).addSymbol(Nonterminal.builder("ExplicitGenericInvocationSuffix").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Expression (() ArgumentList? ())  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").addExcept("brackets").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ArgumentList").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// Expression ::= Expression (.) (n e w) TypeArguments? Identifier TypeArgumentsOrDiamond? (() ArgumentList? ()) ClassBody?  {UNDEFINED,15,LEFT_REC} PREC(15,15) 
.addRule(Rule.withHead(Nonterminal.builder("Expression").build()).addSymbol(Nonterminal.builder("Expression").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("TypeArguments").build()).build()).addSymbol(Nonterminal.builder("Identifier").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeArgumentsOrDiamond").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ArgumentList").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ClassBody").build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(15).setPrecedenceLevel(PrecedenceLevel.from(15,15,15,true,true)).build())
// OctalDigitOrUnderscore ::= OctalDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalDigitOrUnderscore").build()).addSymbol(Nonterminal.builder("OctalDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// OctalDigitOrUnderscore ::= _  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctalDigitOrUnderscore").build()).addSymbol(Character.builder(95).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// ClassInstanceCreationExpression ::= TypeArguments? TypeDeclSpecifier TypeArgumentsOrDiamond? (() ArgumentList? ()) ClassBody?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ClassInstanceCreationExpression").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeArguments").build()).build()).addSymbol(Nonterminal.builder("TypeDeclSpecifier").build()).addSymbol(Opt.builder(Nonterminal.builder("TypeArgumentsOrDiamond").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ArgumentList").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Opt.builder(Nonterminal.builder("ClassBody").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexDigitOrUnderscore ::= _  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexDigitOrUnderscore").build()).addSymbol(Character.builder(95).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// HexDigitOrUnderscore ::= HexDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexDigitOrUnderscore").build()).addSymbol(Nonterminal.builder("HexDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// RawInputCharacter ::= (\u0001-[ | ]-\u10FFFF)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("RawInputCharacter").build()).addSymbol(Alt.builder(CharacterRange.builder(1, 91).build(), CharacterRange.builder(93, 1114111).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// RawInputCharacter ::= \  !>>  (\ | u)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("RawInputCharacter").build()).addSymbol(Character.builder(92).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(92, 92).build(), CharacterRange.builder(117, 117).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// RawInputCharacter ::= \ \  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("RawInputCharacter").build()).addSymbol(Character.builder(92).build()).addSymbol(Character.builder(92).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeDeclaration ::= InterfaceDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeDeclaration").build()).addSymbol(Nonterminal.builder("InterfaceDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeDeclaration ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeDeclaration").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
// TypeDeclaration ::= ClassDeclaration  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeDeclaration").build()).addSymbol(Nonterminal.builder("ClassDeclaration").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false)).build())
.build();
         grammar = new LayoutWeaver().transform(new EBNFToBNF().transform(grammar));
         System.out.println(grammar);

         grammar = new DesugarPrecedenceAndAssociativity().transform(grammar);
         System.out.println(grammar.toStringWithOrderByPrecedence());
         
         Input input = Input.fromString("public class A { public int i = 1 + 1; }");
         
         try {
        	 
			input = Input.fromPath("/Users/anastasiaizmaylova/git/diguana/src/org/jgll/datadependent/ast/Expression.java");
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

         GrammarGraph graph = grammar.toGrammarGraph(input, Configuration.DEFAULT);

         // Visualization.generateGrammarGraph("/Users/anastasiaizmaylova/git/diguana/test/org/jgll/parser/datadependent/java/", graph);

         GLLParser parser = ParserFactory.getParser(Configuration.DEFAULT, input, grammar);
         ParseResult result = parser.parse(input, graph, Start.from(Nonterminal.withName("CompilationUnit")));
         
         Assert.assertTrue(result.isParseSuccess());

//          Visualization.generateSPPFGraph("/Users/anastasiaizmaylova/git/diguana/test/org/jgll/parser/datadependent/java/",
//                            result.asParseSuccess().getRoot(), input);

         System.out.println(result.toString());
         
    }
}
