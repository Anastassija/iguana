package org.jgll.parser.datadependent.haskell;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.jgll.datadependent.ast.AST;
import org.jgll.grammar.Grammar;
import org.jgll.grammar.GrammarGraph;
import org.jgll.grammar.condition.ConditionType;
import org.jgll.grammar.condition.RegularExpressionCondition;
import org.jgll.grammar.symbol.*;
import org.jgll.grammar.symbol.Character;

import static org.jgll.grammar.symbol.LayoutStrategy.*;

import org.jgll.grammar.transformation.DesugarAlignAndOffside;
import org.jgll.grammar.transformation.DesugarPrecedenceAndAssociativity;
import org.jgll.grammar.transformation.EBNFToBNF;
import org.jgll.grammar.transformation.LayoutWeaver;
import org.jgll.parser.GLLParser;
import org.jgll.parser.ParseResult;
import org.jgll.parser.ParserFactory;
import org.jgll.regex.*;
import org.jgll.traversal.NonterminalNodeVisitor;
import org.jgll.util.Configuration;
import org.jgll.util.Input;
import org.jgll.util.Visualization;
import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

@SuppressWarnings("unused")
public class Haskell {

    @Test
    public void test() throws IOException {
         Grammar grammar =

Grammar.builder()
.setLayout(Nonterminal.builder("Whitespace").build())
// CDecls ::= align CDDeclsLngstMtch*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CDecls").build()).addSymbol(Align.builder(Star.builder(Nonterminal.builder("CDDeclsLngstMtch").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CDecls ::= ({) Whitespace CDecl?+ Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Opt.builder(Nonterminal.builder("CDecl").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp1 ::= FExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp1").build()).addSymbol(Nonterminal.builder("FExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp1 ::= (c a s e) Whitespace Exp Whitespace (o f) Whitespace Alts  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp1").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Alts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp1 ::= (d o) Whitespace Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp1").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QVarId ::= (ModId (.))? VarId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QVarId").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("VarId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GDPat ::= Guards Whitespace (- >) Whitespace Exp Whitespace GDPat?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GDPat").build()).addSymbol(Nonterminal.builder("Guards").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("GDPat").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ImpSpec ::= (h i d i n g) Whitespace (() Whitespace Import* Whitespace (,)? Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ImpSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(104).build(), Character.builder(105).build(), Character.builder(100).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("Import").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ImpSpec ::= (() Whitespace Import* Whitespace (,)? Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ImpSpec").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("Import").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// NComment ::= ({ -) (NComment | ({) | (-) | (\u0001-, | .-z | |-\u10FFFF))* (- })  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NComment").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build(), Character.builder(45).build()).build()).build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("NComment").build(), Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(45).build()))).build(), Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(125).build()))).build(), Alt.builder(CharacterRange.builder(1, 44).build(), CharacterRange.builder(46, 122).build(), CharacterRange.builder(124, 1114111).build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(125).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TyCls ::= ConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TyCls").build()).addSymbol(Nonterminal.builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Class ::= QTyCls Whitespace AType* Whitespace ((~) Whitespace Class)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Class").build()).addSymbol(Nonterminal.builder("QTyCls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("AType").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Class").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GADTDecl ::= TyCon Whitespace (: :) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GADTDecl").build()).addSymbol(Nonterminal.builder("TyCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GADTDecl ::= TyCon Whitespace (: :) Whitespace ({) Whitespace (Var Whitespace ((: :) Whitespace CType)?)+ Whitespace (}) Whitespace (- >) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GADTDecl").build()).addSymbol(Nonterminal.builder("TyCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Sequence.builder(Nonterminal.builder("Var").build(), Nonterminal.builder("Whitespace").build(), Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("CType").build()).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Guards ::= (|) Whitespace Guard+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Guards").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Guard").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GConSym ::= QConSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GConSym").build()).addSymbol(Nonterminal.builder("QConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GConSym ::= (:)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GConSym").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Inst ::= (() Whitespace GTyCon Whitespace TyVar* Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Inst").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("GTyCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("TyVar").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Inst ::= GTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Inst").build()).addSymbol(Nonterminal.builder("GTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Inst ::= (() Whitespace TyVar Whitespace (- >) Whitespace TyVar Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Inst").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TyVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TyVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Inst ::= (() Whitespace TyVar Whitespace (,) Whitespace TyVar+ Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Inst").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TyVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("TyVar").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Inst ::= ([) Whitespace TyVar Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Inst").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TyVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QCon ::= (() Whitespace GConSym Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("GConSym").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QCon ::= QConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QCon").build()).addSymbol(Nonterminal.builder("QConId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DGADTDecls ::= DGADTDecls Whitespace (;) Whitespace GADTDecl  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DGADTDecls").build()).addSymbol(Nonterminal.builder("DGADTDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("GADTDecl").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DGADTDecls ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DGADTDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DGADTDecls ::= GADTDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DGADTDecls").build()).addSymbol(Nonterminal.builder("GADTDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DGADTDecls ::= DGADTDecls Whitespace (;)  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DGADTDecls").build()).addSymbol(Nonterminal.builder("DGADTDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DGADTDecls ::= (;) Whitespace GADTDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DGADTDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("GADTDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// WhiteChar ::= (\u0009-\u000B | \\u000D | \u0020)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("WhiteChar").build()).addSymbol(Alt.builder(CharacterRange.builder(9, 11).build(), CharacterRange.builder(13, 13).build(), CharacterRange.builder(32, 32).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Small ::= AscSmall  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Small").build()).addSymbol(Nonterminal.builder("AscSmall").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Small ::= (_)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Small").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FieldDecl ::= Vars Whitespace (: :) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FieldDecl").build()).addSymbol(Nonterminal.builder("Vars").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= ([ :) Whitespace (: ])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (() Whitespace (- >) Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (() Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (() Whitespace (,)+ Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (() Whitespace (~ #) Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build(), Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (() Whitespace (~) Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (( #) Whitespace (,)+ Whitespace (# ))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build(), Character.builder(35).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build(), Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= ([) Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= (() Whitespace QTyConSym Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QTyConSym").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GTyCon ::= QTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GTyCon").build()).addSymbol(Nonterminal.builder("QTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DClass ::= QTyCls  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DClass").build()).addSymbol(Nonterminal.builder("QTyCls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Stmt ::= Qual? Whitespace (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Stmt").build()).addSymbol(Opt.builder(Nonterminal.builder("Qual").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Stmt ::= (r e c) Whitespace Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Stmt").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Hexadecimal ::= HexIt HexIt*  !>>  (0-9 | A-F | a-f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Hexadecimal").build()).addSymbol(Nonterminal.builder("HexIt").build()).addSymbol(Star.builder(Nonterminal.builder("HexIt").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Context ::= BType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Context").build()).addSymbol(Nonterminal.builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Context ::= BType Whitespace (~) Whitespace BType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Context").build()).addSymbol(Nonterminal.builder("BType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Large ::= AscLarge  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Large").build()).addSymbol(Nonterminal.builder("AscLarge").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Guard ::= (l e t) Whitespace Decls  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Guard").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Decls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Guard ::= Pat Whitespace (< -) Whitespace InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Guard").build()).addSymbol(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Guard ::= InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Guard").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// SimpleClass ::= QTyCls Whitespace TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SimpleClass").build()).addSymbol(Nonterminal.builder("QTyCls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSmall ::= (a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSmall").build()).addSymbol(Alt.builder(CharacterRange.builder(97, 122).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DGADTDeclsLngstMtch ::= offside DGADTDecls wsp:Whitespace when endsWith(ds.rExt,"";"") || $(wsp.rExt) || indent(wsp.rExt) <= indent(ds.lExt)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DGADTDeclsLngstMtch").build()).addSymbol(Offside.builder(Nonterminal.builder("DGADTDecls").build()).setLabel("ds").build()).addSymbol(Conditional.builder(Nonterminal.builder("Whitespace").setLabel("wsp").build(),AST.or(AST.or(AST.endsWith(AST.rExt("ds"),AST.string(";")),AST.endOfFile(AST.rExt("wsp"))),AST.lessEq(AST.indent(AST.rExt("wsp")),AST.indent(AST.lExt("ds"))))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Fds ::= (|) Whitespace (VarId Whitespace (- >) Whitespace VarId)+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Fds").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Sequence.builder(Nonterminal.builder("VarId").build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("VarId").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QVarOp ::= (`) Whitespace QVarId Whitespace (`)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QVarOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QVarId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QVarOp ::= QVarSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QVarOp").build()).addSymbol(Nonterminal.builder("QVarSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// $default$ ::=  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("$default$").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FExp ::= FExp? Whitespace AExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FExp").build()).addSymbol(Opt.builder(Nonterminal.builder("FExp").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("AExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QTyCls ::= (ModId (.))? TyCls  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QTyCls").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("TyCls").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Decimal ::= Digit Digit*  !>>  (0-9)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Decimal").build()).addSymbol(Nonterminal.builder("Digit").build()).addSymbol(Star.builder(Nonterminal.builder("Digit").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// SContext ::= (() Whitespace SimpleClass* Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SContext").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("SimpleClass").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// SContext ::= SimpleClass  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("SContext").build()).addSymbol(Nonterminal.builder("SimpleClass").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Export ::= QCon Whitespace (((() Whitespace (. .) Whitespace ())) | ((() Whitespace (QVar | Con)* Whitespace ())))?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Export").build()).addSymbol(Nonterminal.builder("QCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Alt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build(), Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Star.builder(Alt.builder(Nonterminal.builder("QVar").build(), Nonterminal.builder("Con").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Export ::= QVar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Export").build()).addSymbol(Nonterminal.builder("QVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Export ::= (m o d u l e) Whitespace ModId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Export").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ModId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CDDeclsLngstMtch ::= offside DCDecls wsp:Whitespace when endsWith(ds.rExt,"";"") || $(wsp.rExt) || indent(wsp.rExt) <= indent(ds.lExt)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CDDeclsLngstMtch").build()).addSymbol(Offside.builder(Nonterminal.builder("DCDecls").build()).setLabel("ds").build()).addSymbol(Conditional.builder(Nonterminal.builder("Whitespace").setLabel("wsp").build(),AST.or(AST.or(AST.endsWith(AST.rExt("ds"),AST.string(";")),AST.endOfFile(AST.rExt("wsp"))),AST.lessEq(AST.indent(AST.rExt("wsp")),AST.indent(AST.lExt("ds"))))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ImpDecls ::= ImpDecl Whitespace ((;) Whitespace ImpDecl?)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ImpDecls").build()).addSymbol(Nonterminal.builder("ImpDecl").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Opt.builder(Nonterminal.builder("ImpDecl").build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Space ::= (\u0020)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Space").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(32).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ImpDecl ::= (i m p o r t) Whitespace (q u a l i f i e d)? Whitespace ModId Whitespace ((a s) Whitespace ModId)? Whitespace ImpSpec?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ImpDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(113).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ModId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("ModId").build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("ImpSpec").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Exp ::= InfixExp1 Whitespace (: :) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Exp ::= InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Exp ::= InfixExp1 Whitespace (> > -) Whitespace Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Exp ::= InfixExp1 Whitespace (- < <) Whitespace Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build(), Character.builder(60).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Exp ::= InfixExp1 Whitespace (- <) Whitespace Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Exp ::= InfixExp1 Whitespace (> -) Whitespace Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// DExpLngstMtch ::= offside (Exp (;)?) wsp:Whitespace when endsWith(exp.rExt,"";"") || $(wsp.rExt) || indent(wsp.rExt) <= indent(exp.lExt) || startsWith(wsp.rExt,"")"")  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DExpLngstMtch").build()).addSymbol(Offside.builder(Sequence.builder(Nonterminal.builder("Exp").build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).build()).setLabel("exp").build()).addSymbol(Conditional.builder(Nonterminal.builder("Whitespace").setLabel("wsp").build(),AST.or(AST.or(AST.or(AST.endsWith(AST.rExt("exp"),AST.string(";")),AST.endOfFile(AST.rExt("wsp"))),AST.lessEq(AST.indent(AST.rExt("wsp")),AST.indent(AST.lExt("exp")))),AST.startsWith(AST.rExt("wsp"),AST.string(")")))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Symbol ::= AscSymbol  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Symbol").build()).addSymbol(Nonterminal.builder("AscSymbol").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// NewConstr ::= Con Whitespace AType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NewConstr").build()).addSymbol(Nonterminal.builder("Con").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("AType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// NewConstr ::= Con Whitespace ({) Whitespace Var Whitespace (: :) Whitespace CType Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NewConstr").build()).addSymbol(Nonterminal.builder("Con").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Var").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ops ::= Op+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ops").build()).addSymbol(Plus.builder(Nonterminal.builder("Op").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TVBinder ::= (() Whitespace TyVar Whitespace (: :) Whitespace Kind Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TVBinder").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TyVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Kind").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TVBinder ::= TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TVBinder").build()).addSymbol(Nonterminal.builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// NewLine ::= (\\u000A | \\u000D)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("NewLine").build()).addSymbol(Alt.builder(CharacterRange.builder(10, 10).build(), CharacterRange.builder(13, 13).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ModId ::= (ConId (.))* ConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ModId").build()).addSymbol(Star.builder(Sequence.builder(Nonterminal.builder("ConId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Digit ::= AscDigit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Digit").build()).addSymbol(Nonterminal.builder("AscDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscDigit ::= (0-9)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscLarge ::= (A-Z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscLarge").build()).addSymbol(Alt.builder(CharacterRange.builder(65, 90).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Deriving ::= (d e r i v i n g) Whitespace (DClass | ((() Whitespace DClass* Whitespace ())))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Deriving").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Alt.builder(Nonterminal.builder("DClass").build(), Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Star.builder(Nonterminal.builder("DClass").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FAType ::= QTyCon Whitespace AType*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FAType").build()).addSymbol(Nonterminal.builder("QTyCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("AType").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (=)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (-)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (%)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(37).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (!)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (>)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (:)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (.)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (*)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (&)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (?)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (/)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(47).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (+)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (<)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= ($)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(36).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (^)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(94).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (@)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (~)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AscSymbol ::= (|)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AscSymbol").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Type ::= BType Whitespace (- >) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("BType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Type ::= BType Whitespace (~) Whitespace BType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("BType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Type ::= BType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Type ::= BType Whitespace Op \  ((.)) Whitespace Type  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("BType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Op").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Type").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Alt ::= Pat Whitespace GDPat Whitespace ((w h e r e) Whitespace Decls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Alt").build()).addSymbol(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("GDPat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Decls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Alt ::= Pat Whitespace (- >) Whitespace Exp Whitespace ((w h e r e) Whitespace Decls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Alt").build()).addSymbol(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Decls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= AscLarge  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Nonterminal.builder("AscLarge").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= (^)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(94).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= (@)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= (_)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Cntrl ::= ([)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Cntrl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CType ::= Type  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Type").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// CType ::= (f o r a l l) Whitespace TVBinder* Whitespace (.) Whitespace CType  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("TVBinder").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// CType ::= Context Whitespace (= >) Whitespace CType  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Context").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// FType ::= FRType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FType").build()).addSymbol(Nonterminal.builder("FRType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// FType ::= FAType Whitespace (- >) Whitespace FType  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FType").build()).addSymbol(Nonterminal.builder("FAType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("FType").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// GCon ::= ([) Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GCon ::= QCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GCon").build()).addSymbol(Nonterminal.builder("QCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GCon ::= (() Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GCon ::= (() Whitespace (,)+ Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GCon").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Octal ::= OctIt OctIt*  !>>  (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Octal").build()).addSymbol(Nonterminal.builder("OctIt").build()).addSymbol(Star.builder(Nonterminal.builder("OctIt").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 55).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// WhiteStuff ::= WhiteChar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("WhiteStuff").build()).addSymbol(Nonterminal.builder("WhiteChar").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// WhiteStuff ::= NComment  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("WhiteStuff").build()).addSymbol(Nonterminal.builder("NComment").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// WhiteStuff ::= Comment  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("WhiteStuff").build()).addSymbol(Nonterminal.builder("Comment").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AExp ::= ([) Whitespace Exp Whitespace ((,) Whitespace Exp)? Whitespace (. .) Whitespace Exp? Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Exp").build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Exp").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= (() Whitespace InfixExp Whitespace QOp Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QOp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= QVar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Nonterminal.builder("QVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([ | |) Whitespace Exp Whitespace (| | ])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build(), Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([) Whitespace Exp Whitespace (|) Whitespace Qual+ Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Qual").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= GCon !>>  (.)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Nonterminal.builder("GCon").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([ p |) Whitespace InfixExp Whitespace (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(112).build(), Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([) Whitespace Exp+ Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Exp").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([ d |) Whitespace TopDecls Whitespace (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(100).build(), Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TopDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= (() Whitespace QOp \  ((-)) Whitespace InfixExp Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QOp").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).build()))).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= (() Whitespace (#)? Whitespace (,)? Whitespace Exp+ Whitespace (,)? Whitespace (#)? Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Exp").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([ t |) Whitespace CType Whitespace (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(116).build(), Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= LiteralH  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Nonterminal.builder("LiteralH").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= ([ |) Whitespace Exp Whitespace (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// AExp ::= AExp Whitespace ({) Whitespace FBind* Whitespace (})  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AExp").build()).addSymbol(Nonterminal.builder("AExp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("FBind").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// Comment ::= Dashes (Any Any*)? (\\u000A)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Comment").build()).addSymbol(Nonterminal.builder("Dashes").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("Any").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(63).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(43).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(47).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(37).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(36).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(94).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(62).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build()).build()).build()).build()))).build(), Star.builder(Nonterminal.builder("Any").build()).build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(10).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Var ::= (() Whitespace VarSym Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Var").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("VarSym").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Var ::= VarId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Var").build()).addSymbol(Nonterminal.builder("VarId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Exponent ::= (E | e) (+ | -)? Decimal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exponent").build()).addSymbol(Alt.builder(CharacterRange.builder(69, 69).build(), CharacterRange.builder(101, 101).build()).build()).addSymbol(Opt.builder(Alt.builder(CharacterRange.builder(43, 43).build(), CharacterRange.builder(45, 45).build()).build()).build()).addSymbol(Nonterminal.builder("Decimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// InfixExp1 ::= LExp1 Whitespace QOp Whitespace InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("LExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QOp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// InfixExp1 ::= LExp1  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp1").build()).addSymbol(Nonterminal.builder("LExp1").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// InfixExp1 ::= (-) Whitespace InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp1").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Pat ::= LPat  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("LPat").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Pat ::= LPat Whitespace QConOp Whitespace Pat  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("LPat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QConOp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Pat").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// DStmts ::= DStmts Whitespace (;)  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmts").build()).addSymbol(Nonterminal.builder("DStmts").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DStmts ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmts").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DStmts ::= (;) Whitespace DStmt  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmts").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("DStmt").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DStmts ::= DStmts Whitespace (;) Whitespace DStmt  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmts").build()).addSymbol(Nonterminal.builder("DStmts").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("DStmt").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DStmts ::= DStmt  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmts").build()).addSymbol(Nonterminal.builder("DStmt").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// Float ::= Decimal Exponent  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Float").build()).addSymbol(Nonterminal.builder("Decimal").build()).addSymbol(Nonterminal.builder("Exponent").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Float ::= Decimal (.) Decimal Exponent?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Float").build()).addSymbol(Nonterminal.builder("Decimal").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Decimal").build()).addSymbol(Opt.builder(Nonterminal.builder("Exponent").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ConSym ::= ((:) Symbol+)  \  ((: :))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConSym").build()).addSymbol(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Plus.builder(Nonterminal.builder("Symbol").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Con ::= (() Whitespace ConSym Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Con").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ConSym").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Con ::= ConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Con").build()).addSymbol(Nonterminal.builder("ConId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Constrs ::= Constr+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Constrs").build()).addSymbol(Plus.builder(Nonterminal.builder("Constr").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= (c a s e) Whitespace Exp Whitespace (o f) Whitespace Alts  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Alts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= (\) Whitespace APat+ Whitespace (- >) Whitespace Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("APat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= (l e t) Whitespace Decls Whitespace (i n) Whitespace Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Decls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= (p r o c) Whitespace AExp Whitespace (- >) Whitespace Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(99).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("AExp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= FExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Nonterminal.builder("FExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= (d o) Whitespace Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LExp ::= (i f) Whitespace Exp Whitespace (;)? Whitespace (t h e n) Whitespace Exp Whitespace (;)? Whitespace (e l s e) Whitespace Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GADTDecls ::= align DGADTDeclsLngstMtch+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GADTDecls").build()).addSymbol(Align.builder(Plus.builder(Nonterminal.builder("DGADTDeclsLngstMtch").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GADTDecls ::= ({) Whitespace GADTDecl+ Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GADTDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("GADTDecl").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DAlts ::= (;) Whitespace Alt  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DAlts").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Alt").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DAlts ::= Alt  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DAlts").build()).addSymbol(Nonterminal.builder("Alt").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DAlts ::= DAlts Whitespace (;) Whitespace Alt  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DAlts").build()).addSymbol(Nonterminal.builder("DAlts").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Alt").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DAlts ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DAlts").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DAlts ::= DAlts Whitespace (;)  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DAlts").build()).addSymbol(Nonterminal.builder("DAlts").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// LiteralH ::= Float (#)  !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Float").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Integer !>>  (#), !>>  (.)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Integer").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= String !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("String").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Char (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Char").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Integer (# #)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Integer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build(), Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Integer (#)  !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Integer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Char !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Char").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Float !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Float").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= Float (# #)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("Float").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build(), Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LiteralH ::= String (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LiteralH").build()).addSymbol(Nonterminal.builder("String").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DImpDecls ::= align offside (ImpDecl Whitespace ((;) Whitespace ImpDecl?)*)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DImpDecls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(Sequence.builder(Nonterminal.builder("ImpDecl").build(), Nonterminal.builder("Whitespace").build(), Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Opt.builder(Nonterminal.builder("ImpDecl").build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build())).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QConId ::= (ModId (.))? ConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QConId").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Body ::= ({) Whitespace (;)* Whitespace ImpDecls Whitespace (;) Whitespace TopDecls Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Body").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ImpDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TopDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Body ::= ({) Whitespace (;)* Whitespace TopDecls Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Body").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TopDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Body ::= ({) Whitespace (;)* Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Body").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Body ::= align (DImpDecls Whitespace DTopDecls)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Body").build()).addSymbol(Align.builder(Sequence.builder(Nonterminal.builder("DImpDecls").build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("DTopDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Body ::= ({) Whitespace (;)* Whitespace ImpDecls Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Body").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ImpDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Any ::= Space  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Any").build()).addSymbol(Nonterminal.builder("Space").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Any ::= Graphic  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Any").build()).addSymbol(Nonterminal.builder("Graphic").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Any ::= Tab  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Any").build()).addSymbol(Nonterminal.builder("Tab").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// PKind ::= (() Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PKind").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// PKind ::= (() Whitespace Kind Whitespace (,) Whitespace Kind+ Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PKind").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Kind").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Kind").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// PKind ::= QTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PKind").build()).addSymbol(Nonterminal.builder("QTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// PKind ::= ([) Whitespace Kind Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("PKind").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Kind").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QTyCon ::= (ModId (.))? TyCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QTyCon").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("TyCon").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Stmts ::= align (align offside DStmts* Whitespace DExpLngstMtch)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Stmts").build()).addSymbol(Align.builder(Sequence.builder(Align.builder(Star.builder(Offside.builder(Nonterminal.builder("DStmts").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build())).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("DExpLngstMtch").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Stmts ::= offside body:(align offside DStmts* when endsWith(stmts.rExt,"";"") Whitespace Exp Whitespace (;)?) Whitespace wsp:Whitespace when $(wsp.rExt) || indent(wsp.rExt) <= indent(body.lExt) || startsWith(wsp.rExt,"")"")  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Stmts").build()).addSymbol(Offside.builder(Sequence.builder(Conditional.builder(Align.builder(Star.builder(Offside.builder(Nonterminal.builder("DStmts").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build())).build()).setLabel("stmts").build(),AST.endsWith(AST.rExt("stmts"),AST.string(";"))).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Exp").build(), Nonterminal.builder("Whitespace").build(), Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).setLabel("body").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Conditional.builder(Nonterminal.builder("Whitespace").setLabel("wsp").build(),AST.or(AST.or(AST.endOfFile(AST.rExt("wsp")),AST.lessEq(AST.indent(AST.rExt("wsp")),AST.indent(AST.lExt("body")))),AST.startsWith(AST.rExt("wsp"),AST.string(")")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Stmts ::= ({) Whitespace Stmt* Whitespace Exp Whitespace (;)? Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Stmts").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("Stmt").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DCDecls ::= DCDecls Whitespace (;) Whitespace CDecl  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DCDecls").build()).addSymbol(Nonterminal.builder("DCDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CDecl").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DCDecls ::= CDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DCDecls").build()).addSymbol(Nonterminal.builder("CDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DCDecls ::= DCDecls Whitespace (;)  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DCDecls").build()).addSymbol(Nonterminal.builder("DCDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DCDecls ::= (;) Whitespace CDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DCDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DCDecls ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DCDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// OctIt ::= (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("OctIt").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 55).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Exports ::= (() Whitespace Export* Whitespace (,)? Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Exports").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("Export").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FDecl ::= (i m p o r t) Whitespace CallConv Whitespace Safety? Whitespace Impent Whitespace Var Whitespace (: :) Whitespace FType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CallConv").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Safety").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Impent").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Var").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("FType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FDecl ::= (e x p o r t) Whitespace CallConv Whitespace Expent Whitespace Var Whitespace (: :) Whitespace FType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CallConv").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Expent").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Var").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("FType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QConOp ::= GConSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QConOp").build()).addSymbol(Nonterminal.builder("GConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QConOp ::= (`) Whitespace QConId Whitespace (`)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QConOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QConId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DTopDecls ::= align offside (TopDecl Whitespace ((;) Whitespace TopDecl?)*)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DTopDecls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(Sequence.builder(Nonterminal.builder("TopDecl").build(), Nonterminal.builder("Whitespace").build(), Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Opt.builder(Nonterminal.builder("TopDecl").build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build())).build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DDecls ::= Decl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DDecls").build()).addSymbol(Nonterminal.builder("Decl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DDecls ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DDecls ::= DDecls Whitespace (;)  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DDecls").build()).addSymbol(Nonterminal.builder("DDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DDecls ::= DDecls Whitespace (;) Whitespace Decl  {UNDEFINED,1,LEFT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DDecls").build()).addSymbol(Nonterminal.builder("DDecls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Decl").build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// DDecls ::= (;) Whitespace Decl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DDecls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Decl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
// Module ::= Body  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Module").build()).addSymbol(Nonterminal.builder("Body").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Module ::= (m o d u l e) Whitespace ModId Whitespace Exports? Whitespace (w h e r e) Whitespace Body  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Module").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ModId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Exports").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Body").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Integer ::= (0 O) Octal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Integer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(79).build()).build()).build()).addSymbol(Nonterminal.builder("Octal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Integer ::= (0 o) Octal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Integer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(111).build()).build()).build()).addSymbol(Nonterminal.builder("Octal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Integer ::= Decimal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Integer").build()).addSymbol(Nonterminal.builder("Decimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Integer ::= (0 x) Hexadecimal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Integer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(120).build()).build()).build()).addSymbol(Nonterminal.builder("Hexadecimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Integer ::= (0 X) Hexadecimal  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Integer").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(48).build(), Character.builder(88).build()).build()).build()).addSymbol(Nonterminal.builder("Hexadecimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CDecl ::= GenDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CDecl").build()).addSymbol(Nonterminal.builder("GenDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CDecl ::= FunLHS Whitespace RHS  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CDecl").build()).addSymbol(Nonterminal.builder("FunLHS").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("RHS").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CDecl ::= AssociatedTypeDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CDecl").build()).addSymbol(Nonterminal.builder("AssociatedTypeDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Import ::= ConId Whitespace (((() Whitespace (. .) Whitespace ())) | ((() Whitespace (QVar | Con)* Whitespace ())))?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Import").build()).addSymbol(Nonterminal.builder("ConId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Alt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build(), Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Star.builder(Alt.builder(Nonterminal.builder("QVar").build(), Nonterminal.builder("Con").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Import ::= Var  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Import").build()).addSymbol(Nonterminal.builder("Var").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Decl ::= FunLHS Whitespace RHS  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Decl").build()).addSymbol(Nonterminal.builder("FunLHS").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("RHS").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Decl ::= GenDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Decl").build()).addSymbol(Nonterminal.builder("GenDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Decl ::= AssociatedTypeDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Decl").build()).addSymbol(Nonterminal.builder("AssociatedTypeDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QVarSym ::= (ModId (.))? VarSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QVarSym").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("VarSym").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (E T X)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(69).build(), Character.builder(84).build(), Character.builder(88).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S O)  !>>  (H)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(79).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(72).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (H T)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(72).build(), Character.builder(84).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (E S C)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(69).build(), Character.builder(83).build(), Character.builder(67).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (^) Cntrl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(94).build()).build()).build()).addSymbol(Nonterminal.builder("Cntrl").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (B S)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(66).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (C A N)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(67).build(), Character.builder(65).build(), Character.builder(78).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (D E L)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(68).build(), Character.builder(69).build(), Character.builder(76).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (N U L)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(78).build(), Character.builder(85).build(), Character.builder(76).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (U S)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(85).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S T X)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(84).build(), Character.builder(88).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S U B)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(85).build(), Character.builder(66).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S O H)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(79).build(), Character.builder(72).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (L F)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(76).build(), Character.builder(70).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (E T B)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(69).build(), Character.builder(84).build(), Character.builder(66).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (D L E)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(68).build(), Character.builder(76).build(), Character.builder(69).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (E M)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(69).build(), Character.builder(77).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (E N Q)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(69).build(), Character.builder(78).build(), Character.builder(81).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (F S)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(70).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (F F)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(70).build(), Character.builder(70).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (N A K)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(78).build(), Character.builder(65).build(), Character.builder(75).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (G S)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(71).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (E O T)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(69).build(), Character.builder(79).build(), Character.builder(84).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (A C K)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(65).build(), Character.builder(67).build(), Character.builder(75).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (B E L)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(66).build(), Character.builder(69).build(), Character.builder(76).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (C R)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(67).build(), Character.builder(82).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (D C 1)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(49).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (D C 4)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(52).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (D C 3)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(51).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (D C 2)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(50).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S Y N)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(89).build(), Character.builder(78).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (V T)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(86).build(), Character.builder(84).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S I)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(73).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (R S)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(82).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Ascii ::= (S P)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Ascii").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(83).build(), Character.builder(80).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LPat ::= APat  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LPat").build()).addSymbol(Nonterminal.builder("APat").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LPat ::= GCon Whitespace APat+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LPat").build()).addSymbol(Nonterminal.builder("GCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("APat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// LPat ::= (-) Whitespace (Float | Integer)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("LPat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Alt.builder(Nonterminal.builder("Float").build(), Nonterminal.builder("Integer").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// HexIt ::= Digit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexIt").build()).addSymbol(Nonterminal.builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// HexIt ::= (A-F | a-f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("HexIt").build()).addSymbol(Alt.builder(CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// RHS ::= GDRHS Whitespace ((w h e r e) Whitespace Decls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("RHS").build()).addSymbol(Nonterminal.builder("GDRHS").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Decls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// RHS ::= (=) Whitespace Exp Whitespace ((w h e r e) Whitespace Decls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("RHS").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Decls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (j v m)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(106).build(), Character.builder(118).build(), Character.builder(109).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (j a v a s c r i p t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(106).build(), Character.builder(97).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(99).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(112).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (c c a l l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(99).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (c a p i)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(112).build(), Character.builder(105).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (p r i m)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(109).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (d o t n e t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(110).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (c p l u s p l u s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(115).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(115).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CallConv ::= (s t d c a l l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CallConv").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(100).build(), Character.builder(99).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Fixity ::= (i n f i x l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Fixity").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Fixity ::= (i n f i x r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Fixity").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Fixity ::= (i n f i x)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Fixity").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Escape ::= (\) (CharEsc | ((o) Octal) | ((x) Hexadecimal) | Decimal | Ascii)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Escape").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).addSymbol(Alt.builder(Nonterminal.builder("CharEsc").build(), Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(111).build()).build()).build(), Nonterminal.builder("Octal").build()).build(), Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(120).build()).build()).build(), Nonterminal.builder("Hexadecimal").build()).build(), Nonterminal.builder("Decimal").build(), Nonterminal.builder("Ascii").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QuasiVarId ::= (')  !<<  (0-9 | A-Z | _ | a-z) (')? Small (Large | Small | Digit)*  !>>  (' | 0-9 | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QuasiVarId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Small").build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("Large").build(), Nonterminal.builder("Small").build(), Nonterminal.builder("Digit").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Alts ::= ({) Whitespace Alt?+ Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Alts").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Opt.builder(Nonterminal.builder("Alt").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Alts ::= align DAltsLngstMtch*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Alts").build()).addSymbol(Align.builder(Star.builder(Nonterminal.builder("DAltsLngstMtch").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AKind ::= (*)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AKind").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AKind ::= TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AKind").build()).addSymbol(Nonterminal.builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AKind ::= PKind  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AKind").build()).addSymbol(Nonterminal.builder("PKind").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AKind ::= (() Whitespace Kind Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AKind").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Kind").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (d e f a u l t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (m o d u l e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (d e r i v i n g)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (o f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i n f i x l)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i n f i x r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (c l a s s)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (w h e r e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (_)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i m p o r t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (d a t a)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (c a s e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (t y p e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (t h e n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (l e t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (e l s e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (n e w t y p e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (f o r e i g n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i n f i x)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (i n s t a n c e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedId ::= (d o)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Dashes ::= (- -) (-)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Dashes").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(45).build()).build()).build()).addSymbol(Star.builder(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// VarId ::= (Small (Small | Digit | Large | ('))*)  !<<  (0-9 | A-Z | _ | a-z)  !>>  (#)  !>>  (' | 0-9 | A-Z | _ | a-z)  \  ((l e t) | (c l a s s) | (_) | (i n f i x l) | (o f) | (i n s t a n c e) | (f o r e i g n) | (d o) | (d a t a) | (m o d u l e) | (i n f i x r) | (d e f a u l t) | (w h e r e) | (d e r i v i n g) | (t y p e) | (n e w t y p e) | (e l s e) | (t h e n) | (i f) | (c a s e) | (i n f i x) | (i m p o r t) | (i n))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VarId").build()).addSymbol(Sequence.builder(Nonterminal.builder("Small").build(), Star.builder(Alt.builder(Nonterminal.builder("Small").build(), Nonterminal.builder("Digit").build(), Nonterminal.builder("Large").build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).build()).addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// VarId ::= (Small (Small | Digit | Large | ('))*)  !<<  (0-9 | A-Z | _ | a-z)  !>>  (' | 0-9 | A-Z | _ | a-z)  \  ((l e t) | (c l a s s) | (_) | (i n f i x l) | (o f) | (i n s t a n c e) | (f o r e i g n) | (d o) | (d a t a) | (m o d u l e) | (i n f i x r) | (d e f a u l t) | (w h e r e) | (d e r i v i n g) | (t y p e) | (n e w t y p e) | (e l s e) | (t h e n) | (i f) | (c a s e) | (i n f i x) | (i m p o r t) | (i n)) (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VarId").build()).addSymbol(Sequence.builder(Nonterminal.builder("Small").build(), Star.builder(Alt.builder(Nonterminal.builder("Small").build(), Nonterminal.builder("Digit").build(), Nonterminal.builder("Large").build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).build()).addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).build()))).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// VarId ::= QuasiVarId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VarId").build()).addSymbol(Nonterminal.builder("QuasiVarId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// VarOp ::= (`) Whitespace VarId Whitespace (`)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VarOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("VarId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// VarOp ::= VarSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VarOp").build()).addSymbol(Nonterminal.builder("VarSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (: :)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (< -)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (. .)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (> -)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (= >)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (:)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (=)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (@)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (> > -)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (- < <)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build(), Character.builder(60).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (|)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (~)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (- <)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ReservedOp ::= (- >)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ReservedOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Whitespace ::= WhiteStuff*  !>>  (\u0009-\u000B | \\u000D | \u0020)  !>>  ({ -)  !>>  (- -)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("WhiteStuff").build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(9, 11).build(), CharacterRange.builder(13, 13).build(), CharacterRange.builder(32, 32).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(123).build(), Character.builder(45).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(45).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FBind ::= QVar Whitespace ((=) Whitespace Exp)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FBind").build()).addSymbol(Nonterminal.builder("QVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Exp").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// BType ::= BType? Whitespace (!)? Whitespace AType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("BType").build()).addSymbol(Opt.builder(Nonterminal.builder("BType").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("AType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TypeFamilyInstEqn ::= Type Whitespace (=) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TypeFamilyInstEqn").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// InfixExp ::= LExp1 Whitespace QOp Whitespace InfixExp  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp").build()).addSymbol(Nonterminal.builder("LExp1").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QOp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// InfixExp ::= LExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp").build()).addSymbol(Nonterminal.builder("LExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// InfixExp ::= ($ () Whitespace Exp Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(36).build(), Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// InfixExp ::= (-) Whitespace InfixExp  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("InfixExp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// Constr ::= BType Whitespace ConOp Whitespace BType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Constr").build()).addSymbol(Nonterminal.builder("BType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ConOp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Constr ::= ((f o r a l l) Whitespace TVBinder* Whitespace (.))? Whitespace Con Whitespace ({) Whitespace FieldDecl* Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Constr").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Star.builder(Nonterminal.builder("TVBinder").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Whitespace").build())).build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Con").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("FieldDecl").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Constr ::= Con Whitespace ((!)? Whitespace AType)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Constr").build()).addSymbol(Nonterminal.builder("Con").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Sequence.builder(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("AType").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Constr ::= (f o r a l l) Whitespace TVBinder* Whitespace (.) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Constr").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("TVBinder").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// String ::= (") (Gap | Escape | Graphic | Space)* (")  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("String").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(34).build()).build()).build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("Gap").build(), Nonterminal.builder("Escape").build(), Nonterminal.builder("Graphic").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(34, 34).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build(), Nonterminal.builder("Space").build()).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(34).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Kind ::= AKind* Whitespace ((- >) Whitespace Kind)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Kind").build()).addSymbol(Star.builder(Nonterminal.builder("AKind").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Kind").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Decls ::= ({) Whitespace Decl?+ Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Decls").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Opt.builder(Nonterminal.builder("Decl").build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Decls ::= align DDeclsLngstMtch*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Decls").build()).addSymbol(Align.builder(Star.builder(Nonterminal.builder("DDeclsLngstMtch").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FRType ::= FAType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FRType").build()).addSymbol(Nonterminal.builder("FAType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FRType ::= (() Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FRType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= Special  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Nonterminal.builder("Special").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= Small  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Nonterminal.builder("Small").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= Symbol  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Nonterminal.builder("Symbol").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= Digit  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Nonterminal.builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= Large  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Nonterminal.builder("Large").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= (")  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(34).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Graphic ::= (')  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Graphic").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QuasiConId ::= (')  !<<  (0-9 | A-Z | _ | a-z) (')? Large (Large | Small | Digit)*  !>>  (' | 0-9 | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QuasiConId").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Large").build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("Large").build(), Nonterminal.builder("Small").build(), Nonterminal.builder("Digit").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AType ::= (() Whitespace (#)? Whitespace CType+ Whitespace (#)? Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("CType").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AType ::= ([) Whitespace CType Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AType ::= (() Whitespace CType Whitespace (: :) Whitespace Kind Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AType").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Kind").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AType ::= GTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AType").build()).addSymbol(Nonterminal.builder("GTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AType ::= TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AType").build()).addSymbol(Nonterminal.builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// APat ::= (_)  !>>  (- | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(45, 45).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= (() Whitespace ((_) | Var) Whitespace (: :) Whitespace CType Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build(), Nonterminal.builder("Var").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= (() Whitespace (#)? Whitespace Pat+ Whitespace (#)? Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Pat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= LiteralH  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Nonterminal.builder("LiteralH").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= GCon  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Nonterminal.builder("GCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= (~) Whitespace APat  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("APat").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= ([) Whitespace Pat+ Whitespace (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("Pat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= Var Whitespace ((@) Whitespace APat)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Nonterminal.builder("Var").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("APat").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= QCon Whitespace ({) Whitespace FPat* Whitespace (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Nonterminal.builder("QCon").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("FPat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// APat ::= (!) Whitespace APat  {UNDEFINED,1,RIGHT_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("APat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("APat").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
// QOp ::= QConOp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QOp").build()).addSymbol(Nonterminal.builder("QConOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QOp ::= QVarOp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QOp").build()).addSymbol(Nonterminal.builder("QVarOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AssociatedTypeDecl ::= (t y p e) Whitespace (i n s t a n c e)? Whitespace TypeFamilyInstEqn  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssociatedTypeDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("TypeFamilyInstEqn").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// AssociatedTypeDecl ::= (t y p e) Whitespace (f a m i l y)? Whitespace Type Whitespace ((: :) Whitespace Kind)? Whitespace ((w h e r e) Whitespace CDecls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("AssociatedTypeDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(109).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Kind").build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("CDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Tab ::= \u0009  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Tab").build()).addSymbol(Character.builder(9).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QConSym ::= (ModId (.))? ConSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QConSym").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("ModId").build(), Terminal.builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("ConSym").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// VarSym ::= (Symbol \  ((:)) Symbol*)  !>>  (! | #-& | *-+ | --/ | : | <-@ | \ | ^ | | | ~)  \  ((:) | (~) | (=) | (= >) | (\) | (|) | (< -) | (- >) | (> -) | (- <) | (> > -) | (- < <) | (: :) | (. .) | (@))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("VarSym").build()).addSymbol(Sequence.builder(Nonterminal.builder("Symbol").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build()).build()))).build(), Star.builder(Nonterminal.builder("Symbol").build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(35, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(92, 92).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(58).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(126).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(124).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(45).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(45).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build(), Character.builder(60).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(64).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= (()  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= (,)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= (])  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(93).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= ([)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(91).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= (})  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(125).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= (`)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Special ::= ({)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Special").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(123).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecls ::= TopDecl Whitespace ((;) Whitespace TopDecl?)*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecls").build()).addSymbol(Nonterminal.builder("TopDecl").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(59).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Opt.builder(Nonterminal.builder("TopDecl").build()).build()).build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QVar ::= (() Whitespace QVarSym Whitespace ())  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QVar").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QVarSym").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QVar ::= QVarId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QVar").build()).addSymbol(Nonterminal.builder("QVarId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DDeclsLngstMtch ::= offside DDecls wsp:Whitespace when endsWith(ds.rExt,"";"") || $(wsp.rExt) || startsWith(wsp.rExt,""in"") || indent(wsp.rExt) <= indent(ds.lExt)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DDeclsLngstMtch").build()).addSymbol(Offside.builder(Nonterminal.builder("DDecls").build()).setLabel("ds").build()).addSymbol(Conditional.builder(Nonterminal.builder("Whitespace").setLabel("wsp").build(),AST.or(AST.or(AST.or(AST.endsWith(AST.rExt("ds"),AST.string(";")),AST.endOfFile(AST.rExt("wsp"))),AST.startsWith(AST.rExt("wsp"),AST.string("in"))),AST.lessEq(AST.indent(AST.rExt("wsp")),AST.indent(AST.lExt("ds"))))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TyVar ::= VarId \  ((f o r a l l) | (f a m i l y))  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TyVar").build()).addSymbol(Nonterminal.builder("VarId").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build(), Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(109).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Safety ::= (u n s a f e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Safety").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(117).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(97).build(), Character.builder(102).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Safety ::= (s a f e)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Safety").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(115).build(), Character.builder(97).build(), Character.builder(102).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ConOp ::= (`) Whitespace ConId Whitespace (`)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConOp").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("ConId").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ConOp ::= ConSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConOp").build()).addSymbol(Nonterminal.builder("ConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Vars ::= Var+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Vars").build()).addSymbol(Plus.builder(Nonterminal.builder("Var").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Qual ::= ((_) | Var) Whitespace (: :) Whitespace CType Whitespace (< -) Whitespace Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Qual").build()).addSymbol(Alt.builder(Terminal.builder(Sequence.builder(Character.builder(95).build()).build()).build(), Nonterminal.builder("Var").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Qual ::= (l e t) Whitespace Decls  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Qual").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Decls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Qual ::= Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Qual").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Qual ::= Pat Whitespace (< -) Whitespace Exp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Qual").build()).addSymbol(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CName ::= Var  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CName").build()).addSymbol(Nonterminal.builder("Var").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CName ::= Con  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CName").build()).addSymbol(Nonterminal.builder("Con").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Expent ::= String?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Expent").build()).addSymbol(Opt.builder(Nonterminal.builder("String").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ConId ::=  !<<  (0-9 | A-Z | _ | a-z)Large (Small | Digit | Large | ('))*  !>>  (' | 0-9 | A-Z | _ | a-z) (#)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConId").build()).addSymbol(Nonterminal.builder("Large").addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("Small").build(), Nonterminal.builder("Digit").build(), Nonterminal.builder("Large").build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ConId ::=  !<<  (0-9 | A-Z | _ | a-z)Large (Small | Digit | Large | ('))*  !>>  (#)  !>>  (' | 0-9 | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConId").build()).addSymbol(Nonterminal.builder("Large").addPreConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Star.builder(Alt.builder(Nonterminal.builder("Small").build(), Nonterminal.builder("Digit").build(), Nonterminal.builder("Large").build(), Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Terminal.builder(Sequence.builder(Character.builder(35).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// ConId ::= QuasiConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("ConId").build()).addSymbol(Nonterminal.builder("QuasiConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (c l a s s) Whitespace (Context Whitespace (= >))? Whitespace Type Whitespace Fds? Whitespace ((w h e r e) Whitespace CDecls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("Context").build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Fds").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("CDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (n e w t y p e) Whitespace (Context Whitespace (= >))? Whitespace Type Whitespace (=) Whitespace NewConstr Whitespace Deriving?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("Context").build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("NewConstr").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Deriving").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= Decl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Nonterminal.builder("Decl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (d a t a) Whitespace (Context Whitespace (= >))? Whitespace Type Whitespace ((=) Whitespace Constrs)? Whitespace Deriving?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("Context").build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Constrs").build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Deriving").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (f o r e i g n) Whitespace FDecl  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("FDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (i n s t a n c e) Whitespace CType Whitespace ((w h e r e) Whitespace CDecls)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("CDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (d e r i v i n g) Whitespace (i n s t a n c e) Whitespace (Context Whitespace (= >))? Whitespace QTyCls Whitespace Inst  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("Context").build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("QTyCls").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Inst").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Nonterminal.builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (d e f a u l t) Whitespace Type*  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Star.builder(Nonterminal.builder("Type").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(44).build()).build()).build(), Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TopDecl ::= (d a t a) Whitespace (Context Whitespace (= >))? Whitespace Type Whitespace ((: :) Whitespace Kind)? Whitespace (w h e r e) Whitespace GADTDecls  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TopDecl").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("Context").build(), Nonterminal.builder("Whitespace").build(), Terminal.builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Type").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Kind").build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("GADTDecls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Op ::= ConOp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Op").build()).addSymbol(Nonterminal.builder("ConOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Op ::= VarOp  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Op").build()).addSymbol(Nonterminal.builder("VarOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Impent ::= String?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Impent").build()).addSymbol(Opt.builder(Nonterminal.builder("String").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FunLHS ::= (() Whitespace FunLHS Whitespace ()) Whitespace APat+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FunLHS").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("FunLHS").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("APat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FunLHS ::= Pat Whitespace (VarOp Whitespace Pat)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FunLHS").build()).addSymbol(Nonterminal.builder("Pat").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Nonterminal.builder("VarOp").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Terminal.builder(Sequence.builder(Character.builder(33).build()).build()).build()).build()))).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Pat").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FunLHS ::= Var Whitespace APat+  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FunLHS").build()).addSymbol(Nonterminal.builder("Var").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Plus.builder(Nonterminal.builder("APat").build()).addSeparators(Arrays.asList(Nonterminal.builder("Whitespace").build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FPat ::= (. .)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FPat").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// FPat ::= QVar Whitespace ((=) Whitespace Pat)?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("FPat").build()).addSymbol(Nonterminal.builder("QVar").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Sequence.builder(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build(), Nonterminal.builder("Whitespace").build(), Nonterminal.builder("Pat").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// TyCon ::= ConId  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("TyCon").build()).addSymbol(Nonterminal.builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DStmt ::= Qual  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmt").build()).addSymbol(Nonterminal.builder("Qual").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DStmt ::= (r e c) Whitespace Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DStmt").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QTyConSym ::= (*)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QTyConSym").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(42).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QTyConSym ::= QVarSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QTyConSym").build()).addSymbol(Nonterminal.builder("QVarSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// QTyConSym ::= QConSym  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("QTyConSym").build()).addSymbol(Nonterminal.builder("QConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (a)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(97).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (t)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (r)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (v)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(118).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (b)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(98).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (f)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (n)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (')  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (")  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(34).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// CharEsc ::= (&)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("CharEsc").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// DAltsLngstMtch ::= offside DAlts wsp:Whitespace when endsWith(as.rExt,"";"") || $(wsp.rExt) || indent(wsp.rExt) <= indent(as.lExt) || startsWith(wsp.rExt,"")"")  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("DAltsLngstMtch").build()).addSymbol(Offside.builder(Nonterminal.builder("DAlts").build()).setLabel("as").build()).addSymbol(Conditional.builder(Nonterminal.builder("Whitespace").setLabel("wsp").build(),AST.or(AST.or(AST.or(AST.endsWith(AST.rExt("as"),AST.string(";")),AST.endOfFile(AST.rExt("wsp"))),AST.lessEq(AST.indent(AST.rExt("wsp")),AST.indent(AST.lExt("as")))),AST.startsWith(AST.rExt("wsp"),AST.string(")")))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Char ::= (') (Escape | Space | Graphic) (')  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Char").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Alt.builder(Nonterminal.builder("Escape").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(38, 38).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build(), Nonterminal.builder("Space").build(), Nonterminal.builder("Graphic").addPostConditions(Sets.newHashSet(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(39).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// Gap ::= (\) WhiteChar WhiteChar* (\)  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("Gap").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).addSymbol(Nonterminal.builder("WhiteChar").build()).addSymbol(Star.builder(Nonterminal.builder("WhiteChar").build()).build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GenDecl ::= Vars Whitespace (: :) Whitespace CType  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GenDecl").build()).addSymbol(Nonterminal.builder("Vars").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GenDecl ::= Fixity Whitespace Integer? Whitespace Ops  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GenDecl").build()).addSymbol(Nonterminal.builder("Fixity").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("Integer").build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Ops").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
// GDRHS ::= Guards Whitespace (=) Whitespace Exp Whitespace GDRHS?  {UNDEFINED,-1,NON_REC} PREC(1,1) 
.addRule(Rule.withHead(Nonterminal.builder("GDRHS").build()).addSymbol(Nonterminal.builder("Guards").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Terminal.builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Nonterminal.builder("Exp").build()).addSymbol(Nonterminal.builder("Whitespace").build()).addSymbol(Opt.builder(Nonterminal.builder("GDRHS").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
.build();

         DesugarAlignAndOffside desugarAlignAndOffside = new DesugarAlignAndOffside();
         desugarAlignAndOffside.doAlign();

         grammar = desugarAlignAndOffside.transform(grammar);
         // System.out.println(grammar.toStringWithOrderByPrecedence());

         grammar = new EBNFToBNF().transform(grammar);
         // System.out.println(grammar);

         desugarAlignAndOffside.doOffside();
         grammar = desugarAlignAndOffside.transform(grammar);
         // System.out.println(grammar.toStringWithOrderByPrecedence());

         grammar = new DesugarPrecedenceAndAssociativity().transform(grammar);
         // System.out.println(grammar.toStringWithOrderByPrecedence());

         grammar = new LayoutWeaver().transform(grammar);

         Input input = Input.fromPath(SelectedFiles.files[13]);
         GrammarGraph graph = grammar.toGrammarGraph(input, Configuration.DEFAULT);

         // Visualization.generateGrammarGraph("/Users/anastasiaizmaylova/git/diguana/test/org/jgll/parser/datadependent/haskell/", graph);

         GLLParser parser = ParserFactory.getParser(Configuration.DEFAULT, input, grammar);
         ParseResult result = parser.parse(input, graph, Start.from(Nonterminal.withName("Module")));

         System.out.println(result);
         
         Assert.assertTrue(result.isParseSuccess());
         
         SelectedFiles.getVisitor(input).visit(result.asParseSuccess().getRoot());

         // Visualization.generateSPPFGraph("/Users/anastasiaizmaylova/git/diguana/test/org/jgll/parser/datadependent/haskell/",
         //                   result.asParseSuccess().getRoot(), input);

         Assert.assertTrue(result.asParseSuccess().getStatistics().getCountAmbiguousNodes() == 0);
    }
}
