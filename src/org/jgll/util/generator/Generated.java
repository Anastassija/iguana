package org.jgll.util.generator;

import java.util.*;
import org.jgll.grammar.slot.*;
import org.jgll.grammar.slot.specialized.*;
import org.jgll.grammar.slot.nodecreator.*;
import org.jgll.grammar.slot.test.*;
import org.jgll.grammar.symbol.Character;
import org.jgll.grammar.symbol.*;
import org.jgll.regex.*;
import org.jgll.parser.NewGLLParserImpl;
import org.jgll.parser.descriptor.Descriptor;
import org.jgll.parser.lookup.factory.*;
import org.jgll.sppf.*;
import org.jgll.grammar.condition.*;
import org.jgll.grammar.slotaction.*;
import org.jgll.util.logging.LoggerWrapper;
import com.google.common.collect.Sets;
import static org.jgll.grammar.condition.ConditionType.*;
import static org.jgll.util.CollectionsUtil.*;

@SuppressWarnings("unchecked")
public class Generated extends NewGLLParserImpl {

private static final LoggerWrapper log = LoggerWrapper.getLogger(Generated.class);
private static final int L0 = -1;

private int cs; // Current grammar slot
private int length; // The length of matched terminal

private Map<String, HeadGrammarSlot> startSymbols = new HashMap<>();
private HeadGrammarSlot slot0;
private HeadGrammarSlot slot1;
private HeadGrammarSlot slot4;
private HeadGrammarSlot slot7;
private HeadGrammarSlot slot9;
private HeadGrammarSlot slot13;
private HeadGrammarSlot slot16;
private HeadGrammarSlot slot23;
private HeadGrammarSlot slot34;
private HeadGrammarSlot slot37;
private HeadGrammarSlot slot40;
private HeadGrammarSlot slot41;
private HeadGrammarSlot slot44;
private HeadGrammarSlot slot47;
private HeadGrammarSlot slot48;
private HeadGrammarSlot slot53;
private HeadGrammarSlot slot56;
private HeadGrammarSlot slot59;
private HeadGrammarSlot slot64;
private HeadGrammarSlot slot65;
private HeadGrammarSlot slot68;
private HeadGrammarSlot slot71;
private HeadGrammarSlot slot74;
private HeadGrammarSlot slot75;
private HeadGrammarSlot slot80;
private HeadGrammarSlot slot85;
private HeadGrammarSlot slot94;
private HeadGrammarSlot slot99;
private HeadGrammarSlot slot102;
private HeadGrammarSlot slot103;
private HeadGrammarSlot slot105;
private HeadGrammarSlot slot108;
private HeadGrammarSlot slot109;
private HeadGrammarSlot slot113;
private HeadGrammarSlot slot115;
private HeadGrammarSlot slot118;
private HeadGrammarSlot slot119;
private HeadGrammarSlot slot123;
private HeadGrammarSlot slot125;
private HeadGrammarSlot slot129;
private HeadGrammarSlot slot130;
private HeadGrammarSlot slot135;
private HeadGrammarSlot slot140;
private HeadGrammarSlot slot145;
private HeadGrammarSlot slot164;
private HeadGrammarSlot slot205;
private HeadGrammarSlot slot210;
private HeadGrammarSlot slot212;
private HeadGrammarSlot slot216;
private HeadGrammarSlot slot217;
private HeadGrammarSlot slot220;
private HeadGrammarSlot slot223;
private HeadGrammarSlot slot226;
private HeadGrammarSlot slot229;
private HeadGrammarSlot slot234;
private HeadGrammarSlot slot243;
private HeadGrammarSlot slot248;
private HeadGrammarSlot slot250;
private HeadGrammarSlot slot258;
private HeadGrammarSlot slot260;
private HeadGrammarSlot slot273;
private HeadGrammarSlot slot280;
private HeadGrammarSlot slot283;
private HeadGrammarSlot slot286;
private HeadGrammarSlot slot291;
private HeadGrammarSlot slot294;
private HeadGrammarSlot slot299;
private HeadGrammarSlot slot308;
private HeadGrammarSlot slot309;
private HeadGrammarSlot slot312;
private HeadGrammarSlot slot315;
private HeadGrammarSlot slot316;
private HeadGrammarSlot slot319;
private HeadGrammarSlot slot322;
private HeadGrammarSlot slot326;
private HeadGrammarSlot slot327;
private HeadGrammarSlot slot334;
private HeadGrammarSlot slot339;
private HeadGrammarSlot slot344;
private HeadGrammarSlot slot353;
private HeadGrammarSlot slot354;
private HeadGrammarSlot slot356;
private HeadGrammarSlot slot362;
private HeadGrammarSlot slot365;
private HeadGrammarSlot slot370;
private HeadGrammarSlot slot373;
private HeadGrammarSlot slot376;
private HeadGrammarSlot slot381;
private HeadGrammarSlot slot386;
private HeadGrammarSlot slot389;
private HeadGrammarSlot slot392;
private HeadGrammarSlot slot393;
private HeadGrammarSlot slot396;
private HeadGrammarSlot slot399;
private HeadGrammarSlot slot400;
private HeadGrammarSlot slot405;
private HeadGrammarSlot slot408;
private HeadGrammarSlot slot415;
private HeadGrammarSlot slot420;
private HeadGrammarSlot slot424;
private HeadGrammarSlot slot427;
private HeadGrammarSlot slot430;
private HeadGrammarSlot slot435;
private HeadGrammarSlot slot442;
private HeadGrammarSlot slot445;
private HeadGrammarSlot slot448;
private HeadGrammarSlot slot451;
private HeadGrammarSlot slot456;
private HeadGrammarSlot slot461;
private HeadGrammarSlot slot464;
private HeadGrammarSlot slot465;
private HeadGrammarSlot slot470;
private HeadGrammarSlot slot471;
private HeadGrammarSlot slot474;
private HeadGrammarSlot slot476;
private HeadGrammarSlot slot498;
private HeadGrammarSlot slot502;
private HeadGrammarSlot slot505;
private HeadGrammarSlot slot508;
private HeadGrammarSlot slot517;
private HeadGrammarSlot slot520;
private HeadGrammarSlot slot523;
private HeadGrammarSlot slot528;
private HeadGrammarSlot slot532;
private HeadGrammarSlot slot533;
private HeadGrammarSlot slot537;
private HeadGrammarSlot slot539;
private HeadGrammarSlot slot542;
private HeadGrammarSlot slot547;
private HeadGrammarSlot slot554;
private HeadGrammarSlot slot555;
private HeadGrammarSlot slot558;
private HeadGrammarSlot slot561;
private HeadGrammarSlot slot662;
private HeadGrammarSlot slot663;
private HeadGrammarSlot slot666;
private HeadGrammarSlot slot669;
private HeadGrammarSlot slot670;
private HeadGrammarSlot slot675;
private HeadGrammarSlot slot676;
private HeadGrammarSlot slot689;
private HeadGrammarSlot slot694;
private HeadGrammarSlot slot699;
private HeadGrammarSlot slot730;
private HeadGrammarSlot slot732;
private HeadGrammarSlot slot736;
private HeadGrammarSlot slot739;
private HeadGrammarSlot slot743;
private HeadGrammarSlot slot745;
private HeadGrammarSlot slot748;
private HeadGrammarSlot slot751;
private HeadGrammarSlot slot756;
private HeadGrammarSlot slot761;
private HeadGrammarSlot slot764;
private HeadGrammarSlot slot767;
private HeadGrammarSlot slot771;
private HeadGrammarSlot slot780;
private HeadGrammarSlot slot792;
private HeadGrammarSlot slot796;
private HeadGrammarSlot slot798;
private HeadGrammarSlot slot801;
private HeadGrammarSlot slot803;
private HeadGrammarSlot slot806;
private HeadGrammarSlot slot822;
private HeadGrammarSlot slot826;
private HeadGrammarSlot slot827;
private HeadGrammarSlot slot840;
private HeadGrammarSlot slot843;
private HeadGrammarSlot slot848;
private HeadGrammarSlot slot859;
private HeadGrammarSlot slot864;
private HeadGrammarSlot slot870;
private HeadGrammarSlot slot874;
private HeadGrammarSlot slot877;
private HeadGrammarSlot slot878;
private HeadGrammarSlot slot893;
private HeadGrammarSlot slot895;
private HeadGrammarSlot slot898;
private HeadGrammarSlot slot908;
private HeadGrammarSlot slot911;
private HeadGrammarSlot slot915;
private HeadGrammarSlot slot918;
private HeadGrammarSlot slot921;
private HeadGrammarSlot slot922;
private HeadGrammarSlot slot929;
private HeadGrammarSlot slot932;
private HeadGrammarSlot slot939;
private HeadGrammarSlot slot942;
private HeadGrammarSlot slot987;
private HeadGrammarSlot slot988;
private HeadGrammarSlot slot991;
private HeadGrammarSlot slot994;
private HeadGrammarSlot slot1009;
private HeadGrammarSlot slot1016;
private HeadGrammarSlot slot1019;
private HeadGrammarSlot slot1022;
private HeadGrammarSlot slot1029;
private HeadGrammarSlot slot1038;
private HeadGrammarSlot slot1041;
private HeadGrammarSlot slot1045;
private HeadGrammarSlot slot1048;
private HeadGrammarSlot slot1053;
private HeadGrammarSlot slot1058;
private HeadGrammarSlot slot1063;
private HeadGrammarSlot slot1064;
private HeadGrammarSlot slot1071;
private HeadGrammarSlot slot1076;
private HeadGrammarSlot slot1109;
private HeadGrammarSlot slot1114;
private HeadGrammarSlot slot1116;
private HeadGrammarSlot slot1119;
private HeadGrammarSlot slot1131;
private HeadGrammarSlot slot1132;
private HeadGrammarSlot slot1140;
private HeadGrammarSlot slot1145;
private HeadGrammarSlot slot1153;
private HeadGrammarSlot slot1156;
private HeadGrammarSlot slot1165;
private HeadGrammarSlot slot1187;
private HeadGrammarSlot slot1190;
private HeadGrammarSlot slot1195;
private HeadGrammarSlot slot1220;
private HeadGrammarSlot slot1229;
private HeadGrammarSlot slot1236;
private HeadGrammarSlot slot1243;
private HeadGrammarSlot slot1258;
private HeadGrammarSlot slot1259;
private HeadGrammarSlot slot1263;
private HeadGrammarSlot slot1280;
private HeadGrammarSlot slot1285;
private HeadGrammarSlot slot1297;
private HeadGrammarSlot slot1319;
private HeadGrammarSlot slot1338;
private HeadGrammarSlot slot1343;
private HeadGrammarSlot slot1348;
private HeadGrammarSlot slot1349;
private HeadGrammarSlot slot1364;
private HeadGrammarSlot slot1369;
private HeadGrammarSlot slot1370;
private HeadGrammarSlot slot1374;
private HeadGrammarSlot slot1395;
private HeadGrammarSlot slot1403;
private HeadGrammarSlot slot1406;
private HeadGrammarSlot slot1411;
private HeadGrammarSlot slot1418;
private HeadGrammarSlot slot1429;
private HeadGrammarSlot slot1434;
private HeadGrammarSlot slot1441;
private HeadGrammarSlot slot1460;
private HeadGrammarSlot slot1465;
private HeadGrammarSlot slot1475;
private HeadGrammarSlot slot1480;
private HeadGrammarSlot slot1488;
private HeadGrammarSlot slot1489;
private HeadGrammarSlot slot1506;
private HeadGrammarSlot slot1512;
private HeadGrammarSlot slot1519;
private HeadGrammarSlot slot1526;
private HeadGrammarSlot slot1539;
private HeadGrammarSlot slot1540;
private HeadGrammarSlot slot1543;
private HeadGrammarSlot slot1546;
private HeadGrammarSlot slot1555;
private HeadGrammarSlot slot1558;
private HeadGrammarSlot slot1565;
private HeadGrammarSlot slot1566;
private HeadGrammarSlot slot1569;
private HeadGrammarSlot slot1574;
private HeadGrammarSlot slot1581;
private HeadGrammarSlot slot1585;
private HeadGrammarSlot slot1599;
private HeadGrammarSlot slot1604;
private HeadGrammarSlot slot1611;
private HeadGrammarSlot slot1631;
private HeadGrammarSlot slot1642;
private HeadGrammarSlot slot1646;
private HeadGrammarSlot slot1657;
private HeadGrammarSlot slot1674;
private HeadGrammarSlot slot1700;
private HeadGrammarSlot slot1701;
private HeadGrammarSlot slot1704;
private HeadGrammarSlot slot1722;
private HeadGrammarSlot slot1729;
private HeadGrammarSlot slot1731;
private HeadGrammarSlot slot1734;
private HeadGrammarSlot slot1738;
private HeadGrammarSlot slot1744;
private HeadGrammarSlot slot1747;
private HeadGrammarSlot slot1765;
private HeadGrammarSlot slot1779;
private HeadGrammarSlot slot1784;
private HeadGrammarSlot slot1805;
private HeadGrammarSlot slot1854;
private HeadGrammarSlot slot1861;
private HeadGrammarSlot slot1869;
private HeadGrammarSlot slot1880;
private HeadGrammarSlot slot1942;
private HeadGrammarSlot slot2026;
private HeadGrammarSlot slot2038;
private HeadGrammarSlot slot2056;
private HeadGrammarSlot slot2061;
private HeadGrammarSlot slot2063;
private HeadGrammarSlot slot2067;
private HeadGrammarSlot slot2076;
private HeadGrammarSlot slot2080;
private HeadGrammarSlot slot2085;
private HeadGrammarSlot slot2086;
private HeadGrammarSlot slot2113;
private HeadGrammarSlot slot2162;
private HeadGrammarSlot slot2177;
private HeadGrammarSlot slot2184;
private HeadGrammarSlot slot2189;
private HeadGrammarSlot slot2192;
private HeadGrammarSlot slot2235;
private HeadGrammarSlot slot2256;
private HeadGrammarSlot slot2267;
private HeadGrammarSlot slot2299;
private HeadGrammarSlot slot2315;
private HeadGrammarSlot slot2321;
private HeadGrammarSlot slot2325;
private HeadGrammarSlot slot2346;
private HeadGrammarSlot slot2356;
private HeadGrammarSlot slot2422;
private HeadGrammarSlot slot2449;
private HeadGrammarSlot slot2503;
private HeadGrammarSlot slot2541;
private HeadGrammarSlot slot2544;
private HeadGrammarSlot slot2567;
private HeadGrammarSlot slot2570;
private BodyGrammarSlot slot2;
private BodyGrammarSlot slot3;
private BodyGrammarSlot slot5;
private BodyGrammarSlot slot6;
private BodyGrammarSlot slot482;
private BodyGrammarSlot slot483;
private BodyGrammarSlot slot484;
private BodyGrammarSlot slot485;
private BodyGrammarSlot slot486;
private BodyGrammarSlot slot487;
private BodyGrammarSlot slot488;
private BodyGrammarSlot slot489;
private BodyGrammarSlot slot490;
private BodyGrammarSlot slot491;
private BodyGrammarSlot slot492;
private BodyGrammarSlot slot493;
private BodyGrammarSlot slot494;
private BodyGrammarSlot slot495;
private BodyGrammarSlot slot496;
private BodyGrammarSlot slot497;
private BodyGrammarSlot slot443;
private BodyGrammarSlot slot444;
private BodyGrammarSlot slot446;
private BodyGrammarSlot slot447;
private BodyGrammarSlot slot449;
private BodyGrammarSlot slot450;
private BodyGrammarSlot slot8;
private BodyGrammarSlot slot10;
private BodyGrammarSlot slot11;
private BodyGrammarSlot slot12;
private BodyGrammarSlot slot14;
private BodyGrammarSlot slot15;
private BodyGrammarSlot slot17;
private BodyGrammarSlot slot18;
private BodyGrammarSlot slot19;
private BodyGrammarSlot slot20;
private BodyGrammarSlot slot21;
private BodyGrammarSlot slot22;
private BodyGrammarSlot slot24;
private BodyGrammarSlot slot25;
private BodyGrammarSlot slot26;
private BodyGrammarSlot slot27;
private BodyGrammarSlot slot28;
private BodyGrammarSlot slot29;
private BodyGrammarSlot slot30;
private BodyGrammarSlot slot31;
private BodyGrammarSlot slot32;
private BodyGrammarSlot slot33;
private BodyGrammarSlot slot2430;
private BodyGrammarSlot slot2431;
private BodyGrammarSlot slot462;
private BodyGrammarSlot slot463;
private BodyGrammarSlot slot818;
private BodyGrammarSlot slot819;
private BodyGrammarSlot slot820;
private BodyGrammarSlot slot821;
private BodyGrammarSlot slot2319;
private BodyGrammarSlot slot2320;
private BodyGrammarSlot slot35;
private BodyGrammarSlot slot36;
private BodyGrammarSlot slot38;
private BodyGrammarSlot slot39;
private BodyGrammarSlot slot2197;
private BodyGrammarSlot slot2198;
private BodyGrammarSlot slot2199;
private BodyGrammarSlot slot2200;
private BodyGrammarSlot slot2201;
private BodyGrammarSlot slot2202;
private BodyGrammarSlot slot42;
private BodyGrammarSlot slot43;
private BodyGrammarSlot slot45;
private BodyGrammarSlot slot46;
private BodyGrammarSlot slot2647;
private BodyGrammarSlot slot2648;
private BodyGrammarSlot slot2649;
private BodyGrammarSlot slot2650;
private BodyGrammarSlot slot2651;
private BodyGrammarSlot slot2652;
private BodyGrammarSlot slot2653;
private BodyGrammarSlot slot2654;
private BodyGrammarSlot slot2655;
private BodyGrammarSlot slot2656;
private BodyGrammarSlot slot1502;
private BodyGrammarSlot slot1503;
private BodyGrammarSlot slot1504;
private BodyGrammarSlot slot1505;
private BodyGrammarSlot slot49;
private BodyGrammarSlot slot50;
private BodyGrammarSlot slot51;
private BodyGrammarSlot slot52;
private BodyGrammarSlot slot1427;
private BodyGrammarSlot slot1428;
private BodyGrammarSlot slot54;
private BodyGrammarSlot slot55;
private BodyGrammarSlot slot57;
private BodyGrammarSlot slot58;
private BodyGrammarSlot slot60;
private BodyGrammarSlot slot61;
private BodyGrammarSlot slot62;
private BodyGrammarSlot slot63;
private BodyGrammarSlot slot768;
private BodyGrammarSlot slot769;
private BodyGrammarSlot slot770;
private BodyGrammarSlot slot1128;
private BodyGrammarSlot slot1129;
private BodyGrammarSlot slot1130;
private BodyGrammarSlot slot66;
private BodyGrammarSlot slot67;
private BodyGrammarSlot slot69;
private BodyGrammarSlot slot70;
private BodyGrammarSlot slot72;
private BodyGrammarSlot slot73;
private BodyGrammarSlot slot855;
private BodyGrammarSlot slot856;
private BodyGrammarSlot slot857;
private BodyGrammarSlot slot858;
private BodyGrammarSlot slot860;
private BodyGrammarSlot slot861;
private BodyGrammarSlot slot862;
private BodyGrammarSlot slot863;
private BodyGrammarSlot slot2622;
private BodyGrammarSlot slot2623;
private BodyGrammarSlot slot2624;
private BodyGrammarSlot slot2625;
private BodyGrammarSlot slot2360;
private BodyGrammarSlot slot2361;
private BodyGrammarSlot slot2362;
private BodyGrammarSlot slot2363;
private BodyGrammarSlot slot2364;
private BodyGrammarSlot slot2365;
private BodyGrammarSlot slot2366;
private BodyGrammarSlot slot2367;
private BodyGrammarSlot slot2368;
private BodyGrammarSlot slot2369;
private BodyGrammarSlot slot2370;
private BodyGrammarSlot slot2371;
private BodyGrammarSlot slot2372;
private BodyGrammarSlot slot2373;
private BodyGrammarSlot slot2374;
private BodyGrammarSlot slot2375;
private BodyGrammarSlot slot2376;
private BodyGrammarSlot slot2377;
private BodyGrammarSlot slot2378;
private BodyGrammarSlot slot2379;
private BodyGrammarSlot slot2380;
private BodyGrammarSlot slot2381;
private BodyGrammarSlot slot2382;
private BodyGrammarSlot slot2383;
private BodyGrammarSlot slot2384;
private BodyGrammarSlot slot2385;
private BodyGrammarSlot slot2386;
private BodyGrammarSlot slot2387;
private BodyGrammarSlot slot2388;
private BodyGrammarSlot slot2389;
private BodyGrammarSlot slot2390;
private BodyGrammarSlot slot2391;
private BodyGrammarSlot slot2392;
private BodyGrammarSlot slot2393;
private BodyGrammarSlot slot2394;
private BodyGrammarSlot slot2395;
private BodyGrammarSlot slot2396;
private BodyGrammarSlot slot2397;
private BodyGrammarSlot slot2398;
private BodyGrammarSlot slot2399;
private BodyGrammarSlot slot2400;
private BodyGrammarSlot slot2401;
private BodyGrammarSlot slot2402;
private BodyGrammarSlot slot2403;
private BodyGrammarSlot slot76;
private BodyGrammarSlot slot77;
private BodyGrammarSlot slot78;
private BodyGrammarSlot slot79;
private BodyGrammarSlot slot81;
private BodyGrammarSlot slot82;
private BodyGrammarSlot slot83;
private BodyGrammarSlot slot84;
private BodyGrammarSlot slot86;
private BodyGrammarSlot slot87;
private BodyGrammarSlot slot88;
private BodyGrammarSlot slot89;
private BodyGrammarSlot slot90;
private BodyGrammarSlot slot91;
private BodyGrammarSlot slot92;
private BodyGrammarSlot slot93;
private BodyGrammarSlot slot1814;
private BodyGrammarSlot slot1815;
private BodyGrammarSlot slot1816;
private BodyGrammarSlot slot1817;
private BodyGrammarSlot slot1818;
private BodyGrammarSlot slot1819;
private BodyGrammarSlot slot1820;
private BodyGrammarSlot slot1821;
private BodyGrammarSlot slot1822;
private BodyGrammarSlot slot1823;
private BodyGrammarSlot slot1824;
private BodyGrammarSlot slot1825;
private BodyGrammarSlot slot1826;
private BodyGrammarSlot slot1827;
private BodyGrammarSlot slot1828;
private BodyGrammarSlot slot1829;
private BodyGrammarSlot slot1830;
private BodyGrammarSlot slot1831;
private BodyGrammarSlot slot1832;
private BodyGrammarSlot slot1833;
private BodyGrammarSlot slot1834;
private BodyGrammarSlot slot1835;
private BodyGrammarSlot slot1836;
private BodyGrammarSlot slot1837;
private BodyGrammarSlot slot1838;
private BodyGrammarSlot slot1839;
private BodyGrammarSlot slot1840;
private BodyGrammarSlot slot1841;
private BodyGrammarSlot slot1842;
private BodyGrammarSlot slot1843;
private BodyGrammarSlot slot1844;
private BodyGrammarSlot slot1845;
private BodyGrammarSlot slot1846;
private BodyGrammarSlot slot1847;
private BodyGrammarSlot slot1848;
private BodyGrammarSlot slot1849;
private BodyGrammarSlot slot1595;
private BodyGrammarSlot slot1596;
private BodyGrammarSlot slot100;
private BodyGrammarSlot slot101;
private BodyGrammarSlot slot95;
private BodyGrammarSlot slot96;
private BodyGrammarSlot slot97;
private BodyGrammarSlot slot98;
private BodyGrammarSlot slot1524;
private BodyGrammarSlot slot1525;
private BodyGrammarSlot slot104;
private BodyGrammarSlot slot106;
private BodyGrammarSlot slot107;
private BodyGrammarSlot slot2679;
private BodyGrammarSlot slot2680;
private BodyGrammarSlot slot2316;
private BodyGrammarSlot slot2317;
private BodyGrammarSlot slot2318;
private BodyGrammarSlot slot110;
private BodyGrammarSlot slot111;
private BodyGrammarSlot slot112;
private BodyGrammarSlot slot203;
private BodyGrammarSlot slot204;
private BodyGrammarSlot slot206;
private BodyGrammarSlot slot207;
private BodyGrammarSlot slot208;
private BodyGrammarSlot slot209;
private BodyGrammarSlot slot114;
private BodyGrammarSlot slot116;
private BodyGrammarSlot slot117;
private BodyGrammarSlot slot1625;
private BodyGrammarSlot slot1626;
private BodyGrammarSlot slot1627;
private BodyGrammarSlot slot1628;
private BodyGrammarSlot slot1629;
private BodyGrammarSlot slot1630;
private BodyGrammarSlot slot120;
private BodyGrammarSlot slot121;
private BodyGrammarSlot slot122;
private BodyGrammarSlot slot2089;
private BodyGrammarSlot slot2090;
private BodyGrammarSlot slot124;
private BodyGrammarSlot slot126;
private BodyGrammarSlot slot127;
private BodyGrammarSlot slot128;
private BodyGrammarSlot slot1650;
private BodyGrammarSlot slot1651;
private BodyGrammarSlot slot1652;
private BodyGrammarSlot slot1653;
private BodyGrammarSlot slot131;
private BodyGrammarSlot slot132;
private BodyGrammarSlot slot133;
private BodyGrammarSlot slot134;
private BodyGrammarSlot slot136;
private BodyGrammarSlot slot137;
private BodyGrammarSlot slot138;
private BodyGrammarSlot slot139;
private BodyGrammarSlot slot141;
private BodyGrammarSlot slot142;
private BodyGrammarSlot slot143;
private BodyGrammarSlot slot144;
private BodyGrammarSlot slot146;
private BodyGrammarSlot slot147;
private BodyGrammarSlot slot148;
private BodyGrammarSlot slot149;
private BodyGrammarSlot slot150;
private BodyGrammarSlot slot151;
private BodyGrammarSlot slot152;
private BodyGrammarSlot slot153;
private BodyGrammarSlot slot154;
private BodyGrammarSlot slot155;
private BodyGrammarSlot slot156;
private BodyGrammarSlot slot157;
private BodyGrammarSlot slot158;
private BodyGrammarSlot slot159;
private BodyGrammarSlot slot160;
private BodyGrammarSlot slot161;
private BodyGrammarSlot slot162;
private BodyGrammarSlot slot163;
private BodyGrammarSlot slot165;
private BodyGrammarSlot slot166;
private BodyGrammarSlot slot167;
private BodyGrammarSlot slot168;
private BodyGrammarSlot slot169;
private BodyGrammarSlot slot170;
private BodyGrammarSlot slot171;
private BodyGrammarSlot slot172;
private BodyGrammarSlot slot173;
private BodyGrammarSlot slot174;
private BodyGrammarSlot slot175;
private BodyGrammarSlot slot176;
private BodyGrammarSlot slot177;
private BodyGrammarSlot slot178;
private BodyGrammarSlot slot179;
private BodyGrammarSlot slot180;
private BodyGrammarSlot slot181;
private BodyGrammarSlot slot182;
private BodyGrammarSlot slot183;
private BodyGrammarSlot slot184;
private BodyGrammarSlot slot185;
private BodyGrammarSlot slot186;
private BodyGrammarSlot slot187;
private BodyGrammarSlot slot188;
private BodyGrammarSlot slot189;
private BodyGrammarSlot slot190;
private BodyGrammarSlot slot191;
private BodyGrammarSlot slot192;
private BodyGrammarSlot slot193;
private BodyGrammarSlot slot194;
private BodyGrammarSlot slot195;
private BodyGrammarSlot slot196;
private BodyGrammarSlot slot197;
private BodyGrammarSlot slot198;
private BodyGrammarSlot slot199;
private BodyGrammarSlot slot200;
private BodyGrammarSlot slot201;
private BodyGrammarSlot slot202;
private BodyGrammarSlot slot1593;
private BodyGrammarSlot slot1594;
private BodyGrammarSlot slot735;
private BodyGrammarSlot slot737;
private BodyGrammarSlot slot738;
private BodyGrammarSlot slot2111;
private BodyGrammarSlot slot2112;
private BodyGrammarSlot slot1756;
private BodyGrammarSlot slot1757;
private BodyGrammarSlot slot1758;
private BodyGrammarSlot slot1759;
private BodyGrammarSlot slot1760;
private BodyGrammarSlot slot1761;
private BodyGrammarSlot slot2547;
private BodyGrammarSlot slot2548;
private BodyGrammarSlot slot2549;
private BodyGrammarSlot slot2681;
private BodyGrammarSlot slot2682;
private BodyGrammarSlot slot2683;
private BodyGrammarSlot slot2684;
private BodyGrammarSlot slot2685;
private BodyGrammarSlot slot2686;
private BodyGrammarSlot slot2687;
private BodyGrammarSlot slot2688;
private BodyGrammarSlot slot2689;
private BodyGrammarSlot slot2690;
private BodyGrammarSlot slot2691;
private BodyGrammarSlot slot2692;
private BodyGrammarSlot slot2693;
private BodyGrammarSlot slot2694;
private BodyGrammarSlot slot2695;
private BodyGrammarSlot slot2696;
private BodyGrammarSlot slot211;
private BodyGrammarSlot slot213;
private BodyGrammarSlot slot214;
private BodyGrammarSlot slot215;
private BodyGrammarSlot slot1484;
private BodyGrammarSlot slot1485;
private BodyGrammarSlot slot1486;
private BodyGrammarSlot slot1487;
private BodyGrammarSlot slot218;
private BodyGrammarSlot slot219;
private BodyGrammarSlot slot221;
private BodyGrammarSlot slot222;
private BodyGrammarSlot slot224;
private BodyGrammarSlot slot225;
private BodyGrammarSlot slot227;
private BodyGrammarSlot slot228;
private BodyGrammarSlot slot1507;
private BodyGrammarSlot slot1508;
private BodyGrammarSlot slot1509;
private BodyGrammarSlot slot744;
private BodyGrammarSlot slot746;
private BodyGrammarSlot slot747;
private BodyGrammarSlot slot2300;
private BodyGrammarSlot slot2301;
private BodyGrammarSlot slot2302;
private BodyGrammarSlot slot1719;
private BodyGrammarSlot slot1720;
private BodyGrammarSlot slot1721;
private BodyGrammarSlot slot230;
private BodyGrammarSlot slot231;
private BodyGrammarSlot slot232;
private BodyGrammarSlot slot233;
private BodyGrammarSlot slot235;
private BodyGrammarSlot slot236;
private BodyGrammarSlot slot237;
private BodyGrammarSlot slot238;
private BodyGrammarSlot slot239;
private BodyGrammarSlot slot240;
private BodyGrammarSlot slot241;
private BodyGrammarSlot slot242;
private BodyGrammarSlot slot244;
private BodyGrammarSlot slot245;
private BodyGrammarSlot slot246;
private BodyGrammarSlot slot247;
private BodyGrammarSlot slot740;
private BodyGrammarSlot slot741;
private BodyGrammarSlot slot742;
private BodyGrammarSlot slot323;
private BodyGrammarSlot slot324;
private BodyGrammarSlot slot325;
private BodyGrammarSlot slot249;
private BodyGrammarSlot slot251;
private BodyGrammarSlot slot252;
private BodyGrammarSlot slot253;
private BodyGrammarSlot slot254;
private BodyGrammarSlot slot255;
private BodyGrammarSlot slot256;
private BodyGrammarSlot slot257;
private BodyGrammarSlot slot259;
private BodyGrammarSlot slot261;
private BodyGrammarSlot slot262;
private BodyGrammarSlot slot263;
private BodyGrammarSlot slot264;
private BodyGrammarSlot slot265;
private BodyGrammarSlot slot266;
private BodyGrammarSlot slot267;
private BodyGrammarSlot slot268;
private BodyGrammarSlot slot269;
private BodyGrammarSlot slot270;
private BodyGrammarSlot slot271;
private BodyGrammarSlot slot272;
private BodyGrammarSlot slot945;
private BodyGrammarSlot slot946;
private BodyGrammarSlot slot775;
private BodyGrammarSlot slot776;
private BodyGrammarSlot slot777;
private BodyGrammarSlot slot815;
private BodyGrammarSlot slot816;
private BodyGrammarSlot slot817;
private BodyGrammarSlot slot274;
private BodyGrammarSlot slot275;
private BodyGrammarSlot slot276;
private BodyGrammarSlot slot277;
private BodyGrammarSlot slot278;
private BodyGrammarSlot slot279;
private BodyGrammarSlot slot281;
private BodyGrammarSlot slot282;
private BodyGrammarSlot slot284;
private BodyGrammarSlot slot285;
private BodyGrammarSlot slot287;
private BodyGrammarSlot slot288;
private BodyGrammarSlot slot289;
private BodyGrammarSlot slot290;
private BodyGrammarSlot slot411;
private BodyGrammarSlot slot412;
private BodyGrammarSlot slot413;
private BodyGrammarSlot slot414;
private BodyGrammarSlot slot416;
private BodyGrammarSlot slot417;
private BodyGrammarSlot slot418;
private BodyGrammarSlot slot419;
private BodyGrammarSlot slot292;
private BodyGrammarSlot slot293;
private BodyGrammarSlot slot295;
private BodyGrammarSlot slot296;
private BodyGrammarSlot slot297;
private BodyGrammarSlot slot298;
private BodyGrammarSlot slot1454;
private BodyGrammarSlot slot1455;
private BodyGrammarSlot slot1456;
private BodyGrammarSlot slot1457;
private BodyGrammarSlot slot1458;
private BodyGrammarSlot slot1459;
private BodyGrammarSlot slot1461;
private BodyGrammarSlot slot1462;
private BodyGrammarSlot slot1463;
private BodyGrammarSlot slot1464;
private BodyGrammarSlot slot300;
private BodyGrammarSlot slot301;
private BodyGrammarSlot slot302;
private BodyGrammarSlot slot303;
private BodyGrammarSlot slot304;
private BodyGrammarSlot slot305;
private BodyGrammarSlot slot306;
private BodyGrammarSlot slot307;
private BodyGrammarSlot slot310;
private BodyGrammarSlot slot311;
private BodyGrammarSlot slot313;
private BodyGrammarSlot slot314;
private BodyGrammarSlot slot2629;
private BodyGrammarSlot slot2630;
private BodyGrammarSlot slot2631;
private BodyGrammarSlot slot2632;
private BodyGrammarSlot slot1286;
private BodyGrammarSlot slot1287;
private BodyGrammarSlot slot1288;
private BodyGrammarSlot slot1289;
private BodyGrammarSlot slot1290;
private BodyGrammarSlot slot1291;
private BodyGrammarSlot slot1292;
private BodyGrammarSlot slot1293;
private BodyGrammarSlot slot1294;
private BodyGrammarSlot slot1295;
private BodyGrammarSlot slot1296;
private BodyGrammarSlot slot1298;
private BodyGrammarSlot slot1299;
private BodyGrammarSlot slot1300;
private BodyGrammarSlot slot1301;
private BodyGrammarSlot slot1302;
private BodyGrammarSlot slot1303;
private BodyGrammarSlot slot1304;
private BodyGrammarSlot slot1305;
private BodyGrammarSlot slot1306;
private BodyGrammarSlot slot1307;
private BodyGrammarSlot slot1308;
private BodyGrammarSlot slot1309;
private BodyGrammarSlot slot1310;
private BodyGrammarSlot slot1311;
private BodyGrammarSlot slot1312;
private BodyGrammarSlot slot1313;
private BodyGrammarSlot slot1314;
private BodyGrammarSlot slot1315;
private BodyGrammarSlot slot1316;
private BodyGrammarSlot slot1317;
private BodyGrammarSlot slot1318;
private BodyGrammarSlot slot317;
private BodyGrammarSlot slot318;
private BodyGrammarSlot slot2700;
private BodyGrammarSlot slot2701;
private BodyGrammarSlot slot2702;
private BodyGrammarSlot slot2703;
private BodyGrammarSlot slot2704;
private BodyGrammarSlot slot2705;
private BodyGrammarSlot slot2706;
private BodyGrammarSlot slot2707;
private BodyGrammarSlot slot320;
private BodyGrammarSlot slot321;
private BodyGrammarSlot slot1136;
private BodyGrammarSlot slot1137;
private BodyGrammarSlot slot1138;
private BodyGrammarSlot slot1139;
private BodyGrammarSlot slot1141;
private BodyGrammarSlot slot1142;
private BodyGrammarSlot slot1143;
private BodyGrammarSlot slot1144;
private BodyGrammarSlot slot328;
private BodyGrammarSlot slot329;
private BodyGrammarSlot slot330;
private BodyGrammarSlot slot331;
private BodyGrammarSlot slot332;
private BodyGrammarSlot slot333;
private BodyGrammarSlot slot2601;
private BodyGrammarSlot slot2602;
private BodyGrammarSlot slot2603;
private BodyGrammarSlot slot2604;
private BodyGrammarSlot slot2605;
private BodyGrammarSlot slot2606;
private BodyGrammarSlot slot2607;
private BodyGrammarSlot slot2608;
private BodyGrammarSlot slot335;
private BodyGrammarSlot slot336;
private BodyGrammarSlot slot337;
private BodyGrammarSlot slot338;
private BodyGrammarSlot slot340;
private BodyGrammarSlot slot341;
private BodyGrammarSlot slot342;
private BodyGrammarSlot slot343;
private BodyGrammarSlot slot543;
private BodyGrammarSlot slot544;
private BodyGrammarSlot slot545;
private BodyGrammarSlot slot546;
private BodyGrammarSlot slot548;
private BodyGrammarSlot slot549;
private BodyGrammarSlot slot550;
private BodyGrammarSlot slot551;
private BodyGrammarSlot slot552;
private BodyGrammarSlot slot553;
private BodyGrammarSlot slot345;
private BodyGrammarSlot slot346;
private BodyGrammarSlot slot347;
private BodyGrammarSlot slot348;
private BodyGrammarSlot slot349;
private BodyGrammarSlot slot350;
private BodyGrammarSlot slot351;
private BodyGrammarSlot slot352;
private BodyGrammarSlot slot355;
private BodyGrammarSlot slot357;
private BodyGrammarSlot slot358;
private BodyGrammarSlot slot359;
private BodyGrammarSlot slot360;
private BodyGrammarSlot slot361;
private BodyGrammarSlot slot787;
private BodyGrammarSlot slot788;
private BodyGrammarSlot slot1742;
private BodyGrammarSlot slot1743;
private BodyGrammarSlot slot1745;
private BodyGrammarSlot slot1746;
private BodyGrammarSlot slot363;
private BodyGrammarSlot slot364;
private BodyGrammarSlot slot366;
private BodyGrammarSlot slot367;
private BodyGrammarSlot slot368;
private BodyGrammarSlot slot369;
private BodyGrammarSlot slot2040;
private BodyGrammarSlot slot2041;
private BodyGrammarSlot slot2042;
private BodyGrammarSlot slot2043;
private BodyGrammarSlot slot2044;
private BodyGrammarSlot slot2045;
private BodyGrammarSlot slot2046;
private BodyGrammarSlot slot2047;
private BodyGrammarSlot slot2048;
private BodyGrammarSlot slot2049;
private BodyGrammarSlot slot2050;
private BodyGrammarSlot slot2051;
private BodyGrammarSlot slot2052;
private BodyGrammarSlot slot2053;
private BodyGrammarSlot slot2054;
private BodyGrammarSlot slot2055;
private BodyGrammarSlot slot371;
private BodyGrammarSlot slot372;
private BodyGrammarSlot slot374;
private BodyGrammarSlot slot375;
private BodyGrammarSlot slot377;
private BodyGrammarSlot slot378;
private BodyGrammarSlot slot379;
private BodyGrammarSlot slot380;
private BodyGrammarSlot slot2612;
private BodyGrammarSlot slot2613;
private BodyGrammarSlot slot789;
private BodyGrammarSlot slot790;
private BodyGrammarSlot slot791;
private BodyGrammarSlot slot382;
private BodyGrammarSlot slot383;
private BodyGrammarSlot slot384;
private BodyGrammarSlot slot385;
private BodyGrammarSlot slot387;
private BodyGrammarSlot slot388;
private BodyGrammarSlot slot390;
private BodyGrammarSlot slot391;
private BodyGrammarSlot slot778;
private BodyGrammarSlot slot779;
private BodyGrammarSlot slot781;
private BodyGrammarSlot slot782;
private BodyGrammarSlot slot783;
private BodyGrammarSlot slot784;
private BodyGrammarSlot slot785;
private BodyGrammarSlot slot786;
private BodyGrammarSlot slot394;
private BodyGrammarSlot slot395;
private BodyGrammarSlot slot397;
private BodyGrammarSlot slot398;
private BodyGrammarSlot slot907;
private BodyGrammarSlot slot909;
private BodyGrammarSlot slot910;
private BodyGrammarSlot slot2152;
private BodyGrammarSlot slot2153;
private BodyGrammarSlot slot2154;
private BodyGrammarSlot slot2155;
private BodyGrammarSlot slot2156;
private BodyGrammarSlot slot2157;
private BodyGrammarSlot slot2158;
private BodyGrammarSlot slot2159;
private BodyGrammarSlot slot2160;
private BodyGrammarSlot slot2161;
private BodyGrammarSlot slot401;
private BodyGrammarSlot slot402;
private BodyGrammarSlot slot403;
private BodyGrammarSlot slot404;
private BodyGrammarSlot slot406;
private BodyGrammarSlot slot407;
private BodyGrammarSlot slot409;
private BodyGrammarSlot slot410;
private BodyGrammarSlot slot2662;
private BodyGrammarSlot slot2663;
private BodyGrammarSlot slot2664;
private BodyGrammarSlot slot2496;
private BodyGrammarSlot slot2497;
private BodyGrammarSlot slot2498;
private BodyGrammarSlot slot421;
private BodyGrammarSlot slot422;
private BodyGrammarSlot slot423;
private BodyGrammarSlot slot2542;
private BodyGrammarSlot slot2543;
private BodyGrammarSlot slot2545;
private BodyGrammarSlot slot2546;
private BodyGrammarSlot slot2335;
private BodyGrammarSlot slot2336;
private BodyGrammarSlot slot2337;
private BodyGrammarSlot slot2338;
private BodyGrammarSlot slot2339;
private BodyGrammarSlot slot2340;
private BodyGrammarSlot slot425;
private BodyGrammarSlot slot426;
private BodyGrammarSlot slot428;
private BodyGrammarSlot slot429;
private BodyGrammarSlot slot431;
private BodyGrammarSlot slot432;
private BodyGrammarSlot slot433;
private BodyGrammarSlot slot434;
private BodyGrammarSlot slot1622;
private BodyGrammarSlot slot1623;
private BodyGrammarSlot slot1624;
private BodyGrammarSlot slot2522;
private BodyGrammarSlot slot2523;
private BodyGrammarSlot slot2524;
private BodyGrammarSlot slot436;
private BodyGrammarSlot slot437;
private BodyGrammarSlot slot438;
private BodyGrammarSlot slot439;
private BodyGrammarSlot slot440;
private BodyGrammarSlot slot441;
private BodyGrammarSlot slot927;
private BodyGrammarSlot slot928;
private BodyGrammarSlot slot930;
private BodyGrammarSlot slot931;
private BodyGrammarSlot slot1809;
private BodyGrammarSlot slot1810;
private BodyGrammarSlot slot1811;
private BodyGrammarSlot slot2477;
private BodyGrammarSlot slot2478;
private BodyGrammarSlot slot2479;
private BodyGrammarSlot slot2480;
private BodyGrammarSlot slot2481;
private BodyGrammarSlot slot2482;
private BodyGrammarSlot slot452;
private BodyGrammarSlot slot453;
private BodyGrammarSlot slot454;
private BodyGrammarSlot slot455;
private BodyGrammarSlot slot457;
private BodyGrammarSlot slot458;
private BodyGrammarSlot slot459;
private BodyGrammarSlot slot460;
private BodyGrammarSlot slot1446;
private BodyGrammarSlot slot1447;
private BodyGrammarSlot slot1448;
private BodyGrammarSlot slot1449;
private BodyGrammarSlot slot871;
private BodyGrammarSlot slot872;
private BodyGrammarSlot slot873;
private BodyGrammarSlot slot875;
private BodyGrammarSlot slot876;
private BodyGrammarSlot slot466;
private BodyGrammarSlot slot467;
private BodyGrammarSlot slot468;
private BodyGrammarSlot slot469;
private BodyGrammarSlot slot1218;
private BodyGrammarSlot slot1219;
private BodyGrammarSlot slot1221;
private BodyGrammarSlot slot1222;
private BodyGrammarSlot slot1223;
private BodyGrammarSlot slot1224;
private BodyGrammarSlot slot1225;
private BodyGrammarSlot slot1226;
private BodyGrammarSlot slot472;
private BodyGrammarSlot slot473;
private BodyGrammarSlot slot1105;
private BodyGrammarSlot slot1106;
private BodyGrammarSlot slot1107;
private BodyGrammarSlot slot1108;
private BodyGrammarSlot slot1110;
private BodyGrammarSlot slot1111;
private BodyGrammarSlot slot1112;
private BodyGrammarSlot slot1113;
private BodyGrammarSlot slot475;
private BodyGrammarSlot slot477;
private BodyGrammarSlot slot478;
private BodyGrammarSlot slot479;
private BodyGrammarSlot slot480;
private BodyGrammarSlot slot481;
private BodyGrammarSlot slot2311;
private BodyGrammarSlot slot2312;
private BodyGrammarSlot slot2313;
private BodyGrammarSlot slot2314;
private BodyGrammarSlot slot499;
private BodyGrammarSlot slot500;
private BodyGrammarSlot slot501;
private BodyGrammarSlot slot503;
private BodyGrammarSlot slot504;
private BodyGrammarSlot slot506;
private BodyGrammarSlot slot507;
private BodyGrammarSlot slot509;
private BodyGrammarSlot slot510;
private BodyGrammarSlot slot511;
private BodyGrammarSlot slot512;
private BodyGrammarSlot slot513;
private BodyGrammarSlot slot514;
private BodyGrammarSlot slot515;
private BodyGrammarSlot slot516;
private BodyGrammarSlot slot518;
private BodyGrammarSlot slot519;
private BodyGrammarSlot slot521;
private BodyGrammarSlot slot522;
private BodyGrammarSlot slot1801;
private BodyGrammarSlot slot1802;
private BodyGrammarSlot slot1803;
private BodyGrammarSlot slot1804;
private BodyGrammarSlot slot2483;
private BodyGrammarSlot slot2484;
private BodyGrammarSlot slot2485;
private BodyGrammarSlot slot2486;
private BodyGrammarSlot slot2487;
private BodyGrammarSlot slot2488;
private BodyGrammarSlot slot754;
private BodyGrammarSlot slot755;
private BodyGrammarSlot slot757;
private BodyGrammarSlot slot758;
private BodyGrammarSlot slot759;
private BodyGrammarSlot slot760;
private BodyGrammarSlot slot1762;
private BodyGrammarSlot slot1763;
private BodyGrammarSlot slot1764;
private BodyGrammarSlot slot524;
private BodyGrammarSlot slot525;
private BodyGrammarSlot slot526;
private BodyGrammarSlot slot527;
private BodyGrammarSlot slot529;
private BodyGrammarSlot slot530;
private BodyGrammarSlot slot531;
private BodyGrammarSlot slot2294;
private BodyGrammarSlot slot2295;
private BodyGrammarSlot slot2296;
private BodyGrammarSlot slot2297;
private BodyGrammarSlot slot2298;
private BodyGrammarSlot slot534;
private BodyGrammarSlot slot535;
private BodyGrammarSlot slot536;
private BodyGrammarSlot slot1589;
private BodyGrammarSlot slot1590;
private BodyGrammarSlot slot1591;
private BodyGrammarSlot slot1592;
private BodyGrammarSlot slot538;
private BodyGrammarSlot slot540;
private BodyGrammarSlot slot541;
private BodyGrammarSlot slot1662;
private BodyGrammarSlot slot1663;
private BodyGrammarSlot slot1664;
private BodyGrammarSlot slot1665;
private BodyGrammarSlot slot1666;
private BodyGrammarSlot slot1667;
private BodyGrammarSlot slot1647;
private BodyGrammarSlot slot1648;
private BodyGrammarSlot slot1649;
private BodyGrammarSlot slot2418;
private BodyGrammarSlot slot2419;
private BodyGrammarSlot slot2420;
private BodyGrammarSlot slot2421;
private BodyGrammarSlot slot556;
private BodyGrammarSlot slot557;
private BodyGrammarSlot slot559;
private BodyGrammarSlot slot560;
private BodyGrammarSlot slot2669;
private BodyGrammarSlot slot2670;
private BodyGrammarSlot slot2671;
private BodyGrammarSlot slot2672;
private BodyGrammarSlot slot2673;
private BodyGrammarSlot slot2674;
private BodyGrammarSlot slot2675;
private BodyGrammarSlot slot2712;
private BodyGrammarSlot slot2713;
private BodyGrammarSlot slot2714;
private BodyGrammarSlot slot2715;
private BodyGrammarSlot slot2716;
private BodyGrammarSlot slot2717;
private BodyGrammarSlot slot2718;
private BodyGrammarSlot slot562;
private BodyGrammarSlot slot563;
private BodyGrammarSlot slot564;
private BodyGrammarSlot slot565;
private BodyGrammarSlot slot566;
private BodyGrammarSlot slot567;
private BodyGrammarSlot slot568;
private BodyGrammarSlot slot569;
private BodyGrammarSlot slot570;
private BodyGrammarSlot slot571;
private BodyGrammarSlot slot572;
private BodyGrammarSlot slot573;
private BodyGrammarSlot slot574;
private BodyGrammarSlot slot575;
private BodyGrammarSlot slot576;
private BodyGrammarSlot slot577;
private BodyGrammarSlot slot578;
private BodyGrammarSlot slot579;
private BodyGrammarSlot slot580;
private BodyGrammarSlot slot581;
private BodyGrammarSlot slot582;
private BodyGrammarSlot slot583;
private BodyGrammarSlot slot584;
private BodyGrammarSlot slot585;
private BodyGrammarSlot slot586;
private BodyGrammarSlot slot587;
private BodyGrammarSlot slot588;
private BodyGrammarSlot slot589;
private BodyGrammarSlot slot590;
private BodyGrammarSlot slot591;
private BodyGrammarSlot slot592;
private BodyGrammarSlot slot593;
private BodyGrammarSlot slot594;
private BodyGrammarSlot slot595;
private BodyGrammarSlot slot596;
private BodyGrammarSlot slot597;
private BodyGrammarSlot slot598;
private BodyGrammarSlot slot599;
private BodyGrammarSlot slot600;
private BodyGrammarSlot slot601;
private BodyGrammarSlot slot602;
private BodyGrammarSlot slot603;
private BodyGrammarSlot slot604;
private BodyGrammarSlot slot605;
private BodyGrammarSlot slot606;
private BodyGrammarSlot slot607;
private BodyGrammarSlot slot608;
private BodyGrammarSlot slot609;
private BodyGrammarSlot slot610;
private BodyGrammarSlot slot611;
private BodyGrammarSlot slot612;
private BodyGrammarSlot slot613;
private BodyGrammarSlot slot614;
private BodyGrammarSlot slot615;
private BodyGrammarSlot slot616;
private BodyGrammarSlot slot617;
private BodyGrammarSlot slot618;
private BodyGrammarSlot slot619;
private BodyGrammarSlot slot620;
private BodyGrammarSlot slot621;
private BodyGrammarSlot slot622;
private BodyGrammarSlot slot623;
private BodyGrammarSlot slot624;
private BodyGrammarSlot slot625;
private BodyGrammarSlot slot626;
private BodyGrammarSlot slot627;
private BodyGrammarSlot slot628;
private BodyGrammarSlot slot629;
private BodyGrammarSlot slot630;
private BodyGrammarSlot slot631;
private BodyGrammarSlot slot632;
private BodyGrammarSlot slot633;
private BodyGrammarSlot slot634;
private BodyGrammarSlot slot635;
private BodyGrammarSlot slot636;
private BodyGrammarSlot slot637;
private BodyGrammarSlot slot638;
private BodyGrammarSlot slot639;
private BodyGrammarSlot slot640;
private BodyGrammarSlot slot641;
private BodyGrammarSlot slot642;
private BodyGrammarSlot slot643;
private BodyGrammarSlot slot644;
private BodyGrammarSlot slot645;
private BodyGrammarSlot slot646;
private BodyGrammarSlot slot647;
private BodyGrammarSlot slot648;
private BodyGrammarSlot slot649;
private BodyGrammarSlot slot650;
private BodyGrammarSlot slot651;
private BodyGrammarSlot slot652;
private BodyGrammarSlot slot653;
private BodyGrammarSlot slot654;
private BodyGrammarSlot slot655;
private BodyGrammarSlot slot656;
private BodyGrammarSlot slot657;
private BodyGrammarSlot slot658;
private BodyGrammarSlot slot659;
private BodyGrammarSlot slot660;
private BodyGrammarSlot slot661;
private BodyGrammarSlot slot664;
private BodyGrammarSlot slot665;
private BodyGrammarSlot slot667;
private BodyGrammarSlot slot668;
private BodyGrammarSlot slot1866;
private BodyGrammarSlot slot1867;
private BodyGrammarSlot slot1868;
private BodyGrammarSlot slot1654;
private BodyGrammarSlot slot1655;
private BodyGrammarSlot slot1656;
private BodyGrammarSlot slot671;
private BodyGrammarSlot slot672;
private BodyGrammarSlot slot673;
private BodyGrammarSlot slot674;
private BodyGrammarSlot slot2550;
private BodyGrammarSlot slot2551;
private BodyGrammarSlot slot2552;
private BodyGrammarSlot slot2553;
private BodyGrammarSlot slot2554;
private BodyGrammarSlot slot2555;
private BodyGrammarSlot slot2556;
private BodyGrammarSlot slot2557;
private BodyGrammarSlot slot2558;
private BodyGrammarSlot slot2559;
private BodyGrammarSlot slot2560;
private BodyGrammarSlot slot2561;
private BodyGrammarSlot slot2562;
private BodyGrammarSlot slot2563;
private BodyGrammarSlot slot2564;
private BodyGrammarSlot slot2565;
private BodyGrammarSlot slot2566;
private BodyGrammarSlot slot677;
private BodyGrammarSlot slot678;
private BodyGrammarSlot slot679;
private BodyGrammarSlot slot680;
private BodyGrammarSlot slot681;
private BodyGrammarSlot slot682;
private BodyGrammarSlot slot683;
private BodyGrammarSlot slot684;
private BodyGrammarSlot slot685;
private BodyGrammarSlot slot686;
private BodyGrammarSlot slot687;
private BodyGrammarSlot slot688;
private BodyGrammarSlot slot690;
private BodyGrammarSlot slot691;
private BodyGrammarSlot slot692;
private BodyGrammarSlot slot693;
private BodyGrammarSlot slot695;
private BodyGrammarSlot slot696;
private BodyGrammarSlot slot697;
private BodyGrammarSlot slot698;
private BodyGrammarSlot slot700;
private BodyGrammarSlot slot701;
private BodyGrammarSlot slot702;
private BodyGrammarSlot slot703;
private BodyGrammarSlot slot704;
private BodyGrammarSlot slot705;
private BodyGrammarSlot slot706;
private BodyGrammarSlot slot707;
private BodyGrammarSlot slot708;
private BodyGrammarSlot slot709;
private BodyGrammarSlot slot710;
private BodyGrammarSlot slot711;
private BodyGrammarSlot slot712;
private BodyGrammarSlot slot713;
private BodyGrammarSlot slot714;
private BodyGrammarSlot slot715;
private BodyGrammarSlot slot716;
private BodyGrammarSlot slot717;
private BodyGrammarSlot slot718;
private BodyGrammarSlot slot719;
private BodyGrammarSlot slot720;
private BodyGrammarSlot slot721;
private BodyGrammarSlot slot722;
private BodyGrammarSlot slot723;
private BodyGrammarSlot slot724;
private BodyGrammarSlot slot725;
private BodyGrammarSlot slot726;
private BodyGrammarSlot slot727;
private BodyGrammarSlot slot728;
private BodyGrammarSlot slot729;
private BodyGrammarSlot slot1916;
private BodyGrammarSlot slot1917;
private BodyGrammarSlot slot1918;
private BodyGrammarSlot slot1919;
private BodyGrammarSlot slot1920;
private BodyGrammarSlot slot1921;
private BodyGrammarSlot slot1922;
private BodyGrammarSlot slot1923;
private BodyGrammarSlot slot1924;
private BodyGrammarSlot slot1925;
private BodyGrammarSlot slot1926;
private BodyGrammarSlot slot1927;
private BodyGrammarSlot slot1928;
private BodyGrammarSlot slot1929;
private BodyGrammarSlot slot1930;
private BodyGrammarSlot slot1931;
private BodyGrammarSlot slot1932;
private BodyGrammarSlot slot1933;
private BodyGrammarSlot slot1934;
private BodyGrammarSlot slot1935;
private BodyGrammarSlot slot1936;
private BodyGrammarSlot slot1937;
private BodyGrammarSlot slot1938;
private BodyGrammarSlot slot1939;
private BodyGrammarSlot slot1940;
private BodyGrammarSlot slot1941;
private BodyGrammarSlot slot1943;
private BodyGrammarSlot slot1944;
private BodyGrammarSlot slot1945;
private BodyGrammarSlot slot1946;
private BodyGrammarSlot slot1947;
private BodyGrammarSlot slot1948;
private BodyGrammarSlot slot1949;
private BodyGrammarSlot slot1950;
private BodyGrammarSlot slot1951;
private BodyGrammarSlot slot1952;
private BodyGrammarSlot slot1953;
private BodyGrammarSlot slot1954;
private BodyGrammarSlot slot1955;
private BodyGrammarSlot slot1956;
private BodyGrammarSlot slot1957;
private BodyGrammarSlot slot1958;
private BodyGrammarSlot slot1959;
private BodyGrammarSlot slot1960;
private BodyGrammarSlot slot1961;
private BodyGrammarSlot slot1962;
private BodyGrammarSlot slot1963;
private BodyGrammarSlot slot1964;
private BodyGrammarSlot slot1965;
private BodyGrammarSlot slot1966;
private BodyGrammarSlot slot1967;
private BodyGrammarSlot slot1968;
private BodyGrammarSlot slot1969;
private BodyGrammarSlot slot1970;
private BodyGrammarSlot slot1971;
private BodyGrammarSlot slot1972;
private BodyGrammarSlot slot1973;
private BodyGrammarSlot slot1974;
private BodyGrammarSlot slot1975;
private BodyGrammarSlot slot1976;
private BodyGrammarSlot slot1977;
private BodyGrammarSlot slot1978;
private BodyGrammarSlot slot1979;
private BodyGrammarSlot slot1980;
private BodyGrammarSlot slot1981;
private BodyGrammarSlot slot1982;
private BodyGrammarSlot slot1983;
private BodyGrammarSlot slot1984;
private BodyGrammarSlot slot1985;
private BodyGrammarSlot slot1986;
private BodyGrammarSlot slot1987;
private BodyGrammarSlot slot1988;
private BodyGrammarSlot slot1989;
private BodyGrammarSlot slot1990;
private BodyGrammarSlot slot1991;
private BodyGrammarSlot slot1992;
private BodyGrammarSlot slot1993;
private BodyGrammarSlot slot1994;
private BodyGrammarSlot slot1995;
private BodyGrammarSlot slot1996;
private BodyGrammarSlot slot1997;
private BodyGrammarSlot slot1998;
private BodyGrammarSlot slot1999;
private BodyGrammarSlot slot2000;
private BodyGrammarSlot slot2001;
private BodyGrammarSlot slot2002;
private BodyGrammarSlot slot2003;
private BodyGrammarSlot slot2004;
private BodyGrammarSlot slot2005;
private BodyGrammarSlot slot2006;
private BodyGrammarSlot slot2007;
private BodyGrammarSlot slot2008;
private BodyGrammarSlot slot2009;
private BodyGrammarSlot slot2010;
private BodyGrammarSlot slot2011;
private BodyGrammarSlot slot2012;
private BodyGrammarSlot slot1186;
private BodyGrammarSlot slot1188;
private BodyGrammarSlot slot1189;
private BodyGrammarSlot slot1400;
private BodyGrammarSlot slot1401;
private BodyGrammarSlot slot1402;
private BodyGrammarSlot slot2499;
private BodyGrammarSlot slot2500;
private BodyGrammarSlot slot2501;
private BodyGrammarSlot slot731;
private BodyGrammarSlot slot733;
private BodyGrammarSlot slot734;
private BodyGrammarSlot slot2458;
private BodyGrammarSlot slot2459;
private BodyGrammarSlot slot2460;
private BodyGrammarSlot slot2461;
private BodyGrammarSlot slot1227;
private BodyGrammarSlot slot1228;
private BodyGrammarSlot slot1713;
private BodyGrammarSlot slot1714;
private BodyGrammarSlot slot1715;
private BodyGrammarSlot slot1716;
private BodyGrammarSlot slot1717;
private BodyGrammarSlot slot1718;
private BodyGrammarSlot slot1885;
private BodyGrammarSlot slot1886;
private BodyGrammarSlot slot1887;
private BodyGrammarSlot slot1888;
private BodyGrammarSlot slot1889;
private BodyGrammarSlot slot1890;
private BodyGrammarSlot slot1891;
private BodyGrammarSlot slot1892;
private BodyGrammarSlot slot1893;
private BodyGrammarSlot slot1044;
private BodyGrammarSlot slot1046;
private BodyGrammarSlot slot1047;
private BodyGrammarSlot slot749;
private BodyGrammarSlot slot750;
private BodyGrammarSlot slot752;
private BodyGrammarSlot slot753;
private BodyGrammarSlot slot1450;
private BodyGrammarSlot slot1451;
private BodyGrammarSlot slot1452;
private BodyGrammarSlot slot1453;
private BodyGrammarSlot slot1533;
private BodyGrammarSlot slot1534;
private BodyGrammarSlot slot1535;
private BodyGrammarSlot slot1536;
private BodyGrammarSlot slot1537;
private BodyGrammarSlot slot1538;
private BodyGrammarSlot slot762;
private BodyGrammarSlot slot763;
private BodyGrammarSlot slot765;
private BodyGrammarSlot slot766;
private BodyGrammarSlot slot1787;
private BodyGrammarSlot slot1788;
private BodyGrammarSlot slot1789;
private BodyGrammarSlot slot1790;
private BodyGrammarSlot slot1791;
private BodyGrammarSlot slot1792;
private BodyGrammarSlot slot1793;
private BodyGrammarSlot slot1794;
private BodyGrammarSlot slot1795;
private BodyGrammarSlot slot1796;
private BodyGrammarSlot slot1797;
private BodyGrammarSlot slot1798;
private BodyGrammarSlot slot1799;
private BodyGrammarSlot slot1800;
private BodyGrammarSlot slot947;
private BodyGrammarSlot slot948;
private BodyGrammarSlot slot949;
private BodyGrammarSlot slot950;
private BodyGrammarSlot slot951;
private BodyGrammarSlot slot952;
private BodyGrammarSlot slot953;
private BodyGrammarSlot slot954;
private BodyGrammarSlot slot955;
private BodyGrammarSlot slot956;
private BodyGrammarSlot slot957;
private BodyGrammarSlot slot958;
private BodyGrammarSlot slot959;
private BodyGrammarSlot slot960;
private BodyGrammarSlot slot961;
private BodyGrammarSlot slot962;
private BodyGrammarSlot slot963;
private BodyGrammarSlot slot964;
private BodyGrammarSlot slot965;
private BodyGrammarSlot slot966;
private BodyGrammarSlot slot967;
private BodyGrammarSlot slot968;
private BodyGrammarSlot slot969;
private BodyGrammarSlot slot970;
private BodyGrammarSlot slot971;
private BodyGrammarSlot slot972;
private BodyGrammarSlot slot973;
private BodyGrammarSlot slot974;
private BodyGrammarSlot slot975;
private BodyGrammarSlot slot976;
private BodyGrammarSlot slot977;
private BodyGrammarSlot slot978;
private BodyGrammarSlot slot979;
private BodyGrammarSlot slot980;
private BodyGrammarSlot slot981;
private BodyGrammarSlot slot982;
private BodyGrammarSlot slot983;
private BodyGrammarSlot slot984;
private BodyGrammarSlot slot985;
private BodyGrammarSlot slot986;
private BodyGrammarSlot slot772;
private BodyGrammarSlot slot773;
private BodyGrammarSlot slot774;
private BodyGrammarSlot slot2502;
private BodyGrammarSlot slot2504;
private BodyGrammarSlot slot2505;
private BodyGrammarSlot slot793;
private BodyGrammarSlot slot794;
private BodyGrammarSlot slot795;
private BodyGrammarSlot slot797;
private BodyGrammarSlot slot799;
private BodyGrammarSlot slot800;
private BodyGrammarSlot slot1322;
private BodyGrammarSlot slot1323;
private BodyGrammarSlot slot1324;
private BodyGrammarSlot slot1325;
private BodyGrammarSlot slot1326;
private BodyGrammarSlot slot1327;
private BodyGrammarSlot slot802;
private BodyGrammarSlot slot804;
private BodyGrammarSlot slot805;
private BodyGrammarSlot slot2412;
private BodyGrammarSlot slot2413;
private BodyGrammarSlot slot2414;
private BodyGrammarSlot slot2415;
private BodyGrammarSlot slot807;
private BodyGrammarSlot slot808;
private BodyGrammarSlot slot809;
private BodyGrammarSlot slot810;
private BodyGrammarSlot slot811;
private BodyGrammarSlot slot812;
private BodyGrammarSlot slot813;
private BodyGrammarSlot slot814;
private BodyGrammarSlot slot823;
private BodyGrammarSlot slot824;
private BodyGrammarSlot slot825;
private BodyGrammarSlot slot828;
private BodyGrammarSlot slot829;
private BodyGrammarSlot slot830;
private BodyGrammarSlot slot831;
private BodyGrammarSlot slot832;
private BodyGrammarSlot slot833;
private BodyGrammarSlot slot834;
private BodyGrammarSlot slot835;
private BodyGrammarSlot slot836;
private BodyGrammarSlot slot837;
private BodyGrammarSlot slot838;
private BodyGrammarSlot slot839;
private BodyGrammarSlot slot2169;
private BodyGrammarSlot slot2170;
private BodyGrammarSlot slot2171;
private BodyGrammarSlot slot2172;
private BodyGrammarSlot slot2173;
private BodyGrammarSlot slot2174;
private BodyGrammarSlot slot2175;
private BodyGrammarSlot slot2176;
private BodyGrammarSlot slot841;
private BodyGrammarSlot slot842;
private BodyGrammarSlot slot844;
private BodyGrammarSlot slot845;
private BodyGrammarSlot slot846;
private BodyGrammarSlot slot847;
private BodyGrammarSlot slot849;
private BodyGrammarSlot slot850;
private BodyGrammarSlot slot851;
private BodyGrammarSlot slot852;
private BodyGrammarSlot slot853;
private BodyGrammarSlot slot854;
private BodyGrammarSlot slot2416;
private BodyGrammarSlot slot2417;
private BodyGrammarSlot slot865;
private BodyGrammarSlot slot866;
private BodyGrammarSlot slot867;
private BodyGrammarSlot slot868;
private BodyGrammarSlot slot869;
private BodyGrammarSlot slot2074;
private BodyGrammarSlot slot2075;
private BodyGrammarSlot slot1069;
private BodyGrammarSlot slot1070;
private BodyGrammarSlot slot879;
private BodyGrammarSlot slot880;
private BodyGrammarSlot slot881;
private BodyGrammarSlot slot882;
private BodyGrammarSlot slot883;
private BodyGrammarSlot slot884;
private BodyGrammarSlot slot885;
private BodyGrammarSlot slot886;
private BodyGrammarSlot slot887;
private BodyGrammarSlot slot888;
private BodyGrammarSlot slot889;
private BodyGrammarSlot slot890;
private BodyGrammarSlot slot891;
private BodyGrammarSlot slot892;
private BodyGrammarSlot slot2091;
private BodyGrammarSlot slot2092;
private BodyGrammarSlot slot2093;
private BodyGrammarSlot slot2094;
private BodyGrammarSlot slot2095;
private BodyGrammarSlot slot2096;
private BodyGrammarSlot slot2097;
private BodyGrammarSlot slot2098;
private BodyGrammarSlot slot2099;
private BodyGrammarSlot slot2100;
private BodyGrammarSlot slot2101;
private BodyGrammarSlot slot2102;
private BodyGrammarSlot slot2103;
private BodyGrammarSlot slot2104;
private BodyGrammarSlot slot2105;
private BodyGrammarSlot slot2106;
private BodyGrammarSlot slot2107;
private BodyGrammarSlot slot2108;
private BodyGrammarSlot slot2109;
private BodyGrammarSlot slot2110;
private BodyGrammarSlot slot894;
private BodyGrammarSlot slot896;
private BodyGrammarSlot slot897;
private BodyGrammarSlot slot2614;
private BodyGrammarSlot slot2615;
private BodyGrammarSlot slot2616;
private BodyGrammarSlot slot2617;
private BodyGrammarSlot slot2618;
private BodyGrammarSlot slot2619;
private BodyGrammarSlot slot2620;
private BodyGrammarSlot slot2621;
private BodyGrammarSlot slot899;
private BodyGrammarSlot slot900;
private BodyGrammarSlot slot901;
private BodyGrammarSlot slot902;
private BodyGrammarSlot slot903;
private BodyGrammarSlot slot904;
private BodyGrammarSlot slot905;
private BodyGrammarSlot slot906;
private BodyGrammarSlot slot1264;
private BodyGrammarSlot slot1265;
private BodyGrammarSlot slot1266;
private BodyGrammarSlot slot1267;
private BodyGrammarSlot slot1268;
private BodyGrammarSlot slot1269;
private BodyGrammarSlot slot912;
private BodyGrammarSlot slot913;
private BodyGrammarSlot slot914;
private BodyGrammarSlot slot916;
private BodyGrammarSlot slot917;
private BodyGrammarSlot slot919;
private BodyGrammarSlot slot920;
private BodyGrammarSlot slot2719;
private BodyGrammarSlot slot2720;
private BodyGrammarSlot slot2721;
private BodyGrammarSlot slot2722;
private BodyGrammarSlot slot2723;
private BodyGrammarSlot slot2724;
private BodyGrammarSlot slot2725;
private BodyGrammarSlot slot2726;
private BodyGrammarSlot slot923;
private BodyGrammarSlot slot924;
private BodyGrammarSlot slot925;
private BodyGrammarSlot slot926;
private BodyGrammarSlot slot1027;
private BodyGrammarSlot slot1028;
private BodyGrammarSlot slot1146;
private BodyGrammarSlot slot1147;
private BodyGrammarSlot slot1148;
private BodyGrammarSlot slot933;
private BodyGrammarSlot slot934;
private BodyGrammarSlot slot935;
private BodyGrammarSlot slot936;
private BodyGrammarSlot slot937;
private BodyGrammarSlot slot938;
private BodyGrammarSlot slot940;
private BodyGrammarSlot slot941;
private BodyGrammarSlot slot943;
private BodyGrammarSlot slot944;
private BodyGrammarSlot slot2432;
private BodyGrammarSlot slot2433;
private BodyGrammarSlot slot2434;
private BodyGrammarSlot slot999;
private BodyGrammarSlot slot1000;
private BodyGrammarSlot slot1001;
private BodyGrammarSlot slot1002;
private BodyGrammarSlot slot1003;
private BodyGrammarSlot slot1004;
private BodyGrammarSlot slot1005;
private BodyGrammarSlot slot1006;
private BodyGrammarSlot slot1007;
private BodyGrammarSlot slot1008;
private BodyGrammarSlot slot989;
private BodyGrammarSlot slot990;
private BodyGrammarSlot slot992;
private BodyGrammarSlot slot993;
private BodyGrammarSlot slot995;
private BodyGrammarSlot slot996;
private BodyGrammarSlot slot997;
private BodyGrammarSlot slot998;
private BodyGrammarSlot slot1582;
private BodyGrammarSlot slot1583;
private BodyGrammarSlot slot1584;
private BodyGrammarSlot slot1328;
private BodyGrammarSlot slot1329;
private BodyGrammarSlot slot1330;
private BodyGrammarSlot slot1331;
private BodyGrammarSlot slot1332;
private BodyGrammarSlot slot1333;
private BodyGrammarSlot slot1334;
private BodyGrammarSlot slot1335;
private BodyGrammarSlot slot1336;
private BodyGrammarSlot slot1337;
private BodyGrammarSlot slot2332;
private BodyGrammarSlot slot2333;
private BodyGrammarSlot slot2334;
private BodyGrammarSlot slot1010;
private BodyGrammarSlot slot1011;
private BodyGrammarSlot slot1012;
private BodyGrammarSlot slot1013;
private BodyGrammarSlot slot1014;
private BodyGrammarSlot slot1015;
private BodyGrammarSlot slot1017;
private BodyGrammarSlot slot1018;
private BodyGrammarSlot slot1159;
private BodyGrammarSlot slot1160;
private BodyGrammarSlot slot1161;
private BodyGrammarSlot slot1162;
private BodyGrammarSlot slot1163;
private BodyGrammarSlot slot1164;
private BodyGrammarSlot slot1020;
private BodyGrammarSlot slot1021;
private BodyGrammarSlot slot1023;
private BodyGrammarSlot slot1024;
private BodyGrammarSlot slot1025;
private BodyGrammarSlot slot1026;
private BodyGrammarSlot slot1419;
private BodyGrammarSlot slot1420;
private BodyGrammarSlot slot1421;
private BodyGrammarSlot slot1422;
private BodyGrammarSlot slot1423;
private BodyGrammarSlot slot1424;
private BodyGrammarSlot slot1425;
private BodyGrammarSlot slot1426;
private BodyGrammarSlot slot1030;
private BodyGrammarSlot slot1031;
private BodyGrammarSlot slot1032;
private BodyGrammarSlot slot1033;
private BodyGrammarSlot slot1034;
private BodyGrammarSlot slot1035;
private BodyGrammarSlot slot1036;
private BodyGrammarSlot slot1037;
private BodyGrammarSlot slot1039;
private BodyGrammarSlot slot1040;
private BodyGrammarSlot slot1597;
private BodyGrammarSlot slot1598;
private BodyGrammarSlot slot1600;
private BodyGrammarSlot slot1601;
private BodyGrammarSlot slot1602;
private BodyGrammarSlot slot1603;
private BodyGrammarSlot slot1042;
private BodyGrammarSlot slot1043;
private BodyGrammarSlot slot1149;
private BodyGrammarSlot slot1150;
private BodyGrammarSlot slot1151;
private BodyGrammarSlot slot1152;
private BodyGrammarSlot slot1049;
private BodyGrammarSlot slot1050;
private BodyGrammarSlot slot1051;
private BodyGrammarSlot slot1052;
private BodyGrammarSlot slot1054;
private BodyGrammarSlot slot1055;
private BodyGrammarSlot slot1056;
private BodyGrammarSlot slot1057;
private BodyGrammarSlot slot2303;
private BodyGrammarSlot slot2304;
private BodyGrammarSlot slot2305;
private BodyGrammarSlot slot2306;
private BodyGrammarSlot slot2307;
private BodyGrammarSlot slot2308;
private BodyGrammarSlot slot2309;
private BodyGrammarSlot slot2310;
private BodyGrammarSlot slot1059;
private BodyGrammarSlot slot1060;
private BodyGrammarSlot slot1061;
private BodyGrammarSlot slot1062;
private BodyGrammarSlot slot1065;
private BodyGrammarSlot slot1066;
private BodyGrammarSlot slot1067;
private BodyGrammarSlot slot1068;
private BodyGrammarSlot slot2465;
private BodyGrammarSlot slot2466;
private BodyGrammarSlot slot2467;
private BodyGrammarSlot slot2468;
private BodyGrammarSlot slot2469;
private BodyGrammarSlot slot2470;
private BodyGrammarSlot slot2471;
private BodyGrammarSlot slot2472;
private BodyGrammarSlot slot2473;
private BodyGrammarSlot slot2474;
private BodyGrammarSlot slot2475;
private BodyGrammarSlot slot2476;
private BodyGrammarSlot slot1072;
private BodyGrammarSlot slot1073;
private BodyGrammarSlot slot1074;
private BodyGrammarSlot slot1075;
private BodyGrammarSlot slot1077;
private BodyGrammarSlot slot1078;
private BodyGrammarSlot slot1079;
private BodyGrammarSlot slot1080;
private BodyGrammarSlot slot1081;
private BodyGrammarSlot slot1082;
private BodyGrammarSlot slot1083;
private BodyGrammarSlot slot1084;
private BodyGrammarSlot slot1085;
private BodyGrammarSlot slot1086;
private BodyGrammarSlot slot1087;
private BodyGrammarSlot slot1088;
private BodyGrammarSlot slot1089;
private BodyGrammarSlot slot1090;
private BodyGrammarSlot slot1091;
private BodyGrammarSlot slot1092;
private BodyGrammarSlot slot1093;
private BodyGrammarSlot slot1094;
private BodyGrammarSlot slot1095;
private BodyGrammarSlot slot1096;
private BodyGrammarSlot slot1097;
private BodyGrammarSlot slot1098;
private BodyGrammarSlot slot1099;
private BodyGrammarSlot slot1100;
private BodyGrammarSlot slot1101;
private BodyGrammarSlot slot1102;
private BodyGrammarSlot slot1103;
private BodyGrammarSlot slot1104;
private BodyGrammarSlot slot1707;
private BodyGrammarSlot slot1708;
private BodyGrammarSlot slot1709;
private BodyGrammarSlot slot1710;
private BodyGrammarSlot slot1711;
private BodyGrammarSlot slot1712;
private BodyGrammarSlot slot1549;
private BodyGrammarSlot slot1550;
private BodyGrammarSlot slot1551;
private BodyGrammarSlot slot1552;
private BodyGrammarSlot slot1553;
private BodyGrammarSlot slot1554;
private BodyGrammarSlot slot1556;
private BodyGrammarSlot slot1557;
private BodyGrammarSlot slot1559;
private BodyGrammarSlot slot1560;
private BodyGrammarSlot slot1561;
private BodyGrammarSlot slot1562;
private BodyGrammarSlot slot1563;
private BodyGrammarSlot slot1564;
private BodyGrammarSlot slot1115;
private BodyGrammarSlot slot1117;
private BodyGrammarSlot slot1118;
private BodyGrammarSlot slot2665;
private BodyGrammarSlot slot2666;
private BodyGrammarSlot slot2667;
private BodyGrammarSlot slot2668;
private BodyGrammarSlot slot1120;
private BodyGrammarSlot slot1121;
private BodyGrammarSlot slot1122;
private BodyGrammarSlot slot1123;
private BodyGrammarSlot slot1124;
private BodyGrammarSlot slot1125;
private BodyGrammarSlot slot1126;
private BodyGrammarSlot slot1127;
private BodyGrammarSlot slot1133;
private BodyGrammarSlot slot1134;
private BodyGrammarSlot slot1135;
private BodyGrammarSlot slot1691;
private BodyGrammarSlot slot1692;
private BodyGrammarSlot slot1693;
private BodyGrammarSlot slot1694;
private BodyGrammarSlot slot1695;
private BodyGrammarSlot slot1696;
private BodyGrammarSlot slot2733;
private BodyGrammarSlot slot2734;
private BodyGrammarSlot slot2735;
private BodyGrammarSlot slot2736;
private BodyGrammarSlot slot2737;
private BodyGrammarSlot slot2738;
private BodyGrammarSlot slot1910;
private BodyGrammarSlot slot1911;
private BodyGrammarSlot slot1912;
private BodyGrammarSlot slot1913;
private BodyGrammarSlot slot1914;
private BodyGrammarSlot slot1915;
private BodyGrammarSlot slot1154;
private BodyGrammarSlot slot1155;
private BodyGrammarSlot slot1157;
private BodyGrammarSlot slot1158;
private BodyGrammarSlot slot1812;
private BodyGrammarSlot slot1813;
private BodyGrammarSlot slot1166;
private BodyGrammarSlot slot1167;
private BodyGrammarSlot slot1168;
private BodyGrammarSlot slot1169;
private BodyGrammarSlot slot1170;
private BodyGrammarSlot slot1171;
private BodyGrammarSlot slot1172;
private BodyGrammarSlot slot1173;
private BodyGrammarSlot slot1174;
private BodyGrammarSlot slot1175;
private BodyGrammarSlot slot1176;
private BodyGrammarSlot slot1177;
private BodyGrammarSlot slot1178;
private BodyGrammarSlot slot1179;
private BodyGrammarSlot slot1180;
private BodyGrammarSlot slot1181;
private BodyGrammarSlot slot1182;
private BodyGrammarSlot slot1183;
private BodyGrammarSlot slot1184;
private BodyGrammarSlot slot1185;
private BodyGrammarSlot slot2187;
private BodyGrammarSlot slot2188;
private BodyGrammarSlot slot2190;
private BodyGrammarSlot slot2191;
private BodyGrammarSlot slot1191;
private BodyGrammarSlot slot1192;
private BodyGrammarSlot slot1193;
private BodyGrammarSlot slot1194;
private BodyGrammarSlot slot1196;
private BodyGrammarSlot slot1197;
private BodyGrammarSlot slot1198;
private BodyGrammarSlot slot1199;
private BodyGrammarSlot slot1200;
private BodyGrammarSlot slot1201;
private BodyGrammarSlot slot1202;
private BodyGrammarSlot slot1203;
private BodyGrammarSlot slot1204;
private BodyGrammarSlot slot1205;
private BodyGrammarSlot slot1206;
private BodyGrammarSlot slot1207;
private BodyGrammarSlot slot1208;
private BodyGrammarSlot slot1209;
private BodyGrammarSlot slot1210;
private BodyGrammarSlot slot1211;
private BodyGrammarSlot slot1212;
private BodyGrammarSlot slot1213;
private BodyGrammarSlot slot1214;
private BodyGrammarSlot slot1215;
private BodyGrammarSlot slot1216;
private BodyGrammarSlot slot1217;
private BodyGrammarSlot slot2404;
private BodyGrammarSlot slot2405;
private BodyGrammarSlot slot2406;
private BodyGrammarSlot slot2407;
private BodyGrammarSlot slot2408;
private BodyGrammarSlot slot2409;
private BodyGrammarSlot slot2410;
private BodyGrammarSlot slot2411;
private BodyGrammarSlot slot2708;
private BodyGrammarSlot slot2709;
private BodyGrammarSlot slot2710;
private BodyGrammarSlot slot2711;
private BodyGrammarSlot slot1230;
private BodyGrammarSlot slot1231;
private BodyGrammarSlot slot1232;
private BodyGrammarSlot slot1233;
private BodyGrammarSlot slot1234;
private BodyGrammarSlot slot1235;
private BodyGrammarSlot slot1237;
private BodyGrammarSlot slot1238;
private BodyGrammarSlot slot1239;
private BodyGrammarSlot slot1240;
private BodyGrammarSlot slot1241;
private BodyGrammarSlot slot1242;
private BodyGrammarSlot slot1270;
private BodyGrammarSlot slot1271;
private BodyGrammarSlot slot1272;
private BodyGrammarSlot slot1273;
private BodyGrammarSlot slot1274;
private BodyGrammarSlot slot1275;
private BodyGrammarSlot slot1276;
private BodyGrammarSlot slot1277;
private BodyGrammarSlot slot1278;
private BodyGrammarSlot slot1279;
private BodyGrammarSlot slot1281;
private BodyGrammarSlot slot1282;
private BodyGrammarSlot slot1283;
private BodyGrammarSlot slot1284;
private BodyGrammarSlot slot1244;
private BodyGrammarSlot slot1245;
private BodyGrammarSlot slot1246;
private BodyGrammarSlot slot1247;
private BodyGrammarSlot slot1248;
private BodyGrammarSlot slot1249;
private BodyGrammarSlot slot1250;
private BodyGrammarSlot slot1251;
private BodyGrammarSlot slot1252;
private BodyGrammarSlot slot1253;
private BodyGrammarSlot slot1254;
private BodyGrammarSlot slot1255;
private BodyGrammarSlot slot1256;
private BodyGrammarSlot slot1257;
private BodyGrammarSlot slot1260;
private BodyGrammarSlot slot1261;
private BodyGrammarSlot slot1262;
private BodyGrammarSlot slot2350;
private BodyGrammarSlot slot2351;
private BodyGrammarSlot slot2352;
private BodyGrammarSlot slot2353;
private BodyGrammarSlot slot2354;
private BodyGrammarSlot slot2355;
private BodyGrammarSlot slot2641;
private BodyGrammarSlot slot2642;
private BodyGrammarSlot slot2643;
private BodyGrammarSlot slot2644;
private BodyGrammarSlot slot1472;
private BodyGrammarSlot slot1473;
private BodyGrammarSlot slot1474;
private BodyGrammarSlot slot1679;
private BodyGrammarSlot slot1680;
private BodyGrammarSlot slot1681;
private BodyGrammarSlot slot1682;
private BodyGrammarSlot slot1683;
private BodyGrammarSlot slot1684;
private BodyGrammarSlot slot1685;
private BodyGrammarSlot slot1686;
private BodyGrammarSlot slot1687;
private BodyGrammarSlot slot1688;
private BodyGrammarSlot slot1689;
private BodyGrammarSlot slot1690;
private BodyGrammarSlot slot1770;
private BodyGrammarSlot slot1771;
private BodyGrammarSlot slot1772;
private BodyGrammarSlot slot1773;
private BodyGrammarSlot slot1774;
private BodyGrammarSlot slot1775;
private BodyGrammarSlot slot1776;
private BodyGrammarSlot slot1320;
private BodyGrammarSlot slot1321;
private BodyGrammarSlot slot1339;
private BodyGrammarSlot slot1340;
private BodyGrammarSlot slot1341;
private BodyGrammarSlot slot1342;
private BodyGrammarSlot slot1344;
private BodyGrammarSlot slot1345;
private BodyGrammarSlot slot1346;
private BodyGrammarSlot slot1347;
private BodyGrammarSlot slot2514;
private BodyGrammarSlot slot2515;
private BodyGrammarSlot slot2516;
private BodyGrammarSlot slot2517;
private BodyGrammarSlot slot2518;
private BodyGrammarSlot slot2519;
private BodyGrammarSlot slot2520;
private BodyGrammarSlot slot2521;
private BodyGrammarSlot slot1350;
private BodyGrammarSlot slot1351;
private BodyGrammarSlot slot1352;
private BodyGrammarSlot slot1353;
private BodyGrammarSlot slot1354;
private BodyGrammarSlot slot1355;
private BodyGrammarSlot slot1356;
private BodyGrammarSlot slot1357;
private BodyGrammarSlot slot1358;
private BodyGrammarSlot slot1359;
private BodyGrammarSlot slot1360;
private BodyGrammarSlot slot1361;
private BodyGrammarSlot slot1362;
private BodyGrammarSlot slot1363;
private BodyGrammarSlot slot2203;
private BodyGrammarSlot slot2204;
private BodyGrammarSlot slot2205;
private BodyGrammarSlot slot2206;
private BodyGrammarSlot slot2207;
private BodyGrammarSlot slot2208;
private BodyGrammarSlot slot2209;
private BodyGrammarSlot slot2210;
private BodyGrammarSlot slot2211;
private BodyGrammarSlot slot2212;
private BodyGrammarSlot slot2213;
private BodyGrammarSlot slot2214;
private BodyGrammarSlot slot2215;
private BodyGrammarSlot slot2216;
private BodyGrammarSlot slot2217;
private BodyGrammarSlot slot2218;
private BodyGrammarSlot slot2219;
private BodyGrammarSlot slot2220;
private BodyGrammarSlot slot2221;
private BodyGrammarSlot slot2222;
private BodyGrammarSlot slot2223;
private BodyGrammarSlot slot2224;
private BodyGrammarSlot slot2225;
private BodyGrammarSlot slot2226;
private BodyGrammarSlot slot2227;
private BodyGrammarSlot slot2228;
private BodyGrammarSlot slot2229;
private BodyGrammarSlot slot2230;
private BodyGrammarSlot slot2231;
private BodyGrammarSlot slot2232;
private BodyGrammarSlot slot2233;
private BodyGrammarSlot slot2234;
private BodyGrammarSlot slot1365;
private BodyGrammarSlot slot1366;
private BodyGrammarSlot slot1367;
private BodyGrammarSlot slot1368;
private BodyGrammarSlot slot1371;
private BodyGrammarSlot slot1372;
private BodyGrammarSlot slot1373;
private BodyGrammarSlot slot1777;
private BodyGrammarSlot slot1778;
private BodyGrammarSlot slot1780;
private BodyGrammarSlot slot1781;
private BodyGrammarSlot slot1782;
private BodyGrammarSlot slot1783;
private BodyGrammarSlot slot1375;
private BodyGrammarSlot slot1376;
private BodyGrammarSlot slot1377;
private BodyGrammarSlot slot1378;
private BodyGrammarSlot slot1379;
private BodyGrammarSlot slot1380;
private BodyGrammarSlot slot1381;
private BodyGrammarSlot slot1382;
private BodyGrammarSlot slot1383;
private BodyGrammarSlot slot1384;
private BodyGrammarSlot slot1385;
private BodyGrammarSlot slot1386;
private BodyGrammarSlot slot1387;
private BodyGrammarSlot slot1388;
private BodyGrammarSlot slot1389;
private BodyGrammarSlot slot1390;
private BodyGrammarSlot slot1391;
private BodyGrammarSlot slot1392;
private BodyGrammarSlot slot1393;
private BodyGrammarSlot slot1394;
private BodyGrammarSlot slot1396;
private BodyGrammarSlot slot1397;
private BodyGrammarSlot slot1398;
private BodyGrammarSlot slot1399;
private BodyGrammarSlot slot1404;
private BodyGrammarSlot slot1405;
private BodyGrammarSlot slot1407;
private BodyGrammarSlot slot1408;
private BodyGrammarSlot slot1409;
private BodyGrammarSlot slot1410;
private BodyGrammarSlot slot2659;
private BodyGrammarSlot slot2660;
private BodyGrammarSlot slot2661;
private BodyGrammarSlot slot1412;
private BodyGrammarSlot slot1413;
private BodyGrammarSlot slot1414;
private BodyGrammarSlot slot1415;
private BodyGrammarSlot slot1416;
private BodyGrammarSlot slot1417;
private BodyGrammarSlot slot1878;
private BodyGrammarSlot slot1879;
private BodyGrammarSlot slot1881;
private BodyGrammarSlot slot1882;
private BodyGrammarSlot slot1883;
private BodyGrammarSlot slot1884;
private BodyGrammarSlot slot1430;
private BodyGrammarSlot slot1431;
private BodyGrammarSlot slot1432;
private BodyGrammarSlot slot1433;
private BodyGrammarSlot slot1435;
private BodyGrammarSlot slot1436;
private BodyGrammarSlot slot1437;
private BodyGrammarSlot slot1438;
private BodyGrammarSlot slot1439;
private BodyGrammarSlot slot1440;
private BodyGrammarSlot slot2017;
private BodyGrammarSlot slot2018;
private BodyGrammarSlot slot2019;
private BodyGrammarSlot slot2020;
private BodyGrammarSlot slot2021;
private BodyGrammarSlot slot2022;
private BodyGrammarSlot slot2023;
private BodyGrammarSlot slot2024;
private BodyGrammarSlot slot1442;
private BodyGrammarSlot slot1443;
private BodyGrammarSlot slot1444;
private BodyGrammarSlot slot1445;
private BodyGrammarSlot slot1531;
private BodyGrammarSlot slot1532;
private BodyGrammarSlot slot1466;
private BodyGrammarSlot slot1467;
private BodyGrammarSlot slot1468;
private BodyGrammarSlot slot1469;
private BodyGrammarSlot slot1470;
private BodyGrammarSlot slot1471;
private BodyGrammarSlot slot1476;
private BodyGrammarSlot slot1477;
private BodyGrammarSlot slot1478;
private BodyGrammarSlot slot1479;
private BodyGrammarSlot slot1481;
private BodyGrammarSlot slot1482;
private BodyGrammarSlot slot1483;
private BodyGrammarSlot slot1490;
private BodyGrammarSlot slot1491;
private BodyGrammarSlot slot1492;
private BodyGrammarSlot slot1493;
private BodyGrammarSlot slot1494;
private BodyGrammarSlot slot1495;
private BodyGrammarSlot slot1496;
private BodyGrammarSlot slot1497;
private BodyGrammarSlot slot1498;
private BodyGrammarSlot slot1499;
private BodyGrammarSlot slot1500;
private BodyGrammarSlot slot1501;
private BodyGrammarSlot slot1894;
private BodyGrammarSlot slot1895;
private BodyGrammarSlot slot1896;
private BodyGrammarSlot slot1897;
private BodyGrammarSlot slot1898;
private BodyGrammarSlot slot1899;
private BodyGrammarSlot slot1900;
private BodyGrammarSlot slot1901;
private BodyGrammarSlot slot1902;
private BodyGrammarSlot slot1903;
private BodyGrammarSlot slot1904;
private BodyGrammarSlot slot1905;
private BodyGrammarSlot slot1906;
private BodyGrammarSlot slot1907;
private BodyGrammarSlot slot1908;
private BodyGrammarSlot slot1909;
private BodyGrammarSlot slot1510;
private BodyGrammarSlot slot1511;
private BodyGrammarSlot slot1513;
private BodyGrammarSlot slot1514;
private BodyGrammarSlot slot1515;
private BodyGrammarSlot slot1516;
private BodyGrammarSlot slot1517;
private BodyGrammarSlot slot1518;
private BodyGrammarSlot slot2443;
private BodyGrammarSlot slot2444;
private BodyGrammarSlot slot2445;
private BodyGrammarSlot slot2446;
private BodyGrammarSlot slot2447;
private BodyGrammarSlot slot2448;
private BodyGrammarSlot slot1520;
private BodyGrammarSlot slot1521;
private BodyGrammarSlot slot1522;
private BodyGrammarSlot slot1523;
private BodyGrammarSlot slot1527;
private BodyGrammarSlot slot1528;
private BodyGrammarSlot slot1529;
private BodyGrammarSlot slot1530;
private BodyGrammarSlot slot1541;
private BodyGrammarSlot slot1542;
private BodyGrammarSlot slot1544;
private BodyGrammarSlot slot1545;
private BodyGrammarSlot slot1547;
private BodyGrammarSlot slot1548;
private BodyGrammarSlot slot2581;
private BodyGrammarSlot slot2582;
private BodyGrammarSlot slot2583;
private BodyGrammarSlot slot2584;
private BodyGrammarSlot slot2585;
private BodyGrammarSlot slot2586;
private BodyGrammarSlot slot2587;
private BodyGrammarSlot slot2588;
private BodyGrammarSlot slot2589;
private BodyGrammarSlot slot2590;
private BodyGrammarSlot slot2591;
private BodyGrammarSlot slot2592;
private BodyGrammarSlot slot2128;
private BodyGrammarSlot slot2129;
private BodyGrammarSlot slot2130;
private BodyGrammarSlot slot2131;
private BodyGrammarSlot slot2132;
private BodyGrammarSlot slot2133;
private BodyGrammarSlot slot2134;
private BodyGrammarSlot slot2135;
private BodyGrammarSlot slot2136;
private BodyGrammarSlot slot2137;
private BodyGrammarSlot slot2138;
private BodyGrammarSlot slot2139;
private BodyGrammarSlot slot2140;
private BodyGrammarSlot slot2141;
private BodyGrammarSlot slot2142;
private BodyGrammarSlot slot2143;
private BodyGrammarSlot slot2144;
private BodyGrammarSlot slot2145;
private BodyGrammarSlot slot2146;
private BodyGrammarSlot slot2147;
private BodyGrammarSlot slot2148;
private BodyGrammarSlot slot2149;
private BodyGrammarSlot slot2150;
private BodyGrammarSlot slot2151;
private BodyGrammarSlot slot1850;
private BodyGrammarSlot slot1851;
private BodyGrammarSlot slot1852;
private BodyGrammarSlot slot1853;
private BodyGrammarSlot slot2250;
private BodyGrammarSlot slot2251;
private BodyGrammarSlot slot2252;
private BodyGrammarSlot slot2253;
private BodyGrammarSlot slot2254;
private BodyGrammarSlot slot2255;
private BodyGrammarSlot slot2257;
private BodyGrammarSlot slot2258;
private BodyGrammarSlot slot2259;
private BodyGrammarSlot slot2260;
private BodyGrammarSlot slot2261;
private BodyGrammarSlot slot2262;
private BodyGrammarSlot slot2263;
private BodyGrammarSlot slot2264;
private BodyGrammarSlot slot2265;
private BodyGrammarSlot slot2266;
private BodyGrammarSlot slot2268;
private BodyGrammarSlot slot2269;
private BodyGrammarSlot slot2270;
private BodyGrammarSlot slot2271;
private BodyGrammarSlot slot2272;
private BodyGrammarSlot slot2273;
private BodyGrammarSlot slot2274;
private BodyGrammarSlot slot2275;
private BodyGrammarSlot slot2276;
private BodyGrammarSlot slot2277;
private BodyGrammarSlot slot2278;
private BodyGrammarSlot slot2279;
private BodyGrammarSlot slot2280;
private BodyGrammarSlot slot2281;
private BodyGrammarSlot slot2282;
private BodyGrammarSlot slot2283;
private BodyGrammarSlot slot2284;
private BodyGrammarSlot slot2285;
private BodyGrammarSlot slot2286;
private BodyGrammarSlot slot2287;
private BodyGrammarSlot slot2537;
private BodyGrammarSlot slot2538;
private BodyGrammarSlot slot2539;
private BodyGrammarSlot slot2540;
private BodyGrammarSlot slot1567;
private BodyGrammarSlot slot1568;
private BodyGrammarSlot slot1570;
private BodyGrammarSlot slot1571;
private BodyGrammarSlot slot1572;
private BodyGrammarSlot slot1573;
private BodyGrammarSlot slot1575;
private BodyGrammarSlot slot1576;
private BodyGrammarSlot slot1577;
private BodyGrammarSlot slot1578;
private BodyGrammarSlot slot1579;
private BodyGrammarSlot slot1580;
private BodyGrammarSlot slot2025;
private BodyGrammarSlot slot2027;
private BodyGrammarSlot slot2028;
private BodyGrammarSlot slot2029;
private BodyGrammarSlot slot2030;
private BodyGrammarSlot slot2031;
private BodyGrammarSlot slot2032;
private BodyGrammarSlot slot2033;
private BodyGrammarSlot slot1620;
private BodyGrammarSlot slot1621;
private BodyGrammarSlot slot2345;
private BodyGrammarSlot slot2347;
private BodyGrammarSlot slot2348;
private BodyGrammarSlot slot2349;
private BodyGrammarSlot slot2424;
private BodyGrammarSlot slot2425;
private BodyGrammarSlot slot2426;
private BodyGrammarSlot slot2427;
private BodyGrammarSlot slot2428;
private BodyGrammarSlot slot2429;
private BodyGrammarSlot slot1586;
private BodyGrammarSlot slot1587;
private BodyGrammarSlot slot1588;
private BodyGrammarSlot slot1697;
private BodyGrammarSlot slot1698;
private BodyGrammarSlot slot1699;
private BodyGrammarSlot slot1605;
private BodyGrammarSlot slot1606;
private BodyGrammarSlot slot1607;
private BodyGrammarSlot slot1608;
private BodyGrammarSlot slot1609;
private BodyGrammarSlot slot1610;
private BodyGrammarSlot slot1612;
private BodyGrammarSlot slot1613;
private BodyGrammarSlot slot1614;
private BodyGrammarSlot slot1615;
private BodyGrammarSlot slot1616;
private BodyGrammarSlot slot1617;
private BodyGrammarSlot slot1618;
private BodyGrammarSlot slot1619;
private BodyGrammarSlot slot1632;
private BodyGrammarSlot slot1633;
private BodyGrammarSlot slot1634;
private BodyGrammarSlot slot1635;
private BodyGrammarSlot slot1636;
private BodyGrammarSlot slot1637;
private BodyGrammarSlot slot1638;
private BodyGrammarSlot slot1639;
private BodyGrammarSlot slot1640;
private BodyGrammarSlot slot1641;
private BodyGrammarSlot slot1643;
private BodyGrammarSlot slot1644;
private BodyGrammarSlot slot1645;
private BodyGrammarSlot slot1668;
private BodyGrammarSlot slot1669;
private BodyGrammarSlot slot1670;
private BodyGrammarSlot slot1671;
private BodyGrammarSlot slot1672;
private BodyGrammarSlot slot1673;
private BodyGrammarSlot slot1658;
private BodyGrammarSlot slot1659;
private BodyGrammarSlot slot1660;
private BodyGrammarSlot slot1661;
private BodyGrammarSlot slot1675;
private BodyGrammarSlot slot1676;
private BodyGrammarSlot slot1677;
private BodyGrammarSlot slot1678;
private BodyGrammarSlot slot1702;
private BodyGrammarSlot slot1703;
private BodyGrammarSlot slot1705;
private BodyGrammarSlot slot1706;
private BodyGrammarSlot slot2034;
private BodyGrammarSlot slot2035;
private BodyGrammarSlot slot2036;
private BodyGrammarSlot slot2037;
private BodyGrammarSlot slot2727;
private BodyGrammarSlot slot2728;
private BodyGrammarSlot slot2729;
private BodyGrammarSlot slot2730;
private BodyGrammarSlot slot2731;
private BodyGrammarSlot slot2732;
private BodyGrammarSlot slot1723;
private BodyGrammarSlot slot1724;
private BodyGrammarSlot slot1725;
private BodyGrammarSlot slot1726;
private BodyGrammarSlot slot1727;
private BodyGrammarSlot slot1728;
private BodyGrammarSlot slot1730;
private BodyGrammarSlot slot1732;
private BodyGrammarSlot slot1733;
private BodyGrammarSlot slot1735;
private BodyGrammarSlot slot1736;
private BodyGrammarSlot slot1737;
private BodyGrammarSlot slot2593;
private BodyGrammarSlot slot2594;
private BodyGrammarSlot slot2595;
private BodyGrammarSlot slot2596;
private BodyGrammarSlot slot2597;
private BodyGrammarSlot slot2598;
private BodyGrammarSlot slot2599;
private BodyGrammarSlot slot2600;
private BodyGrammarSlot slot2341;
private BodyGrammarSlot slot2342;
private BodyGrammarSlot slot2343;
private BodyGrammarSlot slot2344;
private BodyGrammarSlot slot1739;
private BodyGrammarSlot slot1740;
private BodyGrammarSlot slot1741;
private BodyGrammarSlot slot2013;
private BodyGrammarSlot slot2014;
private BodyGrammarSlot slot2015;
private BodyGrammarSlot slot2016;
private BodyGrammarSlot slot1748;
private BodyGrammarSlot slot1749;
private BodyGrammarSlot slot1750;
private BodyGrammarSlot slot1751;
private BodyGrammarSlot slot1752;
private BodyGrammarSlot slot1753;
private BodyGrammarSlot slot1754;
private BodyGrammarSlot slot1755;
private BodyGrammarSlot slot1766;
private BodyGrammarSlot slot1767;
private BodyGrammarSlot slot1768;
private BodyGrammarSlot slot1769;
private BodyGrammarSlot slot2633;
private BodyGrammarSlot slot2634;
private BodyGrammarSlot slot2635;
private BodyGrammarSlot slot2636;
private BodyGrammarSlot slot2637;
private BodyGrammarSlot slot2638;
private BodyGrammarSlot slot2639;
private BodyGrammarSlot slot2640;
private BodyGrammarSlot slot1785;
private BodyGrammarSlot slot1786;
private BodyGrammarSlot slot1806;
private BodyGrammarSlot slot1807;
private BodyGrammarSlot slot1808;
private BodyGrammarSlot slot1855;
private BodyGrammarSlot slot1856;
private BodyGrammarSlot slot1857;
private BodyGrammarSlot slot1858;
private BodyGrammarSlot slot1859;
private BodyGrammarSlot slot1860;
private BodyGrammarSlot slot1862;
private BodyGrammarSlot slot1863;
private BodyGrammarSlot slot1864;
private BodyGrammarSlot slot1865;
private BodyGrammarSlot slot1870;
private BodyGrammarSlot slot1871;
private BodyGrammarSlot slot1872;
private BodyGrammarSlot slot1873;
private BodyGrammarSlot slot1874;
private BodyGrammarSlot slot1875;
private BodyGrammarSlot slot1876;
private BodyGrammarSlot slot1877;
private BodyGrammarSlot slot2676;
private BodyGrammarSlot slot2677;
private BodyGrammarSlot slot2678;
private BodyGrammarSlot slot2626;
private BodyGrammarSlot slot2627;
private BodyGrammarSlot slot2628;
private BodyGrammarSlot slot2645;
private BodyGrammarSlot slot2646;
private BodyGrammarSlot slot2039;
private BodyGrammarSlot slot2057;
private BodyGrammarSlot slot2058;
private BodyGrammarSlot slot2059;
private BodyGrammarSlot slot2060;
private BodyGrammarSlot slot2062;
private BodyGrammarSlot slot2064;
private BodyGrammarSlot slot2065;
private BodyGrammarSlot slot2066;
private BodyGrammarSlot slot2163;
private BodyGrammarSlot slot2164;
private BodyGrammarSlot slot2165;
private BodyGrammarSlot slot2166;
private BodyGrammarSlot slot2167;
private BodyGrammarSlot slot2168;
private BodyGrammarSlot slot2068;
private BodyGrammarSlot slot2069;
private BodyGrammarSlot slot2070;
private BodyGrammarSlot slot2071;
private BodyGrammarSlot slot2072;
private BodyGrammarSlot slot2073;
private BodyGrammarSlot slot2077;
private BodyGrammarSlot slot2078;
private BodyGrammarSlot slot2079;
private BodyGrammarSlot slot2081;
private BodyGrammarSlot slot2082;
private BodyGrammarSlot slot2083;
private BodyGrammarSlot slot2084;
private BodyGrammarSlot slot2087;
private BodyGrammarSlot slot2088;
private BodyGrammarSlot slot2435;
private BodyGrammarSlot slot2436;
private BodyGrammarSlot slot2437;
private BodyGrammarSlot slot2438;
private BodyGrammarSlot slot2439;
private BodyGrammarSlot slot2440;
private BodyGrammarSlot slot2441;
private BodyGrammarSlot slot2442;
private BodyGrammarSlot slot2114;
private BodyGrammarSlot slot2115;
private BodyGrammarSlot slot2116;
private BodyGrammarSlot slot2117;
private BodyGrammarSlot slot2118;
private BodyGrammarSlot slot2119;
private BodyGrammarSlot slot2120;
private BodyGrammarSlot slot2121;
private BodyGrammarSlot slot2122;
private BodyGrammarSlot slot2123;
private BodyGrammarSlot slot2124;
private BodyGrammarSlot slot2125;
private BodyGrammarSlot slot2126;
private BodyGrammarSlot slot2127;
private BodyGrammarSlot slot2609;
private BodyGrammarSlot slot2610;
private BodyGrammarSlot slot2611;
private BodyGrammarSlot slot2178;
private BodyGrammarSlot slot2179;
private BodyGrammarSlot slot2180;
private BodyGrammarSlot slot2181;
private BodyGrammarSlot slot2182;
private BodyGrammarSlot slot2183;
private BodyGrammarSlot slot2185;
private BodyGrammarSlot slot2186;
private BodyGrammarSlot slot2288;
private BodyGrammarSlot slot2289;
private BodyGrammarSlot slot2290;
private BodyGrammarSlot slot2291;
private BodyGrammarSlot slot2292;
private BodyGrammarSlot slot2293;
private BodyGrammarSlot slot2193;
private BodyGrammarSlot slot2194;
private BodyGrammarSlot slot2195;
private BodyGrammarSlot slot2196;
private BodyGrammarSlot slot2236;
private BodyGrammarSlot slot2237;
private BodyGrammarSlot slot2238;
private BodyGrammarSlot slot2239;
private BodyGrammarSlot slot2240;
private BodyGrammarSlot slot2241;
private BodyGrammarSlot slot2242;
private BodyGrammarSlot slot2243;
private BodyGrammarSlot slot2244;
private BodyGrammarSlot slot2245;
private BodyGrammarSlot slot2246;
private BodyGrammarSlot slot2247;
private BodyGrammarSlot slot2248;
private BodyGrammarSlot slot2249;
private BodyGrammarSlot slot2462;
private BodyGrammarSlot slot2463;
private BodyGrammarSlot slot2464;
private BodyGrammarSlot slot2492;
private BodyGrammarSlot slot2493;
private BodyGrammarSlot slot2494;
private BodyGrammarSlot slot2495;
private BodyGrammarSlot slot2506;
private BodyGrammarSlot slot2507;
private BodyGrammarSlot slot2508;
private BodyGrammarSlot slot2509;
private BodyGrammarSlot slot2510;
private BodyGrammarSlot slot2511;
private BodyGrammarSlot slot2512;
private BodyGrammarSlot slot2513;
private BodyGrammarSlot slot2489;
private BodyGrammarSlot slot2490;
private BodyGrammarSlot slot2491;
private BodyGrammarSlot slot2322;
private BodyGrammarSlot slot2323;
private BodyGrammarSlot slot2324;
private BodyGrammarSlot slot2326;
private BodyGrammarSlot slot2327;
private BodyGrammarSlot slot2328;
private BodyGrammarSlot slot2329;
private BodyGrammarSlot slot2330;
private BodyGrammarSlot slot2331;
private BodyGrammarSlot slot2525;
private BodyGrammarSlot slot2526;
private BodyGrammarSlot slot2527;
private BodyGrammarSlot slot2528;
private BodyGrammarSlot slot2357;
private BodyGrammarSlot slot2358;
private BodyGrammarSlot slot2359;
private BodyGrammarSlot slot2423;
private BodyGrammarSlot slot2450;
private BodyGrammarSlot slot2451;
private BodyGrammarSlot slot2452;
private BodyGrammarSlot slot2453;
private BodyGrammarSlot slot2454;
private BodyGrammarSlot slot2455;
private BodyGrammarSlot slot2456;
private BodyGrammarSlot slot2457;
private BodyGrammarSlot slot2529;
private BodyGrammarSlot slot2530;
private BodyGrammarSlot slot2531;
private BodyGrammarSlot slot2532;
private BodyGrammarSlot slot2533;
private BodyGrammarSlot slot2534;
private BodyGrammarSlot slot2535;
private BodyGrammarSlot slot2536;
private BodyGrammarSlot slot2657;
private BodyGrammarSlot slot2658;
private BodyGrammarSlot slot2697;
private BodyGrammarSlot slot2698;
private BodyGrammarSlot slot2699;
private BodyGrammarSlot slot2568;
private BodyGrammarSlot slot2569;
private BodyGrammarSlot slot2571;
private BodyGrammarSlot slot2572;
private BodyGrammarSlot slot2573;
private BodyGrammarSlot slot2574;
private BodyGrammarSlot slot2575;
private BodyGrammarSlot slot2576;
private BodyGrammarSlot slot2577;
private BodyGrammarSlot slot2578;
private BodyGrammarSlot slot2579;
private BodyGrammarSlot slot2580;

public Generated() {
  super(new DistributedGSSLookupFactory(), new NewSPPFLookupFactory(), new DefaultDescriptorLookupFactory());
  slot0.setFirstGrammarSlotForAlternate(slot2, 0);
  slot0.setFirstGrammarSlotForAlternate(slot5, 1);
  slot1.setFirstGrammarSlotForAlternate(slot482, 0);
  slot1.setFirstGrammarSlotForAlternate(slot484, 1);
  slot1.setFirstGrammarSlotForAlternate(slot486, 2);
  slot1.setFirstGrammarSlotForAlternate(slot488, 3);
  slot1.setFirstGrammarSlotForAlternate(slot490, 4);
  slot1.setFirstGrammarSlotForAlternate(slot492, 5);
  slot1.setFirstGrammarSlotForAlternate(slot494, 6);
  slot1.setFirstGrammarSlotForAlternate(slot496, 7);
  slot4.setFirstGrammarSlotForAlternate(slot443, 0);
  slot4.setFirstGrammarSlotForAlternate(slot449, 1);
  slot7.setFirstGrammarSlotForAlternate(slot8, 0);
  slot7.setFirstGrammarSlotForAlternate(slot17, 1);
  slot7.setFirstGrammarSlotForAlternate(slot24, 2);
  slot9.setFirstGrammarSlotForAlternate(slot2430, 0);
  slot13.setFirstGrammarSlotForAlternate(slot462, 0);
  slot16.setFirstGrammarSlotForAlternate(slot818, 0);
  slot16.setFirstGrammarSlotForAlternate(slot820, 1);
  slot23.setFirstGrammarSlotForAlternate(slot2319, 0);
  slot34.setFirstGrammarSlotForAlternate(slot35, 0);
  slot37.setFirstGrammarSlotForAlternate(slot2197, 0);
  slot37.setFirstGrammarSlotForAlternate(slot2199, 1);
  slot37.setFirstGrammarSlotForAlternate(slot2201, 2);
  slot40.setFirstGrammarSlotForAlternate(slot42, 0);
  slot41.setFirstGrammarSlotForAlternate(slot2647, 0);
  slot44.setFirstGrammarSlotForAlternate(slot1502, 0);
  slot44.setFirstGrammarSlotForAlternate(slot1504, 1);
  slot47.setFirstGrammarSlotForAlternate(slot49, 0);
  slot47.setFirstGrammarSlotForAlternate(slot51, 1);
  slot48.setFirstGrammarSlotForAlternate(slot1427, 0);
  slot53.setFirstGrammarSlotForAlternate(slot54, 0);
  slot56.setFirstGrammarSlotForAlternate(slot768, 0);
  slot56.setFirstGrammarSlotForAlternate(slot770, 1);
  slot59.setFirstGrammarSlotForAlternate(slot1128, 0);
  slot59.setFirstGrammarSlotForAlternate(slot1129, 1);
  slot64.setFirstGrammarSlotForAlternate(slot66, 0);
  slot64.setFirstGrammarSlotForAlternate(slot69, 1);
  slot64.setFirstGrammarSlotForAlternate(slot72, 2);
  slot65.setFirstGrammarSlotForAlternate(slot855, 0);
  slot68.setFirstGrammarSlotForAlternate(slot2622, 0);
  slot68.setFirstGrammarSlotForAlternate(slot2624, 1);
  slot71.setFirstGrammarSlotForAlternate(slot2360, 0);
  slot71.setFirstGrammarSlotForAlternate(slot2362, 1);
  slot71.setFirstGrammarSlotForAlternate(slot2364, 2);
  slot71.setFirstGrammarSlotForAlternate(slot2370, 3);
  slot71.setFirstGrammarSlotForAlternate(slot2380, 4);
  slot71.setFirstGrammarSlotForAlternate(slot2390, 5);
  slot74.setFirstGrammarSlotForAlternate(slot76, 0);
  slot74.setFirstGrammarSlotForAlternate(slot86, 1);
  slot75.setFirstGrammarSlotForAlternate(slot1814, 0);
  slot75.setFirstGrammarSlotForAlternate(slot1820, 1);
  slot75.setFirstGrammarSlotForAlternate(slot1822, 2);
  slot75.setFirstGrammarSlotForAlternate(slot1824, 3);
  slot75.setFirstGrammarSlotForAlternate(slot1826, 4);
  slot75.setFirstGrammarSlotForAlternate(slot1832, 5);
  slot75.setFirstGrammarSlotForAlternate(slot1838, 6);
  slot75.setFirstGrammarSlotForAlternate(slot1840, 7);
  slot75.setFirstGrammarSlotForAlternate(slot1842, 8);
  slot75.setFirstGrammarSlotForAlternate(slot1848, 9);
  slot80.setFirstGrammarSlotForAlternate(slot1595, 0);
  slot85.setFirstGrammarSlotForAlternate(slot100, 0);
  slot94.setFirstGrammarSlotForAlternate(slot95, 0);
  slot99.setFirstGrammarSlotForAlternate(slot1524, 0);
  slot102.setFirstGrammarSlotForAlternate(slot104, 0);
  slot103.setFirstGrammarSlotForAlternate(slot2679, 0);
  slot105.setFirstGrammarSlotForAlternate(slot2316, 0);
  slot108.setFirstGrammarSlotForAlternate(slot110, 0);
  slot108.setFirstGrammarSlotForAlternate(slot112, 1);
  slot109.setFirstGrammarSlotForAlternate(slot203, 0);
  slot109.setFirstGrammarSlotForAlternate(slot208, 1);
  slot113.setFirstGrammarSlotForAlternate(slot114, 0);
  slot113.setFirstGrammarSlotForAlternate(slot116, 1);
  slot115.setFirstGrammarSlotForAlternate(slot1625, 0);
  slot115.setFirstGrammarSlotForAlternate(slot1627, 1);
  slot118.setFirstGrammarSlotForAlternate(slot120, 0);
  slot119.setFirstGrammarSlotForAlternate(slot2089, 0);
  slot123.setFirstGrammarSlotForAlternate(slot124, 0);
  slot123.setFirstGrammarSlotForAlternate(slot128, 1);
  slot125.setFirstGrammarSlotForAlternate(slot1650, 0);
  slot125.setFirstGrammarSlotForAlternate(slot1652, 1);
  slot129.setFirstGrammarSlotForAlternate(slot131, 0);
  slot129.setFirstGrammarSlotForAlternate(slot141, 1);
  slot129.setFirstGrammarSlotForAlternate(slot156, 2);
  slot129.setFirstGrammarSlotForAlternate(slot175, 3);
  slot129.setFirstGrammarSlotForAlternate(slot189, 4);
  slot130.setFirstGrammarSlotForAlternate(slot1593, 0);
  slot135.setFirstGrammarSlotForAlternate(slot735, 0);
  slot135.setFirstGrammarSlotForAlternate(slot737, 1);
  slot140.setFirstGrammarSlotForAlternate(slot2111, 0);
  slot145.setFirstGrammarSlotForAlternate(slot1756, 0);
  slot164.setFirstGrammarSlotForAlternate(slot2547, 0);
  slot164.setFirstGrammarSlotForAlternate(slot2548, 1);
  slot205.setFirstGrammarSlotForAlternate(slot2681, 0);
  slot205.setFirstGrammarSlotForAlternate(slot2683, 1);
  slot205.setFirstGrammarSlotForAlternate(slot2685, 2);
  slot205.setFirstGrammarSlotForAlternate(slot2687, 3);
  slot205.setFirstGrammarSlotForAlternate(slot2689, 4);
  slot205.setFirstGrammarSlotForAlternate(slot2691, 5);
  slot205.setFirstGrammarSlotForAlternate(slot2693, 6);
  slot205.setFirstGrammarSlotForAlternate(slot2695, 7);
  slot210.setFirstGrammarSlotForAlternate(slot211, 0);
  slot210.setFirstGrammarSlotForAlternate(slot215, 1);
  slot212.setFirstGrammarSlotForAlternate(slot1484, 0);
  slot212.setFirstGrammarSlotForAlternate(slot1486, 1);
  slot216.setFirstGrammarSlotForAlternate(slot218, 0);
  slot216.setFirstGrammarSlotForAlternate(slot221, 1);
  slot216.setFirstGrammarSlotForAlternate(slot224, 2);
  slot216.setFirstGrammarSlotForAlternate(slot227, 3);
  slot217.setFirstGrammarSlotForAlternate(slot1507, 0);
  slot220.setFirstGrammarSlotForAlternate(slot744, 0);
  slot223.setFirstGrammarSlotForAlternate(slot2300, 0);
  slot226.setFirstGrammarSlotForAlternate(slot1719, 0);
  slot229.setFirstGrammarSlotForAlternate(slot230, 0);
  slot229.setFirstGrammarSlotForAlternate(slot237, 1);
  slot234.setFirstGrammarSlotForAlternate(slot740, 0);
  slot234.setFirstGrammarSlotForAlternate(slot742, 1);
  slot243.setFirstGrammarSlotForAlternate(slot323, 0);
  slot243.setFirstGrammarSlotForAlternate(slot325, 1);
  slot248.setFirstGrammarSlotForAlternate(slot249, 0);
  slot248.setFirstGrammarSlotForAlternate(slot253, 1);
  slot248.setFirstGrammarSlotForAlternate(slot256, 2);
  slot248.setFirstGrammarSlotForAlternate(slot263, 3);
  slot248.setFirstGrammarSlotForAlternate(slot269, 4);
  slot250.setFirstGrammarSlotForAlternate(slot945, 0);
  slot258.setFirstGrammarSlotForAlternate(slot775, 0);
  slot258.setFirstGrammarSlotForAlternate(slot776, 1);
  slot260.setFirstGrammarSlotForAlternate(slot815, 0);
  slot260.setFirstGrammarSlotForAlternate(slot816, 1);
  slot273.setFirstGrammarSlotForAlternate(slot274, 0);
  slot280.setFirstGrammarSlotForAlternate(slot281, 0);
  slot283.setFirstGrammarSlotForAlternate(slot284, 0);
  slot286.setFirstGrammarSlotForAlternate(slot411, 0);
  slot286.setFirstGrammarSlotForAlternate(slot418, 1);
  slot291.setFirstGrammarSlotForAlternate(slot292, 0);
  slot291.setFirstGrammarSlotForAlternate(slot297, 1);
  slot294.setFirstGrammarSlotForAlternate(slot1454, 0);
  slot294.setFirstGrammarSlotForAlternate(slot1458, 1);
  slot299.setFirstGrammarSlotForAlternate(slot300, 0);
  slot299.setFirstGrammarSlotForAlternate(slot302, 1);
  slot308.setFirstGrammarSlotForAlternate(slot310, 0);
  slot308.setFirstGrammarSlotForAlternate(slot313, 1);
  slot309.setFirstGrammarSlotForAlternate(slot2629, 0);
  slot309.setFirstGrammarSlotForAlternate(slot2631, 1);
  slot312.setFirstGrammarSlotForAlternate(slot1286, 0);
  slot312.setFirstGrammarSlotForAlternate(slot1288, 1);
  slot312.setFirstGrammarSlotForAlternate(slot1298, 2);
  slot312.setFirstGrammarSlotForAlternate(slot1301, 3);
  slot312.setFirstGrammarSlotForAlternate(slot1304, 4);
  slot312.setFirstGrammarSlotForAlternate(slot1307, 5);
  slot312.setFirstGrammarSlotForAlternate(slot1310, 6);
  slot312.setFirstGrammarSlotForAlternate(slot1313, 7);
  slot312.setFirstGrammarSlotForAlternate(slot1316, 8);
  slot315.setFirstGrammarSlotForAlternate(slot317, 0);
  slot316.setFirstGrammarSlotForAlternate(slot2700, 0);
  slot316.setFirstGrammarSlotForAlternate(slot2706, 1);
  slot319.setFirstGrammarSlotForAlternate(slot320, 0);
  slot322.setFirstGrammarSlotForAlternate(slot1136, 0);
  slot322.setFirstGrammarSlotForAlternate(slot1143, 1);
  slot326.setFirstGrammarSlotForAlternate(slot328, 0);
  slot326.setFirstGrammarSlotForAlternate(slot330, 1);
  slot327.setFirstGrammarSlotForAlternate(slot2601, 0);
  slot327.setFirstGrammarSlotForAlternate(slot2603, 1);
  slot327.setFirstGrammarSlotForAlternate(slot2605, 2);
  slot327.setFirstGrammarSlotForAlternate(slot2607, 3);
  slot334.setFirstGrammarSlotForAlternate(slot335, 0);
  slot334.setFirstGrammarSlotForAlternate(slot342, 1);
  slot339.setFirstGrammarSlotForAlternate(slot543, 0);
  slot344.setFirstGrammarSlotForAlternate(slot345, 0);
  slot344.setFirstGrammarSlotForAlternate(slot351, 1);
  slot353.setFirstGrammarSlotForAlternate(slot355, 0);
  slot353.setFirstGrammarSlotForAlternate(slot360, 1);
  slot354.setFirstGrammarSlotForAlternate(slot787, 0);
  slot356.setFirstGrammarSlotForAlternate(slot1742, 0);
  slot356.setFirstGrammarSlotForAlternate(slot1743, 1);
  slot362.setFirstGrammarSlotForAlternate(slot363, 0);
  slot362.setFirstGrammarSlotForAlternate(slot368, 1);
  slot365.setFirstGrammarSlotForAlternate(slot2040, 0);
  slot365.setFirstGrammarSlotForAlternate(slot2042, 1);
  slot365.setFirstGrammarSlotForAlternate(slot2044, 2);
  slot365.setFirstGrammarSlotForAlternate(slot2046, 3);
  slot365.setFirstGrammarSlotForAlternate(slot2048, 4);
  slot365.setFirstGrammarSlotForAlternate(slot2050, 5);
  slot365.setFirstGrammarSlotForAlternate(slot2052, 6);
  slot365.setFirstGrammarSlotForAlternate(slot2054, 7);
  slot370.setFirstGrammarSlotForAlternate(slot371, 0);
  slot373.setFirstGrammarSlotForAlternate(slot2612, 0);
  slot376.setFirstGrammarSlotForAlternate(slot789, 0);
  slot376.setFirstGrammarSlotForAlternate(slot790, 1);
  slot381.setFirstGrammarSlotForAlternate(slot382, 0);
  slot381.setFirstGrammarSlotForAlternate(slot384, 1);
  slot386.setFirstGrammarSlotForAlternate(slot387, 0);
  slot386.setFirstGrammarSlotForAlternate(slot390, 1);
  slot389.setFirstGrammarSlotForAlternate(slot778, 0);
  slot392.setFirstGrammarSlotForAlternate(slot394, 0);
  slot393.setFirstGrammarSlotForAlternate(slot907, 0);
  slot393.setFirstGrammarSlotForAlternate(slot909, 1);
  slot396.setFirstGrammarSlotForAlternate(slot2152, 0);
  slot396.setFirstGrammarSlotForAlternate(slot2160, 1);
  slot399.setFirstGrammarSlotForAlternate(slot401, 0);
  slot400.setFirstGrammarSlotForAlternate(slot2662, 0);
  slot400.setFirstGrammarSlotForAlternate(slot2663, 1);
  slot405.setFirstGrammarSlotForAlternate(slot2496, 0);
  slot405.setFirstGrammarSlotForAlternate(slot2497, 1);
  slot408.setFirstGrammarSlotForAlternate(slot421, 0);
  slot408.setFirstGrammarSlotForAlternate(slot423, 1);
  slot415.setFirstGrammarSlotForAlternate(slot2542, 0);
  slot420.setFirstGrammarSlotForAlternate(slot2335, 0);
  slot424.setFirstGrammarSlotForAlternate(slot425, 0);
  slot427.setFirstGrammarSlotForAlternate(slot1622, 0);
  slot427.setFirstGrammarSlotForAlternate(slot1624, 1);
  slot430.setFirstGrammarSlotForAlternate(slot2522, 0);
  slot430.setFirstGrammarSlotForAlternate(slot2523, 1);
  slot435.setFirstGrammarSlotForAlternate(slot436, 0);
  slot435.setFirstGrammarSlotForAlternate(slot438, 1);
  slot435.setFirstGrammarSlotForAlternate(slot440, 2);
  slot442.setFirstGrammarSlotForAlternate(slot927, 0);
  slot445.setFirstGrammarSlotForAlternate(slot1809, 0);
  slot445.setFirstGrammarSlotForAlternate(slot1810, 1);
  slot448.setFirstGrammarSlotForAlternate(slot2477, 0);
  slot451.setFirstGrammarSlotForAlternate(slot452, 0);
  slot451.setFirstGrammarSlotForAlternate(slot459, 1);
  slot456.setFirstGrammarSlotForAlternate(slot1446, 0);
  slot461.setFirstGrammarSlotForAlternate(slot871, 0);
  slot461.setFirstGrammarSlotForAlternate(slot873, 1);
  slot464.setFirstGrammarSlotForAlternate(slot466, 0);
  slot465.setFirstGrammarSlotForAlternate(slot1218, 0);
  slot465.setFirstGrammarSlotForAlternate(slot1221, 1);
  slot465.setFirstGrammarSlotForAlternate(slot1223, 2);
  slot465.setFirstGrammarSlotForAlternate(slot1225, 3);
  slot470.setFirstGrammarSlotForAlternate(slot472, 0);
  slot471.setFirstGrammarSlotForAlternate(slot1105, 0);
  slot471.setFirstGrammarSlotForAlternate(slot1112, 1);
  slot474.setFirstGrammarSlotForAlternate(slot475, 0);
  slot474.setFirstGrammarSlotForAlternate(slot480, 1);
  slot476.setFirstGrammarSlotForAlternate(slot2311, 0);
  slot476.setFirstGrammarSlotForAlternate(slot2312, 1);
  slot498.setFirstGrammarSlotForAlternate(slot499, 0);
  slot498.setFirstGrammarSlotForAlternate(slot500, 1);
  slot502.setFirstGrammarSlotForAlternate(slot503, 0);
  slot502.setFirstGrammarSlotForAlternate(slot513, 1);
  slot505.setFirstGrammarSlotForAlternate(slot1801, 0);
  slot505.setFirstGrammarSlotForAlternate(slot1803, 1);
  slot508.setFirstGrammarSlotForAlternate(slot2483, 0);
  slot508.setFirstGrammarSlotForAlternate(slot2485, 1);
  slot517.setFirstGrammarSlotForAlternate(slot754, 0);
  slot517.setFirstGrammarSlotForAlternate(slot759, 1);
  slot520.setFirstGrammarSlotForAlternate(slot1762, 0);
  slot520.setFirstGrammarSlotForAlternate(slot1764, 1);
  slot523.setFirstGrammarSlotForAlternate(slot524, 0);
  slot523.setFirstGrammarSlotForAlternate(slot527, 1);
  slot528.setFirstGrammarSlotForAlternate(slot2294, 0);
  slot528.setFirstGrammarSlotForAlternate(slot2296, 1);
  slot532.setFirstGrammarSlotForAlternate(slot534, 0);
  slot532.setFirstGrammarSlotForAlternate(slot536, 1);
  slot533.setFirstGrammarSlotForAlternate(slot1589, 0);
  slot537.setFirstGrammarSlotForAlternate(slot538, 0);
  slot537.setFirstGrammarSlotForAlternate(slot540, 1);
  slot539.setFirstGrammarSlotForAlternate(slot1662, 0);
  slot539.setFirstGrammarSlotForAlternate(slot1666, 1);
  slot542.setFirstGrammarSlotForAlternate(slot1647, 0);
  slot542.setFirstGrammarSlotForAlternate(slot1649, 1);
  slot547.setFirstGrammarSlotForAlternate(slot2418, 0);
  slot554.setFirstGrammarSlotForAlternate(slot556, 0);
  slot554.setFirstGrammarSlotForAlternate(slot559, 1);
  slot555.setFirstGrammarSlotForAlternate(slot2669, 0);
  slot555.setFirstGrammarSlotForAlternate(slot2671, 1);
  slot555.setFirstGrammarSlotForAlternate(slot2674, 2);
  slot558.setFirstGrammarSlotForAlternate(slot2712, 0);
  slot561.setFirstGrammarSlotForAlternate(slot562, 0);
  slot561.setFirstGrammarSlotForAlternate(slot564, 1);
  slot561.setFirstGrammarSlotForAlternate(slot566, 2);
  slot561.setFirstGrammarSlotForAlternate(slot568, 3);
  slot561.setFirstGrammarSlotForAlternate(slot570, 4);
  slot561.setFirstGrammarSlotForAlternate(slot572, 5);
  slot561.setFirstGrammarSlotForAlternate(slot574, 6);
  slot561.setFirstGrammarSlotForAlternate(slot576, 7);
  slot561.setFirstGrammarSlotForAlternate(slot578, 8);
  slot561.setFirstGrammarSlotForAlternate(slot580, 9);
  slot561.setFirstGrammarSlotForAlternate(slot582, 10);
  slot561.setFirstGrammarSlotForAlternate(slot584, 11);
  slot561.setFirstGrammarSlotForAlternate(slot586, 12);
  slot561.setFirstGrammarSlotForAlternate(slot588, 13);
  slot561.setFirstGrammarSlotForAlternate(slot590, 14);
  slot561.setFirstGrammarSlotForAlternate(slot592, 15);
  slot561.setFirstGrammarSlotForAlternate(slot594, 16);
  slot561.setFirstGrammarSlotForAlternate(slot596, 17);
  slot561.setFirstGrammarSlotForAlternate(slot598, 18);
  slot561.setFirstGrammarSlotForAlternate(slot600, 19);
  slot561.setFirstGrammarSlotForAlternate(slot602, 20);
  slot561.setFirstGrammarSlotForAlternate(slot604, 21);
  slot561.setFirstGrammarSlotForAlternate(slot606, 22);
  slot561.setFirstGrammarSlotForAlternate(slot608, 23);
  slot561.setFirstGrammarSlotForAlternate(slot610, 24);
  slot561.setFirstGrammarSlotForAlternate(slot612, 25);
  slot561.setFirstGrammarSlotForAlternate(slot614, 26);
  slot561.setFirstGrammarSlotForAlternate(slot616, 27);
  slot561.setFirstGrammarSlotForAlternate(slot618, 28);
  slot561.setFirstGrammarSlotForAlternate(slot620, 29);
  slot561.setFirstGrammarSlotForAlternate(slot622, 30);
  slot561.setFirstGrammarSlotForAlternate(slot624, 31);
  slot561.setFirstGrammarSlotForAlternate(slot626, 32);
  slot561.setFirstGrammarSlotForAlternate(slot628, 33);
  slot561.setFirstGrammarSlotForAlternate(slot630, 34);
  slot561.setFirstGrammarSlotForAlternate(slot632, 35);
  slot561.setFirstGrammarSlotForAlternate(slot634, 36);
  slot561.setFirstGrammarSlotForAlternate(slot636, 37);
  slot561.setFirstGrammarSlotForAlternate(slot638, 38);
  slot561.setFirstGrammarSlotForAlternate(slot640, 39);
  slot561.setFirstGrammarSlotForAlternate(slot642, 40);
  slot561.setFirstGrammarSlotForAlternate(slot644, 41);
  slot561.setFirstGrammarSlotForAlternate(slot646, 42);
  slot561.setFirstGrammarSlotForAlternate(slot648, 43);
  slot561.setFirstGrammarSlotForAlternate(slot650, 44);
  slot561.setFirstGrammarSlotForAlternate(slot652, 45);
  slot561.setFirstGrammarSlotForAlternate(slot654, 46);
  slot561.setFirstGrammarSlotForAlternate(slot656, 47);
  slot561.setFirstGrammarSlotForAlternate(slot658, 48);
  slot561.setFirstGrammarSlotForAlternate(slot660, 49);
  slot662.setFirstGrammarSlotForAlternate(slot664, 0);
  slot662.setFirstGrammarSlotForAlternate(slot667, 1);
  slot663.setFirstGrammarSlotForAlternate(slot1866, 0);
  slot666.setFirstGrammarSlotForAlternate(slot1654, 0);
  slot669.setFirstGrammarSlotForAlternate(slot671, 0);
  slot670.setFirstGrammarSlotForAlternate(slot2550, 0);
  slot670.setFirstGrammarSlotForAlternate(slot2553, 1);
  slot670.setFirstGrammarSlotForAlternate(slot2559, 2);
  slot670.setFirstGrammarSlotForAlternate(slot2565, 3);
  slot675.setFirstGrammarSlotForAlternate(slot677, 0);
  slot675.setFirstGrammarSlotForAlternate(slot679, 1);
  slot675.setFirstGrammarSlotForAlternate(slot685, 2);
  slot675.setFirstGrammarSlotForAlternate(slot706, 3);
  slot675.setFirstGrammarSlotForAlternate(slot716, 4);
  slot676.setFirstGrammarSlotForAlternate(slot1916, 0);
  slot676.setFirstGrammarSlotForAlternate(slot1926, 1);
  slot676.setFirstGrammarSlotForAlternate(slot1932, 2);
  slot676.setFirstGrammarSlotForAlternate(slot1949, 3);
  slot676.setFirstGrammarSlotForAlternate(slot1955, 4);
  slot676.setFirstGrammarSlotForAlternate(slot1957, 5);
  slot676.setFirstGrammarSlotForAlternate(slot1971, 6);
  slot676.setFirstGrammarSlotForAlternate(slot1977, 7);
  slot676.setFirstGrammarSlotForAlternate(slot1983, 8);
  slot676.setFirstGrammarSlotForAlternate(slot1993, 9);
  slot676.setFirstGrammarSlotForAlternate(slot2001, 10);
  slot676.setFirstGrammarSlotForAlternate(slot2005, 11);
  slot676.setFirstGrammarSlotForAlternate(slot2011, 12);
  slot689.setFirstGrammarSlotForAlternate(slot1186, 0);
  slot689.setFirstGrammarSlotForAlternate(slot1188, 1);
  slot694.setFirstGrammarSlotForAlternate(slot1400, 0);
  slot694.setFirstGrammarSlotForAlternate(slot1402, 1);
  slot699.setFirstGrammarSlotForAlternate(slot2499, 0);
  slot699.setFirstGrammarSlotForAlternate(slot2501, 1);
  slot730.setFirstGrammarSlotForAlternate(slot731, 0);
  slot730.setFirstGrammarSlotForAlternate(slot733, 1);
  slot732.setFirstGrammarSlotForAlternate(slot2458, 0);
  slot736.setFirstGrammarSlotForAlternate(slot1227, 0);
  slot739.setFirstGrammarSlotForAlternate(slot1713, 0);
  slot743.setFirstGrammarSlotForAlternate(slot1885, 0);
  slot743.setFirstGrammarSlotForAlternate(slot1887, 1);
  slot743.setFirstGrammarSlotForAlternate(slot1890, 2);
  slot745.setFirstGrammarSlotForAlternate(slot1044, 0);
  slot745.setFirstGrammarSlotForAlternate(slot1046, 1);
  slot748.setFirstGrammarSlotForAlternate(slot749, 0);
  slot751.setFirstGrammarSlotForAlternate(slot1450, 0);
  slot751.setFirstGrammarSlotForAlternate(slot1452, 1);
  slot756.setFirstGrammarSlotForAlternate(slot1533, 0);
  slot761.setFirstGrammarSlotForAlternate(slot762, 0);
  slot764.setFirstGrammarSlotForAlternate(slot1787, 0);
  slot764.setFirstGrammarSlotForAlternate(slot1789, 1);
  slot764.setFirstGrammarSlotForAlternate(slot1793, 2);
  slot764.setFirstGrammarSlotForAlternate(slot1797, 3);
  slot764.setFirstGrammarSlotForAlternate(slot1799, 4);
  slot767.setFirstGrammarSlotForAlternate(slot947, 0);
  slot767.setFirstGrammarSlotForAlternate(slot959, 1);
  slot767.setFirstGrammarSlotForAlternate(slot975, 2);
  slot771.setFirstGrammarSlotForAlternate(slot772, 0);
  slot771.setFirstGrammarSlotForAlternate(slot773, 1);
  slot780.setFirstGrammarSlotForAlternate(slot2502, 0);
  slot780.setFirstGrammarSlotForAlternate(slot2504, 1);
  slot792.setFirstGrammarSlotForAlternate(slot793, 0);
  slot792.setFirstGrammarSlotForAlternate(slot795, 1);
  slot796.setFirstGrammarSlotForAlternate(slot797, 0);
  slot796.setFirstGrammarSlotForAlternate(slot799, 1);
  slot798.setFirstGrammarSlotForAlternate(slot1322, 0);
  slot798.setFirstGrammarSlotForAlternate(slot1324, 1);
  slot801.setFirstGrammarSlotForAlternate(slot802, 0);
  slot801.setFirstGrammarSlotForAlternate(slot804, 1);
  slot803.setFirstGrammarSlotForAlternate(slot2412, 0);
  slot806.setFirstGrammarSlotForAlternate(slot807, 0);
  slot806.setFirstGrammarSlotForAlternate(slot809, 1);
  slot806.setFirstGrammarSlotForAlternate(slot811, 2);
  slot806.setFirstGrammarSlotForAlternate(slot813, 3);
  slot822.setFirstGrammarSlotForAlternate(slot823, 0);
  slot822.setFirstGrammarSlotForAlternate(slot824, 1);
  slot826.setFirstGrammarSlotForAlternate(slot828, 0);
  slot826.setFirstGrammarSlotForAlternate(slot838, 1);
  slot827.setFirstGrammarSlotForAlternate(slot2169, 0);
  slot827.setFirstGrammarSlotForAlternate(slot2175, 1);
  slot840.setFirstGrammarSlotForAlternate(slot841, 0);
  slot843.setFirstGrammarSlotForAlternate(slot844, 0);
  slot843.setFirstGrammarSlotForAlternate(slot846, 1);
  slot848.setFirstGrammarSlotForAlternate(slot849, 0);
  slot848.setFirstGrammarSlotForAlternate(slot851, 1);
  slot859.setFirstGrammarSlotForAlternate(slot2416, 0);
  slot864.setFirstGrammarSlotForAlternate(slot865, 0);
  slot864.setFirstGrammarSlotForAlternate(slot867, 1);
  slot870.setFirstGrammarSlotForAlternate(slot2074, 0);
  slot874.setFirstGrammarSlotForAlternate(slot1069, 0);
  slot877.setFirstGrammarSlotForAlternate(slot879, 0);
  slot877.setFirstGrammarSlotForAlternate(slot881, 1);
  slot877.setFirstGrammarSlotForAlternate(slot887, 2);
  slot878.setFirstGrammarSlotForAlternate(slot2091, 0);
  slot878.setFirstGrammarSlotForAlternate(slot2097, 1);
  slot878.setFirstGrammarSlotForAlternate(slot2099, 2);
  slot878.setFirstGrammarSlotForAlternate(slot2105, 3);
  slot893.setFirstGrammarSlotForAlternate(slot894, 0);
  slot893.setFirstGrammarSlotForAlternate(slot896, 1);
  slot895.setFirstGrammarSlotForAlternate(slot2614, 0);
  slot895.setFirstGrammarSlotForAlternate(slot2620, 1);
  slot898.setFirstGrammarSlotForAlternate(slot899, 0);
  slot898.setFirstGrammarSlotForAlternate(slot905, 1);
  slot908.setFirstGrammarSlotForAlternate(slot1264, 0);
  slot908.setFirstGrammarSlotForAlternate(slot1266, 1);
  slot911.setFirstGrammarSlotForAlternate(slot912, 0);
  slot911.setFirstGrammarSlotForAlternate(slot914, 1);
  slot915.setFirstGrammarSlotForAlternate(slot916, 0);
  slot918.setFirstGrammarSlotForAlternate(slot2719, 0);
  slot918.setFirstGrammarSlotForAlternate(slot2725, 1);
  slot921.setFirstGrammarSlotForAlternate(slot923, 0);
  slot921.setFirstGrammarSlotForAlternate(slot925, 1);
  slot922.setFirstGrammarSlotForAlternate(slot1027, 0);
  slot929.setFirstGrammarSlotForAlternate(slot1146, 0);
  slot929.setFirstGrammarSlotForAlternate(slot1148, 1);
  slot932.setFirstGrammarSlotForAlternate(slot933, 0);
  slot939.setFirstGrammarSlotForAlternate(slot2432, 0);
  slot939.setFirstGrammarSlotForAlternate(slot2433, 1);
  slot942.setFirstGrammarSlotForAlternate(slot999, 0);
  slot987.setFirstGrammarSlotForAlternate(slot989, 0);
  slot988.setFirstGrammarSlotForAlternate(slot1582, 0);
  slot988.setFirstGrammarSlotForAlternate(slot1584, 1);
  slot991.setFirstGrammarSlotForAlternate(slot1328, 0);
  slot994.setFirstGrammarSlotForAlternate(slot2332, 0);
  slot994.setFirstGrammarSlotForAlternate(slot2334, 1);
  slot1009.setFirstGrammarSlotForAlternate(slot1010, 0);
  slot1009.setFirstGrammarSlotForAlternate(slot1017, 1);
  slot1016.setFirstGrammarSlotForAlternate(slot1159, 0);
  slot1019.setFirstGrammarSlotForAlternate(slot1020, 0);
  slot1022.setFirstGrammarSlotForAlternate(slot1419, 0);
  slot1022.setFirstGrammarSlotForAlternate(slot1421, 1);
  slot1029.setFirstGrammarSlotForAlternate(slot1030, 0);
  slot1038.setFirstGrammarSlotForAlternate(slot1597, 0);
  slot1041.setFirstGrammarSlotForAlternate(slot1042, 0);
  slot1045.setFirstGrammarSlotForAlternate(slot1149, 0);
  slot1045.setFirstGrammarSlotForAlternate(slot1151, 1);
  slot1048.setFirstGrammarSlotForAlternate(slot1049, 0);
  slot1048.setFirstGrammarSlotForAlternate(slot1056, 1);
  slot1053.setFirstGrammarSlotForAlternate(slot2303, 0);
  slot1053.setFirstGrammarSlotForAlternate(slot2305, 1);
  slot1058.setFirstGrammarSlotForAlternate(slot1059, 0);
  slot1063.setFirstGrammarSlotForAlternate(slot1065, 0);
  slot1063.setFirstGrammarSlotForAlternate(slot1067, 1);
  slot1064.setFirstGrammarSlotForAlternate(slot2465, 0);
  slot1071.setFirstGrammarSlotForAlternate(slot1072, 0);
  slot1071.setFirstGrammarSlotForAlternate(slot1087, 1);
  slot1076.setFirstGrammarSlotForAlternate(slot1707, 0);
  slot1109.setFirstGrammarSlotForAlternate(slot1549, 0);
  slot1109.setFirstGrammarSlotForAlternate(slot1551, 1);
  slot1109.setFirstGrammarSlotForAlternate(slot1553, 2);
  slot1109.setFirstGrammarSlotForAlternate(slot1556, 3);
  slot1109.setFirstGrammarSlotForAlternate(slot1559, 4);
  slot1109.setFirstGrammarSlotForAlternate(slot1561, 5);
  slot1109.setFirstGrammarSlotForAlternate(slot1563, 6);
  slot1114.setFirstGrammarSlotForAlternate(slot1115, 0);
  slot1114.setFirstGrammarSlotForAlternate(slot1117, 1);
  slot1116.setFirstGrammarSlotForAlternate(slot2665, 0);
  slot1119.setFirstGrammarSlotForAlternate(slot1120, 0);
  slot1119.setFirstGrammarSlotForAlternate(slot1126, 1);
  slot1131.setFirstGrammarSlotForAlternate(slot1133, 0);
  slot1131.setFirstGrammarSlotForAlternate(slot1135, 1);
  slot1132.setFirstGrammarSlotForAlternate(slot1691, 0);
  slot1132.setFirstGrammarSlotForAlternate(slot1695, 1);
  slot1140.setFirstGrammarSlotForAlternate(slot2733, 0);
  slot1145.setFirstGrammarSlotForAlternate(slot1910, 0);
  slot1145.setFirstGrammarSlotForAlternate(slot1914, 1);
  slot1153.setFirstGrammarSlotForAlternate(slot1154, 0);
  slot1153.setFirstGrammarSlotForAlternate(slot1157, 1);
  slot1156.setFirstGrammarSlotForAlternate(slot1812, 0);
  slot1165.setFirstGrammarSlotForAlternate(slot1166, 0);
  slot1165.setFirstGrammarSlotForAlternate(slot1172, 1);
  slot1165.setFirstGrammarSlotForAlternate(slot1178, 2);
  slot1165.setFirstGrammarSlotForAlternate(slot1180, 3);
  slot1187.setFirstGrammarSlotForAlternate(slot2187, 0);
  slot1187.setFirstGrammarSlotForAlternate(slot2190, 1);
  slot1190.setFirstGrammarSlotForAlternate(slot1191, 0);
  slot1190.setFirstGrammarSlotForAlternate(slot1193, 1);
  slot1190.setFirstGrammarSlotForAlternate(slot1196, 2);
  slot1190.setFirstGrammarSlotForAlternate(slot1198, 3);
  slot1190.setFirstGrammarSlotForAlternate(slot1200, 4);
  slot1190.setFirstGrammarSlotForAlternate(slot1216, 5);
  slot1195.setFirstGrammarSlotForAlternate(slot2404, 0);
  slot1220.setFirstGrammarSlotForAlternate(slot2708, 0);
  slot1229.setFirstGrammarSlotForAlternate(slot1230, 0);
  slot1236.setFirstGrammarSlotForAlternate(slot1270, 0);
  slot1236.setFirstGrammarSlotForAlternate(slot1276, 1);
  slot1243.setFirstGrammarSlotForAlternate(slot1244, 0);
  slot1243.setFirstGrammarSlotForAlternate(slot1246, 1);
  slot1243.setFirstGrammarSlotForAlternate(slot1248, 2);
  slot1243.setFirstGrammarSlotForAlternate(slot1250, 3);
  slot1243.setFirstGrammarSlotForAlternate(slot1252, 4);
  slot1243.setFirstGrammarSlotForAlternate(slot1254, 5);
  slot1243.setFirstGrammarSlotForAlternate(slot1256, 6);
  slot1258.setFirstGrammarSlotForAlternate(slot1260, 0);
  slot1258.setFirstGrammarSlotForAlternate(slot1262, 1);
  slot1259.setFirstGrammarSlotForAlternate(slot2350, 0);
  slot1259.setFirstGrammarSlotForAlternate(slot2354, 1);
  slot1263.setFirstGrammarSlotForAlternate(slot2641, 0);
  slot1280.setFirstGrammarSlotForAlternate(slot1472, 0);
  slot1280.setFirstGrammarSlotForAlternate(slot1473, 1);
  slot1285.setFirstGrammarSlotForAlternate(slot1679, 0);
  slot1285.setFirstGrammarSlotForAlternate(slot1684, 1);
  slot1285.setFirstGrammarSlotForAlternate(slot1688, 2);
  slot1297.setFirstGrammarSlotForAlternate(slot1770, 0);
  slot1297.setFirstGrammarSlotForAlternate(slot1772, 1);
  slot1319.setFirstGrammarSlotForAlternate(slot1320, 0);
  slot1338.setFirstGrammarSlotForAlternate(slot1339, 0);
  slot1338.setFirstGrammarSlotForAlternate(slot1346, 1);
  slot1343.setFirstGrammarSlotForAlternate(slot2514, 0);
  slot1343.setFirstGrammarSlotForAlternate(slot2516, 1);
  slot1348.setFirstGrammarSlotForAlternate(slot1350, 0);
  slot1348.setFirstGrammarSlotForAlternate(slot1352, 1);
  slot1348.setFirstGrammarSlotForAlternate(slot1358, 2);
  slot1349.setFirstGrammarSlotForAlternate(slot2203, 0);
  slot1349.setFirstGrammarSlotForAlternate(slot2205, 1);
  slot1349.setFirstGrammarSlotForAlternate(slot2211, 2);
  slot1349.setFirstGrammarSlotForAlternate(slot2217, 3);
  slot1349.setFirstGrammarSlotForAlternate(slot2223, 4);
  slot1349.setFirstGrammarSlotForAlternate(slot2229, 5);
  slot1364.setFirstGrammarSlotForAlternate(slot1365, 0);
  slot1364.setFirstGrammarSlotForAlternate(slot1368, 1);
  slot1369.setFirstGrammarSlotForAlternate(slot1371, 0);
  slot1369.setFirstGrammarSlotForAlternate(slot1373, 1);
  slot1370.setFirstGrammarSlotForAlternate(slot1777, 0);
  slot1370.setFirstGrammarSlotForAlternate(slot1782, 1);
  slot1374.setFirstGrammarSlotForAlternate(slot1375, 0);
  slot1374.setFirstGrammarSlotForAlternate(slot1377, 1);
  slot1374.setFirstGrammarSlotForAlternate(slot1379, 2);
  slot1374.setFirstGrammarSlotForAlternate(slot1381, 3);
  slot1374.setFirstGrammarSlotForAlternate(slot1383, 4);
  slot1374.setFirstGrammarSlotForAlternate(slot1385, 5);
  slot1374.setFirstGrammarSlotForAlternate(slot1387, 6);
  slot1374.setFirstGrammarSlotForAlternate(slot1389, 7);
  slot1374.setFirstGrammarSlotForAlternate(slot1391, 8);
  slot1374.setFirstGrammarSlotForAlternate(slot1393, 9);
  slot1395.setFirstGrammarSlotForAlternate(slot1396, 0);
  slot1403.setFirstGrammarSlotForAlternate(slot1404, 0);
  slot1406.setFirstGrammarSlotForAlternate(slot2659, 0);
  slot1406.setFirstGrammarSlotForAlternate(slot2660, 1);
  slot1411.setFirstGrammarSlotForAlternate(slot1412, 0);
  slot1411.setFirstGrammarSlotForAlternate(slot1416, 1);
  slot1418.setFirstGrammarSlotForAlternate(slot1878, 0);
  slot1418.setFirstGrammarSlotForAlternate(slot1883, 1);
  slot1429.setFirstGrammarSlotForAlternate(slot1430, 0);
  slot1434.setFirstGrammarSlotForAlternate(slot2017, 0);
  slot1434.setFirstGrammarSlotForAlternate(slot2023, 1);
  slot1441.setFirstGrammarSlotForAlternate(slot1442, 0);
  slot1441.setFirstGrammarSlotForAlternate(slot1444, 1);
  slot1460.setFirstGrammarSlotForAlternate(slot1531, 0);
  slot1465.setFirstGrammarSlotForAlternate(slot1466, 0);
  slot1465.setFirstGrammarSlotForAlternate(slot1468, 1);
  slot1465.setFirstGrammarSlotForAlternate(slot1470, 2);
  slot1475.setFirstGrammarSlotForAlternate(slot1476, 0);
  slot1475.setFirstGrammarSlotForAlternate(slot1478, 1);
  slot1480.setFirstGrammarSlotForAlternate(slot1481, 0);
  slot1480.setFirstGrammarSlotForAlternate(slot1483, 1);
  slot1488.setFirstGrammarSlotForAlternate(slot1490, 0);
  slot1488.setFirstGrammarSlotForAlternate(slot1492, 1);
  slot1488.setFirstGrammarSlotForAlternate(slot1494, 2);
  slot1488.setFirstGrammarSlotForAlternate(slot1498, 3);
  slot1489.setFirstGrammarSlotForAlternate(slot1894, 0);
  slot1489.setFirstGrammarSlotForAlternate(slot1902, 1);
  slot1506.setFirstGrammarSlotForAlternate(slot1510, 0);
  slot1506.setFirstGrammarSlotForAlternate(slot1515, 1);
  slot1512.setFirstGrammarSlotForAlternate(slot2443, 0);
  slot1512.setFirstGrammarSlotForAlternate(slot2447, 1);
  slot1519.setFirstGrammarSlotForAlternate(slot1520, 0);
  slot1519.setFirstGrammarSlotForAlternate(slot1522, 1);
  slot1526.setFirstGrammarSlotForAlternate(slot1527, 0);
  slot1539.setFirstGrammarSlotForAlternate(slot1541, 0);
  slot1540.setFirstGrammarSlotForAlternate(slot2581, 0);
  slot1540.setFirstGrammarSlotForAlternate(slot2587, 1);
  slot1540.setFirstGrammarSlotForAlternate(slot2589, 2);
  slot1540.setFirstGrammarSlotForAlternate(slot2591, 3);
  slot1543.setFirstGrammarSlotForAlternate(slot2128, 0);
  slot1543.setFirstGrammarSlotForAlternate(slot2130, 1);
  slot1543.setFirstGrammarSlotForAlternate(slot2132, 2);
  slot1543.setFirstGrammarSlotForAlternate(slot2134, 3);
  slot1543.setFirstGrammarSlotForAlternate(slot2136, 4);
  slot1543.setFirstGrammarSlotForAlternate(slot2138, 5);
  slot1543.setFirstGrammarSlotForAlternate(slot2140, 6);
  slot1543.setFirstGrammarSlotForAlternate(slot2142, 7);
  slot1543.setFirstGrammarSlotForAlternate(slot2144, 8);
  slot1543.setFirstGrammarSlotForAlternate(slot2146, 9);
  slot1543.setFirstGrammarSlotForAlternate(slot2148, 10);
  slot1543.setFirstGrammarSlotForAlternate(slot2150, 11);
  slot1546.setFirstGrammarSlotForAlternate(slot1850, 0);
  slot1546.setFirstGrammarSlotForAlternate(slot1852, 1);
  slot1555.setFirstGrammarSlotForAlternate(slot2250, 0);
  slot1555.setFirstGrammarSlotForAlternate(slot2268, 1);
  slot1558.setFirstGrammarSlotForAlternate(slot2537, 0);
  slot1565.setFirstGrammarSlotForAlternate(slot1567, 0);
  slot1565.setFirstGrammarSlotForAlternate(slot1570, 1);
  slot1565.setFirstGrammarSlotForAlternate(slot1572, 2);
  slot1565.setFirstGrammarSlotForAlternate(slot1575, 3);
  slot1565.setFirstGrammarSlotForAlternate(slot1577, 4);
  slot1565.setFirstGrammarSlotForAlternate(slot1579, 5);
  slot1566.setFirstGrammarSlotForAlternate(slot2025, 0);
  slot1566.setFirstGrammarSlotForAlternate(slot2030, 1);
  slot1569.setFirstGrammarSlotForAlternate(slot1620, 0);
  slot1574.setFirstGrammarSlotForAlternate(slot2345, 0);
  slot1581.setFirstGrammarSlotForAlternate(slot2424, 0);
  slot1581.setFirstGrammarSlotForAlternate(slot2428, 1);
  slot1585.setFirstGrammarSlotForAlternate(slot1586, 0);
  slot1585.setFirstGrammarSlotForAlternate(slot1588, 1);
  slot1599.setFirstGrammarSlotForAlternate(slot1697, 0);
  slot1599.setFirstGrammarSlotForAlternate(slot1698, 1);
  slot1604.setFirstGrammarSlotForAlternate(slot1605, 0);
  slot1611.setFirstGrammarSlotForAlternate(slot1612, 0);
  slot1611.setFirstGrammarSlotForAlternate(slot1616, 1);
  slot1631.setFirstGrammarSlotForAlternate(slot1632, 0);
  slot1631.setFirstGrammarSlotForAlternate(slot1634, 1);
  slot1631.setFirstGrammarSlotForAlternate(slot1636, 2);
  slot1631.setFirstGrammarSlotForAlternate(slot1638, 3);
  slot1631.setFirstGrammarSlotForAlternate(slot1640, 4);
  slot1642.setFirstGrammarSlotForAlternate(slot1643, 0);
  slot1642.setFirstGrammarSlotForAlternate(slot1645, 1);
  slot1646.setFirstGrammarSlotForAlternate(slot1668, 0);
  slot1646.setFirstGrammarSlotForAlternate(slot1670, 1);
  slot1657.setFirstGrammarSlotForAlternate(slot1658, 0);
  slot1674.setFirstGrammarSlotForAlternate(slot1675, 0);
  slot1700.setFirstGrammarSlotForAlternate(slot1702, 0);
  slot1700.setFirstGrammarSlotForAlternate(slot1705, 1);
  slot1701.setFirstGrammarSlotForAlternate(slot2034, 0);
  slot1704.setFirstGrammarSlotForAlternate(slot2727, 0);
  slot1704.setFirstGrammarSlotForAlternate(slot2731, 1);
  slot1722.setFirstGrammarSlotForAlternate(slot1723, 0);
  slot1722.setFirstGrammarSlotForAlternate(slot1727, 1);
  slot1729.setFirstGrammarSlotForAlternate(slot1730, 0);
  slot1729.setFirstGrammarSlotForAlternate(slot1735, 1);
  slot1731.setFirstGrammarSlotForAlternate(slot2593, 0);
  slot1731.setFirstGrammarSlotForAlternate(slot2596, 1);
  slot1731.setFirstGrammarSlotForAlternate(slot2598, 2);
  slot1734.setFirstGrammarSlotForAlternate(slot2341, 0);
  slot1734.setFirstGrammarSlotForAlternate(slot2343, 1);
  slot1738.setFirstGrammarSlotForAlternate(slot1739, 0);
  slot1738.setFirstGrammarSlotForAlternate(slot1740, 1);
  slot1744.setFirstGrammarSlotForAlternate(slot2013, 0);
  slot1744.setFirstGrammarSlotForAlternate(slot2015, 1);
  slot1747.setFirstGrammarSlotForAlternate(slot1748, 0);
  slot1747.setFirstGrammarSlotForAlternate(slot1754, 1);
  slot1765.setFirstGrammarSlotForAlternate(slot1766, 0);
  slot1779.setFirstGrammarSlotForAlternate(slot2633, 0);
  slot1779.setFirstGrammarSlotForAlternate(slot2635, 1);
  slot1779.setFirstGrammarSlotForAlternate(slot2637, 2);
  slot1779.setFirstGrammarSlotForAlternate(slot2639, 3);
  slot1784.setFirstGrammarSlotForAlternate(slot1785, 0);
  slot1805.setFirstGrammarSlotForAlternate(slot1806, 0);
  slot1805.setFirstGrammarSlotForAlternate(slot1808, 1);
  slot1854.setFirstGrammarSlotForAlternate(slot1855, 0);
  slot1854.setFirstGrammarSlotForAlternate(slot1859, 1);
  slot1861.setFirstGrammarSlotForAlternate(slot1862, 0);
  slot1861.setFirstGrammarSlotForAlternate(slot1863, 1);
  slot1869.setFirstGrammarSlotForAlternate(slot1870, 0);
  slot1880.setFirstGrammarSlotForAlternate(slot2676, 0);
  slot1880.setFirstGrammarSlotForAlternate(slot2677, 1);
  slot1942.setFirstGrammarSlotForAlternate(slot2626, 0);
  slot1942.setFirstGrammarSlotForAlternate(slot2628, 1);
  slot2026.setFirstGrammarSlotForAlternate(slot2645, 0);
  slot2038.setFirstGrammarSlotForAlternate(slot2039, 0);
  slot2056.setFirstGrammarSlotForAlternate(slot2057, 0);
  slot2061.setFirstGrammarSlotForAlternate(slot2062, 0);
  slot2063.setFirstGrammarSlotForAlternate(slot2163, 0);
  slot2067.setFirstGrammarSlotForAlternate(slot2068, 0);
  slot2067.setFirstGrammarSlotForAlternate(slot2072, 1);
  slot2076.setFirstGrammarSlotForAlternate(slot2077, 0);
  slot2076.setFirstGrammarSlotForAlternate(slot2079, 1);
  slot2080.setFirstGrammarSlotForAlternate(slot2081, 0);
  slot2085.setFirstGrammarSlotForAlternate(slot2087, 0);
  slot2086.setFirstGrammarSlotForAlternate(slot2435, 0);
  slot2086.setFirstGrammarSlotForAlternate(slot2441, 1);
  slot2113.setFirstGrammarSlotForAlternate(slot2114, 0);
  slot2162.setFirstGrammarSlotForAlternate(slot2609, 0);
  slot2162.setFirstGrammarSlotForAlternate(slot2610, 1);
  slot2177.setFirstGrammarSlotForAlternate(slot2178, 0);
  slot2177.setFirstGrammarSlotForAlternate(slot2182, 1);
  slot2184.setFirstGrammarSlotForAlternate(slot2185, 0);
  slot2189.setFirstGrammarSlotForAlternate(slot2288, 0);
  slot2192.setFirstGrammarSlotForAlternate(slot2193, 0);
  slot2192.setFirstGrammarSlotForAlternate(slot2195, 1);
  slot2235.setFirstGrammarSlotForAlternate(slot2236, 0);
  slot2256.setFirstGrammarSlotForAlternate(slot2462, 0);
  slot2256.setFirstGrammarSlotForAlternate(slot2464, 1);
  slot2267.setFirstGrammarSlotForAlternate(slot2492, 0);
  slot2267.setFirstGrammarSlotForAlternate(slot2494, 1);
  slot2299.setFirstGrammarSlotForAlternate(slot2506, 0);
  slot2299.setFirstGrammarSlotForAlternate(slot2510, 1);
  slot2315.setFirstGrammarSlotForAlternate(slot2489, 0);
  slot2315.setFirstGrammarSlotForAlternate(slot2491, 1);
  slot2321.setFirstGrammarSlotForAlternate(slot2322, 0);
  slot2321.setFirstGrammarSlotForAlternate(slot2323, 1);
  slot2325.setFirstGrammarSlotForAlternate(slot2326, 0);
  slot2325.setFirstGrammarSlotForAlternate(slot2330, 1);
  slot2346.setFirstGrammarSlotForAlternate(slot2525, 0);
  slot2346.setFirstGrammarSlotForAlternate(slot2526, 1);
  slot2356.setFirstGrammarSlotForAlternate(slot2357, 0);
  slot2356.setFirstGrammarSlotForAlternate(slot2358, 1);
  slot2422.setFirstGrammarSlotForAlternate(slot2423, 0);
  slot2449.setFirstGrammarSlotForAlternate(slot2450, 0);
  slot2503.setFirstGrammarSlotForAlternate(slot2529, 0);
  slot2503.setFirstGrammarSlotForAlternate(slot2535, 1);
  slot2541.setFirstGrammarSlotForAlternate(slot2657, 0);
  slot2544.setFirstGrammarSlotForAlternate(slot2697, 0);
  slot2544.setFirstGrammarSlotForAlternate(slot2699, 1);
  slot2567.setFirstGrammarSlotForAlternate(slot2568, 0);
  slot2570.setFirstGrammarSlotForAlternate(slot2571, 0);
  slot2570.setFirstGrammarSlotForAlternate(slot2573, 1);
  slot2570.setFirstGrammarSlotForAlternate(slot2575, 2);
  slot2570.setFirstGrammarSlotForAlternate(slot2577, 3);
  slot2570.setFirstGrammarSlotForAlternate(slot2579, 4);
  startSymbols.put("( | PrimitiveTypeReferenceType)", slot0);
  startSymbols.put("PrimitiveType", slot1);
  startSymbols.put("ReferenceType", slot4);
  startSymbols.put("FieldAccess", slot7);
  startSymbols.put("layout[\"Layout\"]", slot9);
  startSymbols.put("Identifier", slot13);
  startSymbols.put("Primary", slot16);
  startSymbols.put("ClassName", slot23);
  startSymbols.put("DefaultValue", slot34);
  startSymbols.put("ElementValue", slot37);
  startSymbols.put("MethodDeclaration", slot40);
  startSymbols.put("MethodHeader", slot41);
  startSymbols.put("MethodBody", slot44);
  startSymbols.put("OctalDigitOrUnderscore", slot47);
  startSymbols.put("OctalDigit", slot48);
  startSymbols.put("ConstructorBody", slot53);
  startSymbols.put("ExplicitConstructorInvocation?", slot56);
  startSymbols.put("{BlockStatement}*", slot59);
  startSymbols.put("BlockStatement", slot64);
  startSymbols.put("LocalVariableDeclarationStatement", slot65);
  startSymbols.put("ClassDeclaration", slot68);
  startSymbols.put("Statement", slot71);
  startSymbols.put("ArrayAccess", slot74);
  startSymbols.put("PrimaryNoNewArray", slot75);
  startSymbols.put("Expression", slot80);
  startSymbols.put("ExpressionName", slot85);
  startSymbols.put("(\":\" layout[\"Layout\"] Expression)", slot94);
  startSymbols.put("QualifiedIdentifier", slot99);
  startSymbols.put("BinaryExponent", slot102);
  startSymbols.put("BinaryExponentIndicator", slot103);
  startSymbols.put("SignedInteger", slot105);
  startSymbols.put("{ClassModifier}*", slot108);
  startSymbols.put("{ClassModifier layout[\"Layout\"]}+", slot109);
  startSymbols.put("Digits?", slot113);
  startSymbols.put("Digits", slot115);
  startSymbols.put("ExponentPart", slot118);
  startSymbols.put("ExponentIndicator", slot119);
  startSymbols.put("DigitOrUnderscore*", slot123);
  startSymbols.put("DigitOrUnderscore", slot125);
  startSymbols.put("MethodInvocation", slot129);
  startSymbols.put("MethodName", slot130);
  startSymbols.put("ArgumentList?", slot135);
  startSymbols.put("TypeName", slot140);
  startSymbols.put("NonWildTypeArguments", slot145);
  startSymbols.put("NonWildTypeArguments?", slot164);
  startSymbols.put("ClassModifier", slot205);
  startSymbols.put("( | WhiteSpaceComment)*", slot210);
  startSymbols.put("( | WhiteSpaceComment)", slot212);
  startSymbols.put("IntegerLiteral", slot216);
  startSymbols.put("BinaryIntegerLiteral", slot217);
  startSymbols.put("DecimalIntegerLiteral", slot220);
  startSymbols.put("HexIntegerLiteral", slot223);
  startSymbols.put("OctalIntegerLiteral", slot226);
  startSymbols.put("Annotation", slot229);
  startSymbols.put("(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?", slot234);
  startSymbols.put("{ElementValuePair \",\"}*", slot243);
  startSymbols.put("DecimalFloatingPointLiteral", slot248);
  startSymbols.put("FloatTypeSuffix", slot250);
  startSymbols.put("ExponentPart?", slot258);
  startSymbols.put("FloatTypeSuffix?", slot260);
  startSymbols.put("Block", slot273);
  startSymbols.put("ExceptionType", slot280);
  startSymbols.put("TypeParameters", slot283);
  startSymbols.put("{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot286);
  startSymbols.put("{SwitchLabel layout[\"Layout\"]}+", slot291);
  startSymbols.put("SwitchLabel", slot294);
  startSymbols.put("{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot299);
  startSymbols.put("StringCharacter", slot308);
  startSymbols.put("InputCharacter", slot309);
  startSymbols.put("EscapeSequence", slot312);
  startSymbols.put("QualifiedIdentifierList", slot315);
  startSymbols.put("{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot316);
  startSymbols.put("WhiteSpace", slot319);
  startSymbols.put("{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot322);
  startSymbols.put("{ConstantModifier layout[\"Layout\"]}+", slot326);
  startSymbols.put("ConstantModifier", slot327);
  startSymbols.put("{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+", slot334);
  startSymbols.put("Resource", slot339);
  startSymbols.put("{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+", slot344);
  startSymbols.put("HexDigits", slot353);
  startSymbols.put("HexDigit", slot354);
  startSymbols.put("HexDigitOrUnderscore*", slot356);
  startSymbols.put("{FieldModifier layout[\"Layout\"]}+", slot362);
  startSymbols.put("FieldModifier", slot365);
  startSymbols.put("ResourceSpecification", slot370);
  startSymbols.put("Resources", slot373);
  startSymbols.put("\";\"?", slot376);
  startSymbols.put("BooleanLiteral", slot381);
  startSymbols.put("VariableInitializer", slot386);
  startSymbols.put("ArrayInitializer", slot389);
  startSymbols.put("FormalParameterList", slot392);
  startSymbols.put("{(FormalParameter layout[\"Layout\"] \",\")}*", slot393);
  startSymbols.put("LastFormalParameter", slot396);
  startSymbols.put("EnumConstant", slot399);
  startSymbols.put("{Annotation}*", slot400);
  startSymbols.put("Arguments?", slot405);
  startSymbols.put("ClassBody?", slot408);
  startSymbols.put("TypeParameter", slot415);
  startSymbols.put("ClassBody", slot420);
  startSymbols.put("ElementValueArrayInitializer", slot424);
  startSymbols.put("ElementValues?", slot427);
  startSymbols.put("\",\"?", slot430);
  startSymbols.put("AbstractMethodModifier", slot435);
  startSymbols.put("TypeDeclSpecifier", slot442);
  startSymbols.put("TypeArguments?", slot445);
  startSymbols.put("ArrayType", slot448);
  startSymbols.put("{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot451);
  startSymbols.put("VariableDeclarator", slot456);
  startSymbols.put("IdentifierChars", slot461);
  startSymbols.put("PostIncrementExpression", slot464);
  startSymbols.put("PostfixExpression", slot465);
  startSymbols.put("ForUpdate", slot470);
  startSymbols.put("{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot471);
  startSymbols.put("OctalDigits", slot474);
  startSymbols.put("OctalDigitOrUnderscore*", slot476);
  startSymbols.put("DefaultValue?", slot498);
  startSymbols.put("ArrayCreationExpression", slot502);
  startSymbols.put("( | ReferenceTypeNonArrayTypePrimitiveType)", slot505);
  startSymbols.put("{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+", slot508);
  startSymbols.put("{DimExpr layout[\"Layout\"]}+", slot517);
  startSymbols.put("{(\"[\" layout[\"Layout\"] \"]\")}*", slot520);
  startSymbols.put("OctalNumeral", slot523);
  startSymbols.put("[_]+", slot528);
  startSymbols.put("(\"=\" layout[\"Layout\"] VariableInitializer)?", slot532);
  startSymbols.put("(\"=\" layout[\"Layout\"] VariableInitializer)", slot533);
  startSymbols.put("{InterfaceModifier}*", slot537);
  startSymbols.put("{InterfaceModifier layout[\"Layout\"]}+", slot539);
  startSymbols.put("{VariableModifier}*", slot542);
  startSymbols.put("VariableDeclaratorId", slot547);
  startSymbols.put("UnicodeInputCharacter", slot554);
  startSymbols.put("RawInputCharacter", slot555);
  startSymbols.put("UnicodeEscape", slot558);
  startSymbols.put("Keyword", slot561);
  startSymbols.put("Comment", slot662);
  startSymbols.put("TraditionalComment", slot663);
  startSymbols.put("EndOfLineComment", slot666);
  startSymbols.put("HexadecimalFloatingPointLiteral", slot669);
  startSymbols.put("HexSignificand", slot670);
  startSymbols.put("StatementNoShortIf", slot675);
  startSymbols.put("StatementWithoutTrailingSubstatement", slot676);
  startSymbols.put("ForInit?", slot689);
  startSymbols.put("Expression?", slot694);
  startSymbols.put("ForUpdate?", slot699);
  startSymbols.put("EnumBodyDeclarations?", slot730);
  startSymbols.put("EnumBodyDeclarations", slot732);
  startSymbols.put("ArgumentList", slot736);
  startSymbols.put("(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")", slot739);
  startSymbols.put("DecimalNumeral", slot743);
  startSymbols.put("IntegerTypeSuffix?", slot745);
  startSymbols.put("(\"extends\" layout[\"Layout\"] Type)", slot748);
  startSymbols.put("Type", slot751);
  startSymbols.put("DimExpr", slot756);
  startSymbols.put("PreDecrementExpression", slot761);
  startSymbols.put("UnaryExpression", slot764);
  startSymbols.put("ExplicitConstructorInvocation", slot767);
  startSymbols.put("TypeParameters?", slot771);
  startSymbols.put("{VariableInitializer \",\"}*", slot780);
  startSymbols.put("\"static\"?", slot792);
  startSymbols.put("{AbstractMethodModifier}*", slot796);
  startSymbols.put("{AbstractMethodModifier layout[\"Layout\"]}+", slot798);
  startSymbols.put("Finally?", slot801);
  startSymbols.put("Finally", slot803);
  startSymbols.put("ConstructorModifier", slot806);
  startSymbols.put("(\"extends\" layout[\"Layout\"] Type)?", slot822);
  startSymbols.put("ConditionalExpression", slot826);
  startSymbols.put("ConditionalOrExpression", slot827);
  startSymbols.put("ElementValues", slot840);
  startSymbols.put("Result", slot843);
  startSymbols.put("{BlockStatement layout[\"Layout\"]}+", slot848);
  startSymbols.put("VariableDeclarators", slot859);
  startSymbols.put("[u]+", slot864);
  startSymbols.put("JavaLetter", slot870);
  startSymbols.put("JavaLetterOrDigit", slot874);
  startSymbols.put("AdditiveExpression", slot877);
  startSymbols.put("MultiplicativeExpression", slot878);
  startSymbols.put("{EnumConstant \",\"}*", slot893);
  startSymbols.put("{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot895);
  startSymbols.put("{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot898);
  startSymbols.put("{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+", slot908);
  startSymbols.put("{FieldModifier}*", slot911);
  startSymbols.put("Throws", slot915);
  startSymbols.put("{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot918);
  startSymbols.put("BinaryDigitOrUnderscore", slot921);
  startSymbols.put("BinaryDigit", slot922);
  startSymbols.put("{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*", slot929);
  startSymbols.put("EnumDeclaration", slot932);
  startSymbols.put("(\"implements\" layout[\"Layout\"] TypeList)?", slot939);
  startSymbols.put("EnumBody", slot942);
  startSymbols.put("ConstructorDeclaration", slot987);
  startSymbols.put("{ConstructorModifier}*", slot988);
  startSymbols.put("ConstructorDeclarator", slot991);
  startSymbols.put("Throws?", slot994);
  startSymbols.put("SuperSuffix", slot1009);
  startSymbols.put("Arguments", slot1016);
  startSymbols.put("TypeArguments", slot1019);
  startSymbols.put("{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot1022);
  startSymbols.put("AnnotationTypeDeclaration", slot1029);
  startSymbols.put("AnnotationTypeBody", slot1038);
  startSymbols.put("ZeroToThree", slot1041);
  startSymbols.put("IntegerTypeSuffix", slot1045);
  startSymbols.put("ConditionalAndExpression", slot1048);
  startSymbols.put("InclusiveOrExpression", slot1053);
  startSymbols.put("ReferenceTypeNonArrayType", slot1058);
  startSymbols.put("InterfaceDeclaration", slot1063);
  startSymbols.put("NormalInterfaceDeclaration", slot1064);
  startSymbols.put("ForStatement", slot1071);
  startSymbols.put("FormalParameter", slot1076);
  startSymbols.put("StatementExpression", slot1109);
  startSymbols.put("(\".\" layout[\"Layout\"] \"*\")?", slot1114);
  startSymbols.put("(\".\" layout[\"Layout\"] \"*\")", slot1116);
  startSymbols.put("{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot1119);
  startSymbols.put("{TypeDeclaration}*", slot1131);
  startSymbols.put("{TypeDeclaration layout[\"Layout\"]}+", slot1132);
  startSymbols.put("ElementValuePair", slot1140);
  startSymbols.put("{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+", slot1145);
  startSymbols.put("Digit", slot1153);
  startSymbols.put("NonZeroDigit", slot1156);
  startSymbols.put("ShiftExpression", slot1165);
  startSymbols.put("ForInit", slot1187);
  startSymbols.put("AnnotationTypeElementDeclaration", slot1190);
  startSymbols.put("ConstantDeclaration", slot1195);
  startSymbols.put("PostDecrementExpression", slot1220);
  startSymbols.put("AbstractMethodDeclaration", slot1229);
  startSymbols.put("MethodDeclarator", slot1236);
  startSymbols.put("InterfaceModifier", slot1243);
  startSymbols.put("{ImportDeclaration}*", slot1258);
  startSymbols.put("{ImportDeclaration layout[\"Layout\"]}+", slot1259);
  startSymbols.put("(FormalParameter layout[\"Layout\"] \",\")", slot1263);
  startSymbols.put("FormalParameterList?", slot1280);
  startSymbols.put("OctalEscape", slot1285);
  startSymbols.put("Backslash", slot1297);
  startSymbols.put("TypeList", slot1319);
  startSymbols.put("ExclusiveOrExpression", slot1338);
  startSymbols.put("AndExpression", slot1343);
  startSymbols.put("EqualityExpression", slot1348);
  startSymbols.put("RelationalExpression", slot1349);
  startSymbols.put("InputCharacter*", slot1364);
  startSymbols.put("{ClassBodyDeclaration}*", slot1369);
  startSymbols.put("{ClassBodyDeclaration layout[\"Layout\"]}+", slot1370);
  startSymbols.put("MethodModifier", slot1374);
  startSymbols.put("StaticInitializer", slot1395);
  startSymbols.put("InterfaceBody", slot1403);
  startSymbols.put("{InterfaceMemberDeclaration}*", slot1406);
  startSymbols.put("{AnnotationTypeElementDeclaration layout[\"Layout\"]}+", slot1411);
  startSymbols.put("TypeArgument", slot1418);
  startSymbols.put("ImportDeclaration", slot1429);
  startSymbols.put("{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+", slot1434);
  startSymbols.put("( | \"extends\"\"super\")", slot1441);
  startSymbols.put("ConstantExpression", slot1460);
  startSymbols.put("TypeDeclaration", slot1465);
  startSymbols.put("FloatingPointLiteral", slot1475);
  startSymbols.put("{ConstantModifier}*", slot1480);
  startSymbols.put("UnaryExpressionNotPlusMinus", slot1488);
  startSymbols.put("CastExpression", slot1489);
  startSymbols.put("BinaryNumeral", slot1506);
  startSymbols.put("BinaryDigits", slot1512);
  startSymbols.put("VariableModifier", slot1519);
  startSymbols.put("SwitchBlockStatementGroup", slot1526);
  startSymbols.put("Assignment", slot1539);
  startSymbols.put("LeftHandSide", slot1540);
  startSymbols.put("AssignmentOperator", slot1543);
  startSymbols.put("AssignmentExpression", slot1546);
  startSymbols.put("ClassInstanceCreationExpression", slot1555);
  startSymbols.put("PreIncrementExpression", slot1558);
  startSymbols.put("Literal", slot1565);
  startSymbols.put("CharacterLiteral", slot1566);
  startSymbols.put("NullLiteral", slot1569);
  startSymbols.put("StringLiteral", slot1574);
  startSymbols.put("{ConstructorModifier layout[\"Layout\"]}+", slot1581);
  startSymbols.put("(\":\" layout[\"Layout\"] Expression)?", slot1585);
  startSymbols.put("{AnnotationTypeElementDeclaration}*", slot1599);
  startSymbols.put("(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)", slot1604);
  startSymbols.put("ExplicitGenericInvocationSuffix", slot1611);
  startSymbols.put("InterfaceMemberDeclaration", slot1631);
  startSymbols.put("{SwitchLabel}*", slot1642);
  startSymbols.put("{VariableModifier layout[\"Layout\"]}+", slot1646);
  startSymbols.put("(\"implements\" layout[\"Layout\"] TypeList)", slot1657);
  startSymbols.put("(\"[\" layout[\"Layout\"] \"]\")", slot1674);
  startSymbols.put("( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))", slot1700);
  startSymbols.put("(CatchClause* layout[\"Layout\"] Finally)", slot1701);
  startSymbols.put("{CatchClause layout[\"Layout\"]}+", slot1704);
  startSymbols.put("{SwitchBlockStatementGroup layout[\"Layout\"]}+", slot1722);
  startSymbols.put("CommentTail", slot1729);
  startSymbols.put("CommentTailStar", slot1731);
  startSymbols.put("NotStar", slot1734);
  startSymbols.put("{CatchClause}*", slot1738);
  startSymbols.put("HexDigitOrUnderscore", slot1744);
  startSymbols.put("{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot1747);
  startSymbols.put("(\"extends\" layout[\"Layout\"] TypeList)", slot1765);
  startSymbols.put("ClassBodyDeclaration", slot1779);
  startSymbols.put("LineTerminator", slot1784);
  startSymbols.put("Identifier?", slot1805);
  startSymbols.put("{MethodModifier layout[\"Layout\"]}+", slot1854);
  startSymbols.put("BinaryDigitOrUnderscore*", slot1861);
  startSymbols.put("PackageDeclaration", slot1869);
  startSymbols.put("(( | \"extends\"\"super\") layout[\"Layout\"] Type)?", slot1880);
  startSymbols.put("{SwitchBlockStatementGroup}*", slot1942);
  startSymbols.put("SingleCharacter", slot2026);
  startSymbols.put("layout[\"$default$\"]", slot2038);
  startSymbols.put("(( | \"extends\"\"super\") layout[\"Layout\"] Type)", slot2056);
  startSymbols.put("start[CompilationUnit]", slot2061);
  startSymbols.put("CompilationUnit", slot2063);
  startSymbols.put("{Annotation layout[\"Layout\"]}+", slot2067);
  startSymbols.put("{MethodModifier}*", slot2076);
  startSymbols.put("TypeBound", slot2080);
  startSymbols.put("CatchType", slot2085);
  startSymbols.put("{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+", slot2086);
  startSymbols.put("CatchClause", slot2113);
  startSymbols.put("PackageDeclaration?", slot2162);
  startSymbols.put("TypeArgumentsOrDiamond", slot2177);
  startSymbols.put("Sign", slot2184);
  startSymbols.put("LocalVariableDeclaration", slot2189);
  startSymbols.put("NotStarNotSlash", slot2192);
  startSymbols.put("NormalClassDeclaration", slot2235);
  startSymbols.put("TypeArgumentsOrDiamond?", slot2256);
  startSymbols.put("( | PrimaryQualifiedIdentifier)", slot2267);
  startSymbols.put("HexNumeral", slot2299);
  startSymbols.put("Sign?", slot2315);
  startSymbols.put("HexDigits?", slot2321);
  startSymbols.put("{InterfaceMemberDeclaration layout[\"Layout\"]}+", slot2325);
  startSymbols.put("StringCharacter*", slot2346);
  startSymbols.put("(\"extends\" layout[\"Layout\"] TypeList)?", slot2356);
  startSymbols.put("empty()", slot2422);
  startSymbols.put("FieldDeclaration", slot2449);
  startSymbols.put("{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot2503);
  startSymbols.put("TypeVariable", slot2541);
  startSymbols.put("TypeBound?", slot2544);
  startSymbols.put("InstanceInitializer", slot2567);
  startSymbols.put("ClassMemberDeclaration", slot2570);
}

private void initHeadGrammarSlots() {
slot0 = new HeadGrammarSlot(0, Nonterminal.withName("( | PrimitiveTypeReferenceType)"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1 = new HeadGrammarSlot(1, Nonterminal.withName("PrimitiveType"), 8, false, new TruePredictionSet(8), new TrueFollowSet());
slot4 = new HeadGrammarSlot(4, Nonterminal.withName("ReferenceType"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot7 = new HeadGrammarSlot(7, Nonterminal.withName("FieldAccess"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot9 = new HeadGrammarSlot(9, Nonterminal.withName("layout[\"Layout\"]"), 1, true, new TruePredictionSet(1), new TrueFollowSet());
slot13 = new HeadGrammarSlot(13, Nonterminal.withName("Identifier"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot16 = new HeadGrammarSlot(16, Nonterminal.withName("Primary"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot23 = new HeadGrammarSlot(23, Nonterminal.withName("ClassName"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot34 = new HeadGrammarSlot(34, Nonterminal.withName("DefaultValue"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot37 = new HeadGrammarSlot(37, Nonterminal.withName("ElementValue"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot40 = new HeadGrammarSlot(40, Nonterminal.withName("MethodDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot41 = new HeadGrammarSlot(41, Nonterminal.withName("MethodHeader"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot44 = new HeadGrammarSlot(44, Nonterminal.withName("MethodBody"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot47 = new HeadGrammarSlot(47, Nonterminal.withName("OctalDigitOrUnderscore"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot48 = new HeadGrammarSlot(48, Nonterminal.withName("OctalDigit"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot53 = new HeadGrammarSlot(53, Nonterminal.withName("ConstructorBody"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot56 = new HeadGrammarSlot(56, Nonterminal.withName("ExplicitConstructorInvocation?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot59 = new HeadGrammarSlot(59, Nonterminal.withName("{BlockStatement}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot64 = new HeadGrammarSlot(64, Nonterminal.withName("BlockStatement"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot65 = new HeadGrammarSlot(65, Nonterminal.withName("LocalVariableDeclarationStatement"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot68 = new HeadGrammarSlot(68, Nonterminal.withName("ClassDeclaration"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot71 = new HeadGrammarSlot(71, Nonterminal.withName("Statement"), 6, false, new TruePredictionSet(6), new TrueFollowSet());
slot74 = new HeadGrammarSlot(74, Nonterminal.withName("ArrayAccess"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot75 = new HeadGrammarSlot(75, Nonterminal.withName("PrimaryNoNewArray"), 10, false, new TruePredictionSet(10), new TrueFollowSet());
slot80 = new HeadGrammarSlot(80, Nonterminal.withName("Expression"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot85 = new HeadGrammarSlot(85, Nonterminal.withName("ExpressionName"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot94 = new HeadGrammarSlot(94, Nonterminal.withName("(\":\" layout[\"Layout\"] Expression)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot99 = new HeadGrammarSlot(99, Nonterminal.withName("QualifiedIdentifier"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot102 = new HeadGrammarSlot(102, Nonterminal.withName("BinaryExponent"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot103 = new HeadGrammarSlot(103, Nonterminal.withName("BinaryExponentIndicator"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot105 = new HeadGrammarSlot(105, Nonterminal.withName("SignedInteger"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot108 = new HeadGrammarSlot(108, Nonterminal.withName("{ClassModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot109 = new HeadGrammarSlot(109, Nonterminal.withName("{ClassModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot113 = new HeadGrammarSlot(113, Nonterminal.withName("Digits?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot115 = new HeadGrammarSlot(115, Nonterminal.withName("Digits"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot118 = new HeadGrammarSlot(118, Nonterminal.withName("ExponentPart"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot119 = new HeadGrammarSlot(119, Nonterminal.withName("ExponentIndicator"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot123 = new HeadGrammarSlot(123, Nonterminal.withName("DigitOrUnderscore*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot125 = new HeadGrammarSlot(125, Nonterminal.withName("DigitOrUnderscore"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot129 = new HeadGrammarSlot(129, Nonterminal.withName("MethodInvocation"), 5, false, new TruePredictionSet(5), new TrueFollowSet());
slot130 = new HeadGrammarSlot(130, Nonterminal.withName("MethodName"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot135 = new HeadGrammarSlot(135, Nonterminal.withName("ArgumentList?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot140 = new HeadGrammarSlot(140, Nonterminal.withName("TypeName"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot145 = new HeadGrammarSlot(145, Nonterminal.withName("NonWildTypeArguments"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot164 = new HeadGrammarSlot(164, Nonterminal.withName("NonWildTypeArguments?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot205 = new HeadGrammarSlot(205, Nonterminal.withName("ClassModifier"), 8, false, new TruePredictionSet(8), new TrueFollowSet());
slot210 = new HeadGrammarSlot(210, Nonterminal.withName("( | WhiteSpaceComment)*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot212 = new HeadGrammarSlot(212, Nonterminal.withName("( | WhiteSpaceComment)"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot216 = new HeadGrammarSlot(216, Nonterminal.withName("IntegerLiteral"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot217 = new HeadGrammarSlot(217, Nonterminal.withName("BinaryIntegerLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot220 = new HeadGrammarSlot(220, Nonterminal.withName("DecimalIntegerLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot223 = new HeadGrammarSlot(223, Nonterminal.withName("HexIntegerLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot226 = new HeadGrammarSlot(226, Nonterminal.withName("OctalIntegerLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot229 = new HeadGrammarSlot(229, Nonterminal.withName("Annotation"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot234 = new HeadGrammarSlot(234, Nonterminal.withName("(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot243 = new HeadGrammarSlot(243, Nonterminal.withName("{ElementValuePair \",\"}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot248 = new HeadGrammarSlot(248, Nonterminal.withName("DecimalFloatingPointLiteral"), 5, false, new TruePredictionSet(5), new TrueFollowSet());
slot250 = new HeadGrammarSlot(250, Nonterminal.withName("FloatTypeSuffix"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot258 = new HeadGrammarSlot(258, Nonterminal.withName("ExponentPart?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot260 = new HeadGrammarSlot(260, Nonterminal.withName("FloatTypeSuffix?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot273 = new HeadGrammarSlot(273, Nonterminal.withName("Block"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot280 = new HeadGrammarSlot(280, Nonterminal.withName("ExceptionType"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot283 = new HeadGrammarSlot(283, Nonterminal.withName("TypeParameters"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot286 = new HeadGrammarSlot(286, Nonterminal.withName("{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot291 = new HeadGrammarSlot(291, Nonterminal.withName("{SwitchLabel layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot294 = new HeadGrammarSlot(294, Nonterminal.withName("SwitchLabel"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot299 = new HeadGrammarSlot(299, Nonterminal.withName("{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot308 = new HeadGrammarSlot(308, Nonterminal.withName("StringCharacter"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot309 = new HeadGrammarSlot(309, Nonterminal.withName("InputCharacter"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot312 = new HeadGrammarSlot(312, Nonterminal.withName("EscapeSequence"), 9, false, new TruePredictionSet(9), new TrueFollowSet());
slot315 = new HeadGrammarSlot(315, Nonterminal.withName("QualifiedIdentifierList"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot316 = new HeadGrammarSlot(316, Nonterminal.withName("{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot319 = new HeadGrammarSlot(319, Nonterminal.withName("WhiteSpace"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot322 = new HeadGrammarSlot(322, Nonterminal.withName("{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot326 = new HeadGrammarSlot(326, Nonterminal.withName("{ConstantModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot327 = new HeadGrammarSlot(327, Nonterminal.withName("ConstantModifier"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot334 = new HeadGrammarSlot(334, Nonterminal.withName("{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot339 = new HeadGrammarSlot(339, Nonterminal.withName("Resource"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot344 = new HeadGrammarSlot(344, Nonterminal.withName("{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot353 = new HeadGrammarSlot(353, Nonterminal.withName("HexDigits"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot354 = new HeadGrammarSlot(354, Nonterminal.withName("HexDigit"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot356 = new HeadGrammarSlot(356, Nonterminal.withName("HexDigitOrUnderscore*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot362 = new HeadGrammarSlot(362, Nonterminal.withName("{FieldModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot365 = new HeadGrammarSlot(365, Nonterminal.withName("FieldModifier"), 8, false, new TruePredictionSet(8), new TrueFollowSet());
slot370 = new HeadGrammarSlot(370, Nonterminal.withName("ResourceSpecification"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot373 = new HeadGrammarSlot(373, Nonterminal.withName("Resources"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot376 = new HeadGrammarSlot(376, Nonterminal.withName("\";\"?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot381 = new HeadGrammarSlot(381, Nonterminal.withName("BooleanLiteral"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot386 = new HeadGrammarSlot(386, Nonterminal.withName("VariableInitializer"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot389 = new HeadGrammarSlot(389, Nonterminal.withName("ArrayInitializer"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot392 = new HeadGrammarSlot(392, Nonterminal.withName("FormalParameterList"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot393 = new HeadGrammarSlot(393, Nonterminal.withName("{(FormalParameter layout[\"Layout\"] \",\")}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot396 = new HeadGrammarSlot(396, Nonterminal.withName("LastFormalParameter"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot399 = new HeadGrammarSlot(399, Nonterminal.withName("EnumConstant"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot400 = new HeadGrammarSlot(400, Nonterminal.withName("{Annotation}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot405 = new HeadGrammarSlot(405, Nonterminal.withName("Arguments?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot408 = new HeadGrammarSlot(408, Nonterminal.withName("ClassBody?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot415 = new HeadGrammarSlot(415, Nonterminal.withName("TypeParameter"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot420 = new HeadGrammarSlot(420, Nonterminal.withName("ClassBody"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot424 = new HeadGrammarSlot(424, Nonterminal.withName("ElementValueArrayInitializer"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot427 = new HeadGrammarSlot(427, Nonterminal.withName("ElementValues?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot430 = new HeadGrammarSlot(430, Nonterminal.withName("\",\"?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot435 = new HeadGrammarSlot(435, Nonterminal.withName("AbstractMethodModifier"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot442 = new HeadGrammarSlot(442, Nonterminal.withName("TypeDeclSpecifier"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot445 = new HeadGrammarSlot(445, Nonterminal.withName("TypeArguments?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot448 = new HeadGrammarSlot(448, Nonterminal.withName("ArrayType"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot451 = new HeadGrammarSlot(451, Nonterminal.withName("{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot456 = new HeadGrammarSlot(456, Nonterminal.withName("VariableDeclarator"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot461 = new HeadGrammarSlot(461, Nonterminal.withName("IdentifierChars"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot464 = new HeadGrammarSlot(464, Nonterminal.withName("PostIncrementExpression"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot465 = new HeadGrammarSlot(465, Nonterminal.withName("PostfixExpression"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot470 = new HeadGrammarSlot(470, Nonterminal.withName("ForUpdate"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot471 = new HeadGrammarSlot(471, Nonterminal.withName("{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot474 = new HeadGrammarSlot(474, Nonterminal.withName("OctalDigits"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot476 = new HeadGrammarSlot(476, Nonterminal.withName("OctalDigitOrUnderscore*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot498 = new HeadGrammarSlot(498, Nonterminal.withName("DefaultValue?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot502 = new HeadGrammarSlot(502, Nonterminal.withName("ArrayCreationExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot505 = new HeadGrammarSlot(505, Nonterminal.withName("( | ReferenceTypeNonArrayTypePrimitiveType)"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot508 = new HeadGrammarSlot(508, Nonterminal.withName("{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot517 = new HeadGrammarSlot(517, Nonterminal.withName("{DimExpr layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot520 = new HeadGrammarSlot(520, Nonterminal.withName("{(\"[\" layout[\"Layout\"] \"]\")}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot523 = new HeadGrammarSlot(523, Nonterminal.withName("OctalNumeral"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot528 = new HeadGrammarSlot(528, Nonterminal.withName("[_]+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot532 = new HeadGrammarSlot(532, Nonterminal.withName("(\"=\" layout[\"Layout\"] VariableInitializer)?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot533 = new HeadGrammarSlot(533, Nonterminal.withName("(\"=\" layout[\"Layout\"] VariableInitializer)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot537 = new HeadGrammarSlot(537, Nonterminal.withName("{InterfaceModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot539 = new HeadGrammarSlot(539, Nonterminal.withName("{InterfaceModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot542 = new HeadGrammarSlot(542, Nonterminal.withName("{VariableModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot547 = new HeadGrammarSlot(547, Nonterminal.withName("VariableDeclaratorId"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot554 = new HeadGrammarSlot(554, Nonterminal.withName("UnicodeInputCharacter"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot555 = new HeadGrammarSlot(555, Nonterminal.withName("RawInputCharacter"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot558 = new HeadGrammarSlot(558, Nonterminal.withName("UnicodeEscape"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot561 = new HeadGrammarSlot(561, Nonterminal.withName("Keyword"), 50, false, new TruePredictionSet(50), new TrueFollowSet());
slot662 = new HeadGrammarSlot(662, Nonterminal.withName("Comment"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot663 = new HeadGrammarSlot(663, Nonterminal.withName("TraditionalComment"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot666 = new HeadGrammarSlot(666, Nonterminal.withName("EndOfLineComment"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot669 = new HeadGrammarSlot(669, Nonterminal.withName("HexadecimalFloatingPointLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot670 = new HeadGrammarSlot(670, Nonterminal.withName("HexSignificand"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot675 = new HeadGrammarSlot(675, Nonterminal.withName("StatementNoShortIf"), 5, false, new TruePredictionSet(5), new TrueFollowSet());
slot676 = new HeadGrammarSlot(676, Nonterminal.withName("StatementWithoutTrailingSubstatement"), 13, false, new TruePredictionSet(13), new TrueFollowSet());
slot689 = new HeadGrammarSlot(689, Nonterminal.withName("ForInit?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot694 = new HeadGrammarSlot(694, Nonterminal.withName("Expression?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot699 = new HeadGrammarSlot(699, Nonterminal.withName("ForUpdate?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot730 = new HeadGrammarSlot(730, Nonterminal.withName("EnumBodyDeclarations?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot732 = new HeadGrammarSlot(732, Nonterminal.withName("EnumBodyDeclarations"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot736 = new HeadGrammarSlot(736, Nonterminal.withName("ArgumentList"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot739 = new HeadGrammarSlot(739, Nonterminal.withName("(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot743 = new HeadGrammarSlot(743, Nonterminal.withName("DecimalNumeral"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot745 = new HeadGrammarSlot(745, Nonterminal.withName("IntegerTypeSuffix?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot748 = new HeadGrammarSlot(748, Nonterminal.withName("(\"extends\" layout[\"Layout\"] Type)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot751 = new HeadGrammarSlot(751, Nonterminal.withName("Type"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot756 = new HeadGrammarSlot(756, Nonterminal.withName("DimExpr"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot761 = new HeadGrammarSlot(761, Nonterminal.withName("PreDecrementExpression"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot764 = new HeadGrammarSlot(764, Nonterminal.withName("UnaryExpression"), 5, false, new TruePredictionSet(5), new TrueFollowSet());
slot767 = new HeadGrammarSlot(767, Nonterminal.withName("ExplicitConstructorInvocation"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot771 = new HeadGrammarSlot(771, Nonterminal.withName("TypeParameters?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot780 = new HeadGrammarSlot(780, Nonterminal.withName("{VariableInitializer \",\"}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot792 = new HeadGrammarSlot(792, Nonterminal.withName("\"static\"?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot796 = new HeadGrammarSlot(796, Nonterminal.withName("{AbstractMethodModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot798 = new HeadGrammarSlot(798, Nonterminal.withName("{AbstractMethodModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot801 = new HeadGrammarSlot(801, Nonterminal.withName("Finally?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot803 = new HeadGrammarSlot(803, Nonterminal.withName("Finally"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot806 = new HeadGrammarSlot(806, Nonterminal.withName("ConstructorModifier"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot822 = new HeadGrammarSlot(822, Nonterminal.withName("(\"extends\" layout[\"Layout\"] Type)?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot826 = new HeadGrammarSlot(826, Nonterminal.withName("ConditionalExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot827 = new HeadGrammarSlot(827, Nonterminal.withName("ConditionalOrExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot840 = new HeadGrammarSlot(840, Nonterminal.withName("ElementValues"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot843 = new HeadGrammarSlot(843, Nonterminal.withName("Result"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot848 = new HeadGrammarSlot(848, Nonterminal.withName("{BlockStatement layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot859 = new HeadGrammarSlot(859, Nonterminal.withName("VariableDeclarators"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot864 = new HeadGrammarSlot(864, Nonterminal.withName("[u]+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot870 = new HeadGrammarSlot(870, Nonterminal.withName("JavaLetter"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot874 = new HeadGrammarSlot(874, Nonterminal.withName("JavaLetterOrDigit"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot877 = new HeadGrammarSlot(877, Nonterminal.withName("AdditiveExpression"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot878 = new HeadGrammarSlot(878, Nonterminal.withName("MultiplicativeExpression"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot893 = new HeadGrammarSlot(893, Nonterminal.withName("{EnumConstant \",\"}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot895 = new HeadGrammarSlot(895, Nonterminal.withName("{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot898 = new HeadGrammarSlot(898, Nonterminal.withName("{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot908 = new HeadGrammarSlot(908, Nonterminal.withName("{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot911 = new HeadGrammarSlot(911, Nonterminal.withName("{FieldModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot915 = new HeadGrammarSlot(915, Nonterminal.withName("Throws"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot918 = new HeadGrammarSlot(918, Nonterminal.withName("{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot921 = new HeadGrammarSlot(921, Nonterminal.withName("BinaryDigitOrUnderscore"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot922 = new HeadGrammarSlot(922, Nonterminal.withName("BinaryDigit"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot929 = new HeadGrammarSlot(929, Nonterminal.withName("{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot932 = new HeadGrammarSlot(932, Nonterminal.withName("EnumDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot939 = new HeadGrammarSlot(939, Nonterminal.withName("(\"implements\" layout[\"Layout\"] TypeList)?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot942 = new HeadGrammarSlot(942, Nonterminal.withName("EnumBody"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot987 = new HeadGrammarSlot(987, Nonterminal.withName("ConstructorDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot988 = new HeadGrammarSlot(988, Nonterminal.withName("{ConstructorModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot991 = new HeadGrammarSlot(991, Nonterminal.withName("ConstructorDeclarator"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot994 = new HeadGrammarSlot(994, Nonterminal.withName("Throws?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1009 = new HeadGrammarSlot(1009, Nonterminal.withName("SuperSuffix"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1016 = new HeadGrammarSlot(1016, Nonterminal.withName("Arguments"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1019 = new HeadGrammarSlot(1019, Nonterminal.withName("TypeArguments"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1022 = new HeadGrammarSlot(1022, Nonterminal.withName("{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1029 = new HeadGrammarSlot(1029, Nonterminal.withName("AnnotationTypeDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1038 = new HeadGrammarSlot(1038, Nonterminal.withName("AnnotationTypeBody"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1041 = new HeadGrammarSlot(1041, Nonterminal.withName("ZeroToThree"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1045 = new HeadGrammarSlot(1045, Nonterminal.withName("IntegerTypeSuffix"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1048 = new HeadGrammarSlot(1048, Nonterminal.withName("ConditionalAndExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1053 = new HeadGrammarSlot(1053, Nonterminal.withName("InclusiveOrExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1058 = new HeadGrammarSlot(1058, Nonterminal.withName("ReferenceTypeNonArrayType"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1063 = new HeadGrammarSlot(1063, Nonterminal.withName("InterfaceDeclaration"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1064 = new HeadGrammarSlot(1064, Nonterminal.withName("NormalInterfaceDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1071 = new HeadGrammarSlot(1071, Nonterminal.withName("ForStatement"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1076 = new HeadGrammarSlot(1076, Nonterminal.withName("FormalParameter"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1109 = new HeadGrammarSlot(1109, Nonterminal.withName("StatementExpression"), 7, false, new TruePredictionSet(7), new TrueFollowSet());
slot1114 = new HeadGrammarSlot(1114, Nonterminal.withName("(\".\" layout[\"Layout\"] \"*\")?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1116 = new HeadGrammarSlot(1116, Nonterminal.withName("(\".\" layout[\"Layout\"] \"*\")"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1119 = new HeadGrammarSlot(1119, Nonterminal.withName("{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1131 = new HeadGrammarSlot(1131, Nonterminal.withName("{TypeDeclaration}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1132 = new HeadGrammarSlot(1132, Nonterminal.withName("{TypeDeclaration layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1140 = new HeadGrammarSlot(1140, Nonterminal.withName("ElementValuePair"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1145 = new HeadGrammarSlot(1145, Nonterminal.withName("{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1153 = new HeadGrammarSlot(1153, Nonterminal.withName("Digit"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1156 = new HeadGrammarSlot(1156, Nonterminal.withName("NonZeroDigit"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1165 = new HeadGrammarSlot(1165, Nonterminal.withName("ShiftExpression"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot1187 = new HeadGrammarSlot(1187, Nonterminal.withName("ForInit"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1190 = new HeadGrammarSlot(1190, Nonterminal.withName("AnnotationTypeElementDeclaration"), 6, false, new TruePredictionSet(6), new TrueFollowSet());
slot1195 = new HeadGrammarSlot(1195, Nonterminal.withName("ConstantDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1220 = new HeadGrammarSlot(1220, Nonterminal.withName("PostDecrementExpression"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1229 = new HeadGrammarSlot(1229, Nonterminal.withName("AbstractMethodDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1236 = new HeadGrammarSlot(1236, Nonterminal.withName("MethodDeclarator"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1243 = new HeadGrammarSlot(1243, Nonterminal.withName("InterfaceModifier"), 7, false, new TruePredictionSet(7), new TrueFollowSet());
slot1258 = new HeadGrammarSlot(1258, Nonterminal.withName("{ImportDeclaration}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1259 = new HeadGrammarSlot(1259, Nonterminal.withName("{ImportDeclaration layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1263 = new HeadGrammarSlot(1263, Nonterminal.withName("(FormalParameter layout[\"Layout\"] \",\")"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1280 = new HeadGrammarSlot(1280, Nonterminal.withName("FormalParameterList?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1285 = new HeadGrammarSlot(1285, Nonterminal.withName("OctalEscape"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot1297 = new HeadGrammarSlot(1297, Nonterminal.withName("Backslash"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1319 = new HeadGrammarSlot(1319, Nonterminal.withName("TypeList"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1338 = new HeadGrammarSlot(1338, Nonterminal.withName("ExclusiveOrExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1343 = new HeadGrammarSlot(1343, Nonterminal.withName("AndExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1348 = new HeadGrammarSlot(1348, Nonterminal.withName("EqualityExpression"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot1349 = new HeadGrammarSlot(1349, Nonterminal.withName("RelationalExpression"), 6, false, new TruePredictionSet(6), new TrueFollowSet());
slot1364 = new HeadGrammarSlot(1364, Nonterminal.withName("InputCharacter*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1369 = new HeadGrammarSlot(1369, Nonterminal.withName("{ClassBodyDeclaration}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1370 = new HeadGrammarSlot(1370, Nonterminal.withName("{ClassBodyDeclaration layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1374 = new HeadGrammarSlot(1374, Nonterminal.withName("MethodModifier"), 10, false, new TruePredictionSet(10), new TrueFollowSet());
slot1395 = new HeadGrammarSlot(1395, Nonterminal.withName("StaticInitializer"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1403 = new HeadGrammarSlot(1403, Nonterminal.withName("InterfaceBody"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1406 = new HeadGrammarSlot(1406, Nonterminal.withName("{InterfaceMemberDeclaration}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1411 = new HeadGrammarSlot(1411, Nonterminal.withName("{AnnotationTypeElementDeclaration layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1418 = new HeadGrammarSlot(1418, Nonterminal.withName("TypeArgument"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1429 = new HeadGrammarSlot(1429, Nonterminal.withName("ImportDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1434 = new HeadGrammarSlot(1434, Nonterminal.withName("{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1441 = new HeadGrammarSlot(1441, Nonterminal.withName("( | \"extends\"\"super\")"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1460 = new HeadGrammarSlot(1460, Nonterminal.withName("ConstantExpression"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1465 = new HeadGrammarSlot(1465, Nonterminal.withName("TypeDeclaration"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot1475 = new HeadGrammarSlot(1475, Nonterminal.withName("FloatingPointLiteral"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1480 = new HeadGrammarSlot(1480, Nonterminal.withName("{ConstantModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1488 = new HeadGrammarSlot(1488, Nonterminal.withName("UnaryExpressionNotPlusMinus"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot1489 = new HeadGrammarSlot(1489, Nonterminal.withName("CastExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1506 = new HeadGrammarSlot(1506, Nonterminal.withName("BinaryNumeral"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1512 = new HeadGrammarSlot(1512, Nonterminal.withName("BinaryDigits"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1519 = new HeadGrammarSlot(1519, Nonterminal.withName("VariableModifier"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1526 = new HeadGrammarSlot(1526, Nonterminal.withName("SwitchBlockStatementGroup"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1539 = new HeadGrammarSlot(1539, Nonterminal.withName("Assignment"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1540 = new HeadGrammarSlot(1540, Nonterminal.withName("LeftHandSide"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot1543 = new HeadGrammarSlot(1543, Nonterminal.withName("AssignmentOperator"), 12, false, new TruePredictionSet(12), new TrueFollowSet());
slot1546 = new HeadGrammarSlot(1546, Nonterminal.withName("AssignmentExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1555 = new HeadGrammarSlot(1555, Nonterminal.withName("ClassInstanceCreationExpression"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1558 = new HeadGrammarSlot(1558, Nonterminal.withName("PreIncrementExpression"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1565 = new HeadGrammarSlot(1565, Nonterminal.withName("Literal"), 6, false, new TruePredictionSet(6), new TrueFollowSet());
slot1566 = new HeadGrammarSlot(1566, Nonterminal.withName("CharacterLiteral"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1569 = new HeadGrammarSlot(1569, Nonterminal.withName("NullLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1574 = new HeadGrammarSlot(1574, Nonterminal.withName("StringLiteral"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1581 = new HeadGrammarSlot(1581, Nonterminal.withName("{ConstructorModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1585 = new HeadGrammarSlot(1585, Nonterminal.withName("(\":\" layout[\"Layout\"] Expression)?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1599 = new HeadGrammarSlot(1599, Nonterminal.withName("{AnnotationTypeElementDeclaration}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1604 = new HeadGrammarSlot(1604, Nonterminal.withName("(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1611 = new HeadGrammarSlot(1611, Nonterminal.withName("ExplicitGenericInvocationSuffix"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1631 = new HeadGrammarSlot(1631, Nonterminal.withName("InterfaceMemberDeclaration"), 5, false, new TruePredictionSet(5), new TrueFollowSet());
slot1642 = new HeadGrammarSlot(1642, Nonterminal.withName("{SwitchLabel}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1646 = new HeadGrammarSlot(1646, Nonterminal.withName("{VariableModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1657 = new HeadGrammarSlot(1657, Nonterminal.withName("(\"implements\" layout[\"Layout\"] TypeList)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1674 = new HeadGrammarSlot(1674, Nonterminal.withName("(\"[\" layout[\"Layout\"] \"]\")"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1700 = new HeadGrammarSlot(1700, Nonterminal.withName("( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1701 = new HeadGrammarSlot(1701, Nonterminal.withName("(CatchClause* layout[\"Layout\"] Finally)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1704 = new HeadGrammarSlot(1704, Nonterminal.withName("{CatchClause layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1722 = new HeadGrammarSlot(1722, Nonterminal.withName("{SwitchBlockStatementGroup layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1729 = new HeadGrammarSlot(1729, Nonterminal.withName("CommentTail"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1731 = new HeadGrammarSlot(1731, Nonterminal.withName("CommentTailStar"), 3, false, new TruePredictionSet(3), new TrueFollowSet());
slot1734 = new HeadGrammarSlot(1734, Nonterminal.withName("NotStar"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1738 = new HeadGrammarSlot(1738, Nonterminal.withName("{CatchClause}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1744 = new HeadGrammarSlot(1744, Nonterminal.withName("HexDigitOrUnderscore"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1747 = new HeadGrammarSlot(1747, Nonterminal.withName("{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1765 = new HeadGrammarSlot(1765, Nonterminal.withName("(\"extends\" layout[\"Layout\"] TypeList)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1779 = new HeadGrammarSlot(1779, Nonterminal.withName("ClassBodyDeclaration"), 4, false, new TruePredictionSet(4), new TrueFollowSet());
slot1784 = new HeadGrammarSlot(1784, Nonterminal.withName("LineTerminator"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1805 = new HeadGrammarSlot(1805, Nonterminal.withName("Identifier?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1854 = new HeadGrammarSlot(1854, Nonterminal.withName("{MethodModifier layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot1861 = new HeadGrammarSlot(1861, Nonterminal.withName("BinaryDigitOrUnderscore*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1869 = new HeadGrammarSlot(1869, Nonterminal.withName("PackageDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot1880 = new HeadGrammarSlot(1880, Nonterminal.withName("(( | \"extends\"\"super\") layout[\"Layout\"] Type)?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot1942 = new HeadGrammarSlot(1942, Nonterminal.withName("{SwitchBlockStatementGroup}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2026 = new HeadGrammarSlot(2026, Nonterminal.withName("SingleCharacter"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2038 = new HeadGrammarSlot(2038, Nonterminal.withName("layout[\"$default$\"]"), 1, true, new TruePredictionSet(1), new TrueFollowSet());
slot2056 = new HeadGrammarSlot(2056, Nonterminal.withName("(( | \"extends\"\"super\") layout[\"Layout\"] Type)"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2061 = new HeadGrammarSlot(2061, Nonterminal.withName("start[CompilationUnit]"), 1, true, new TruePredictionSet(1), new TrueFollowSet());
slot2063 = new HeadGrammarSlot(2063, Nonterminal.withName("CompilationUnit"), 1, true, new TruePredictionSet(1), new TrueFollowSet());
slot2067 = new HeadGrammarSlot(2067, Nonterminal.withName("{Annotation layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2076 = new HeadGrammarSlot(2076, Nonterminal.withName("{MethodModifier}*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2080 = new HeadGrammarSlot(2080, Nonterminal.withName("TypeBound"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2085 = new HeadGrammarSlot(2085, Nonterminal.withName("CatchType"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2086 = new HeadGrammarSlot(2086, Nonterminal.withName("{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2113 = new HeadGrammarSlot(2113, Nonterminal.withName("CatchClause"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2162 = new HeadGrammarSlot(2162, Nonterminal.withName("PackageDeclaration?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2177 = new HeadGrammarSlot(2177, Nonterminal.withName("TypeArgumentsOrDiamond"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2184 = new HeadGrammarSlot(2184, Nonterminal.withName("Sign"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2189 = new HeadGrammarSlot(2189, Nonterminal.withName("LocalVariableDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2192 = new HeadGrammarSlot(2192, Nonterminal.withName("NotStarNotSlash"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2235 = new HeadGrammarSlot(2235, Nonterminal.withName("NormalClassDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2256 = new HeadGrammarSlot(2256, Nonterminal.withName("TypeArgumentsOrDiamond?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2267 = new HeadGrammarSlot(2267, Nonterminal.withName("( | PrimaryQualifiedIdentifier)"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2299 = new HeadGrammarSlot(2299, Nonterminal.withName("HexNumeral"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2315 = new HeadGrammarSlot(2315, Nonterminal.withName("Sign?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2321 = new HeadGrammarSlot(2321, Nonterminal.withName("HexDigits?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2325 = new HeadGrammarSlot(2325, Nonterminal.withName("{InterfaceMemberDeclaration layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2346 = new HeadGrammarSlot(2346, Nonterminal.withName("StringCharacter*"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2356 = new HeadGrammarSlot(2356, Nonterminal.withName("(\"extends\" layout[\"Layout\"] TypeList)?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2422 = new HeadGrammarSlot(2422, Nonterminal.withName("empty()"), 1, true, new TruePredictionSet(1), new TrueFollowSet());
slot2449 = new HeadGrammarSlot(2449, Nonterminal.withName("FieldDeclaration"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2503 = new HeadGrammarSlot(2503, Nonterminal.withName("{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+"), 2, false, new TruePredictionSet(2), new TrueFollowSet());
slot2541 = new HeadGrammarSlot(2541, Nonterminal.withName("TypeVariable"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2544 = new HeadGrammarSlot(2544, Nonterminal.withName("TypeBound?"), 2, true, new TruePredictionSet(2), new TrueFollowSet());
slot2567 = new HeadGrammarSlot(2567, Nonterminal.withName("InstanceInitializer"), 1, false, new TruePredictionSet(1), new TrueFollowSet());
slot2570 = new HeadGrammarSlot(2570, Nonterminal.withName("ClassMemberDeclaration"), 5, false, new TruePredictionSet(5), new TrueFollowSet());
}

private void initBodyGrammarSlots0() {
  slot1197 = new LastGrammarSlot(1197, "AnnotationTypeElementDeclaration ::= ConstantDeclaration .", slot1196, slot1190, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2206 = new NonterminalGrammarSlot(2206, "RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression", slot2205, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2302 = new LastGrammarSlot(2302, "HexIntegerLiteral ::= HexNumeral IntegerTypeSuffix? .", slot2301, slot223, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1014 = new NonterminalGrammarSlot(1014, "SuperSuffix ::= \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] . Arguments?", slot1013, slot405, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot104 = new NonterminalGrammarSlot(104, "BinaryExponent ::= . BinaryExponentIndicator SignedInteger", null, slot103, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot391 = new LastGrammarSlot(391, "VariableInitializer ::= ArrayInitializer .", slot390, slot386, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1294 = new TokenGrammarSlot(1294, "EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ . \"005\" [cC]", slot1293, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(53, 53)), "", new HashSet<Condition>(), null), "[5]", new HashSet<Condition>(), null)), "\"005\"", new HashSet<>(), null), 91, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot896 = new NonterminalGrammarSlot(896, "{EnumConstant \",\"}* ::= . {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot895, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1308 = new LastTokenSlot(1308, "EscapeSequence ::= Backslash . [f]", slot1307, new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), 96, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot1933 = new NonterminalGrammarSlot(1933, "StatementWithoutTrailingSubstatement ::= \"switch\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1932, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot374 = new NonterminalGrammarSlot(374, "ResourceSpecification ::= \"(\" layout[\"Layout\"] . Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"", slot372, slot373, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1833 = new NonterminalGrammarSlot(1833, "PrimaryNoNewArray ::= \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\"", slot1832, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2341 = new NonterminalGrammarSlot(2341, "NotStar ::= . InputCharacter", null, slot309, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot891 = new NonterminalGrammarSlot(891, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] . MultiplicativeExpression", slot890, slot878, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot81 = new NonterminalGrammarSlot(81, "ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"", slot79, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1610 = new LastGrammarSlot(1610, "(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .", slot1609, slot1604, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1428 = new LastGrammarSlot(1428, "OctalDigit ::= [0-7] .", slot1427, slot48, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot477 = new NonterminalGrammarSlot(477, "OctalDigits ::= OctalDigit . OctalDigitOrUnderscore* OctalDigit", slot475, slot476, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1077 = new NonterminalGrammarSlot(1077, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1075, slot1076, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot340 = new NonterminalGrammarSlot(340, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] . Resource", slot338, slot339, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2418 = new NonterminalGrammarSlot(2418, "VariableDeclaratorId ::= . Identifier layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2697 = new NonterminalGrammarSlot(2697, "TypeBound? ::= . TypeBound", null, slot2080, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1894 = new TokenGrammarSlot(1894, "CastExpression ::= . \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2041 = new LastGrammarSlot(2041, "FieldModifier ::= \"final\" .", slot2040, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2273 = new NonterminalGrammarSlot(2273, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" . layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2272, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1461 = new NonterminalGrammarSlot(1461, "SwitchLabel ::= \"case\" layout[\"Layout\"] . ConstantExpression layout[\"Layout\"] \":\"", slot1459, slot1460, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2671 = new TokenGrammarSlot(2671, "RawInputCharacter ::= . [\\\\] [\\\\]", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1365 = new NonterminalGrammarSlot(1365, "InputCharacter* ::= . InputCharacter* InputCharacter", null, slot1364, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2641 = new NonterminalGrammarSlot(2641, "(FormalParameter layout[\"Layout\"] \",\") ::= . FormalParameter layout[\"Layout\"] \",\"", null, slot1076, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1625 = new NonterminalGrammarSlot(1625, "Digits ::= . Digit", null, slot1153, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot385 = new LastGrammarSlot(385, "BooleanLiteral ::= \"true\" .", slot384, slot381, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot317 = new NonterminalGrammarSlot(317, "QualifiedIdentifierList ::= . {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot316, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot637 = new LastGrammarSlot(637, "Keyword ::= \"synchronized\" .", slot636, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1415 = new LastGrammarSlot(1415, "{AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] AnnotationTypeElementDeclaration .", slot1414, slot1411, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2288 = new NonterminalGrammarSlot(2288, "LocalVariableDeclaration ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot542, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1689 = new NonterminalGrammarSlot(1689, "OctalEscape ::= [\\\\] . OctalDigit", slot1688, slot48, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(48, 55)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new RightChildNodeCreator());
  slot50 = new LastGrammarSlot(50, "OctalDigitOrUnderscore ::= OctalDigit .", slot49, slot47, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1211 = new NonterminalGrammarSlot(1211, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* . layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1210, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot649 = new LastGrammarSlot(649, "Keyword ::= \"final\" .", slot648, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot176 = new NonterminalGrammarSlot(176, "MethodInvocation ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot175, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot462 = new NonterminalGrammarSlot(462, "Identifier ::= . IdentifierChars", null, slot461, new DefaultConditionTest(list(new RegularExpressionNotPrecedeAction(new RegularExpressionCondition(NOT_PRECEDE, new CharacterClass(new RegexAlt(list(Range.in(36, 36), Range.in(65, 90), Range.in(95, 95), Range.in(97, 122)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1054 = new NonterminalGrammarSlot(1054, "ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] . InclusiveOrExpression", slot1052, slot1053, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot905 = new NonterminalGrammarSlot(905, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . Expression", null, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1771 = new LastGrammarSlot(1771, "Backslash ::= [\\\\] .", slot1770, slot1297, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1968 = new NonterminalGrammarSlot(1968, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"", slot1967, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1283 = new LastTokenSlot(1283, "MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] . \")\"", slot1282, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot831 = new NonterminalGrammarSlot(831, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" . layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression", slot830, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1752 = new NonterminalGrammarSlot(1752, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ReferenceType", slot1751, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2199 = new NonterminalGrammarSlot(2199, "ElementValue ::= . ConditionalExpression", null, slot826, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1448 = new NonterminalGrammarSlot(1448, "VariableDeclarator ::= VariableDeclaratorId layout[\"Layout\"] . (\"=\" layout[\"Layout\"] VariableInitializer)?", slot1447, slot532, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1953 = new LastTokenSlot(1953, "StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\"", slot1952, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2231 = new TokenGrammarSlot(2231, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"<\" layout[\"Layout\"] ShiftExpression", slot2230, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null)), "\"<\"", new HashSet<>(), null), 15, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot32 = new NonterminalGrammarSlot(32, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier", slot31, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot35 = new TokenGrammarSlot(35, "DefaultValue ::= . \"default\" layout[\"Layout\"] ElementValue", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"default\"", new HashSet<>(), null), 4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2576 = new LastGrammarSlot(2576, "ClassMemberDeclaration ::= MethodDeclaration .", slot2575, slot2570, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1322 = new NonterminalGrammarSlot(1322, "{AbstractMethodModifier layout[\"Layout\"]}+ ::= . AbstractMethodModifier", null, slot435, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot167 = new NonterminalGrammarSlot(167, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot166, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1556 = new NonterminalGrammarSlot(1556, "StatementExpression ::= . ClassInstanceCreationExpression", null, slot1555, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot534 = new NonterminalGrammarSlot(534, "(\"=\" layout[\"Layout\"] VariableInitializer)? ::= . (\"=\" layout[\"Layout\"] VariableInitializer)", null, slot533, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot165 = new NonterminalGrammarSlot(165, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot163, slot164, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1385 = new LastTokenSlot(1385, "MethodModifier ::= . \"native\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"native\"", new HashSet<>(), null), 43, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2414 = new NonterminalGrammarSlot(2414, "Finally ::= \"finally\" layout[\"Layout\"] . Block", slot2413, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot888 = new NonterminalGrammarSlot(888, "AdditiveExpression ::= AdditiveExpression . layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression", slot887, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2074 = new LastTokenSlot(2074, "JavaLetter ::= . [A-Za-z$_]", null, new CharacterClass(new RegexAlt(list(Range.in(65, 90), Range.in(97, 122), Range.in(36, 36), Range.in(95, 95)), "", new HashSet<Condition>(), null), "[A-Za-z$_]", new HashSet<Condition>(), null), 113, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1214 = new LastTokenSlot(1214, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] . \";\"", slot1213, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot244 = new NonterminalGrammarSlot(244, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] . {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", slot242, slot243, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1641 = new LastGrammarSlot(1641, "InterfaceMemberDeclaration ::= ClassDeclaration .", slot1640, slot1631, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot121 = new NonterminalGrammarSlot(121, "ExponentPart ::= ExponentIndicator . SignedInteger", slot120, slot105, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot313 = new NonterminalGrammarSlot(313, "StringCharacter ::= . EscapeSequence", null, slot312, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(34, 34), Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\"\\\\]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new IntermediateNodeCreator());
  slot2738 = new LastGrammarSlot(2738, "ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue .", slot2737, slot1140, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot207 = new LastGrammarSlot(207, "{ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] ClassModifier .", slot206, slot109, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot225 = new LastGrammarSlot(225, "IntegerLiteral ::= HexIntegerLiteral .", slot224, slot216, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1715 = new NonterminalGrammarSlot(1715, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] . ElementValue layout[\"Layout\"] \")\"", slot1714, slot37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1587 = new LastGrammarSlot(1587, "(\":\" layout[\"Layout\"] Expression)? ::= (\":\" layout[\"Layout\"] Expression) .", slot1586, slot1585, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1398 = new NonterminalGrammarSlot(1398, "StaticInitializer ::= \"static\" layout[\"Layout\"] . Block", slot1397, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2722 = new NonterminalGrammarSlot(2722, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ExceptionType", slot2721, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1757 = new NonterminalGrammarSlot(1757, "NonWildTypeArguments ::= \"<\" . layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", slot1756, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1856 = new NonterminalGrammarSlot(1856, "{MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ . layout[\"Layout\"] MethodModifier", slot1855, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot514 = new NonterminalGrammarSlot(514, "ArrayCreationExpression ::= \"new\" . layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", slot513, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2282 = new NonterminalGrammarSlot(2282, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2281, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot246 = new LastTokenSlot(246, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] . \")\"", slot245, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot602 = new LastTokenSlot(602, "Keyword ::= . \"const\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"const\"", new HashSet<>(), null), 52, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2159 = new LastGrammarSlot(2159, "LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId .", slot2158, slot396, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1170 = new NonterminalGrammarSlot(1170, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] . AdditiveExpression", slot1169, slot877, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1386 = new LastGrammarSlot(1386, "MethodModifier ::= \"native\" .", slot1385, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2572 = new LastGrammarSlot(2572, "ClassMemberDeclaration ::= InterfaceDeclaration .", slot2571, slot2570, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1031 = new NonterminalGrammarSlot(1031, "AnnotationTypeDeclaration ::= {InterfaceModifier}* . layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody", slot1030, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1909 = new LastGrammarSlot(1909, "CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression .", slot1908, slot1489, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot172 = new NonterminalGrammarSlot(172, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"", slot171, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1718 = new LastGrammarSlot(1718, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\" .", slot1717, slot739, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2251 = new NonterminalGrammarSlot(2251, "ClassInstanceCreationExpression ::= \"new\" . layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2250, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot692 = new TokenGrammarSlot(692, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] . \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot691, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1560 = new LastGrammarSlot(1560, "StatementExpression ::= PreIncrementExpression .", slot1559, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2212 = new NonterminalGrammarSlot(2212, "RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression", slot2211, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1005 = new NonterminalGrammarSlot(1005, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] . EnumBodyDeclarations? layout[\"Layout\"] \"}\"", slot1004, slot730, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1639 = new LastGrammarSlot(1639, "InterfaceMemberDeclaration ::= AbstractMethodDeclaration .", slot1638, slot1631, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot91 = new NonterminalGrammarSlot(91, "ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"", slot90, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1337 = new LastGrammarSlot(1337, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\" .", slot1336, slot991, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot989 = new NonterminalGrammarSlot(989, "ConstructorDeclaration ::= . {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody", null, slot988, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot758 = new LastGrammarSlot(758, "{DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] DimExpr .", slot757, slot517, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot297 = new NonterminalGrammarSlot(297, "{SwitchLabel layout[\"Layout\"]}+ ::= . SwitchLabel", null, slot294, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot151 = new NonterminalGrammarSlot(151, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot150, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot30 = new TokenGrammarSlot(30, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier", slot29, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot504 = new NonterminalGrammarSlot(504, "ArrayCreationExpression ::= \"new\" . layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer", slot503, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1346 = new NonterminalGrammarSlot(1346, "ExclusiveOrExpression ::= . AndExpression", null, slot1343, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2361 = new LastGrammarSlot(2361, "Statement ::= StatementWithoutTrailingSubstatement .", slot2360, slot71, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot160 = new TokenGrammarSlot(160, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot159, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2082 = new NonterminalGrammarSlot(2082, "TypeBound ::= \"extends\" . layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+", slot2081, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1931 = new LastGrammarSlot(1931, "StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] \";\" .", slot1930, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot886 = new LastGrammarSlot(886, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression .", slot885, slot877, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1825 = new LastGrammarSlot(1825, "PrimaryNoNewArray ::= ClassInstanceCreationExpression .", slot1824, slot75, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot550 = new TokenGrammarSlot(550, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] . \"=\" layout[\"Layout\"] Expression", slot549, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"=\"", new HashSet<>(), null), 36, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot965 = new TokenGrammarSlot(965, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot964, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot73 = new LastGrammarSlot(73, "BlockStatement ::= Statement .", slot72, slot64, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2410 = new LastTokenSlot(2410, "ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"", slot2409, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot292 = new NonterminalGrammarSlot(292, "{SwitchLabel layout[\"Layout\"]}+ ::= . {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] SwitchLabel", null, slot291, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot111 = new LastGrammarSlot(111, "{ClassModifier}* ::= {ClassModifier layout[\"Layout\"]}+ .", slot110, slot108, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2715 = new NonterminalGrammarSlot(2715, "UnicodeEscape ::= [\\\\] [u]+ HexDigit . HexDigit HexDigit HexDigit", slot2714, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot772 = new EpsilonGrammarSlot(772, "TypeParameters? ::= .", slot771);
  slot289 = new LastTokenSlot(289, "TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"", slot288, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">\"", new HashSet<>(), null), 16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1484 = new NonterminalGrammarSlot(1484, "( | WhiteSpaceComment) ::= . WhiteSpace", null, slot319, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2377 = new NonterminalGrammarSlot(2377, "Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement", slot2376, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot511 = new NonterminalGrammarSlot(511, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] . ArrayInitializer", slot510, slot389, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1820 = new NonterminalGrammarSlot(1820, "PrimaryNoNewArray ::= . ArrayAccess", null, slot74, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot664 = new NonterminalGrammarSlot(664, "Comment ::= . TraditionalComment", null, slot663, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1549 = new NonterminalGrammarSlot(1549, "StatementExpression ::= . PostIncrementExpression", null, slot464, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2118 = new NonterminalGrammarSlot(2118, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2117, slot542, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1125 = new LastGrammarSlot(1125, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Type .", slot1124, slot1119, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1552 = new LastGrammarSlot(1552, "StatementExpression ::= PostDecrementExpression .", slot1551, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1774 = new TokenGrammarSlot(1774, "Backslash ::= [\\\\] [u]+ . \"005\" [cC]", slot1773, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(53, 53)), "", new HashSet<Condition>(), null), "[5]", new HashSet<Condition>(), null)), "\"005\"", new HashSet<>(), null), 91, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2442 = new LastGrammarSlot(2442, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= QualifiedIdentifier .", slot2441, slot2086, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot466 = new NonterminalGrammarSlot(466, "PostIncrementExpression ::= . PostfixExpression layout[\"Layout\"] \"++\"", null, slot465, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2069 = new NonterminalGrammarSlot(2069, "{Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ . layout[\"Layout\"] Annotation", slot2068, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot416 = new NonterminalGrammarSlot(416, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . TypeParameter", slot414, slot415, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot452 = new NonterminalGrammarSlot(452, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator", null, slot451, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot597 = new LastGrammarSlot(597, "Keyword ::= \"assert\" .", slot596, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot789 = new EpsilonGrammarSlot(789, "\";\"? ::= .", slot376);
  slot208 = new NonterminalGrammarSlot(208, "{ClassModifier layout[\"Layout\"]}+ ::= . ClassModifier", null, slot205, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2629 = new NonterminalGrammarSlot(2629, "InputCharacter ::= . UnicodeInputCharacter", null, slot554, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1504 = new LastTokenSlot(1504, "MethodBody ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2485 = new NonterminalGrammarSlot(2485, "{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\")", null, slot508, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1724 = new NonterminalGrammarSlot(1724, "{SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ . layout[\"Layout\"] SwitchBlockStatementGroup", slot1723, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot126 = new NonterminalGrammarSlot(126, "DigitOrUnderscore* ::= DigitOrUnderscore* . DigitOrUnderscore", slot124, slot125, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot726 = new TokenGrammarSlot(726, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] . \"else\" layout[\"Layout\"] StatementNoShortIf", slot725, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"else\"", new HashSet<>(), null), 68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1474 = new LastGrammarSlot(1474, "FormalParameterList? ::= FormalParameterList .", slot1473, slot1280, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1106 = new NonterminalGrammarSlot(1106, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression", slot1105, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2542 = new NonterminalGrammarSlot(2542, "TypeParameter ::= . TypeVariable layout[\"Layout\"] TypeBound?", null, slot2541, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1742 = new EpsilonGrammarSlot(1742, "HexDigitOrUnderscore* ::= .", slot356);
  slot940 = new NonterminalGrammarSlot(940, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] . (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", slot938, slot939, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot695 = new NonterminalGrammarSlot(695, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot693, slot694, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2186 = new LastGrammarSlot(2186, "Sign ::= [+-] .", slot2185, slot2184, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot582 = new LastTokenSlot(582, "Keyword ::= . \"short\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"short\"", new HashSet<>(), null), 32, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1357 = new LastGrammarSlot(1357, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression .", slot1356, slot1348, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1027 = new LastTokenSlot(1027, "BinaryDigit ::= . [0-1]", null, new CharacterClass(new RegexAlt(list(Range.in(48, 49)), "", new HashSet<Condition>(), null), "[0-1]", new HashSet<Condition>(), null), 81, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot524 = new TokenGrammarSlot(524, "OctalNumeral ::= . [0] OctalDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2597 = new LastGrammarSlot(2597, "CommentTailStar ::= \"/\" .", slot2596, slot1731, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot434 = new LastGrammarSlot(434, "ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\" .", slot433, slot424, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot605 = new LastGrammarSlot(605, "Keyword ::= \"this\" .", slot604, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1813 = new LastGrammarSlot(1813, "NonZeroDigit ::= [1-9] .", slot1812, slot1156, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot930 = new NonterminalGrammarSlot(930, "TypeDeclSpecifier ::= Identifier layout[\"Layout\"] . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*", slot928, slot929, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot150 = new TokenGrammarSlot(150, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot149, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot411 = new NonterminalGrammarSlot(411, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter", null, slot286, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot325 = new EpsilonGrammarSlot(325, "{ElementValuePair \",\"}* ::= .", slot243);
  slot810 = new LastGrammarSlot(810, "ConstructorModifier ::= \"public\" .", slot809, slot806, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1749 = new NonterminalGrammarSlot(1749, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType", slot1748, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot548 = new NonterminalGrammarSlot(548, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] . VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression", slot546, slot547, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1690 = new LastGrammarSlot(1690, "OctalEscape ::= [\\\\] OctalDigit .", slot1689, slot1285, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(48, 55)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new NonterminalNodeCreator());
  slot324 = new LastGrammarSlot(324, "{ElementValuePair \",\"}* ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot323, slot243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1830 = new LastTokenSlot(1830, "PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"this\"", slot1829, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"this\"", new HashSet<>(), null), 53, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot774 = new LastGrammarSlot(774, "TypeParameters? ::= TypeParameters .", slot773, slot771, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2446 = new LastGrammarSlot(2446, "BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* BinaryDigit .", slot2445, slot1512, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot704 = new NonterminalGrammarSlot(704, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf", slot703, slot675, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1157 = new NonterminalGrammarSlot(1157, "Digit ::= . NonZeroDigit", null, slot1156, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot155 = new LastGrammarSlot(155, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .", slot154, slot129, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot644 = new LastTokenSlot(644, "Keyword ::= . \"return\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null)), "\"return\"", new HashSet<>(), null), 67, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2486 = new NonterminalGrammarSlot(2486, "{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ . layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\")", slot2485, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1989 = new TokenGrammarSlot(1989, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Block", slot1988, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1746 = new LastGrammarSlot(1746, "HexDigitOrUnderscore* ::= HexDigitOrUnderscore* HexDigitOrUnderscore .", slot1745, slot356, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2667 = new LastTokenSlot(2667, "(\".\" layout[\"Layout\"] \"*\") ::= \".\" layout[\"Layout\"] . \"*\"", slot2666, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "\"*\"", new HashSet<>(), null), 109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1037 = new NonterminalGrammarSlot(1037, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier . layout[\"Layout\"] AnnotationTypeBody", slot1036, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2719 = new NonterminalGrammarSlot(2719, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType", null, slot918, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1290 = new TokenGrammarSlot(1290, "EscapeSequence ::= [\\\\] [u]+ . \"005\" [cC] [\\\\] [u]+ \"005\" [cC]", slot1289, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(53, 53)), "", new HashSet<Condition>(), null), "[5]", new HashSet<Condition>(), null)), "\"005\"", new HashSet<>(), null), 91, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2594 = new NonterminalGrammarSlot(2594, "CommentTailStar ::= \"*\" . CommentTailStar", slot2593, slot1731, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1163 = new LastTokenSlot(1163, "Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"", slot1162, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1498 = new TokenGrammarSlot(1498, "UnaryExpressionNotPlusMinus ::= . \"!\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(33, 33)), "", new HashSet<Condition>(), null), "[!]", new HashSet<Condition>(), null)), "\"!\"", new HashSet<>(), null), 105, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1865 = new LastGrammarSlot(1865, "BinaryDigitOrUnderscore* ::= BinaryDigitOrUnderscore* BinaryDigitOrUnderscore .", slot1864, slot1861, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot754 = new NonterminalGrammarSlot(754, "{DimExpr layout[\"Layout\"]}+ ::= . {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] DimExpr", null, slot517, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1652 = new LastTokenSlot(1652, "DigitOrUnderscore ::= . [_]", null, new CharacterClass(new RegexAlt(list(Range.in(95, 95)), "", new HashSet<Condition>(), null), "[_]", new HashSet<Condition>(), null), 5, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1122 = new TokenGrammarSlot(1122, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] Type", slot1121, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1407 = new NonterminalGrammarSlot(1407, "InterfaceBody ::= \"{\" layout[\"Layout\"] . {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"", slot1405, slot1406, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2612 = new NonterminalGrammarSlot(2612, "Resources ::= . {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+", null, slot334, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1550 = new LastGrammarSlot(1550, "StatementExpression ::= PostIncrementExpression .", slot1549, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2673 = new LastGrammarSlot(2673, "RawInputCharacter ::= [\\\\] [\\\\] .", slot2672, slot555, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot749 = new TokenGrammarSlot(749, "(\"extends\" layout[\"Layout\"] Type) ::= . \"extends\" layout[\"Layout\"] Type", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"extends\"", new HashSet<>(), null), 72, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1206 = new TokenGrammarSlot(1206, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1205, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1332 = new TokenGrammarSlot(1332, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1331, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1129 = new NonterminalGrammarSlot(1129, "{BlockStatement}* ::= . {BlockStatement layout[\"Layout\"]}+", null, slot848, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1341 = new TokenGrammarSlot(1341, "ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] . \"^\" layout[\"Layout\"] AndExpression", slot1340, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(94, 94)), "", new HashSet<Condition>(), null), "[^]", new HashSet<Condition>(), null)), "\"^\"", new HashSet<>(), null), 100, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2124 = new TokenGrammarSlot(2124, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] . \")\" layout[\"Layout\"] Block", slot2123, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot72 = new NonterminalGrammarSlot(72, "BlockStatement ::= . Statement", null, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots1() {
  slot879 = new NonterminalGrammarSlot(879, "AdditiveExpression ::= . MultiplicativeExpression", null, slot878, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1809 = new EpsilonGrammarSlot(1809, "TypeArguments? ::= .", slot445);
  slot402 = new NonterminalGrammarSlot(402, "EnumConstant ::= {Annotation}* . layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?", slot401, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1982 = new LastGrammarSlot(1982, "StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\" .", slot1981, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2370 = new TokenGrammarSlot(2370, "Statement ::= . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"while\"", new HashSet<>(), null), 49, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot436 = new LastTokenSlot(436, "AbstractMethodModifier ::= . \"abstract\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"abstract\"", new HashSet<>(), null), 23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1623 = new LastGrammarSlot(1623, "ElementValues? ::= ElementValues .", slot1622, slot427, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2247 = new NonterminalGrammarSlot(2247, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] ClassBody", slot2246, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1186 = new EpsilonGrammarSlot(1186, "ForInit? ::= .", slot689);
  slot2633 = new NonterminalGrammarSlot(2633, "ClassBodyDeclaration ::= . InstanceInitializer", null, slot2567, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1670 = new NonterminalGrammarSlot(1670, "{VariableModifier layout[\"Layout\"]}+ ::= . {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] VariableModifier", null, slot1646, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1926 = new TokenGrammarSlot(1926, "StatementWithoutTrailingSubstatement ::= . \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"throw\"", new HashSet<>(), null), 38, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1990 = new NonterminalGrammarSlot(1990, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Block", slot1989, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1088 = new NonterminalGrammarSlot(1088, "ForStatement ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1087, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2033 = new LastGrammarSlot(2033, "CharacterLiteral ::= [\\'] EscapeSequence [\\'] .", slot2032, slot1566, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot693 = new NonterminalGrammarSlot(693, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot692, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2566 = new LastGrammarSlot(2566, "HexSignificand ::= HexNumeral .", slot2565, slot670, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot350 = new LastGrammarSlot(350, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType .", slot349, slot344, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1291 = new TokenGrammarSlot(1291, "EscapeSequence ::= [\\\\] [u]+ \"005\" . [cC] [\\\\] [u]+ \"005\" [cC]", slot1290, new CharacterClass(new RegexAlt(list(Range.in(99, 99), Range.in(67, 67)), "", new HashSet<Condition>(), null), "[cC]", new HashSet<Condition>(), null), 92, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2057 = new NonterminalGrammarSlot(2057, "(( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= . ( | \"extends\"\"super\") layout[\"Layout\"] Type", null, slot1441, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot614 = new LastTokenSlot(614, "Keyword ::= . \"long\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null)), "\"long\"", new HashSet<>(), null), 27, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot83 = new LastTokenSlot(83, "ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"", slot82, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(93, 93)), "", new HashSet<Condition>(), null), "[]]", new HashSet<Condition>(), null)), "\"]\"", new HashSet<>(), null), 9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1898 = new TokenGrammarSlot(1898, "CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] . \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus", slot1897, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2622 = new NonterminalGrammarSlot(2622, "ClassDeclaration ::= . NormalClassDeclaration", null, slot2235, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1778 = new NonterminalGrammarSlot(1778, "{ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] ClassBodyDeclaration", slot1777, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2221 = new NonterminalGrammarSlot(2221, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] . ReferenceType", slot2220, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1547 = new NonterminalGrammarSlot(1547, "Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] . AssignmentExpression", slot1545, slot1546, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2004 = new LastGrammarSlot(2004, "StatementWithoutTrailingSubstatement ::= StatementExpression layout[\"Layout\"] \";\" .", slot2003, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot949 = new TokenGrammarSlot(949, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] . \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot948, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"this\"", new HashSet<>(), null), 53, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1522 = new NonterminalGrammarSlot(1522, "VariableModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1093 = new TokenGrammarSlot(1093, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] . \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1092, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot817 = new LastGrammarSlot(817, "FloatTypeSuffix? ::= FloatTypeSuffix .", slot816, slot260, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1276 = new NonterminalGrammarSlot(1276, "MethodDeclarator ::= . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2447 = new NonterminalGrammarSlot(2447, "BinaryDigits ::= . BinaryDigit", null, slot922, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot573 = new LastGrammarSlot(573, "Keyword ::= \"continue\" .", slot572, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1768 = new NonterminalGrammarSlot(1768, "(\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" layout[\"Layout\"] . TypeList", slot1767, slot1319, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2656 = new LastGrammarSlot(2656, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? .", slot2655, slot41, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot760 = new LastGrammarSlot(760, "{DimExpr layout[\"Layout\"]}+ ::= DimExpr .", slot759, slot517, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2701 = new NonterminalGrammarSlot(2701, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier", slot2700, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1427 = new LastTokenSlot(1427, "OctalDigit ::= . [0-7]", null, new CharacterClass(new RegexAlt(list(Range.in(48, 55)), "", new HashSet<Condition>(), null), "[0-7]", new HashSet<Condition>(), null), 103, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1497 = new LastGrammarSlot(1497, "UnaryExpressionNotPlusMinus ::= \"~\" layout[\"Layout\"] UnaryExpression .", slot1496, slot1488, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2511 = new TokenGrammarSlot(2511, "HexNumeral ::= [0] . [X] HexDigits", slot2510, new CharacterClass(new RegexAlt(list(Range.in(88, 88)), "", new HashSet<Condition>(), null), "[X]", new HashSet<Condition>(), null), 135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot1325 = new NonterminalGrammarSlot(1325, "{AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ . layout[\"Layout\"] AbstractMethodModifier", slot1324, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1147 = new LastGrammarSlot(1147, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ .", slot1146, slot929, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2327 = new NonterminalGrammarSlot(2327, "{InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] InterfaceMemberDeclaration", slot2326, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2295 = new LastGrammarSlot(2295, "[_]+ ::= [_] .", slot2294, slot528, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2059 = new NonterminalGrammarSlot(2059, "(( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") layout[\"Layout\"] . Type", slot2058, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot60 = new NonterminalGrammarSlot(60, "ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] . {BlockStatement}* layout[\"Layout\"] \"}\"", slot58, slot59, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1419 = new NonterminalGrammarSlot(1419, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . TypeArgument", null, slot1418, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot141 = new NonterminalGrammarSlot(141, "MethodInvocation ::= . TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", null, slot140, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot33 = new LastGrammarSlot(33, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .", slot32, slot7, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot266 = new NonterminalGrammarSlot(266, "DecimalFloatingPointLiteral ::= Digits [.] Digits? . ExponentPart? FloatTypeSuffix?", slot265, slot258, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot884 = new NonterminalGrammarSlot(884, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" . layout[\"Layout\"] MultiplicativeExpression", slot883, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1995 = new NonterminalGrammarSlot(1995, "StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] . Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"", slot1994, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2603 = new NonterminalGrammarSlot(2603, "ConstantModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot213 = new NonterminalGrammarSlot(213, "( | WhiteSpaceComment)* ::= ( | WhiteSpaceComment)* . ( | WhiteSpaceComment)", slot211, slot212, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1650 = new NonterminalGrammarSlot(1650, "DigitOrUnderscore ::= . Digit", null, slot1153, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2134 = new LastTokenSlot(2134, "AssignmentOperator ::= . \"-=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"-=\"", new HashSet<>(), null), 119, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2175 = new NonterminalGrammarSlot(2175, "ConditionalOrExpression ::= . ConditionalAndExpression", null, slot1048, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1770 = new LastTokenSlot(1770, "Backslash ::= . [\\\\]", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1376 = new LastGrammarSlot(1376, "MethodModifier ::= \"private\" .", slot1375, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1932 = new TokenGrammarSlot(1932, "StatementWithoutTrailingSubstatement ::= . \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null)), "\"switch\"", new HashSet<>(), null), 50, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot606 = new LastTokenSlot(606, "Keyword ::= . \"transient\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"transient\"", new HashSet<>(), null), 54, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1161 = new NonterminalGrammarSlot(1161, "Arguments ::= \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"", slot1160, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot215 = new EpsilonGrammarSlot(215, "( | WhiteSpaceComment)* ::= .", slot210);
  slot2227 = new NonterminalGrammarSlot(2227, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] . ShiftExpression", slot2226, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot267 = new NonterminalGrammarSlot(267, "DecimalFloatingPointLiteral ::= Digits [.] Digits? ExponentPart? . FloatTypeSuffix?", slot266, slot260, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot262 = new LastGrammarSlot(262, "DecimalFloatingPointLiteral ::= [.] Digits ExponentPart? FloatTypeSuffix? .", slot261, slot248, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1588 = new EpsilonGrammarSlot(1588, "(\":\" layout[\"Layout\"] Expression)? ::= .", slot1585);
  slot2344 = new LastGrammarSlot(2344, "NotStar ::= LineTerminator .", slot2343, slot1734, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot660 = new LastTokenSlot(660, "Keyword ::= . \"boolean\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null)), "\"boolean\"", new HashSet<>(), null), 31, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot175 = new NonterminalGrammarSlot(175, "MethodInvocation ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", null, slot16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2147 = new LastGrammarSlot(2147, "AssignmentOperator ::= \">>>=\" .", slot2146, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot84 = new LastGrammarSlot(84, "ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .", slot83, slot74, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1257 = new LastGrammarSlot(1257, "InterfaceModifier ::= \"static\" .", slot1256, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2135 = new LastGrammarSlot(2135, "AssignmentOperator ::= \"-=\" .", slot2134, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1775 = new LastTokenSlot(1775, "Backslash ::= [\\\\] [u]+ \"005\" . [cC]", slot1774, new CharacterClass(new RegexAlt(list(Range.in(99, 99), Range.in(67, 67)), "", new HashSet<Condition>(), null), "[cC]", new HashSet<Condition>(), null), 92, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2627 = new LastGrammarSlot(2627, "{SwitchBlockStatementGroup}* ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ .", slot2626, slot1942, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2172 = new NonterminalGrammarSlot(2172, "ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" . layout[\"Layout\"] ConditionalAndExpression", slot2171, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1794 = new NonterminalGrammarSlot(1794, "UnaryExpression ::= \"+\" . layout[\"Layout\"] UnaryExpression", slot1793, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2585 = new LastTokenSlot(2585, "LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] . \")\"", slot2584, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot384 = new LastTokenSlot(384, "BooleanLiteral ::= . \"true\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"true\"", new HashSet<>(), null), 22, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot204 = new NonterminalGrammarSlot(204, "{ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ClassModifier", slot203, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2595 = new LastGrammarSlot(2595, "CommentTailStar ::= \"*\" CommentTailStar .", slot2594, slot1731, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1228 = new LastGrammarSlot(1228, "ArgumentList ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot1227, slot736, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot221 = new NonterminalGrammarSlot(221, "IntegerLiteral ::= . DecimalIntegerLiteral", null, slot220, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2182 = new NonterminalGrammarSlot(2182, "TypeArgumentsOrDiamond ::= . TypeArguments", null, slot1019, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1822 = new NonterminalGrammarSlot(1822, "PrimaryNoNewArray ::= . MethodInvocation", null, slot129, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2524 = new LastGrammarSlot(2524, "\",\"? ::= \",\" .", slot2523, slot430, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2456 = new LastTokenSlot(2456, "FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"", slot2455, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1766 = new TokenGrammarSlot(1766, "(\"extends\" layout[\"Layout\"] TypeList) ::= . \"extends\" layout[\"Layout\"] TypeList", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"extends\"", new HashSet<>(), null), 72, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1158 = new LastGrammarSlot(1158, "Digit ::= NonZeroDigit .", slot1157, slot1153, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot428 = new NonterminalGrammarSlot(428, "ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] . ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", slot426, slot427, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1278 = new TokenGrammarSlot(1278, "MethodDeclarator ::= Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1277, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot282 = new LastGrammarSlot(282, "ExceptionType ::= TypeName .", slot281, slot280, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1603 = new LastGrammarSlot(1603, "AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\" .", slot1602, slot1038, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot650 = new LastTokenSlot(650, "Keyword ::= . \"class\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"class\"", new HashSet<>(), null), 70, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2521 = new LastGrammarSlot(2521, "AndExpression ::= AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression .", slot2520, slot1343, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot953 = new NonterminalGrammarSlot(953, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot952, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot127 = new LastGrammarSlot(127, "DigitOrUnderscore* ::= DigitOrUnderscore* DigitOrUnderscore .", slot126, slot123, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot661 = new LastGrammarSlot(661, "Keyword ::= \"boolean\" .", slot660, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot824 = new NonterminalGrammarSlot(824, "(\"extends\" layout[\"Layout\"] Type)? ::= . (\"extends\" layout[\"Layout\"] Type)", null, slot748, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1572 = new NonterminalGrammarSlot(1572, "Literal ::= . IntegerLiteral", null, slot216, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot407 = new NonterminalGrammarSlot(407, "EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? . layout[\"Layout\"] ClassBody?", slot406, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2193 = new NonterminalGrammarSlot(2193, "NotStarNotSlash ::= . InputCharacter", null, slot309, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1296 = new LastGrammarSlot(1296, "EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC] .", slot1295, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1358 = new NonterminalGrammarSlot(1358, "EqualityExpression ::= . EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression", null, slot1348, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1401 = new LastGrammarSlot(1401, "Expression? ::= Expression .", slot1400, slot694, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1003 = new NonterminalGrammarSlot(1003, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] . \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"", slot1002, slot430, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1142 = new LastGrammarSlot(1142, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair .", slot1141, slot322, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1040 = new LastGrammarSlot(1040, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody .", slot1039, slot1029, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot198 = new NonterminalGrammarSlot(198, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot197, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2277 = new NonterminalGrammarSlot(2277, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2276, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1714 = new NonterminalGrammarSlot(1714, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" . layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\"", slot1713, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot355 = new NonterminalGrammarSlot(355, "HexDigits ::= . HexDigit HexDigitOrUnderscore* HexDigit", null, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot516 = new NonterminalGrammarSlot(516, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) . layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", slot515, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot20 = new NonterminalGrammarSlot(20, "FieldAccess ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier", slot19, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2115 = new NonterminalGrammarSlot(2115, "CatchClause ::= \"catch\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2114, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2103 = new NonterminalGrammarSlot(2103, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] . UnaryExpression", slot2102, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot447 = new LastGrammarSlot(447, "ReferenceType ::= TypeDeclSpecifier layout[\"Layout\"] TypeArguments? .", slot446, slot4, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1531 = new NonterminalGrammarSlot(1531, "ConstantExpression ::= . Expression", null, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot529 = new NonterminalGrammarSlot(529, "OctalNumeral ::= [0] . [_]+ OctalDigits", slot527, slot528, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1852 = new NonterminalGrammarSlot(1852, "AssignmentExpression ::= . ConditionalExpression", null, slot826, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2127 = new LastGrammarSlot(2127, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block .", slot2126, slot2113, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1832 = new TokenGrammarSlot(1832, "PrimaryNoNewArray ::= . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2111 = new NonterminalGrammarSlot(2111, "TypeName ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot961 = new TokenGrammarSlot(961, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot960, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2320 = new LastGrammarSlot(2320, "ClassName ::= QualifiedIdentifier .", slot2319, slot23, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1207 = new NonterminalGrammarSlot(1207, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1206, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2343 = new NonterminalGrammarSlot(2343, "NotStar ::= . LineTerminator", null, slot1784, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new IntermediateNodeCreator());
  slot2323 = new NonterminalGrammarSlot(2323, "HexDigits? ::= . HexDigits", null, slot353, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot366 = new NonterminalGrammarSlot(366, "{FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] . FieldModifier", slot364, slot365, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1013 = new NonterminalGrammarSlot(1013, "SuperSuffix ::= \".\" layout[\"Layout\"] Identifier . layout[\"Layout\"] Arguments?", slot1012, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1633 = new LastGrammarSlot(1633, "InterfaceMemberDeclaration ::= InterfaceDeclaration .", slot1632, slot1631, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot162 = new TokenGrammarSlot(162, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot161, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1684 = new TokenGrammarSlot(1684, "OctalEscape ::= . [\\\\] OctalDigit OctalDigit", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot836 = new NonterminalGrammarSlot(836, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] . ConditionalExpression", slot835, slot826, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1536 = new NonterminalGrammarSlot(1536, "DimExpr ::= \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"", slot1535, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1538 = new LastGrammarSlot(1538, "DimExpr ::= \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .", slot1537, slot756, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2683 = new LastTokenSlot(2683, "ClassModifier ::= . \"protected\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), 46, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot179 = new NonterminalGrammarSlot(179, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot178, slot164, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot77 = new NonterminalGrammarSlot(77, "ArrayAccess ::= PrimaryNoNewArray . layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot76, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1271 = new NonterminalGrammarSlot(1271, "MethodDeclarator ::= MethodDeclarator . layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"", slot1270, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2583 = new NonterminalGrammarSlot(2583, "LeftHandSide ::= \"(\" layout[\"Layout\"] . LeftHandSide layout[\"Layout\"] \")\"", slot2582, slot1540, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2553 = new TokenGrammarSlot(2553, "HexSignificand ::= . [0] [X] HexDigits? [.] HexDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1841 = new LastGrammarSlot(1841, "PrimaryNoNewArray ::= \"this\" .", slot1840, slot75, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1118 = new LastGrammarSlot(1118, "(\".\" layout[\"Layout\"] \"*\")? ::= (\".\" layout[\"Layout\"] \"*\") .", slot1117, slot1114, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot640 = new LastTokenSlot(640, "Keyword ::= . \"interface\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"interface\"", new HashSet<>(), null), 65, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot701 = new NonterminalGrammarSlot(701, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot700, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2148 = new LastTokenSlot(2148, "AssignmentOperator ::= . \"%=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(37, 37)), "", new HashSet<Condition>(), null), "[%]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"%=\"", new HashSet<>(), null), 126, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2330 = new NonterminalGrammarSlot(2330, "{InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= . InterfaceMemberDeclaration", null, slot1631, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1354 = new TokenGrammarSlot(1354, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] . \"!=\" layout[\"Layout\"] RelationalExpression", slot1353, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(33, 33)), "", new HashSet<Condition>(), null), "[!]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"!=\"", new HashSet<>(), null), 101, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot866 = new LastGrammarSlot(866, "[u]+ ::= [u] .", slot865, slot864, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2558 = new LastGrammarSlot(2558, "HexSignificand ::= [0] [X] HexDigits? [.] HexDigits .", slot2557, slot670, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot549 = new NonterminalGrammarSlot(549, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId . layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression", slot548, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1882 = new LastGrammarSlot(1882, "TypeArgument ::= \"?\" layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)? .", slot1881, slot1418, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1733 = new LastGrammarSlot(1733, "CommentTail ::= \"*\" CommentTailStar .", slot1732, slot1729, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2384 = new NonterminalGrammarSlot(2384, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2383, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1928 = new NonterminalGrammarSlot(1928, "StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] . Expression layout[\"Layout\"] \";\"", slot1927, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2705 = new LastGrammarSlot(2705, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier .", slot2704, slot316, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2312 = new NonterminalGrammarSlot(2312, "OctalDigitOrUnderscore* ::= . OctalDigitOrUnderscore* OctalDigitOrUnderscore", null, slot476, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1780 = new NonterminalGrammarSlot(1780, "{ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . ClassBodyDeclaration", slot1778, slot1779, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot926 = new LastGrammarSlot(926, "BinaryDigitOrUnderscore ::= [_] .", slot925, slot921, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot562 = new LastTokenSlot(562, "Keyword ::= . \"double\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"double\"", new HashSet<>(), null), 28, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1698 = new NonterminalGrammarSlot(1698, "{AnnotationTypeElementDeclaration}* ::= . {AnnotationTypeElementDeclaration layout[\"Layout\"]}+", null, slot1411, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2049 = new LastGrammarSlot(2049, "FieldModifier ::= \"volatile\" .", slot2048, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1677 = new LastTokenSlot(1677, "(\"[\" layout[\"Layout\"] \"]\") ::= \"[\" layout[\"Layout\"] . \"]\"", slot1676, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(93, 93)), "", new HashSet<Condition>(), null), "[]]", new HashSet<Condition>(), null)), "\"]\"", new HashSet<>(), null), 9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot626 = new LastTokenSlot(626, "Keyword ::= . \"private\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), 60, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot222 = new LastGrammarSlot(222, "IntegerLiteral ::= DecimalIntegerLiteral .", slot221, slot216, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1638 = new NonterminalGrammarSlot(1638, "InterfaceMemberDeclaration ::= . AbstractMethodDeclaration", null, slot1229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1004 = new NonterminalGrammarSlot(1004, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? . layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"", slot1003, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2716 = new NonterminalGrammarSlot(2716, "UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit . HexDigit HexDigit", slot2715, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2224 = new NonterminalGrammarSlot(2224, "RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression", slot2223, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2389 = new LastGrammarSlot(2389, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .", slot2388, slot71, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1110 = new NonterminalGrammarSlot(1110, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . StatementExpression", slot1108, slot1109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2048 = new LastTokenSlot(2048, "FieldModifier ::= . \"volatile\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"volatile\"", new HashSet<>(), null), 57, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2223 = new NonterminalGrammarSlot(2223, "RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression", null, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1741 = new LastGrammarSlot(1741, "{CatchClause}* ::= {CatchClause layout[\"Layout\"]}+ .", slot1740, slot1738, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot383 = new LastGrammarSlot(383, "BooleanLiteral ::= \"false\" .", slot382, slot381, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2121 = new NonterminalGrammarSlot(2121, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType . layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2120, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2143 = new LastGrammarSlot(2143, "AssignmentOperator ::= \"^=\" .", slot2142, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1851 = new LastGrammarSlot(1851, "AssignmentExpression ::= Assignment .", slot1850, slot1546, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2440 = new LastGrammarSlot(2440, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier .", slot2439, slot2086, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot907 = new EpsilonGrammarSlot(907, "{(FormalParameter layout[\"Layout\"] \",\")}* ::= .", slot393);
  slot2619 = new LastGrammarSlot(2619, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant .", slot2618, slot895, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1091 = new NonterminalGrammarSlot(1091, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1090, slot689, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot154 = new LastTokenSlot(154, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"", slot153, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2709 = new NonterminalGrammarSlot(2709, "PostDecrementExpression ::= PostfixExpression . layout[\"Layout\"] \"--\"", slot2708, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot553 = new LastGrammarSlot(553, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression .", slot552, slot339, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2362 = new NonterminalGrammarSlot(2362, "Statement ::= . ForStatement", null, slot1071, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot131 = new NonterminalGrammarSlot(131, "MethodInvocation ::= . MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", null, slot130, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1492 = new NonterminalGrammarSlot(1492, "UnaryExpressionNotPlusMinus ::= . PostfixExpression", null, slot465, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1523 = new LastGrammarSlot(1523, "VariableModifier ::= Annotation .", slot1522, slot1519, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1049 = new NonterminalGrammarSlot(1049, "ConditionalAndExpression ::= . ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression", null, slot1048, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1864 = new NonterminalGrammarSlot(1864, "BinaryDigitOrUnderscore* ::= BinaryDigitOrUnderscore* . BinaryDigitOrUnderscore", slot1863, slot921, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot62 = new LastTokenSlot(62, "ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] . \"}\"", slot61, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2560 = new TokenGrammarSlot(2560, "HexSignificand ::= [0] . [x] HexDigits? [.] HexDigits", slot2559, new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), 134, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot66 = new NonterminalGrammarSlot(66, "BlockStatement ::= . LocalVariableDeclarationStatement", null, slot65, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2406 = new NonterminalGrammarSlot(2406, "ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot2405, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot206 = new NonterminalGrammarSlot(206, "{ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ClassModifier", slot204, slot205, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots2() {
  slot2027 = new NonterminalGrammarSlot(2027, "CharacterLiteral ::= [\\'] . SingleCharacter [\\']", slot2025, slot2026, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot593 = new LastGrammarSlot(593, "Keyword ::= \"while\" .", slot592, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1716 = new NonterminalGrammarSlot(1716, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue . layout[\"Layout\"] \")\"", slot1715, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot638 = new LastTokenSlot(638, "Keyword ::= . \"if\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"if\"", new HashSet<>(), null), 64, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot646 = new LastTokenSlot(646, "Keyword ::= . \"else\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"else\"", new HashSet<>(), null), 68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1490 = new NonterminalGrammarSlot(1490, "UnaryExpressionNotPlusMinus ::= . CastExpression", null, slot1489, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1020 = new TokenGrammarSlot(1020, "TypeArguments ::= . \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null)), "\"<\"", new HashSet<>(), null), 15, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2573 = new NonterminalGrammarSlot(2573, "ClassMemberDeclaration ::= . ClassDeclaration", null, slot68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2490 = new LastGrammarSlot(2490, "Sign? ::= Sign .", slot2489, slot2315, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1154 = new LastTokenSlot(1154, "Digit ::= . [0]", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1224 = new LastGrammarSlot(1224, "PostfixExpression ::= Primary .", slot1223, slot465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1597 = new TokenGrammarSlot(1597, "AnnotationTypeBody ::= . \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1265 = new LastGrammarSlot(1265, "{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= (FormalParameter layout[\"Layout\"] \",\") .", slot1264, slot908, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2371 = new NonterminalGrammarSlot(2371, "Statement ::= \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2370, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot946 = new LastGrammarSlot(946, "FloatTypeSuffix ::= [fFdD] .", slot945, slot250, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot500 = new NonterminalGrammarSlot(500, "DefaultValue? ::= . DefaultValue", null, slot34, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1256 = new LastTokenSlot(1256, "InterfaceModifier ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2507 = new TokenGrammarSlot(2507, "HexNumeral ::= [0] . [x] HexDigits", slot2506, new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), 134, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot613 = new LastGrammarSlot(613, "Keyword ::= \"float\" .", slot612, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot623 = new LastGrammarSlot(623, "Keyword ::= \"void\" .", slot622, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2263 = new TokenGrammarSlot(2263, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] ClassBody?", slot2262, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1107 = new TokenGrammarSlot(1107, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] StatementExpression", slot1106, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot95 = new TokenGrammarSlot(95, "(\":\" layout[\"Layout\"] Expression) ::= . \":\" layout[\"Layout\"] Expression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1502 = new NonterminalGrammarSlot(1502, "MethodBody ::= . Block", null, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot709 = new NonterminalGrammarSlot(709, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot708, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2264 = new NonterminalGrammarSlot(2264, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] ClassBody?", slot2263, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot49 = new NonterminalGrammarSlot(49, "OctalDigitOrUnderscore ::= . OctalDigit", null, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1409 = new LastTokenSlot(1409, "InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] . \"}\"", slot1408, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1231 = new NonterminalGrammarSlot(1231, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1230, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1829 = new NonterminalGrammarSlot(1829, "PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"this\"", slot1828, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2156 = new TokenGrammarSlot(2156, "LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . \"...\" layout[\"Layout\"] VariableDeclaratorId", slot2155, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\"...\"", new HashSet<>(), null), 128, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1405 = new NonterminalGrammarSlot(1405, "InterfaceBody ::= \"{\" . layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"", slot1404, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1627 = new NonterminalGrammarSlot(1627, "Digits ::= . Digit DigitOrUnderscore* Digit", null, slot1153, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2623 = new LastGrammarSlot(2623, "ClassDeclaration ::= NormalClassDeclaration .", slot2622, slot68, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot182 = new NonterminalGrammarSlot(182, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot181, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2007 = new NonterminalGrammarSlot(2007, "StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] . Identifier? layout[\"Layout\"] \";\"", slot2006, slot1805, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1450 = new NonterminalGrammarSlot(1450, "Type ::= . ReferenceType", null, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot811 = new NonterminalGrammarSlot(811, "ConstructorModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2394 = new NonterminalGrammarSlot(2394, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2393, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot724 = new NonterminalGrammarSlot(724, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot723, slot675, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot906 = new LastGrammarSlot(906, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= Expression .", slot905, slot898, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot233 = new NonterminalGrammarSlot(233, "Annotation ::= \"@\" layout[\"Layout\"] TypeName . layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?", slot232, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2547 = new EpsilonGrammarSlot(2547, "NonWildTypeArguments? ::= .", slot164);
  slot2014 = new LastGrammarSlot(2014, "HexDigitOrUnderscore ::= HexDigit .", slot2013, slot1744, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot863 = new LastGrammarSlot(863, "LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .", slot862, slot65, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1584 = new EpsilonGrammarSlot(1584, "{ConstructorModifier}* ::= .", slot988);
  slot2348 = new LastTokenSlot(2348, "StringLiteral ::= [\\\"] StringCharacter* . [\\\"]", slot2347, new CharacterClass(new RegexAlt(list(Range.in(34, 34)), "", new HashSet<Condition>(), null), "[\\\"]", new HashSet<Condition>(), null), 93, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot287 = new NonterminalGrammarSlot(287, "TypeParameters ::= \"<\" layout[\"Layout\"] . {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", slot285, slot286, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot303 = new NonterminalGrammarSlot(303, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue", slot302, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2062 = new NonterminalGrammarSlot(2062, "start[CompilationUnit] ::= . layout[\"Layout\"] CompilationUnit layout[\"Layout\"]", null, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2123 = new NonterminalGrammarSlot(2123, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier . layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2122, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2706 = new NonterminalGrammarSlot(2706, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2374 = new NonterminalGrammarSlot(2374, "Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2373, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot311 = new LastGrammarSlot(311, "StringCharacter ::= InputCharacter .", slot310, slot308, new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(34, 34), Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\"\\\\]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1551 = new NonterminalGrammarSlot(1551, "StatementExpression ::= . PostDecrementExpression", null, slot1220, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot239 = new NonterminalGrammarSlot(239, "Annotation ::= \"@\" layout[\"Layout\"] . TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", slot238, slot140, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1026 = new LastGrammarSlot(1026, "TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .", slot1025, slot1019, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot45 = new NonterminalGrammarSlot(45, "MethodDeclaration ::= MethodHeader layout[\"Layout\"] . MethodBody", slot43, slot44, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot358 = new NonterminalGrammarSlot(358, "HexDigits ::= HexDigit HexDigitOrUnderscore* . HexDigit", slot357, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot441 = new LastGrammarSlot(441, "AbstractMethodModifier ::= \"public\" .", slot440, slot435, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1929 = new NonterminalGrammarSlot(1929, "StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression . layout[\"Layout\"] \";\"", slot1928, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2234 = new LastGrammarSlot(2234, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression .", slot2233, slot1349, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot769 = new LastGrammarSlot(769, "ExplicitConstructorInvocation? ::= ExplicitConstructorInvocation .", slot768, slot56, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2538 = new NonterminalGrammarSlot(2538, "PreIncrementExpression ::= \"++\" . layout[\"Layout\"] UnaryExpression", slot2537, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1839 = new LastGrammarSlot(1839, "PrimaryNoNewArray ::= FieldAccess .", slot1838, slot75, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot823 = new EpsilonGrammarSlot(823, "(\"extends\" layout[\"Layout\"] Type)? ::= .", slot822);
  slot278 = new LastTokenSlot(278, "Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] . \"}\"", slot277, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot397 = new NonterminalGrammarSlot(397, "FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] . LastFormalParameter", slot395, slot396, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2306 = new NonterminalGrammarSlot(2306, "InclusiveOrExpression ::= InclusiveOrExpression . layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression", slot2305, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot619 = new LastGrammarSlot(619, "Keyword ::= \"public\" .", slot618, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2713 = new NonterminalGrammarSlot(2713, "UnicodeEscape ::= [\\\\] . [u]+ HexDigit HexDigit HexDigit HexDigit", slot2712, slot864, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1772 = new TokenGrammarSlot(1772, "Backslash ::= . [\\\\] [u]+ \"005\" [cC]", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1583 = new LastGrammarSlot(1583, "{ConstructorModifier}* ::= {ConstructorModifier layout[\"Layout\"]}+ .", slot1582, slot988, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1764 = new EpsilonGrammarSlot(1764, "{(\"[\" layout[\"Layout\"] \"]\")}* ::= .", slot520);
  slot2078 = new LastGrammarSlot(2078, "{MethodModifier}* ::= {MethodModifier layout[\"Layout\"]}+ .", slot2077, slot2076, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2732 = new LastGrammarSlot(2732, "{CatchClause layout[\"Layout\"]}+ ::= CatchClause .", slot2731, slot1704, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot255 = new LastGrammarSlot(255, "DecimalFloatingPointLiteral ::= Digits ExponentPart .", slot254, slot248, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1061 = new NonterminalGrammarSlot(1061, "ReferenceTypeNonArrayType ::= TypeDeclSpecifier layout[\"Layout\"] . TypeArguments?", slot1060, slot445, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1613 = new NonterminalGrammarSlot(1613, "ExplicitGenericInvocationSuffix ::= \"super\" . layout[\"Layout\"] SuperSuffix", slot1612, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1146 = new NonterminalGrammarSlot(1146, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+", null, slot1145, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1396 = new TokenGrammarSlot(1396, "StaticInitializer ::= . \"static\" layout[\"Layout\"] Block", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1667 = new LastGrammarSlot(1667, "{InterfaceModifier layout[\"Layout\"]}+ ::= InterfaceModifier .", slot1666, slot539, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot256 = new TokenGrammarSlot(256, "DecimalFloatingPointLiteral ::= . [.] Digits ExponentPart? FloatTypeSuffix?", null, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), 14, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot587 = new LastGrammarSlot(587, "Keyword ::= \"protected\" .", slot586, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2353 = new LastGrammarSlot(2353, "{ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ImportDeclaration .", slot2352, slot1259, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2479 = new TokenGrammarSlot(2479, "ArrayType ::= Type layout[\"Layout\"] . \"[\" layout[\"Layout\"] \"]\"", slot2478, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(91, 91)), "", new HashSet<Condition>(), null), "[[]", new HashSet<Condition>(), null)), "\"[\"", new HashSet<>(), null), 8, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1837 = new LastGrammarSlot(1837, "PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" .", slot1836, slot75, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2065 = new NonterminalGrammarSlot(2065, "start[CompilationUnit] ::= layout[\"Layout\"] CompilationUnit . layout[\"Layout\"]", slot2064, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot674 = new LastGrammarSlot(674, "HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent FloatTypeSuffix? .", slot673, slot669, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot329 = new LastGrammarSlot(329, "{ConstantModifier layout[\"Layout\"]}+ ::= ConstantModifier .", slot328, slot326, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot710 = new NonterminalGrammarSlot(710, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot709, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot423 = new EpsilonGrammarSlot(423, "ClassBody? ::= .", slot408);
  slot1797 = new NonterminalGrammarSlot(1797, "UnaryExpression ::= . PreDecrementExpression", null, slot761, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1664 = new NonterminalGrammarSlot(1664, "{InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] . InterfaceModifier", slot1663, slot1243, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1934 = new TokenGrammarSlot(1934, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1933, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2660 = new NonterminalGrammarSlot(2660, "{InterfaceMemberDeclaration}* ::= . {InterfaceMemberDeclaration layout[\"Layout\"]}+", null, slot2325, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot973 = new LastTokenSlot(973, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"", slot972, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1456 = new LastTokenSlot(1456, "SwitchLabel ::= \"default\" layout[\"Layout\"] . \":\"", slot1455, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1782 = new NonterminalGrammarSlot(1782, "{ClassBodyDeclaration layout[\"Layout\"]}+ ::= . ClassBodyDeclaration", null, slot1779, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1182 = new TokenGrammarSlot(1182, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \">>>\" layout[\"Layout\"] AdditiveExpression", slot1181, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">>>\"", new HashSet<>(), null), 89, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1440 = new LastGrammarSlot(1440, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\" .", slot1439, slot1429, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1008 = new LastGrammarSlot(1008, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\" .", slot1007, slot942, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1514 = new LastGrammarSlot(1514, "BinaryNumeral ::= [0] [B] BinaryDigits .", slot1513, slot1506, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1977 = new TokenGrammarSlot(1977, "StatementWithoutTrailingSubstatement ::= . \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(107, 107)), "", new HashSet<Condition>(), null), "[k]", new HashSet<Condition>(), null)), "\"break\"", new HashSet<>(), null), 42, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2311 = new EpsilonGrammarSlot(2311, "OctalDigitOrUnderscore* ::= .", slot476);
  slot1962 = new NonterminalGrammarSlot(1962, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1961, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot773 = new NonterminalGrammarSlot(773, "TypeParameters? ::= . TypeParameters", null, slot283, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot914 = new EpsilonGrammarSlot(914, "{FieldModifier}* ::= .", slot911);
  slot494 = new LastTokenSlot(494, "PrimitiveType ::= . \"short\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"short\"", new HashSet<>(), null), 32, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1138 = new TokenGrammarSlot(1138, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ElementValuePair", slot1137, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1247 = new LastGrammarSlot(1247, "InterfaceModifier ::= \"private\" .", slot1246, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1666 = new NonterminalGrammarSlot(1666, "{InterfaceModifier layout[\"Layout\"]}+ ::= . InterfaceModifier", null, slot1243, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2216 = new LastGrammarSlot(2216, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression .", slot2215, slot1349, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2055 = new LastGrammarSlot(2055, "FieldModifier ::= \"public\" .", slot2054, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2636 = new LastGrammarSlot(2636, "ClassBodyDeclaration ::= StaticInitializer .", slot2635, slot1779, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot55 = new NonterminalGrammarSlot(55, "ConstructorBody ::= \"{\" . layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"", slot54, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2262 = new NonterminalGrammarSlot(2262, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2261, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1922 = new NonterminalGrammarSlot(1922, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] . {CatchClause}* layout[\"Layout\"] Finally?", slot1921, slot1738, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2363 = new LastGrammarSlot(2363, "Statement ::= ForStatement .", slot2362, slot71, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1626 = new LastGrammarSlot(1626, "Digits ::= Digit .", slot1625, slot115, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2733 = new NonterminalGrammarSlot(2733, "ElementValuePair ::= . Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1628 = new NonterminalGrammarSlot(1628, "Digits ::= Digit . DigitOrUnderscore* Digit", slot1627, slot123, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot971 = new TokenGrammarSlot(971, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"", slot970, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1099 = new NonterminalGrammarSlot(1099, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] . ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1098, slot699, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1606 = new NonterminalGrammarSlot(1606, "(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot1605, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1692 = new NonterminalGrammarSlot(1692, "{TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] TypeDeclaration", slot1691, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot88 = new TokenGrammarSlot(88, "ArrayAccess ::= ExpressionName layout[\"Layout\"] . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot87, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(91, 91)), "", new HashSet<Condition>(), null), "[[]", new HashSet<Condition>(), null)), "\"[\"", new HashSet<>(), null), 8, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2012 = new LastGrammarSlot(2012, "StatementWithoutTrailingSubstatement ::= Block .", slot2011, slot676, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1660 = new NonterminalGrammarSlot(1660, "(\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" layout[\"Layout\"] . TypeList", slot1659, slot1319, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2354 = new NonterminalGrammarSlot(2354, "{ImportDeclaration layout[\"Layout\"]}+ ::= . ImportDeclaration", null, slot1429, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2207 = new TokenGrammarSlot(2207, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"<=\" layout[\"Layout\"] ShiftExpression", slot2206, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"<=\"", new HashSet<>(), null), 131, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot560 = new LastGrammarSlot(560, "UnicodeInputCharacter ::= UnicodeEscape .", slot559, slot554, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2477 = new NonterminalGrammarSlot(2477, "ArrayType ::= . Type layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"", null, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot648 = new LastTokenSlot(648, "Keyword ::= . \"final\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), 69, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot632 = new LastTokenSlot(632, "Keyword ::= . \"byte\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"byte\"", new HashSet<>(), null), 33, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2411 = new LastGrammarSlot(2411, "ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .", slot2410, slot1195, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2531 = new TokenGrammarSlot(2531, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] VariableInitializer", slot2530, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot110 = new NonterminalGrammarSlot(110, "{ClassModifier}* ::= . {ClassModifier layout[\"Layout\"]}+", null, slot109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot272 = new LastGrammarSlot(272, "DecimalFloatingPointLiteral ::= Digits ExponentPart FloatTypeSuffix .", slot271, slot248, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot909 = new NonterminalGrammarSlot(909, "{(FormalParameter layout[\"Layout\"] \",\")}* ::= . {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+", null, slot908, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1100 = new NonterminalGrammarSlot(1100, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1099, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2593 = new TokenGrammarSlot(2593, "CommentTailStar ::= . \"*\" CommentTailStar", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "\"*\"", new HashSet<>(), null), 109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2260 = new NonterminalGrammarSlot(2260, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2259, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2723 = new NonterminalGrammarSlot(2723, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ExceptionType", slot2722, slot280, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot410 = new LastGrammarSlot(410, "EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody? .", slot409, slot399, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot541 = new LastGrammarSlot(541, "{InterfaceModifier}* ::= {InterfaceModifier layout[\"Layout\"]}+ .", slot540, slot537, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1287 = new LastGrammarSlot(1287, "EscapeSequence ::= OctalEscape .", slot1286, slot312, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1534 = new NonterminalGrammarSlot(1534, "DimExpr ::= \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot1533, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1940 = new TokenGrammarSlot(1940, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1939, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1097 = new TokenGrammarSlot(1097, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1096, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2243 = new NonterminalGrammarSlot(2243, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2242, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1979 = new NonterminalGrammarSlot(1979, "StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] . Identifier? layout[\"Layout\"] \";\"", slot1978, slot1805, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2138 = new LastTokenSlot(2138, "AssignmentOperator ::= . \"*=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"*=\"", new HashSet<>(), null), 121, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot978 = new NonterminalGrammarSlot(978, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot977, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot706 = new TokenGrammarSlot(706, "StatementNoShortIf ::= . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"while\"", new HashSet<>(), null), 49, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot443 = new NonterminalGrammarSlot(443, "ReferenceType ::= . TypeDeclSpecifier layout[\"Layout\"] TypeArguments?", null, slot442, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1491 = new LastGrammarSlot(1491, "UnaryExpressionNotPlusMinus ::= CastExpression .", slot1490, slot1488, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot786 = new LastGrammarSlot(786, "ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\" .", slot785, slot389, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1557 = new LastGrammarSlot(1557, "StatementExpression ::= ClassInstanceCreationExpression .", slot1556, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2035 = new NonterminalGrammarSlot(2035, "(CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* . layout[\"Layout\"] Finally", slot2034, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2359 = new LastGrammarSlot(2359, "(\"extends\" layout[\"Layout\"] TypeList)? ::= (\"extends\" layout[\"Layout\"] TypeList) .", slot2358, slot2356, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1702 = new NonterminalGrammarSlot(1702, "( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= . (CatchClause* layout[\"Layout\"] Finally)", null, slot1701, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1194 = new LastGrammarSlot(1194, "AnnotationTypeElementDeclaration ::= InterfaceDeclaration .", slot1193, slot1190, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1897 = new NonterminalGrammarSlot(1897, "CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType . layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus", slot1896, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2301 = new NonterminalGrammarSlot(2301, "HexIntegerLiteral ::= HexNumeral . IntegerTypeSuffix?", slot2300, slot745, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1575 = new NonterminalGrammarSlot(1575, "Literal ::= . StringLiteral", null, slot1574, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1079 = new TokenGrammarSlot(1079, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] . \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1078, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot802 = new EpsilonGrammarSlot(802, "Finally? ::= .", slot801);
  slot681 = new TokenGrammarSlot(681, "StatementNoShortIf ::= Identifier layout[\"Layout\"] . \":\" layout[\"Layout\"] StatementNoShortIf", slot680, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2130 = new LastTokenSlot(2130, "AssignmentOperator ::= . \"=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"=\"", new HashSet<>(), null), 36, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1289 = new NonterminalGrammarSlot(1289, "EscapeSequence ::= [\\\\] . [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC]", slot1288, slot864, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2677 = new NonterminalGrammarSlot(2677, "(( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= . (( | \"extends\"\"super\") layout[\"Layout\"] Type)", null, slot2056, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1923 = new NonterminalGrammarSlot(1923, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* . layout[\"Layout\"] Finally?", slot1922, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot753 = new LastGrammarSlot(753, "(\"extends\" layout[\"Layout\"] Type) ::= \"extends\" layout[\"Layout\"] Type .", slot752, slot748, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1430 = new TokenGrammarSlot(1430, "ImportDeclaration ::= . \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"import\"", new HashSet<>(), null), 45, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot729 = new LastGrammarSlot(729, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf .", slot728, slot675, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2310 = new LastGrammarSlot(2310, "InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression .", slot2309, slot1053, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2462 = new NonterminalGrammarSlot(2462, "TypeArgumentsOrDiamond? ::= . TypeArgumentsOrDiamond", null, slot2177, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot202 = new LastGrammarSlot(202, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .", slot201, slot129, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1618 = new NonterminalGrammarSlot(1618, "ExplicitGenericInvocationSuffix ::= Identifier layout[\"Layout\"] . Arguments", slot1617, slot1016, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot21 = new NonterminalGrammarSlot(21, "FieldAccess ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier", slot20, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot161 = new NonterminalGrammarSlot(161, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot160, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2106 = new NonterminalGrammarSlot(2106, "MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression", slot2105, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2559 = new TokenGrammarSlot(2559, "HexSignificand ::= . [0] [x] HexDigits? [.] HexDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1185 = new LastGrammarSlot(1185, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression .", slot1184, slot1165, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2689 = new LastTokenSlot(2689, "ClassModifier ::= . \"private\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), 60, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1823 = new LastGrammarSlot(1823, "PrimaryNoNewArray ::= MethodInvocation .", slot1822, slot75, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot242 = new NonterminalGrammarSlot(242, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" . layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", slot241, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2517 = new NonterminalGrammarSlot(2517, "AndExpression ::= AndExpression . layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression", slot2516, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1055 = new LastGrammarSlot(1055, "ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression .", slot1054, slot1048, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1617 = new NonterminalGrammarSlot(1617, "ExplicitGenericInvocationSuffix ::= Identifier . layout[\"Layout\"] Arguments", slot1616, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot733 = new NonterminalGrammarSlot(733, "EnumBodyDeclarations? ::= . EnumBodyDeclarations", null, slot732, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2107 = new TokenGrammarSlot(2107, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"/\" layout[\"Layout\"] UnaryExpression", slot2106, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null)), "\"/\"", new HashSet<>(), null), 116, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2347 = new NonterminalGrammarSlot(2347, "StringLiteral ::= [\\\"] . StringCharacter* [\\\"]", slot2345, slot2346, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1254 = new LastTokenSlot(1254, "InterfaceModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1234 = new NonterminalGrammarSlot(1234, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1233, slot843, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot998 = new LastGrammarSlot(998, "ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody .", slot997, slot987, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot881 = new NonterminalGrammarSlot(881, "AdditiveExpression ::= . AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression", null, slot877, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2730 = new LastGrammarSlot(2730, "{CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] CatchClause .", slot2729, slot1704, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2454 = new NonterminalGrammarSlot(2454, "FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"", slot2453, slot859, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots3() {
  slot2161 = new LastGrammarSlot(2161, "LastFormalParameter ::= FormalParameter .", slot2160, slot396, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1115 = new EpsilonGrammarSlot(1115, "(\".\" layout[\"Layout\"] \"*\")? ::= .", slot1114);
  slot902 = new NonterminalGrammarSlot(902, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] Expression", slot901, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2648 = new NonterminalGrammarSlot(2648, "MethodHeader ::= {MethodModifier}* . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?", slot2647, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot492 = new LastTokenSlot(492, "PrimitiveType ::= . \"boolean\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null)), "\"boolean\"", new HashSet<>(), null), 31, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1482 = new LastGrammarSlot(1482, "{ConstantModifier}* ::= {ConstantModifier layout[\"Layout\"]}+ .", slot1481, slot1480, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2208 = new NonterminalGrammarSlot(2208, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" . layout[\"Layout\"] ShiftExpression", slot2207, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot815 = new EpsilonGrammarSlot(815, "FloatTypeSuffix? ::= .", slot260);
  slot712 = new TokenGrammarSlot(712, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf", slot711, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2016 = new LastGrammarSlot(2016, "HexDigitOrUnderscore ::= [_] .", slot2015, slot1744, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1108 = new NonterminalGrammarSlot(1108, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] StatementExpression", slot1107, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2368 = new NonterminalGrammarSlot(2368, "Statement ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] . Statement", slot2367, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot43 = new NonterminalGrammarSlot(43, "MethodDeclaration ::= MethodHeader . layout[\"Layout\"] MethodBody", slot42, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot668 = new LastGrammarSlot(668, "Comment ::= EndOfLineComment .", slot667, slot662, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot444 = new NonterminalGrammarSlot(444, "ReferenceType ::= TypeDeclSpecifier . layout[\"Layout\"] TypeArguments?", slot443, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1481 = new NonterminalGrammarSlot(1481, "{ConstantModifier}* ::= . {ConstantModifier layout[\"Layout\"]}+", null, slot326, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2170 = new NonterminalGrammarSlot(2170, "ConditionalOrExpression ::= ConditionalOrExpression . layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression", slot2169, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1963 = new TokenGrammarSlot(1963, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1962, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot959 = new NonterminalGrammarSlot(959, "ExplicitConstructorInvocation ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", null, slot16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1862 = new EpsilonGrammarSlot(1862, "BinaryDigitOrUnderscore* ::= .", slot1861);
  slot2607 = new LastTokenSlot(2607, "ConstantModifier ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1685 = new NonterminalGrammarSlot(1685, "OctalEscape ::= [\\\\] . OctalDigit OctalDigit", slot1684, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot579 = new LastGrammarSlot(579, "Keyword ::= \"native\" .", slot578, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1292 = new TokenGrammarSlot(1292, "EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] . [\\\\] [u]+ \"005\" [cC]", slot1291, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1065 = new NonterminalGrammarSlot(1065, "InterfaceDeclaration ::= . NormalInterfaceDeclaration", null, slot1064, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2579 = new LastTokenSlot(2579, "ClassMemberDeclaration ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1443 = new LastGrammarSlot(1443, "( | \"extends\"\"super\") ::= \"super\" .", slot1442, slot1441, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot351 = new NonterminalGrammarSlot(351, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= . ReferenceType", null, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1222 = new LastGrammarSlot(1222, "PostfixExpression ::= PostDecrementExpression .", slot1221, slot465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1391 = new LastTokenSlot(1391, "MethodModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1580 = new LastGrammarSlot(1580, "Literal ::= FloatingPointLiteral .", slot1579, slot1565, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1464 = new LastGrammarSlot(1464, "SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\" .", slot1463, slot294, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1339 = new NonterminalGrammarSlot(1339, "ExclusiveOrExpression ::= . ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression", null, slot1338, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot173 = new LastTokenSlot(173, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"", slot172, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2473 = new NonterminalGrammarSlot(2473, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2472, slot2356, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1501 = new LastGrammarSlot(1501, "UnaryExpressionNotPlusMinus ::= \"!\" layout[\"Layout\"] UnaryExpression .", slot1500, slot1488, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1828 = new TokenGrammarSlot(1828, "PrimaryNoNewArray ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"this\"", slot1827, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1414 = new NonterminalGrammarSlot(1414, "{AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . AnnotationTypeElementDeclaration", slot1413, slot1190, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot6 = new LastGrammarSlot(6, "( | PrimitiveTypeReferenceType) ::= ReferenceType .", slot5, slot0, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot469 = new LastGrammarSlot(469, "PostIncrementExpression ::= PostfixExpression layout[\"Layout\"] \"++\" .", slot468, slot464, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1592 = new LastGrammarSlot(1592, "(\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" layout[\"Layout\"] VariableInitializer .", slot1591, slot533, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot114 = new EpsilonGrammarSlot(114, "Digits? ::= .", slot113);
  slot1452 = new NonterminalGrammarSlot(1452, "Type ::= . PrimitiveType", null, slot1, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1518 = new LastGrammarSlot(1518, "BinaryNumeral ::= [0] [b] BinaryDigits .", slot1517, slot1506, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot970 = new NonterminalGrammarSlot(970, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot969, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1868 = new LastGrammarSlot(1868, "TraditionalComment ::= \"/*\" CommentTail .", slot1867, slot663, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2694 = new LastGrammarSlot(2694, "ClassModifier ::= \"static\" .", slot2693, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2655 = new NonterminalGrammarSlot(2655, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] . Throws?", slot2654, slot994, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1901 = new LastGrammarSlot(1901, "CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus .", slot1900, slot1489, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1499 = new NonterminalGrammarSlot(1499, "UnaryExpressionNotPlusMinus ::= \"!\" . layout[\"Layout\"] UnaryExpression", slot1498, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot12 = new NonterminalGrammarSlot(12, "FieldAccess ::= \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier", slot11, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2412 = new TokenGrammarSlot(2412, "Finally ::= . \"finally\" layout[\"Layout\"] Block", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"finally\"", new HashSet<>(), null), 59, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot146 = new NonterminalGrammarSlot(146, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot144, slot145, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1509 = new LastGrammarSlot(1509, "BinaryIntegerLiteral ::= BinaryNumeral IntegerTypeSuffix? .", slot1508, slot217, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2271 = new NonterminalGrammarSlot(2271, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" . layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2270, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2482 = new LastGrammarSlot(2482, "ArrayType ::= Type layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\" .", slot2481, slot448, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2383 = new NonterminalGrammarSlot(2383, "Statement ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2382, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot683 = new NonterminalGrammarSlot(683, "StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] . StatementNoShortIf", slot682, slot675, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot352 = new LastGrammarSlot(352, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= ReferenceType .", slot351, slot344, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot607 = new LastGrammarSlot(607, "Keyword ::= \"transient\" .", slot606, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2415 = new LastGrammarSlot(2415, "Finally ::= \"finally\" layout[\"Layout\"] Block .", slot2414, slot803, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1462 = new NonterminalGrammarSlot(1462, "SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression . layout[\"Layout\"] \":\"", slot1461, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1066 = new LastGrammarSlot(1066, "InterfaceDeclaration ::= NormalInterfaceDeclaration .", slot1065, slot1063, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1787 = new NonterminalGrammarSlot(1787, "UnaryExpression ::= . PreIncrementExpression", null, slot1558, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2316 = new NonterminalGrammarSlot(2316, "SignedInteger ::= . Sign? Digits", null, slot2315, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot652 = new LastTokenSlot(652, "Keyword ::= . \"goto\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null)), "\"goto\"", new HashSet<>(), null), 71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1570 = new NonterminalGrammarSlot(1570, "Literal ::= . NullLiteral", null, slot1569, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1510 = new TokenGrammarSlot(1510, "BinaryNumeral ::= . [0] [B] BinaryDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1806 = new NonterminalGrammarSlot(1806, "Identifier? ::= . Identifier", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot755 = new NonterminalGrammarSlot(755, "{DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ . layout[\"Layout\"] DimExpr", slot754, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1047 = new LastGrammarSlot(1047, "IntegerTypeSuffix? ::= IntegerTypeSuffix .", slot1046, slot745, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot585 = new LastGrammarSlot(585, "Keyword ::= \"import\" .", slot584, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot168 = new NonterminalGrammarSlot(168, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot167, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot79 = new NonterminalGrammarSlot(79, "ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot78, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot852 = new NonterminalGrammarSlot(852, "{BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ . layout[\"Layout\"] BlockStatement", slot851, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot136 = new NonterminalGrammarSlot(136, "MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"", slot134, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2498 = new LastGrammarSlot(2498, "Arguments? ::= Arguments .", slot2497, slot405, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1012 = new NonterminalGrammarSlot(1012, "SuperSuffix ::= \".\" layout[\"Layout\"] . Identifier layout[\"Layout\"] Arguments?", slot1011, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2151 = new LastGrammarSlot(2151, "AssignmentOperator ::= \"<<=\" .", slot2150, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1458 = new TokenGrammarSlot(1458, "SwitchLabel ::= . \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"case\"", new HashSet<>(), null), 48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1535 = new NonterminalGrammarSlot(1535, "DimExpr ::= \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"", slot1534, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1199 = new LastGrammarSlot(1199, "AnnotationTypeElementDeclaration ::= \";\" .", slot1198, slot1190, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot418 = new NonterminalGrammarSlot(418, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . TypeParameter", null, slot415, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2688 = new LastGrammarSlot(2688, "ClassModifier ::= \"final\" .", slot2687, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1696 = new LastGrammarSlot(1696, "{TypeDeclaration layout[\"Layout\"]}+ ::= TypeDeclaration .", slot1695, slot1132, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1105 = new NonterminalGrammarSlot(1105, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression", null, slot471, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1683 = new LastGrammarSlot(1683, "OctalEscape ::= [\\\\] ZeroToThree OctalDigit OctalDigit .", slot1682, slot1285, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1204 = new NonterminalGrammarSlot(1204, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1203, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1260 = new NonterminalGrammarSlot(1260, "{ImportDeclaration}* ::= . {ImportDeclaration layout[\"Layout\"]}+", null, slot1259, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1593 = new NonterminalGrammarSlot(1593, "MethodName ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot589 = new LastGrammarSlot(589, "Keyword ::= \"implements\" .", slot588, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1059 = new NonterminalGrammarSlot(1059, "ReferenceTypeNonArrayType ::= . TypeDeclSpecifier layout[\"Layout\"] TypeArguments?", null, slot442, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1863 = new NonterminalGrammarSlot(1863, "BinaryDigitOrUnderscore* ::= . BinaryDigitOrUnderscore* BinaryDigitOrUnderscore", null, slot1861, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1137 = new NonterminalGrammarSlot(1137, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair", slot1136, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot409 = new NonterminalGrammarSlot(409, "EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] . ClassBody?", slot407, slot408, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1295 = new LastTokenSlot(1295, "EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" . [cC]", slot1294, new CharacterClass(new RegexAlt(list(Range.in(99, 99), Range.in(67, 67)), "", new HashSet<Condition>(), null), "[cC]", new HashSet<Condition>(), null), 92, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1477 = new LastGrammarSlot(1477, "FloatingPointLiteral ::= HexadecimalFloatingPointLiteral .", slot1476, slot1475, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1476 = new NonterminalGrammarSlot(1476, "FloatingPointLiteral ::= . HexadecimalFloatingPointLiteral", null, slot669, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1168 = new TokenGrammarSlot(1168, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \"<<\" layout[\"Layout\"] AdditiveExpression", slot1167, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null)), "\"<<\"", new HashSet<>(), null), 87, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot563 = new LastGrammarSlot(563, "Keyword ::= \"double\" .", slot562, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1903 = new NonterminalGrammarSlot(1903, "CastExpression ::= \"(\" . layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression", slot1902, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2565 = new NonterminalGrammarSlot(2565, "HexSignificand ::= . HexNumeral", null, slot2299, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot460 = new LastGrammarSlot(460, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= VariableDeclarator .", slot459, slot451, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot830 = new TokenGrammarSlot(830, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] . \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression", slot829, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(63, 63)), "", new HashSet<Condition>(), null), "[?]", new HashSet<Condition>(), null)), "\"?\"", new HashSet<>(), null), 76, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2718 = new LastGrammarSlot(2718, "UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit HexDigit HexDigit .", slot2717, slot558, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2322 = new EpsilonGrammarSlot(2322, "HexDigits? ::= .", slot2321);
  slot2381 = new NonterminalGrammarSlot(2381, "Statement ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2380, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1261 = new LastGrammarSlot(1261, "{ImportDeclaration}* ::= {ImportDeclaration layout[\"Layout\"]}+ .", slot1260, slot1258, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1279 = new NonterminalGrammarSlot(1279, "MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1278, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1624 = new EpsilonGrammarSlot(1624, "ElementValues? ::= .", slot427);
  slot2075 = new LastGrammarSlot(2075, "JavaLetter ::= [A-Za-z$_] .", slot2074, slot870, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1672 = new NonterminalGrammarSlot(1672, "{VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] . VariableModifier", slot1671, slot1519, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1328 = new NonterminalGrammarSlot(1328, "ConstructorDeclarator ::= . TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", null, slot771, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2101 = new TokenGrammarSlot(2101, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"*\" layout[\"Layout\"] UnaryExpression", slot2100, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "\"*\"", new HashSet<>(), null), 109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2242 = new NonterminalGrammarSlot(2242, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2241, slot771, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot608 = new LastTokenSlot(608, "Keyword ::= . \"default\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"default\"", new HashSet<>(), null), 4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot497 = new LastGrammarSlot(497, "PrimitiveType ::= \"byte\" .", slot496, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot924 = new LastGrammarSlot(924, "BinaryDigitOrUnderscore ::= BinaryDigit .", slot923, slot921, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1941 = new NonterminalGrammarSlot(1941, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" . layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1940, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1025 = new LastTokenSlot(1025, "TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"", slot1024, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">\"", new HashSet<>(), null), 16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1286 = new NonterminalGrammarSlot(1286, "EscapeSequence ::= . OctalEscape", null, slot1285, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2210 = new LastGrammarSlot(2210, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression .", slot2209, slot1349, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot616 = new LastTokenSlot(616, "Keyword ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot629 = new LastGrammarSlot(629, "Keyword ::= \"try\" .", slot628, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2520 = new NonterminalGrammarSlot(2520, "AndExpression ::= AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] . EqualityExpression", slot2519, slot1348, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1916 = new TokenGrammarSlot(1916, "StatementWithoutTrailingSubstatement ::= . \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"try\"", new HashSet<>(), null), 61, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2060 = new LastGrammarSlot(2060, "(( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") layout[\"Layout\"] Type .", slot2059, slot2056, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2703 = new NonterminalGrammarSlot(2703, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] QualifiedIdentifier", slot2702, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot306 = new NonterminalGrammarSlot(306, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ElementValue", slot305, slot37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2373 = new NonterminalGrammarSlot(2373, "Statement ::= \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2372, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2314 = new LastGrammarSlot(2314, "OctalDigitOrUnderscore* ::= OctalDigitOrUnderscore* OctalDigitOrUnderscore .", slot2313, slot476, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2616 = new TokenGrammarSlot(2616, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] EnumConstant", slot2615, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2378 = new NonterminalGrammarSlot(2378, "Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement", slot2377, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1303 = new LastGrammarSlot(1303, "EscapeSequence ::= Backslash [\\'] .", slot1302, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot892 = new LastGrammarSlot(892, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression .", slot891, slot877, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot708 = new TokenGrammarSlot(708, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot707, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2540 = new LastGrammarSlot(2540, "PreIncrementExpression ::= \"++\" layout[\"Layout\"] UnaryExpression .", slot2539, slot1558, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2283 = new NonterminalGrammarSlot(2283, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2282, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot752 = new NonterminalGrammarSlot(752, "(\"extends\" layout[\"Layout\"] Type) ::= \"extends\" layout[\"Layout\"] . Type", slot750, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1193 = new NonterminalGrammarSlot(1193, "AnnotationTypeElementDeclaration ::= . InterfaceDeclaration", null, slot1063, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot868 = new LastTokenSlot(868, "[u]+ ::= [u]+ . [u]", slot867, new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), 77, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot28 = new TokenGrammarSlot(28, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot27, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1248 = new LastTokenSlot(1248, "InterfaceModifier ::= . \"strictfp\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null)), "\"strictfp\"", new HashSet<>(), null), 39, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot832 = new NonterminalGrammarSlot(832, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] . Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression", slot831, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1767 = new NonterminalGrammarSlot(1767, "(\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" . layout[\"Layout\"] TypeList", slot1766, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2472 = new NonterminalGrammarSlot(2472, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2471, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot307 = new LastGrammarSlot(307, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue .", slot306, slot299, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2590 = new LastGrammarSlot(2590, "LeftHandSide ::= ExpressionName .", slot2589, slot1540, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot594 = new LastTokenSlot(594, "Keyword ::= . \"switch\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null)), "\"switch\"", new HashSet<>(), null), 50, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1273 = new NonterminalGrammarSlot(1273, "MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" . layout[\"Layout\"] \"]\"", slot1272, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot821 = new LastGrammarSlot(821, "Primary ::= ArrayCreationExpression .", slot820, slot16, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2513 = new LastGrammarSlot(2513, "HexNumeral ::= [0] [X] HexDigits .", slot2512, slot2299, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1102 = new NonterminalGrammarSlot(1102, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement", slot1101, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot872 = new LastGrammarSlot(872, "IdentifierChars ::= JavaLetter .", slot871, slot461, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1662 = new NonterminalGrammarSlot(1662, "{InterfaceModifier layout[\"Layout\"]}+ ::= . {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceModifier", null, slot539, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1792 = new LastGrammarSlot(1792, "UnaryExpression ::= \"-\" layout[\"Layout\"] UnaryExpression .", slot1791, slot764, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1878 = new TokenGrammarSlot(1878, "TypeArgument ::= . \"?\" layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)?", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(63, 63)), "", new HashSet<Condition>(), null), "[?]", new HashSet<Condition>(), null)), "\"?\"", new HashSet<>(), null), 76, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2241 = new NonterminalGrammarSlot(2241, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2240, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot839 = new LastGrammarSlot(839, "ConditionalExpression ::= ConditionalOrExpression .", slot838, slot826, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot46 = new LastGrammarSlot(46, "MethodDeclaration ::= MethodHeader layout[\"Layout\"] MethodBody .", slot45, slot40, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot425 = new TokenGrammarSlot(425, "ElementValueArrayInitializer ::= . \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1449 = new LastGrammarSlot(1449, "VariableDeclarator ::= VariableDeclaratorId layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)? .", slot1448, slot456, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2108 = new NonterminalGrammarSlot(2108, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" . layout[\"Layout\"] UnaryExpression", slot2107, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot972 = new NonterminalGrammarSlot(972, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"", slot971, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2185 = new LastTokenSlot(2185, "Sign ::= . [+-]", null, new CharacterClass(new RegexAlt(list(Range.in(43, 43), Range.in(45, 45)), "", new HashSet<Condition>(), null), "[+-]", new HashSet<Condition>(), null), 130, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1314 = new LastTokenSlot(1314, "EscapeSequence ::= Backslash . [r]", slot1313, new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), 98, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot2047 = new LastGrammarSlot(2047, "FieldModifier ::= \"protected\" .", slot2046, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1183 = new NonterminalGrammarSlot(1183, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" . layout[\"Layout\"] AdditiveExpression", slot1182, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1866 = new TokenGrammarSlot(1866, "TraditionalComment ::= . \"/*\" CommentTail", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "\"/*\"", new HashSet<>(), null), 112, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2188 = new LastGrammarSlot(2188, "ForInit ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot2187, slot1187, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2657 = new NonterminalGrammarSlot(2657, "TypeVariable ::= . Identifier", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1917 = new NonterminalGrammarSlot(1917, "StatementWithoutTrailingSubstatement ::= \"try\" . layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?", slot1916, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1493 = new LastGrammarSlot(1493, "UnaryExpressionNotPlusMinus ::= PostfixExpression .", slot1492, slot1488, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1277 = new NonterminalGrammarSlot(1277, "MethodDeclarator ::= Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1276, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2052 = new LastTokenSlot(2052, "FieldModifier ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2443 = new NonterminalGrammarSlot(2443, "BinaryDigits ::= . BinaryDigit BinaryDigitOrUnderscore* BinaryDigit", null, slot922, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1217 = new LastGrammarSlot(1217, "AnnotationTypeElementDeclaration ::= ClassDeclaration .", slot1216, slot1190, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2098 = new LastGrammarSlot(2098, "MultiplicativeExpression ::= UnaryExpression .", slot2097, slot878, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot388 = new LastGrammarSlot(388, "VariableInitializer ::= Expression .", slot387, slot386, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2624 = new NonterminalGrammarSlot(2624, "ClassDeclaration ::= . EnumDeclaration", null, slot932, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot185 = new NonterminalGrammarSlot(185, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"", slot184, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot375 = new NonterminalGrammarSlot(375, "ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources . layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"", slot374, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot576 = new LastTokenSlot(576, "Keyword ::= . \"break\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(107, 107)), "", new HashSet<Condition>(), null), "[k]", new HashSet<Condition>(), null)), "\"break\"", new HashSet<>(), null), 42, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1363 = new LastGrammarSlot(1363, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression .", slot1362, slot1348, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1717 = new LastTokenSlot(1717, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] . \")\"", slot1716, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot992 = new NonterminalGrammarSlot(992, "ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] . ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody", slot990, slot991, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1387 = new LastTokenSlot(1387, "MethodModifier ::= . \"protected\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), 46, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2523 = new LastTokenSlot(2523, "\",\"? ::= . \",\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1083 = new TokenGrammarSlot(1083, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement", slot1082, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1172 = new NonterminalGrammarSlot(1172, "ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression", null, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot782 = new NonterminalGrammarSlot(782, "ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* . layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", slot781, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2237 = new NonterminalGrammarSlot(2237, "NormalClassDeclaration ::= {ClassModifier}* . layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2236, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1559 = new NonterminalGrammarSlot(1559, "StatementExpression ::= . PreIncrementExpression", null, slot1558, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2577 = new NonterminalGrammarSlot(2577, "ClassMemberDeclaration ::= . FieldDeclaration", null, slot2449, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2654 = new NonterminalGrammarSlot(2654, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator . layout[\"Layout\"] Throws?", slot2653, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1336 = new LastTokenSlot(1336, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] . \")\"", slot1335, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2364 = new NonterminalGrammarSlot(2364, "Statement ::= . Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] Statement", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2638 = new LastGrammarSlot(2638, "ClassBodyDeclaration ::= ClassMemberDeclaration .", slot2637, slot1779, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot776 = new NonterminalGrammarSlot(776, "ExponentPart? ::= . ExponentPart", null, slot118, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2527 = new NonterminalGrammarSlot(2527, "StringCharacter* ::= StringCharacter* . StringCharacter", slot2526, slot308, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
}

private void initBodyGrammarSlots4() {
  slot2313 = new NonterminalGrammarSlot(2313, "OctalDigitOrUnderscore* ::= OctalDigitOrUnderscore* . OctalDigitOrUnderscore", slot2312, slot47, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot331 = new NonterminalGrammarSlot(331, "{ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ConstantModifier", slot330, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1965 = new NonterminalGrammarSlot(1965, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1964, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot716 = new TokenGrammarSlot(716, "StatementNoShortIf ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"if\"", new HashSet<>(), null), 64, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2574 = new LastGrammarSlot(2574, "ClassMemberDeclaration ::= ClassDeclaration .", slot2573, slot2570, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1226 = new LastGrammarSlot(1226, "PostfixExpression ::= ExpressionName .", slot1225, slot465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot984 = new NonterminalGrammarSlot(984, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"", slot983, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1895 = new NonterminalGrammarSlot(1895, "CastExpression ::= \"(\" . layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus", slot1894, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1678 = new LastGrammarSlot(1678, "(\"[\" layout[\"Layout\"] \"]\") ::= \"[\" layout[\"Layout\"] \"]\" .", slot1677, slot1674, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1379 = new LastTokenSlot(1379, "MethodModifier ::= . \"final\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), 69, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1324 = new NonterminalGrammarSlot(1324, "{AbstractMethodModifier layout[\"Layout\"]}+ ::= . {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] AbstractMethodModifier", null, slot798, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot265 = new NonterminalGrammarSlot(265, "DecimalFloatingPointLiteral ::= Digits [.] . Digits? ExponentPart? FloatTypeSuffix?", slot264, slot113, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1000 = new NonterminalGrammarSlot(1000, "EnumBody ::= \"{\" . layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"", slot999, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot610 = new LastTokenSlot(610, "Keyword ::= . \"throws\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"throws\"", new HashSet<>(), null), 55, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot794 = new LastGrammarSlot(794, "\"static\"? ::= \"static\" .", slot793, slot792, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1949 = new TokenGrammarSlot(1949, "StatementWithoutTrailingSubstatement ::= . \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null)), "\"return\"", new HashSet<>(), null), 67, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot705 = new LastGrammarSlot(705, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf .", slot704, slot675, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2731 = new NonterminalGrammarSlot(2731, "{CatchClause layout[\"Layout\"]}+ ::= . CatchClause", null, slot2113, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot449 = new NonterminalGrammarSlot(449, "ReferenceType ::= . ArrayType", null, slot448, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2042 = new LastTokenSlot(2042, "FieldModifier ::= . \"transient\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"transient\"", new HashSet<>(), null), 54, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2284 = new TokenGrammarSlot(2284, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] ClassBody?", slot2283, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2308 = new NonterminalGrammarSlot(2308, "InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" . layout[\"Layout\"] ExclusiveOrExpression", slot2307, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot690 = new NonterminalGrammarSlot(690, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot688, slot689, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2157 = new NonterminalGrammarSlot(2157, "LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" . layout[\"Layout\"] VariableDeclaratorId", slot2156, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot900 = new NonterminalGrammarSlot(900, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] Expression", slot899, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2201 = new NonterminalGrammarSlot(2201, "ElementValue ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2116 = new TokenGrammarSlot(2116, "CatchClause ::= \"catch\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2115, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1437 = new NonterminalGrammarSlot(1437, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] . (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", slot1436, slot1114, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1883 = new NonterminalGrammarSlot(1883, "TypeArgument ::= . Type", null, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot974 = new LastGrammarSlot(974, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .", slot973, slot767, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot11 = new TokenGrammarSlot(11, "FieldAccess ::= \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier", slot10, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2178 = new TokenGrammarSlot(2178, "TypeArgumentsOrDiamond ::= . \"<\" layout[\"Layout\"] \">\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null)), "\"<\"", new HashSet<>(), null), 15, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1846 = new LastTokenSlot(1846, "PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] . \"class\"", slot1845, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"class\"", new HashSet<>(), null), 70, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot169 = new TokenGrammarSlot(169, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot168, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1111 = new LastGrammarSlot(1111, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression .", slot1110, slot471, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1799 = new NonterminalGrammarSlot(1799, "UnaryExpression ::= . UnaryExpressionNotPlusMinus", null, slot1488, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot651 = new LastGrammarSlot(651, "Keyword ::= \"class\" .", slot650, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2571 = new NonterminalGrammarSlot(2571, "ClassMemberDeclaration ::= . InterfaceDeclaration", null, slot1063, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2617 = new NonterminalGrammarSlot(2617, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] EnumConstant", slot2616, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2478 = new NonterminalGrammarSlot(2478, "ArrayType ::= Type . layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"", slot2477, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot719 = new NonterminalGrammarSlot(719, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot718, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot333 = new LastGrammarSlot(333, "{ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstantModifier .", slot332, slot326, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2072 = new NonterminalGrammarSlot(2072, "{Annotation layout[\"Layout\"]}+ ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1753 = new LastGrammarSlot(1753, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType .", slot1752, slot1747, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1871 = new NonterminalGrammarSlot(1871, "PackageDeclaration ::= {Annotation}* . layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"", slot1870, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot566 = new LastTokenSlot(566, "Keyword ::= . \"catch\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null)), "\"catch\"", new HashSet<>(), null), 37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1644 = new LastGrammarSlot(1644, "{SwitchLabel}* ::= {SwitchLabel layout[\"Layout\"]}+ .", slot1643, slot1642, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2117 = new NonterminalGrammarSlot(2117, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2116, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1435 = new NonterminalGrammarSlot(1435, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", slot1433, slot1434, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1723 = new NonterminalGrammarSlot(1723, "{SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= . {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] SwitchBlockStatementGroup", null, slot1722, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1530 = new LastGrammarSlot(1530, "SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+ .", slot1529, slot1526, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2285 = new NonterminalGrammarSlot(2285, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] ClassBody?", slot2284, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2030 = new TokenGrammarSlot(2030, "CharacterLiteral ::= . [\\'] EscapeSequence [\\']", null, new CharacterClass(new RegexAlt(list(Range.in(39, 39)), "", new HashSet<Condition>(), null), "[\\']", new HashSet<Condition>(), null), 94, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot178 = new NonterminalGrammarSlot(178, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot177, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1164 = new LastGrammarSlot(1164, "Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .", slot1163, slot1016, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1209 = new NonterminalGrammarSlot(1209, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1208, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1807 = new LastGrammarSlot(1807, "Identifier? ::= Identifier .", slot1806, slot1805, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2437 = new TokenGrammarSlot(2437, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] . \"|\" layout[\"Layout\"] QualifiedIdentifier", slot2436, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(124, 124)), "", new HashSet<Condition>(), null), "[|]", new HashSet<Condition>(), null)), "\"|\"", new HashSet<>(), null), 133, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot10 = new NonterminalGrammarSlot(10, "FieldAccess ::= \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot8, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1359 = new NonterminalGrammarSlot(1359, "EqualityExpression ::= EqualityExpression . layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression", slot1358, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2665 = new TokenGrammarSlot(2665, "(\".\" layout[\"Layout\"] \"*\") ::= . \".\" layout[\"Layout\"] \"*\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2640 = new LastGrammarSlot(2640, "ClassBodyDeclaration ::= ConstructorDeclaration .", slot2639, slot1779, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot521 = new NonterminalGrammarSlot(521, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}*", slot519, slot520, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1612 = new TokenGrammarSlot(1612, "ExplicitGenericInvocationSuffix ::= . \"super\" layout[\"Layout\"] SuperSuffix", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot270 = new NonterminalGrammarSlot(270, "DecimalFloatingPointLiteral ::= Digits . ExponentPart FloatTypeSuffix", slot269, slot118, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2307 = new TokenGrammarSlot(2307, "InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] . \"|\" layout[\"Layout\"] ExclusiveOrExpression", slot2306, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(124, 124)), "", new HashSet<Condition>(), null), "[|]", new HashSet<Condition>(), null)), "\"|\"", new HashSet<>(), null), 133, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1086 = new LastGrammarSlot(1086, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .", slot1085, slot1071, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot149 = new NonterminalGrammarSlot(149, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot148, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot360 = new NonterminalGrammarSlot(360, "HexDigits ::= . HexDigit", null, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot232 = new NonterminalGrammarSlot(232, "Annotation ::= \"@\" layout[\"Layout\"] . TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?", slot231, slot140, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1655 = new NonterminalGrammarSlot(1655, "EndOfLineComment ::= \"//\" . InputCharacter*", slot1654, slot1364, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2552 = new LastGrammarSlot(2552, "HexSignificand ::= HexNumeral [.] .", slot2551, slot670, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1682 = new NonterminalGrammarSlot(1682, "OctalEscape ::= [\\\\] ZeroToThree OctalDigit . OctalDigit", slot1681, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2233 = new NonterminalGrammarSlot(2233, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] . ShiftExpression", slot2232, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot812 = new LastGrammarSlot(812, "ConstructorModifier ::= Annotation .", slot811, slot806, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2094 = new NonterminalGrammarSlot(2094, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" . layout[\"Layout\"] UnaryExpression", slot2093, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1095 = new NonterminalGrammarSlot(1095, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1094, slot694, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot586 = new LastTokenSlot(586, "Keyword ::= . \"protected\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), 46, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2686 = new LastGrammarSlot(2686, "ClassModifier ::= \"strictfp\" .", slot2685, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1198 = new LastTokenSlot(1198, "AnnotationTypeElementDeclaration ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1893 = new LastGrammarSlot(1893, "DecimalNumeral ::= NonZeroDigit [_]+ Digits .", slot1892, slot743, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot543 = new NonterminalGrammarSlot(543, "Resource ::= . {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression", null, slot542, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1096 = new NonterminalGrammarSlot(1096, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1095, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2255 = new NonterminalGrammarSlot(2255, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier . layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2254, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot766 = new LastGrammarSlot(766, "PreDecrementExpression ::= \"--\" layout[\"Layout\"] UnaryExpression .", slot765, slot761, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1160 = new NonterminalGrammarSlot(1160, "Arguments ::= \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot1159, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1578 = new LastGrammarSlot(1578, "Literal ::= BooleanLiteral .", slot1577, slot1565, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot551 = new NonterminalGrammarSlot(551, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" . layout[\"Layout\"] Expression", slot550, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2724 = new LastGrammarSlot(2724, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType .", slot2723, slot918, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot468 = new LastTokenSlot(468, "PostIncrementExpression ::= PostfixExpression layout[\"Layout\"] . \"++\"", slot467, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null)), "\"++\"", new HashSet<>(), null), 25, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot485 = new LastGrammarSlot(485, "PrimitiveType ::= \"long\" .", slot484, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot788 = new LastGrammarSlot(788, "HexDigit ::= [0-9a-fA-F] .", slot787, slot354, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot580 = new LastTokenSlot(580, "Keyword ::= . \"package\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(107, 107)), "", new HashSet<Condition>(), null), "[k]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"package\"", new HashSet<>(), null), 44, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot904 = new LastGrammarSlot(904, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Expression .", slot903, slot898, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1728 = new LastGrammarSlot(1728, "{SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= SwitchBlockStatementGroup .", slot1727, slot1722, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2407 = new NonterminalGrammarSlot(2407, "ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot2406, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot960 = new NonterminalGrammarSlot(960, "ExplicitConstructorInvocation ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot959, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1352 = new NonterminalGrammarSlot(1352, "EqualityExpression ::= . EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression", null, slot1348, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1113 = new LastGrammarSlot(1113, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= StatementExpression .", slot1112, slot471, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1608 = new NonterminalGrammarSlot(1608, "(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier", slot1607, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot76 = new NonterminalGrammarSlot(76, "ArrayAccess ::= . PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", null, slot75, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2281 = new NonterminalGrammarSlot(2281, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2280, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot455 = new NonterminalGrammarSlot(455, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] VariableDeclarator", slot454, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2398 = new NonterminalGrammarSlot(2398, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2397, slot675, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot512 = new LastGrammarSlot(512, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer .", slot511, slot502, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot581 = new LastGrammarSlot(581, "Keyword ::= \"package\" .", slot580, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot943 = new NonterminalGrammarSlot(943, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . EnumBody", slot941, slot942, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2682 = new LastGrammarSlot(2682, "ClassModifier ::= Annotation .", slot2681, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2023 = new NonterminalGrammarSlot(2023, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= . Identifier", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot86 = new NonterminalGrammarSlot(86, "ArrayAccess ::= . ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", null, slot85, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1586 = new NonterminalGrammarSlot(1586, "(\":\" layout[\"Layout\"] Expression)? ::= . (\":\" layout[\"Layout\"] Expression)", null, slot94, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2489 = new NonterminalGrammarSlot(2489, "Sign? ::= . Sign", null, slot2184, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1334 = new NonterminalGrammarSlot(1334, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameterList? layout[\"Layout\"] \")\"", slot1333, slot1280, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1636 = new LastTokenSlot(1636, "InterfaceMemberDeclaration ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1424 = new NonterminalGrammarSlot(1424, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] TypeArgument", slot1423, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1302 = new LastTokenSlot(1302, "EscapeSequence ::= Backslash . [\\']", slot1301, new CharacterClass(new RegexAlt(list(Range.in(39, 39)), "", new HashSet<Condition>(), null), "[\\']", new HashSet<Condition>(), null), 94, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot78 = new TokenGrammarSlot(78, "ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot77, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(91, 91)), "", new HashSet<Condition>(), null), "[[]", new HashSet<Condition>(), null)), "\"[\"", new HashSet<>(), null), 8, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1788 = new LastGrammarSlot(1788, "UnaryExpression ::= PreIncrementExpression .", slot1787, slot764, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot219 = new LastGrammarSlot(219, "IntegerLiteral ::= BinaryIntegerLiteral .", slot218, slot216, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1151 = new LastTokenSlot(1151, "IntegerTypeSuffix ::= . [l]", null, new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), 86, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot779 = new NonterminalGrammarSlot(779, "ArrayInitializer ::= \"{\" . layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", slot778, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot192 = new NonterminalGrammarSlot(192, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot191, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2599 = new NonterminalGrammarSlot(2599, "CommentTailStar ::= NotStarNotSlash . CommentTail", slot2598, slot1729, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot166 = new NonterminalGrammarSlot(166, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot165, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1602 = new LastTokenSlot(1602, "AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] . \"}\"", slot1601, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1614 = new NonterminalGrammarSlot(1614, "ExplicitGenericInvocationSuffix ::= \"super\" layout[\"Layout\"] . SuperSuffix", slot1613, slot1009, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot323 = new NonterminalGrammarSlot(323, "{ElementValuePair \",\"}* ::= . {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot322, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot251 = new NonterminalGrammarSlot(251, "DecimalFloatingPointLiteral ::= Digits . FloatTypeSuffix", slot249, slot250, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1342 = new NonterminalGrammarSlot(1342, "ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" . layout[\"Layout\"] AndExpression", slot1341, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1378 = new LastGrammarSlot(1378, "MethodModifier ::= \"synchronized\" .", slot1377, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1513 = new NonterminalGrammarSlot(1513, "BinaryNumeral ::= [0] [B] . BinaryDigits", slot1511, slot1512, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2 = new NonterminalGrammarSlot(2, "( | PrimitiveTypeReferenceType) ::= . PrimitiveType", null, slot1, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot345 = new NonterminalGrammarSlot(345, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= . {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType", null, slot344, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1269 = new LastGrammarSlot(1269, "{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\") .", slot1268, slot908, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot274 = new TokenGrammarSlot(274, "Block ::= . \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1533 = new TokenGrammarSlot(1533, "DimExpr ::= . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(91, 91)), "", new HashSet<Condition>(), null), "[[]", new HashSet<Condition>(), null)), "\"[\"", new HashSet<>(), null), 8, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1992 = new LastGrammarSlot(1992, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block .", slot1991, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1126 = new NonterminalGrammarSlot(1126, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . Type", null, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot412 = new NonterminalGrammarSlot(412, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter", slot411, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1563 = new NonterminalGrammarSlot(1563, "StatementExpression ::= . MethodInvocation", null, slot129, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1245 = new LastGrammarSlot(1245, "InterfaceModifier ::= \"abstract\" .", slot1244, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2278 = new NonterminalGrammarSlot(2278, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2277, slot2256, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1795 = new NonterminalGrammarSlot(1795, "UnaryExpression ::= \"+\" layout[\"Layout\"] . UnaryExpression", slot1794, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1637 = new LastGrammarSlot(1637, "InterfaceMemberDeclaration ::= \";\" .", slot1636, slot1631, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1920 = new NonterminalGrammarSlot(1920, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] . Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?", slot1919, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2079 = new EpsilonGrammarSlot(2079, "{MethodModifier}* ::= .", slot2076);
  slot1394 = new LastGrammarSlot(1394, "MethodModifier ::= \"static\" .", slot1393, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1275 = new LastGrammarSlot(1275, "MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\" .", slot1274, slot1236, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1351 = new LastGrammarSlot(1351, "EqualityExpression ::= RelationalExpression .", slot1350, slot1348, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1870 = new NonterminalGrammarSlot(1870, "PackageDeclaration ::= . {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"", null, slot400, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2114 = new TokenGrammarSlot(2114, "CatchClause ::= . \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null)), "\"catch\"", new HashSet<>(), null), 37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot604 = new LastTokenSlot(604, "Keyword ::= . \"this\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"this\"", new HashSet<>(), null), 53, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2339 = new LastTokenSlot(2339, "ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] . \"}\"", slot2338, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot245 = new NonterminalGrammarSlot(245, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* . layout[\"Layout\"] \")\"", slot244, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot171 = new NonterminalGrammarSlot(171, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"", slot170, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2293 = new LastGrammarSlot(2293, "LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot2292, slot2189, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot964 = new NonterminalGrammarSlot(964, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot963, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2614 = new NonterminalGrammarSlot(2614, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant", null, slot895, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2463 = new LastGrammarSlot(2463, "TypeArgumentsOrDiamond? ::= TypeArgumentsOrDiamond .", slot2462, slot2256, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1720 = new NonterminalGrammarSlot(1720, "OctalIntegerLiteral ::= OctalNumeral . IntegerTypeSuffix?", slot1719, slot745, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot36 = new NonterminalGrammarSlot(36, "DefaultValue ::= \"default\" . layout[\"Layout\"] ElementValue", slot35, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1803 = new NonterminalGrammarSlot(1803, "( | ReferenceTypeNonArrayTypePrimitiveType) ::= . PrimitiveType", null, slot1, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot177 = new TokenGrammarSlot(177, "MethodInvocation ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot176, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot357 = new NonterminalGrammarSlot(357, "HexDigits ::= HexDigit . HexDigitOrUnderscore* HexDigit", slot355, slot356, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot731 = new EpsilonGrammarSlot(731, "EnumBodyDeclarations? ::= .", slot730);
  slot2294 = new LastTokenSlot(2294, "[_]+ ::= . [_]", null, new CharacterClass(new RegexAlt(list(Range.in(95, 95)), "", new HashSet<Condition>(), null), "[_]", new HashSet<Condition>(), null), 5, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1582 = new NonterminalGrammarSlot(1582, "{ConstructorModifier}* ::= . {ConstructorModifier layout[\"Layout\"]}+", null, slot1581, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2392 = new TokenGrammarSlot(2392, "Statement ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2391, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1545 = new NonterminalGrammarSlot(1545, "Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator . layout[\"Layout\"] AssignmentExpression", slot1544, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1356 = new NonterminalGrammarSlot(1356, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] . RelationalExpression", slot1355, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1904 = new NonterminalGrammarSlot(1904, "CastExpression ::= \"(\" layout[\"Layout\"] . PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression", slot1903, slot1, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1859 = new NonterminalGrammarSlot(1859, "{MethodModifier layout[\"Layout\"]}+ ::= . MethodModifier", null, slot1374, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2604 = new LastGrammarSlot(2604, "ConstantModifier ::= Annotation .", slot2603, slot327, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot775 = new EpsilonGrammarSlot(775, "ExponentPart? ::= .", slot258);
  slot1993 = new TokenGrammarSlot(1993, "StatementWithoutTrailingSubstatement ::= . \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"assert\"", new HashSet<>(), null), 51, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1266 = new NonterminalGrammarSlot(1266, "{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= . {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\")", null, slot908, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2092 = new NonterminalGrammarSlot(2092, "MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression", slot2091, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1052 = new NonterminalGrammarSlot(1052, "ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" . layout[\"Layout\"] InclusiveOrExpression", slot1051, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1389 = new NonterminalGrammarSlot(1389, "MethodModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1028 = new LastGrammarSlot(1028, "BinaryDigit ::= [0-1] .", slot1027, slot922, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot947 = new NonterminalGrammarSlot(947, "ExplicitConstructorInvocation ::= . NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", null, slot164, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1811 = new LastGrammarSlot(1811, "TypeArguments? ::= TypeArguments .", slot1810, slot445, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot187 = new LastTokenSlot(187, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"", slot186, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot92 = new LastTokenSlot(92, "ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"", slot91, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(93, 93)), "", new HashSet<Condition>(), null), "[]]", new HashSet<Condition>(), null)), "\"]\"", new HashSet<>(), null), 9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1090 = new NonterminalGrammarSlot(1090, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1089, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2582 = new NonterminalGrammarSlot(2582, "LeftHandSide ::= \"(\" . layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\"", slot2581, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1777 = new NonterminalGrammarSlot(1777, "{ClassBodyDeclaration layout[\"Layout\"]}+ ::= . {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ClassBodyDeclaration", null, slot1370, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot721 = new NonterminalGrammarSlot(721, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot720, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot501 = new LastGrammarSlot(501, "DefaultValue? ::= DefaultValue .", slot500, slot498, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot633 = new LastGrammarSlot(633, "Keyword ::= \"byte\" .", slot632, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot330 = new NonterminalGrammarSlot(330, "{ConstantModifier layout[\"Layout\"]}+ ::= . {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstantModifier", null, slot326, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1143 = new NonterminalGrammarSlot(1143, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ElementValuePair", null, slot1140, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2022 = new LastGrammarSlot(2022, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .", slot2021, slot1434, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2365 = new NonterminalGrammarSlot(2365, "Statement ::= Identifier . layout[\"Layout\"] \":\" layout[\"Layout\"] Statement", slot2364, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1326 = new NonterminalGrammarSlot(1326, "{AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] . AbstractMethodModifier", slot1325, slot435, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2509 = new LastGrammarSlot(2509, "HexNumeral ::= [0] [x] HexDigits .", slot2508, slot2299, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot715 = new LastGrammarSlot(715, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf .", slot714, slot675, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1544 = new NonterminalGrammarSlot(1544, "Assignment ::= LeftHandSide layout[\"Layout\"] . AssignmentOperator layout[\"Layout\"] AssignmentExpression", slot1542, slot1543, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1843 = new NonterminalGrammarSlot(1843, "PrimaryNoNewArray ::= \"void\" . layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"", slot1842, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2081 = new TokenGrammarSlot(2081, "TypeBound ::= . \"extends\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"extends\"", new HashSet<>(), null), 72, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
}

private void initBodyGrammarSlots5() {
  slot1155 = new LastGrammarSlot(1155, "Digit ::= [0] .", slot1154, slot1153, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1301 = new NonterminalGrammarSlot(1301, "EscapeSequence ::= . Backslash [\\']", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot201 = new LastTokenSlot(201, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"", slot200, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2388 = new NonterminalGrammarSlot(2388, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement", slot2387, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2252 = new NonterminalGrammarSlot(2252, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] . TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2251, slot445, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot635 = new LastGrammarSlot(635, "Keyword ::= \"enum\" .", slot634, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2265 = new NonterminalGrammarSlot(2265, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . ClassBody?", slot2264, slot408, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot707 = new NonterminalGrammarSlot(707, "StatementNoShortIf ::= \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot706, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1978 = new NonterminalGrammarSlot(1978, "StatementWithoutTrailingSubstatement ::= \"break\" . layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"", slot1977, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1180 = new NonterminalGrammarSlot(1180, "ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression", null, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1074 = new TokenGrammarSlot(1074, "ForStatement ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1073, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot937 = new NonterminalGrammarSlot(937, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] . Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", slot936, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2205 = new NonterminalGrammarSlot(2205, "RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression", null, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot800 = new LastGrammarSlot(800, "{AbstractMethodModifier}* ::= {AbstractMethodModifier layout[\"Layout\"]}+ .", slot799, slot796, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1318 = new LastGrammarSlot(1318, "EscapeSequence ::= Backslash [n] .", slot1317, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1218 = new NonterminalGrammarSlot(1218, "PostfixExpression ::= . PostIncrementExpression", null, slot464, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot643 = new LastGrammarSlot(643, "Keyword ::= \"instanceof\" .", slot642, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1274 = new LastTokenSlot(1274, "MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] . \"]\"", slot1273, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(93, 93)), "", new HashSet<Condition>(), null), "[]]", new HashSet<Condition>(), null)), "\"]\"", new HashSet<>(), null), 9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot522 = new LastGrammarSlot(522, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* .", slot521, slot502, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2679 = new LastTokenSlot(2679, "BinaryExponentIndicator ::= . [pP]", null, new CharacterClass(new RegexAlt(list(Range.in(112, 112), Range.in(80, 80)), "", new HashSet<Condition>(), null), "[pP]", new HashSet<Condition>(), null), 138, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot880 = new LastGrammarSlot(880, "AdditiveExpression ::= MultiplicativeExpression .", slot879, slot877, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2195 = new NonterminalGrammarSlot(2195, "NotStarNotSlash ::= . LineTerminator", null, slot1784, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42), Range.in(47, 47)), "", new HashSet<Condition>(), null), "[*/]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new IntermediateNodeCreator());
  slot394 = new NonterminalGrammarSlot(394, "FormalParameterList ::= . {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] LastFormalParameter", null, slot393, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1103 = new NonterminalGrammarSlot(1103, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement", slot1102, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2168 = new LastGrammarSlot(2168, "CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}* .", slot2167, slot2063, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2647 = new NonterminalGrammarSlot(2647, "MethodHeader ::= . {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?", null, slot2076, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1997 = new NonterminalGrammarSlot(1997, "StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] . (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"", slot1996, slot1585, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2122 = new NonterminalGrammarSlot(2122, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] . Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2121, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2417 = new LastGrammarSlot(2417, "VariableDeclarators ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot2416, slot859, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2460 = new NonterminalGrammarSlot(2460, "EnumBodyDeclarations ::= \";\" layout[\"Layout\"] . {ClassBodyDeclaration}*", slot2459, slot1369, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2232 = new NonterminalGrammarSlot(2232, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" . layout[\"Layout\"] ShiftExpression", slot2231, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2051 = new LastGrammarSlot(2051, "FieldModifier ::= \"private\" .", slot2050, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2634 = new LastGrammarSlot(2634, "ClassBodyDeclaration ::= InstanceInitializer .", slot2633, slot1779, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1223 = new NonterminalGrammarSlot(1223, "PostfixExpression ::= . Primary", null, slot16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1912 = new NonterminalGrammarSlot(1912, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] . (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)", slot1911, slot1604, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2726 = new LastGrammarSlot(2726, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ExceptionType .", slot2725, slot918, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot565 = new LastGrammarSlot(565, "Keyword ::= \"int\" .", slot564, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2445 = new NonterminalGrammarSlot(2445, "BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* . BinaryDigit", slot2444, slot922, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1925 = new LastGrammarSlot(1925, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally? .", slot1924, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1600 = new NonterminalGrammarSlot(1600, "AnnotationTypeBody ::= \"{\" layout[\"Layout\"] . {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"", slot1598, slot1599, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot584 = new LastTokenSlot(584, "Keyword ::= . \"import\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"import\"", new HashSet<>(), null), 45, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot583 = new LastGrammarSlot(583, "Keyword ::= \"short\" .", slot582, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2197 = new NonterminalGrammarSlot(2197, "ElementValue ::= . ElementValueArrayInitializer", null, slot424, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot106 = new NonterminalGrammarSlot(106, "BinaryExponent ::= BinaryExponentIndicator . SignedInteger", slot104, slot105, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1548 = new LastGrammarSlot(1548, "Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression .", slot1547, slot1539, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot332 = new NonterminalGrammarSlot(332, "{ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ConstantModifier", slot331, slot327, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2109 = new NonterminalGrammarSlot(2109, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] . UnaryExpression", slot2108, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2154 = new NonterminalGrammarSlot(2154, "LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId", slot2153, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot257 = new NonterminalGrammarSlot(257, "DecimalFloatingPointLiteral ::= [.] . Digits ExponentPart? FloatTypeSuffix?", slot256, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1239 = new NonterminalGrammarSlot(1239, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] . Throws? layout[\"Layout\"] \";\"", slot1238, slot994, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1827 = new NonterminalGrammarSlot(1827, "PrimaryNoNewArray ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\"", slot1826, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot976 = new NonterminalGrammarSlot(976, "ExplicitConstructorInvocation ::= NonWildTypeArguments? . layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot975, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1189 = new LastGrammarSlot(1189, "ForInit? ::= ForInit .", slot1188, slot689, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot567 = new LastGrammarSlot(567, "Keyword ::= \"catch\" .", slot566, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1860 = new LastGrammarSlot(1860, "{MethodModifier layout[\"Layout\"]}+ ::= MethodModifier .", slot1859, slot1854, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2090 = new LastGrammarSlot(2090, "ExponentIndicator ::= [eE] .", slot2089, slot119, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2455 = new NonterminalGrammarSlot(2455, "FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"", slot2454, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1503 = new LastGrammarSlot(1503, "MethodBody ::= Block .", slot1502, slot44, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot923 = new NonterminalGrammarSlot(923, "BinaryDigitOrUnderscore ::= . BinaryDigit", null, slot922, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2631 = new LastTokenSlot(2631, "InputCharacter ::= . [\\a00]", null, new CharacterClass(new RegexAlt(list(Range.in(0, 0)), "", new HashSet<Condition>(), null), "[\\a00]", new HashSet<Condition>(), null), 136, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(10, 10), Range.in(13, 13)), "", new HashSet<Condition>(), null), "[\\n\\r]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot230 = new TokenGrammarSlot(230, "Annotation ::= . \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(64, 64)), "", new HashSet<Condition>(), null), "[@]", new HashSet<Condition>(), null)), "\"@\"", new HashSet<>(), null), 13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2628 = new EpsilonGrammarSlot(2628, "{SwitchBlockStatementGroup}* ::= .", slot1942);
  slot1300 = new LastGrammarSlot(1300, "EscapeSequence ::= Backslash [\\\"] .", slot1299, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot18 = new NonterminalGrammarSlot(18, "FieldAccess ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot17, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot871 = new NonterminalGrammarSlot(871, "IdentifierChars ::= . JavaLetter", null, slot870, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1930 = new LastTokenSlot(1930, "StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] . \";\"", slot1929, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot27 = new NonterminalGrammarSlot(27, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot26, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2275 = new NonterminalGrammarSlot(2275, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2274, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2518 = new TokenGrammarSlot(2518, "AndExpression ::= AndExpression layout[\"Layout\"] . \"&\" layout[\"Layout\"] EqualityExpression", slot2517, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(38, 38)), "", new HashSet<Condition>(), null), "[&]", new HashSet<Condition>(), null)), "\"&\"", new HashSet<>(), null), 20, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot727 = new NonterminalGrammarSlot(727, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" . layout[\"Layout\"] StatementNoShortIf", slot726, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot535 = new LastGrammarSlot(535, "(\"=\" layout[\"Layout\"] VariableInitializer)? ::= (\"=\" layout[\"Layout\"] VariableInitializer) .", slot534, slot532, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1469 = new LastGrammarSlot(1469, "TypeDeclaration ::= \";\" .", slot1468, slot1465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1850 = new NonterminalGrammarSlot(1850, "AssignmentExpression ::= . Assignment", null, slot1539, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2506 = new TokenGrammarSlot(2506, "HexNumeral ::= . [0] [x] HexDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2131 = new LastGrammarSlot(2131, "AssignmentOperator ::= \"=\" .", slot2130, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2369 = new LastGrammarSlot(2369, "Statement ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] Statement .", slot2368, slot71, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1267 = new NonterminalGrammarSlot(1267, "{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ . layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\")", slot1266, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot577 = new LastGrammarSlot(577, "Keyword ::= \"break\" .", slot576, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2487 = new NonterminalGrammarSlot(2487, "{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] . (\"[\" layout[\"Layout\"] \"]\")", slot2486, slot1674, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot944 = new LastGrammarSlot(944, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody .", slot943, slot932, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot463 = new LastGrammarSlot(463, "Identifier ::= IdentifierChars .", slot462, slot13, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(36, 36), Range.in(48, 57), Range.in(65, 90), Range.in(95, 95), Range.in(97, 122)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))), new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"class\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(107, 107)), "", new HashSet<Condition>(), null), "[k]", new HashSet<Condition>(), null)), "\"break\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"this\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"if\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"native\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null)), "\"do\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"transient\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"int\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"throws\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"abstract\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"new\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"import\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null)), "\"catch\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"try\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"extends\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"interface\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"else\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"float\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null)), "\"long\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"volatile\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"short\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null)), "\"strictfp\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"while\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"double\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"case\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"implements\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null)), "\"return\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"char\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null)), "\"switch\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(122, 122)), "", new HashSet<Condition>(), null), "[z]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"synchronized\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"void\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"for\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"byte\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null)), "\"boolean\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"true\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"instanceof\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"const\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null)), "\"goto\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"false\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"finally\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"default\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null)), "\"enum\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"null\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"continue\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"assert\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"throw\"", new HashSet<>(), null), new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(107, 107)), "", new HashSet<Condition>(), null), "[k]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"package\"", new HashSet<>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot2290 = new NonterminalGrammarSlot(2290, "LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot2289, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot962 = new NonterminalGrammarSlot(962, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot961, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1944 = new NonterminalGrammarSlot(1944, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* . layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1943, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot203 = new NonterminalGrammarSlot(203, "{ClassModifier layout[\"Layout\"]}+ ::= . {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] ClassModifier", null, slot109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2304 = new LastGrammarSlot(2304, "InclusiveOrExpression ::= ExclusiveOrExpression .", slot2303, slot1053, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot845 = new LastGrammarSlot(845, "Result ::= \"void\" .", slot844, slot843, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot636 = new LastTokenSlot(636, "Keyword ::= . \"synchronized\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(122, 122)), "", new HashSet<Condition>(), null), "[z]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"synchronized\"", new HashSet<>(), null), 63, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1759 = new NonterminalGrammarSlot(1759, "NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"", slot1758, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1006 = new NonterminalGrammarSlot(1006, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? . layout[\"Layout\"] \"}\"", slot1005, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot997 = new NonterminalGrammarSlot(997, "ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] . ConstructorBody", slot996, slot53, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot453 = new NonterminalGrammarSlot(453, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator", slot452, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot627 = new LastGrammarSlot(627, "Keyword ::= \"private\" .", slot626, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1974 = new NonterminalGrammarSlot(1974, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block . layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))", slot1973, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1908 = new NonterminalGrammarSlot(1908, "CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] . UnaryExpression", slot1907, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2458 = new TokenGrammarSlot(2458, "EnumBodyDeclarations ::= . \";\" layout[\"Layout\"] {ClassBodyDeclaration}*", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1216 = new NonterminalGrammarSlot(1216, "AnnotationTypeElementDeclaration ::= . ClassDeclaration", null, slot68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot615 = new LastGrammarSlot(615, "Keyword ::= \"long\" .", slot614, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1707 = new NonterminalGrammarSlot(1707, "FormalParameter ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId", null, slot542, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot927 = new NonterminalGrammarSlot(927, "TypeDeclSpecifier ::= . Identifier layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot19 = new TokenGrammarSlot(19, "FieldAccess ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier", slot18, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot975 = new NonterminalGrammarSlot(975, "ExplicitConstructorInvocation ::= . NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", null, slot164, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2483 = new NonterminalGrammarSlot(2483, "{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= . (\"[\" layout[\"Layout\"] \"]\")", null, slot1674, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot359 = new LastGrammarSlot(359, "HexDigits ::= HexDigit HexDigitOrUnderscore* HexDigit .", slot358, slot353, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2132 = new LastTokenSlot(2132, "AssignmentOperator ::= . \">>=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\">>=\"", new HashSet<>(), null), 118, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1072 = new TokenGrammarSlot(1072, "ForStatement ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"for\"", new HashSet<>(), null), 41, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot910 = new LastGrammarSlot(910, "{(FormalParameter layout[\"Layout\"] \",\")}* ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ .", slot909, slot393, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1653 = new LastGrammarSlot(1653, "DigitOrUnderscore ::= [_] .", slot1652, slot125, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1466 = new NonterminalGrammarSlot(1466, "TypeDeclaration ::= . InterfaceDeclaration", null, slot1063, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1781 = new LastGrammarSlot(1781, "{ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ClassBodyDeclaration .", slot1780, slot1370, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1383 = new LastTokenSlot(1383, "MethodModifier ::= . \"abstract\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"abstract\"", new HashSet<>(), null), 23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2721 = new TokenGrammarSlot(2721, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ExceptionType", slot2720, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1838 = new NonterminalGrammarSlot(1838, "PrimaryNoNewArray ::= . FieldAccess", null, slot7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2218 = new NonterminalGrammarSlot(2218, "RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType", slot2217, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot341 = new LastGrammarSlot(341, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] Resource .", slot340, slot334, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2017 = new NonterminalGrammarSlot(2017, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", null, slot1434, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2100 = new NonterminalGrammarSlot(2100, "MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression", slot2099, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2708 = new NonterminalGrammarSlot(2708, "PostDecrementExpression ::= . PostfixExpression layout[\"Layout\"] \"--\"", null, slot465, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2704 = new NonterminalGrammarSlot(2704, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . QualifiedIdentifier", slot2703, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1754 = new NonterminalGrammarSlot(1754, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ReferenceType", null, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot813 = new LastTokenSlot(813, "ConstructorModifier ::= . \"protected\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), 46, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1762 = new NonterminalGrammarSlot(1762, "{(\"[\" layout[\"Layout\"] \"]\")}* ::= . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+", null, slot508, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2029 = new LastGrammarSlot(2029, "CharacterLiteral ::= [\\'] SingleCharacter [\\'] .", slot2028, slot1566, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1329 = new NonterminalGrammarSlot(1329, "ConstructorDeclarator ::= TypeParameters? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1328, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot768 = new NonterminalGrammarSlot(768, "ExplicitConstructorInvocation? ::= . ExplicitConstructorInvocation", null, slot767, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1123 = new NonterminalGrammarSlot(1123, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] Type", slot1122, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1812 = new LastTokenSlot(1812, "NonZeroDigit ::= . [1-9]", null, new CharacterClass(new RegexAlt(list(Range.in(49, 57)), "", new HashSet<Condition>(), null), "[1-9]", new HashSet<Condition>(), null), 111, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1802 = new LastGrammarSlot(1802, "( | ReferenceTypeNonArrayTypePrimitiveType) ::= ReferenceTypeNonArrayType .", slot1801, slot505, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot369 = new LastGrammarSlot(369, "{FieldModifier layout[\"Layout\"]}+ ::= FieldModifier .", slot368, slot362, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2649 = new NonterminalGrammarSlot(2649, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?", slot2648, slot771, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot3 = new LastGrammarSlot(3, "( | PrimitiveTypeReferenceType) ::= PrimitiveType .", slot2, slot0, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot686 = new NonterminalGrammarSlot(686, "StatementNoShortIf ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot685, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2496 = new EpsilonGrammarSlot(2496, "Arguments? ::= .", slot405);
  slot2625 = new LastGrammarSlot(2625, "ClassDeclaration ::= EnumDeclaration .", slot2624, slot68, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1270 = new NonterminalGrammarSlot(1270, "MethodDeclarator ::= . MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"", null, slot1236, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2674 = new LastTokenSlot(2674, "RawInputCharacter ::= . [\\\\]", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(92, 92), Range.in(117, 117)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2491 = new EpsilonGrammarSlot(2491, "Sign? ::= .", slot2315);
  slot320 = new LastTokenSlot(320, "WhiteSpace ::= . [\\ \\t\\a0c\\r\\n\\a1a]", null, new CharacterClass(new RegexAlt(list(Range.in(32, 32), Range.in(9, 9), Range.in(12, 12), Range.in(13, 13), Range.in(10, 10), Range.in(26, 26)), "", new HashSet<Condition>(), null), "[\\ \\t\\a0c\\r\\n\\a1a]", new HashSet<Condition>(), null), 18, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2230 = new NonterminalGrammarSlot(2230, "RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression", slot2229, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot979 = new TokenGrammarSlot(979, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot978, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2662 = new EpsilonGrammarSlot(2662, "{Annotation}* ::= .", slot400);
  slot2053 = new LastGrammarSlot(2053, "FieldModifier ::= \"static\" .", slot2052, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot630 = new LastTokenSlot(630, "Keyword ::= . \"new\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"new\"", new HashSet<>(), null), 34, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1632 = new NonterminalGrammarSlot(1632, "InterfaceMemberDeclaration ::= . InterfaceDeclaration", null, slot1063, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1986 = new NonterminalGrammarSlot(1986, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot1985, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1372 = new LastGrammarSlot(1372, "{ClassBodyDeclaration}* ::= {ClassBodyDeclaration layout[\"Layout\"]}+ .", slot1371, slot1369, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2040 = new LastTokenSlot(2040, "FieldModifier ::= . \"final\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), 69, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot268 = new LastGrammarSlot(268, "DecimalFloatingPointLiteral ::= Digits [.] Digits? ExponentPart? FloatTypeSuffix? .", slot267, slot248, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot981 = new NonterminalGrammarSlot(981, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot980, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot982 = new NonterminalGrammarSlot(982, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot981, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1368 = new EpsilonGrammarSlot(1368, "InputCharacter* ::= .", slot1364);
  slot2093 = new TokenGrammarSlot(2093, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"%\" layout[\"Layout\"] UnaryExpression", slot2092, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(37, 37)), "", new HashSet<Condition>(), null), "[%]", new HashSet<Condition>(), null)), "\"%\"", new HashSet<>(), null), 115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1367 = new LastGrammarSlot(1367, "InputCharacter* ::= InputCharacter* InputCharacter .", slot1366, slot1364, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot57 = new NonterminalGrammarSlot(57, "ConstructorBody ::= \"{\" layout[\"Layout\"] . ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"", slot55, slot56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot787 = new LastTokenSlot(787, "HexDigit ::= . [0-9a-fA-F]", null, new CharacterClass(new RegexAlt(list(Range.in(48, 57), Range.in(97, 102), Range.in(65, 70)), "", new HashSet<Condition>(), null), "[0-9a-fA-F]", new HashSet<Condition>(), null), 75, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1786 = new LastGrammarSlot(1786, "LineTerminator ::= [\\r\\n] .", slot1785, slot1784, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot531 = new LastGrammarSlot(531, "OctalNumeral ::= [0] [_]+ OctalDigits .", slot530, slot523, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1098 = new NonterminalGrammarSlot(1098, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" . layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1097, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1015 = new LastGrammarSlot(1015, "SuperSuffix ::= \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? .", slot1014, slot1009, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2618 = new NonterminalGrammarSlot(2618, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . EnumConstant", slot2617, slot399, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2105 = new NonterminalGrammarSlot(2105, "MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression", null, slot878, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1756 = new TokenGrammarSlot(1756, "NonWildTypeArguments ::= . \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null)), "\"<\"", new HashSet<>(), null), 15, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2630 = new LastGrammarSlot(2630, "InputCharacter ::= UnicodeInputCharacter .", slot2629, slot309, new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(10, 10), Range.in(13, 13)), "", new HashSet<Condition>(), null), "[\\n\\r]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot887 = new NonterminalGrammarSlot(887, "AdditiveExpression ::= . AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression", null, slot877, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot478 = new NonterminalGrammarSlot(478, "OctalDigits ::= OctalDigit OctalDigitOrUnderscore* . OctalDigit", slot477, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1233 = new NonterminalGrammarSlot(1233, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1232, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1568 = new LastGrammarSlot(1568, "Literal ::= CharacterLiteral .", slot1567, slot1565, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot190 = new NonterminalGrammarSlot(190, "MethodInvocation ::= \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot189, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1057 = new LastGrammarSlot(1057, "ConditionalAndExpression ::= InclusiveOrExpression .", slot1056, slot1048, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot275 = new NonterminalGrammarSlot(275, "Block ::= \"{\" . layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"", slot274, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1955 = new LastTokenSlot(1955, "StatementWithoutTrailingSubstatement ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1221 = new NonterminalGrammarSlot(1221, "PostfixExpression ::= . PostDecrementExpression", null, slot1220, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1393 = new LastTokenSlot(1393, "MethodModifier ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1598 = new NonterminalGrammarSlot(1598, "AnnotationTypeBody ::= \"{\" . layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"", slot1597, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot24 = new NonterminalGrammarSlot(24, "FieldAccess ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", null, slot23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2681 = new NonterminalGrammarSlot(2681, "ClassModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1241 = new LastTokenSlot(1241, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] . \";\"", slot1240, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2736 = new NonterminalGrammarSlot(2736, "ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" . layout[\"Layout\"] ElementValue", slot2735, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2229 = new NonterminalGrammarSlot(2229, "RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression", null, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1033 = new NonterminalGrammarSlot(1033, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" . layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody", slot1032, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot856 = new NonterminalGrammarSlot(856, "LocalVariableDeclarationStatement ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot855, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot271 = new NonterminalGrammarSlot(271, "DecimalFloatingPointLiteral ::= Digits ExponentPart . FloatTypeSuffix", slot270, slot250, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot188 = new LastGrammarSlot(188, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .", slot187, slot129, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot546 = new NonterminalGrammarSlot(546, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType . layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression", slot545, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot559 = new NonterminalGrammarSlot(559, "UnicodeInputCharacter ::= . UnicodeEscape", null, slot558, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1380 = new LastGrammarSlot(1380, "MethodModifier ::= \"final\" .", slot1379, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot101 = new LastGrammarSlot(101, "ExpressionName ::= QualifiedIdentifier .", slot100, slot85, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot642 = new LastTokenSlot(642, "Keyword ::= . \"instanceof\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"instanceof\"", new HashSet<>(), null), 66, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1808 = new EpsilonGrammarSlot(1808, "Identifier? ::= .", slot1805);
  slot2602 = new LastGrammarSlot(2602, "ConstantModifier ::= \"final\" .", slot2601, slot327, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot137 = new NonterminalGrammarSlot(137, "MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"", slot136, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1783 = new LastGrammarSlot(1783, "{ClassBodyDeclaration layout[\"Layout\"]}+ ::= ClassBodyDeclaration .", slot1782, slot1370, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1888 = new NonterminalGrammarSlot(1888, "DecimalNumeral ::= NonZeroDigit . Digits?", slot1887, slot113, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot591 = new LastGrammarSlot(591, "Keyword ::= \"case\" .", slot590, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot438 = new NonterminalGrammarSlot(438, "AbstractMethodModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2261 = new NonterminalGrammarSlot(2261, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2260, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1800 = new LastGrammarSlot(1800, "UnaryExpression ::= UnaryExpressionNotPlusMinus .", slot1799, slot764, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1918 = new NonterminalGrammarSlot(1918, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] . ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?", slot1917, slot370, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2720 = new NonterminalGrammarSlot(2720, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType", slot2719, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1174 = new TokenGrammarSlot(1174, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \">>\" layout[\"Layout\"] AdditiveExpression", slot1173, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">>\"", new HashSet<>(), null), 88, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots6() {
  slot379 = new LastTokenSlot(379, "ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] . \")\"", slot378, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2635 = new NonterminalGrammarSlot(2635, "ClassBodyDeclaration ::= . StaticInitializer", null, slot1395, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot570 = new LastTokenSlot(570, "Keyword ::= . \"strictfp\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null)), "\"strictfp\"", new HashSet<>(), null), 39, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2015 = new LastTokenSlot(2015, "HexDigitOrUnderscore ::= . [_]", null, new CharacterClass(new RegexAlt(list(Range.in(95, 95)), "", new HashSet<Condition>(), null), "[_]", new HashSet<Condition>(), null), 5, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2519 = new NonterminalGrammarSlot(2519, "AndExpression ::= AndExpression layout[\"Layout\"] \"&\" . layout[\"Layout\"] EqualityExpression", slot2518, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot228 = new LastGrammarSlot(228, "IntegerLiteral ::= OctalIntegerLiteral .", slot227, slot216, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot777 = new LastGrammarSlot(777, "ExponentPart? ::= ExponentPart .", slot776, slot258, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot735 = new EpsilonGrammarSlot(735, "ArgumentList? ::= .", slot135);
  slot1676 = new NonterminalGrammarSlot(1676, "(\"[\" layout[\"Layout\"] \"]\") ::= \"[\" . layout[\"Layout\"] \"]\"", slot1675, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1323 = new LastGrammarSlot(1323, "{AbstractMethodModifier layout[\"Layout\"]}+ ::= AbstractMethodModifier .", slot1322, slot798, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot950 = new NonterminalGrammarSlot(950, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot949, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1392 = new LastGrammarSlot(1392, "MethodModifier ::= \"public\" .", slot1391, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1938 = new TokenGrammarSlot(1938, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1937, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2651 = new NonterminalGrammarSlot(2651, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?", slot2650, slot843, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot571 = new LastGrammarSlot(571, "Keyword ::= \"strictfp\" .", slot570, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2064 = new NonterminalGrammarSlot(2064, "start[CompilationUnit] ::= layout[\"Layout\"] . CompilationUnit layout[\"Layout\"]", slot2062, slot2063, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2543 = new NonterminalGrammarSlot(2543, "TypeParameter ::= TypeVariable . layout[\"Layout\"] TypeBound?", slot2542, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1408 = new NonterminalGrammarSlot(1408, "InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* . layout[\"Layout\"] \"}\"", slot1407, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1877 = new LastGrammarSlot(1877, "PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\" .", slot1876, slot1869, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1420 = new LastGrammarSlot(1420, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= TypeArgument .", slot1419, slot1022, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot763 = new NonterminalGrammarSlot(763, "PreDecrementExpression ::= \"--\" . layout[\"Layout\"] UnaryExpression", slot762, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1680 = new NonterminalGrammarSlot(1680, "OctalEscape ::= [\\\\] . ZeroToThree OctalDigit OctalDigit", slot1679, slot1041, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2562 = new TokenGrammarSlot(2562, "HexSignificand ::= [0] [x] HexDigits? . [.] HexDigits", slot2561, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), 14, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1453 = new LastGrammarSlot(1453, "Type ::= PrimitiveType .", slot1452, slot751, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2653 = new NonterminalGrammarSlot(2653, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] . MethodDeclarator layout[\"Layout\"] Throws?", slot2652, slot1236, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot595 = new LastGrammarSlot(595, "Keyword ::= \"switch\" .", slot594, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot655 = new LastGrammarSlot(655, "Keyword ::= \"extends\" .", slot654, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1350 = new NonterminalGrammarSlot(1350, "EqualityExpression ::= . RelationalExpression", null, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2125 = new NonterminalGrammarSlot(2125, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" . layout[\"Layout\"] Block", slot2124, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot422 = new LastGrammarSlot(422, "ClassBody? ::= ClassBody .", slot421, slot408, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2039 = new EpsilonGrammarSlot(2039, "layout[\"$default$\"] ::= .", slot2038);
  slot231 = new NonterminalGrammarSlot(231, "Annotation ::= \"@\" . layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?", slot230, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1881 = new NonterminalGrammarSlot(1881, "TypeArgument ::= \"?\" layout[\"Layout\"] . (( | \"extends\"\"super\") layout[\"Layout\"] Type)?", slot1879, slot1880, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2646 = new LastGrammarSlot(2646, "SingleCharacter ::= InputCharacter .", slot2645, slot2026, new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(39, 39), Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\'\\\\]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot253 = new NonterminalGrammarSlot(253, "DecimalFloatingPointLiteral ::= . Digits ExponentPart", null, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2495 = new LastGrammarSlot(2495, "( | PrimaryQualifiedIdentifier) ::= QualifiedIdentifier .", slot2494, slot2267, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot496 = new LastTokenSlot(496, "PrimitiveType ::= . \"byte\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"byte\"", new HashSet<>(), null), 33, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot398 = new LastGrammarSlot(398, "FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] LastFormalParameter .", slot397, slot392, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1081 = new NonterminalGrammarSlot(1081, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1080, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot714 = new NonterminalGrammarSlot(714, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf", slot713, slot675, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot264 = new TokenGrammarSlot(264, "DecimalFloatingPointLiteral ::= Digits . [.] Digits? ExponentPart? FloatTypeSuffix?", slot263, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), 14, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot1564 = new LastGrammarSlot(1564, "StatementExpression ::= MethodInvocation .", slot1563, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1824 = new NonterminalGrammarSlot(1824, "PrimaryNoNewArray ::= . ClassInstanceCreationExpression", null, slot1555, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2588 = new LastGrammarSlot(2588, "LeftHandSide ::= FieldAccess .", slot2587, slot1540, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1124 = new NonterminalGrammarSlot(1124, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . Type", slot1123, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1212 = new NonterminalGrammarSlot(1212, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] . DefaultValue? layout[\"Layout\"] \";\"", slot1211, slot498, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot457 = new NonterminalGrammarSlot(457, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . VariableDeclarator", slot455, slot456, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot639 = new LastGrammarSlot(639, "Keyword ::= \"if\" .", slot638, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2551 = new LastTokenSlot(2551, "HexSignificand ::= HexNumeral . [.]", slot2550, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), 14, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot277 = new NonterminalGrammarSlot(277, "Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* . layout[\"Layout\"] \"}\"", slot276, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1919 = new NonterminalGrammarSlot(1919, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification . layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?", slot1918, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1914 = new NonterminalGrammarSlot(1914, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= . (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)", null, slot1604, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot999 = new TokenGrammarSlot(999, "EnumBody ::= . \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1468 = new LastTokenSlot(1468, "TypeDeclaration ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot413 = new TokenGrammarSlot(413, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] TypeParameter", slot412, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2110 = new LastGrammarSlot(2110, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression .", slot2109, slot878, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot703 = new NonterminalGrammarSlot(703, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf", slot702, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1924 = new NonterminalGrammarSlot(1924, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] . Finally?", slot1923, slot801, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1335 = new NonterminalGrammarSlot(1335, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? . layout[\"Layout\"] \")\"", slot1334, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2402 = new NonterminalGrammarSlot(2402, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] . Statement", slot2401, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2514 = new NonterminalGrammarSlot(2514, "AndExpression ::= . EqualityExpression", null, slot1348, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot948 = new NonterminalGrammarSlot(948, "ExplicitConstructorInvocation ::= NonWildTypeArguments? . layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot947, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1331 = new NonterminalGrammarSlot(1331, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1330, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot995 = new NonterminalGrammarSlot(995, "ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] . Throws? layout[\"Layout\"] ConstructorBody", slot993, slot994, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2508 = new NonterminalGrammarSlot(2508, "HexNumeral ::= [0] [x] . HexDigits", slot2507, slot353, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1964 = new NonterminalGrammarSlot(1964, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1963, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2687 = new LastTokenSlot(2687, "ClassModifier ::= . \"final\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), 69, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2438 = new NonterminalGrammarSlot(2438, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" . layout[\"Layout\"] QualifiedIdentifier", slot2437, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2120 = new NonterminalGrammarSlot(2120, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] . CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2119, slot2085, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1695 = new NonterminalGrammarSlot(1695, "{TypeDeclaration layout[\"Layout\"]}+ ::= . TypeDeclaration", null, slot1465, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1709 = new NonterminalGrammarSlot(1709, "FormalParameter ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclaratorId", slot1708, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1907 = new NonterminalGrammarSlot(1907, "CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" . layout[\"Layout\"] UnaryExpression", slot1906, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1092 = new NonterminalGrammarSlot(1092, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? . layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1091, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1835 = new NonterminalGrammarSlot(1835, "PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\"", slot1834, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1874 = new NonterminalGrammarSlot(1874, "PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] . QualifiedIdentifier layout[\"Layout\"] \";\"", slot1873, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2045 = new LastGrammarSlot(2045, "FieldModifier ::= Annotation .", slot2044, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot799 = new NonterminalGrammarSlot(799, "{AbstractMethodModifier}* ::= . {AbstractMethodModifier layout[\"Layout\"]}+", null, slot798, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1191 = new NonterminalGrammarSlot(1191, "AnnotationTypeElementDeclaration ::= . AnnotationTypeDeclaration", null, slot1029, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1515 = new TokenGrammarSlot(1515, "BinaryNumeral ::= . [0] [b] BinaryDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot600 = new LastTokenSlot(600, "Keyword ::= . \"super\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1375 = new LastTokenSlot(1375, "MethodModifier ::= . \"private\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), 60, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot214 = new LastGrammarSlot(214, "( | WhiteSpaceComment)* ::= ( | WhiteSpaceComment)* ( | WhiteSpaceComment) .", slot213, slot210, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1980 = new NonterminalGrammarSlot(1980, "StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? . layout[\"Layout\"] \";\"", slot1979, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot968 = new NonterminalGrammarSlot(968, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot967, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1436 = new NonterminalGrammarSlot(1436, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ . layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", slot1435, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2166 = new NonterminalGrammarSlot(2166, "CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* . layout[\"Layout\"] {TypeDeclaration}*", slot2165, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1873 = new NonterminalGrammarSlot(1873, "PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" . layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"", slot1872, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1776 = new LastGrammarSlot(1776, "Backslash ::= [\\\\] [u]+ \"005\" [cC] .", slot1775, slot1297, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1651 = new LastGrammarSlot(1651, "DigitOrUnderscore ::= Digit .", slot1650, slot125, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot808 = new LastGrammarSlot(808, "ConstructorModifier ::= \"private\" .", slot807, slot806, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot87 = new NonterminalGrammarSlot(87, "ArrayAccess ::= ExpressionName . layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot86, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot181 = new NonterminalGrammarSlot(181, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot180, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1330 = new NonterminalGrammarSlot(1330, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1329, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1250 = new LastTokenSlot(1250, "InterfaceModifier ::= . \"protected\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), 46, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1235 = new NonterminalGrammarSlot(1235, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result . layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1234, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1249 = new LastGrammarSlot(1249, "InterfaceModifier ::= \"strictfp\" .", slot1248, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1739 = new EpsilonGrammarSlot(1739, "{CatchClause}* ::= .", slot1738);
  slot2006 = new NonterminalGrammarSlot(2006, "StatementWithoutTrailingSubstatement ::= \"continue\" . layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"", slot2005, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1571 = new LastGrammarSlot(1571, "Literal ::= NullLiteral .", slot1570, slot1565, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot656 = new LastTokenSlot(656, "Keyword ::= . \"do\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null)), "\"do\"", new HashSet<>(), null), 73, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2179 = new NonterminalGrammarSlot(2179, "TypeArgumentsOrDiamond ::= \"<\" . layout[\"Layout\"] \">\"", slot2178, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot506 = new NonterminalGrammarSlot(506, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] . ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer", slot504, slot505, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot711 = new NonterminalGrammarSlot(711, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot710, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2046 = new LastTokenSlot(2046, "FieldModifier ::= . \"protected\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"protected\"", new HashSet<>(), null), 46, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1062 = new LastGrammarSlot(1062, "ReferenceTypeNonArrayType ::= TypeDeclSpecifier layout[\"Layout\"] TypeArguments? .", slot1061, slot1058, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1988 = new NonterminalGrammarSlot(1988, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot1987, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2409 = new NonterminalGrammarSlot(2409, "ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"", slot2408, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2522 = new EpsilonGrammarSlot(2522, "\",\"? ::= .", slot430);
  slot931 = new LastGrammarSlot(931, "TypeDeclSpecifier ::= Identifier layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* .", slot930, slot442, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot279 = new LastGrammarSlot(279, "Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\" .", slot278, slot273, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1264 = new NonterminalGrammarSlot(1264, "{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= . (FormalParameter layout[\"Layout\"] \",\")", null, slot1263, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2434 = new LastGrammarSlot(2434, "(\"implements\" layout[\"Layout\"] TypeList)? ::= (\"implements\" layout[\"Layout\"] TypeList) .", slot2433, slot939, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1831 = new LastGrammarSlot(1831, "PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\" .", slot1830, slot75, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1703 = new LastGrammarSlot(1703, "( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= (CatchClause* layout[\"Layout\"] Finally) .", slot1702, slot1700, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1875 = new NonterminalGrammarSlot(1875, "PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier . layout[\"Layout\"] \";\"", slot1874, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2163 = new NonterminalGrammarSlot(2163, "CompilationUnit ::= . PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*", null, slot2162, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2401 = new NonterminalGrammarSlot(2401, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" . layout[\"Layout\"] Statement", slot2400, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot489 = new LastGrammarSlot(489, "PrimitiveType ::= \"int\" .", slot488, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1130 = new LastGrammarSlot(1130, "{BlockStatement}* ::= {BlockStatement layout[\"Layout\"]}+ .", slot1129, slot59, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1520 = new LastTokenSlot(1520, "VariableModifier ::= . \"final\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), 69, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1171 = new LastGrammarSlot(1171, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression .", slot1170, slot1165, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot934 = new NonterminalGrammarSlot(934, "EnumDeclaration ::= {ClassModifier}* . layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", slot933, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot305 = new NonterminalGrammarSlot(305, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ElementValue", slot304, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1694 = new LastGrammarSlot(1694, "{TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] TypeDeclaration .", slot1693, slot1132, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1445 = new LastGrammarSlot(1445, "( | \"extends\"\"super\") ::= \"extends\" .", slot1444, slot1441, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot963 = new NonterminalGrammarSlot(963, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot962, slot164, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot624 = new LastTokenSlot(624, "Keyword ::= . \"finally\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"finally\"", new HashSet<>(), null), 59, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot158 = new TokenGrammarSlot(158, "MethodInvocation ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot157, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1562 = new LastGrammarSlot(1562, "StatementExpression ::= PreDecrementExpression .", slot1561, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot421 = new NonterminalGrammarSlot(421, "ClassBody? ::= . ClassBody", null, slot420, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot530 = new NonterminalGrammarSlot(530, "OctalNumeral ::= [0] [_]+ . OctalDigits", slot529, slot474, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot404 = new NonterminalGrammarSlot(404, "EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier . layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?", slot403, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1591 = new NonterminalGrammarSlot(1591, "(\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" layout[\"Layout\"] . VariableInitializer", slot1590, slot386, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2678 = new LastGrammarSlot(2678, "(( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= (( | \"extends\"\"super\") layout[\"Layout\"] Type) .", slot2677, slot1880, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1148 = new EpsilonGrammarSlot(1148, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= .", slot929);
  slot1018 = new LastGrammarSlot(1018, "SuperSuffix ::= Arguments .", slot1017, slot1009, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1900 = new NonterminalGrammarSlot(1900, "CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] . UnaryExpressionNotPlusMinus", slot1899, slot1488, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot321 = new LastGrammarSlot(321, "WhiteSpace ::= [\\ \\t\\a0c\\r\\n\\a1a] .", slot320, slot319, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2194 = new LastGrammarSlot(2194, "NotStarNotSlash ::= InputCharacter .", slot2193, slot2192, new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42), Range.in(47, 47)), "", new HashSet<Condition>(), null), "[*/]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1120 = new NonterminalGrammarSlot(1120, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Type", null, slot1119, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot659 = new LastGrammarSlot(659, "Keyword ::= \"abstract\" .", slot658, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot985 = new LastTokenSlot(985, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"", slot984, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2349 = new LastGrammarSlot(2349, "StringLiteral ::= [\\\"] StringCharacter* [\\\"] .", slot2348, slot1574, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1282 = new NonterminalGrammarSlot(1282, "MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? . layout[\"Layout\"] \")\"", slot1281, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2253 = new NonterminalGrammarSlot(2253, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? . layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2252, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1467 = new LastGrammarSlot(1467, "TypeDeclaration ::= InterfaceDeclaration .", slot1466, slot1465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1056 = new NonterminalGrammarSlot(1056, "ConditionalAndExpression ::= . InclusiveOrExpression", null, slot1053, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2276 = new NonterminalGrammarSlot(2276, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2275, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot479 = new LastGrammarSlot(479, "OctalDigits ::= OctalDigit OctalDigitOrUnderscore* OctalDigit .", slot478, slot474, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1246 = new LastTokenSlot(1246, "InterfaceModifier ::= . \"private\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), 60, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1201 = new NonterminalGrammarSlot(1201, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1200, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2439 = new NonterminalGrammarSlot(2439, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] . QualifiedIdentifier", slot2438, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2150 = new LastTokenSlot(2150, "AssignmentOperator ::= . \"<<=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"<<=\"", new HashSet<>(), null), 127, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1590 = new NonterminalGrammarSlot(1590, "(\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" . layout[\"Layout\"] VariableInitializer", slot1589, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot211 = new NonterminalGrammarSlot(211, "( | WhiteSpaceComment)* ::= . ( | WhiteSpaceComment)* ( | WhiteSpaceComment)", null, slot210, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot124 = new NonterminalGrammarSlot(124, "DigitOrUnderscore* ::= . DigitOrUnderscore* DigitOrUnderscore", null, slot123, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot592 = new LastTokenSlot(592, "Keyword ::= . \"while\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"while\"", new HashSet<>(), null), 49, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot419 = new LastGrammarSlot(419, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= TypeParameter .", slot418, slot286, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot572 = new LastTokenSlot(572, "Keyword ::= . \"continue\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"continue\"", new HashSet<>(), null), 40, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot894 = new EpsilonGrammarSlot(894, "{EnumConstant \",\"}* ::= .", slot893);
  slot42 = new NonterminalGrammarSlot(42, "MethodDeclaration ::= . MethodHeader layout[\"Layout\"] MethodBody", null, slot41, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot89 = new NonterminalGrammarSlot(89, "ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"", slot88, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2735 = new TokenGrammarSlot(2735, "ElementValuePair ::= Identifier layout[\"Layout\"] . \"=\" layout[\"Layout\"] ElementValue", slot2734, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"=\"", new HashSet<>(), null), 36, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1991 = new NonterminalGrammarSlot(1991, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Block", slot1990, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2024 = new LastGrammarSlot(2024, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= Identifier .", slot2023, slot1434, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2457 = new LastGrammarSlot(2457, "FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .", slot2456, slot2449, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1858 = new LastGrammarSlot(1858, "{MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] MethodModifier .", slot1857, slot1854, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1589 = new TokenGrammarSlot(1589, "(\"=\" layout[\"Layout\"] VariableInitializer) ::= . \"=\" layout[\"Layout\"] VariableInitializer", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"=\"", new HashSet<>(), null), 36, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2254 = new NonterminalGrammarSlot(2254, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] . TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2253, slot442, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2191 = new LastGrammarSlot(2191, "ForInit ::= LocalVariableDeclaration .", slot2190, slot1187, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1068 = new LastGrammarSlot(1068, "InterfaceDeclaration ::= AnnotationTypeDeclaration .", slot1067, slot1063, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2431 = new LastGrammarSlot(2431, "layout[\"Layout\"] ::= ( | WhiteSpaceComment)* .", slot2430, slot9, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null)), "\"//\"", new HashSet<>(), null))), new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(9, 9), Range.in(10, 10), Range.in(13, 13), Range.in(12, 12), Range.in(32, 32)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))), new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "\"/*\"", new HashSet<>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1983 = new TokenGrammarSlot(1983, "StatementWithoutTrailingSubstatement ::= . \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(122, 122)), "", new HashSet<Condition>(), null), "[z]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"synchronized\"", new HashSet<>(), null), 63, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1188 = new NonterminalGrammarSlot(1188, "ForInit? ::= . ForInit", null, slot1187, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2550 = new NonterminalGrammarSlot(2550, "HexSignificand ::= . HexNumeral [.]", null, slot2299, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1483 = new EpsilonGrammarSlot(1483, "{ConstantModifier}* ::= .", slot1480);
  slot1848 = new NonterminalGrammarSlot(1848, "PrimaryNoNewArray ::= . Literal", null, slot1565, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1384 = new LastGrammarSlot(1384, "MethodModifier ::= \"abstract\" .", slot1383, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1412 = new NonterminalGrammarSlot(1412, "{AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= . {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] AnnotationTypeElementDeclaration", null, slot1411, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot688 = new NonterminalGrammarSlot(688, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot687, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot472 = new NonterminalGrammarSlot(472, "ForUpdate ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot471, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot364 = new NonterminalGrammarSlot(364, "{FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ . layout[\"Layout\"] FieldModifier", slot363, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1645 = new EpsilonGrammarSlot(1645, "{SwitchLabel}* ::= .", slot1642);
  slot1390 = new LastGrammarSlot(1390, "MethodModifier ::= Annotation .", slot1389, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2073 = new LastGrammarSlot(2073, "{Annotation layout[\"Layout\"]}+ ::= Annotation .", slot2072, slot2067, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1470 = new NonterminalGrammarSlot(1470, "TypeDeclaration ::= . ClassDeclaration", null, slot68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1730 = new TokenGrammarSlot(1730, "CommentTail ::= . \"*\" CommentTailStar", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "\"*\"", new HashSet<>(), null), 109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2533 = new NonterminalGrammarSlot(2533, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . VariableInitializer", slot2532, slot386, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1853 = new LastGrammarSlot(1853, "AssignmentExpression ::= ConditionalExpression .", slot1852, slot1546, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2492 = new NonterminalGrammarSlot(2492, "( | PrimaryQualifiedIdentifier) ::= . Primary", null, slot16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1144 = new LastGrammarSlot(1144, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ElementValuePair .", slot1143, slot322, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot159 = new NonterminalGrammarSlot(159, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot158, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot342 = new NonterminalGrammarSlot(342, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= . Resource", null, slot339, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2211 = new NonterminalGrammarSlot(2211, "RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression", null, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1840 = new LastTokenSlot(1840, "PrimaryNoNewArray ::= . \"this\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"this\"", new HashSet<>(), null), 53, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot191 = new TokenGrammarSlot(191, "MethodInvocation ::= \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot190, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1719 = new NonterminalGrammarSlot(1719, "OctalIntegerLiteral ::= . OctalNumeral IntegerTypeSuffix?", null, slot523, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2274 = new NonterminalGrammarSlot(2274, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] . TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2273, slot445, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2358 = new NonterminalGrammarSlot(2358, "(\"extends\" layout[\"Layout\"] TypeList)? ::= . (\"extends\" layout[\"Layout\"] TypeList)", null, slot1765, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2536 = new LastGrammarSlot(2536, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= VariableInitializer .", slot2535, slot2503, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
}

private void initBodyGrammarSlots7() {
  slot318 = new LastGrammarSlot(318, "QualifiedIdentifierList ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot317, slot315, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1524 = new NonterminalGrammarSlot(1524, "QualifiedIdentifier ::= . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+", null, slot1434, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2335 = new TokenGrammarSlot(2335, "ClassBody ::= . \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot249 = new NonterminalGrammarSlot(249, "DecimalFloatingPointLiteral ::= . Digits FloatTypeSuffix", null, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot134 = new NonterminalGrammarSlot(134, "MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot133, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot917 = new NonterminalGrammarSlot(917, "Throws ::= \"throws\" . layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot916, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot240 = new NonterminalGrammarSlot(240, "Annotation ::= \"@\" layout[\"Layout\"] TypeName . layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", slot239, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot387 = new NonterminalGrammarSlot(387, "VariableInitializer ::= . Expression", null, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1402 = new EpsilonGrammarSlot(1402, "Expression? ::= .", slot694);
  slot2298 = new LastGrammarSlot(2298, "[_]+ ::= [_]+ [_] .", slot2297, slot528, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1959 = new NonterminalGrammarSlot(1959, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] . Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1958, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2561 = new NonterminalGrammarSlot(2561, "HexSignificand ::= [0] [x] . HexDigits? [.] HexDigits", slot2560, slot2321, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot157 = new NonterminalGrammarSlot(157, "MethodInvocation ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot156, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1382 = new LastGrammarSlot(1382, "MethodModifier ::= \"strictfp\" .", slot1381, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1439 = new LastTokenSlot(1439, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] . \";\"", slot1438, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot513 = new TokenGrammarSlot(513, "ArrayCreationExpression ::= . \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"new\"", new HashSet<>(), null), 34, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1710 = new NonterminalGrammarSlot(1710, "FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclaratorId", slot1709, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2397 = new NonterminalGrammarSlot(2397, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2396, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot138 = new LastTokenSlot(138, "MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"", slot137, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot406 = new NonterminalGrammarSlot(406, "EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] . Arguments? layout[\"Layout\"] ClassBody?", slot404, slot405, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1857 = new NonterminalGrammarSlot(1857, "{MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] . MethodModifier", slot1856, slot1374, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot184 = new NonterminalGrammarSlot(184, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot183, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1010 = new TokenGrammarSlot(1010, "SuperSuffix ::= . \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments?", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1215 = new LastGrammarSlot(1215, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\" .", slot1214, slot1190, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot857 = new NonterminalGrammarSlot(857, "LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot856, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2408 = new NonterminalGrammarSlot(2408, "ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"", slot2407, slot859, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2615 = new NonterminalGrammarSlot(2615, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant", slot2614, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2355 = new LastGrammarSlot(2355, "{ImportDeclaration layout[\"Layout\"]}+ ::= ImportDeclaration .", slot2354, slot1259, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2644 = new LastGrammarSlot(2644, "(FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter layout[\"Layout\"] \",\" .", slot2643, slot1263, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2587 = new NonterminalGrammarSlot(2587, "LeftHandSide ::= . FieldAccess", null, slot7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2464 = new EpsilonGrammarSlot(2464, "TypeArgumentsOrDiamond? ::= .", slot2256);
  slot2534 = new LastGrammarSlot(2534, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer .", slot2533, slot2503, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2152 = new NonterminalGrammarSlot(2152, "LastFormalParameter ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId", null, slot542, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1927 = new NonterminalGrammarSlot(1927, "StatementWithoutTrailingSubstatement ::= \"throw\" . layout[\"Layout\"] Expression layout[\"Layout\"] \";\"", slot1926, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1136 = new NonterminalGrammarSlot(1136, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair", null, slot322, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1002 = new NonterminalGrammarSlot(1002, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* . layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"", slot1001, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2545 = new NonterminalGrammarSlot(2545, "TypeParameter ::= TypeVariable layout[\"Layout\"] . TypeBound?", slot2543, slot2544, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot117 = new LastGrammarSlot(117, "Digits? ::= Digits .", slot116, slot113, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2091 = new NonterminalGrammarSlot(2091, "MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression", null, slot878, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot883 = new TokenGrammarSlot(883, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] . \"-\" layout[\"Layout\"] MultiplicativeExpression", slot882, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null)), "\"-\"", new HashSet<>(), null), 78, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null)), "\"-\"", new HashSet<>(), null))))), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2698 = new LastGrammarSlot(2698, "TypeBound? ::= TypeBound .", slot2697, slot2544, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2084 = new LastGrammarSlot(2084, "TypeBound ::= \"extends\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ .", slot2083, slot2080, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1686 = new NonterminalGrammarSlot(1686, "OctalEscape ::= [\\\\] OctalDigit . OctalDigit", slot1685, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1896 = new NonterminalGrammarSlot(1896, "CastExpression ::= \"(\" layout[\"Layout\"] . ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus", slot1895, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot867 = new NonterminalGrammarSlot(867, "[u]+ ::= . [u]+ [u]", null, slot864, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1956 = new LastGrammarSlot(1956, "StatementWithoutTrailingSubstatement ::= \";\" .", slot1955, slot676, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1400 = new NonterminalGrammarSlot(1400, "Expression? ::= . Expression", null, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1910 = new NonterminalGrammarSlot(1910, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)", null, slot1145, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot657 = new LastGrammarSlot(657, "Keyword ::= \"do\" .", slot656, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1740 = new NonterminalGrammarSlot(1740, "{CatchClause}* ::= . {CatchClause layout[\"Layout\"]}+", null, slot1704, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1024 = new NonterminalGrammarSlot(1024, "TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"", slot1023, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot828 = new NonterminalGrammarSlot(828, "ConditionalExpression ::= . ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression", null, slot827, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2586 = new LastGrammarSlot(2586, "LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\" .", slot2585, slot1540, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1112 = new NonterminalGrammarSlot(1112, "{StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . StatementExpression", null, slot1109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2661 = new LastGrammarSlot(2661, "{InterfaceMemberDeclaration}* ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ .", slot2660, slot1406, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2319 = new NonterminalGrammarSlot(2319, "ClassName ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot98 = new LastGrammarSlot(98, "(\":\" layout[\"Layout\"] Expression) ::= \":\" layout[\"Layout\"] Expression .", slot97, slot94, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1281 = new NonterminalGrammarSlot(1281, "MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameterList? layout[\"Layout\"] \")\"", slot1279, slot1280, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot432 = new NonterminalGrammarSlot(432, "ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? . layout[\"Layout\"] \"}\"", slot431, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot834 = new TokenGrammarSlot(834, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] . \":\" layout[\"Layout\"] ConditionalExpression", slot833, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1327 = new LastGrammarSlot(1327, "{AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] AbstractMethodModifier .", slot1326, slot798, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot314 = new LastGrammarSlot(314, "StringCharacter ::= EscapeSequence .", slot313, slot308, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2095 = new NonterminalGrammarSlot(2095, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] . UnaryExpression", slot2094, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2488 = new LastGrammarSlot(2488, "{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\") .", slot2487, slot508, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2044 = new NonterminalGrammarSlot(2044, "FieldModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2494 = new NonterminalGrammarSlot(2494, "( | PrimaryQualifiedIdentifier) ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2329 = new LastGrammarSlot(2329, "{InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceMemberDeclaration .", slot2328, slot2325, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot980 = new NonterminalGrammarSlot(980, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot979, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1205 = new NonterminalGrammarSlot(1205, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1204, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2413 = new NonterminalGrammarSlot(2413, "Finally ::= \"finally\" . layout[\"Layout\"] Block", slot2412, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot454 = new TokenGrammarSlot(454, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] VariableDeclarator", slot453, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2714 = new NonterminalGrammarSlot(2714, "UnicodeEscape ::= [\\\\] [u]+ . HexDigit HexDigit HexDigit HexDigit", slot2713, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1727 = new NonterminalGrammarSlot(1727, "{SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= . SwitchBlockStatementGroup", null, slot1526, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2337 = new NonterminalGrammarSlot(2337, "ClassBody ::= \"{\" layout[\"Layout\"] . {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"", slot2336, slot1369, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2296 = new NonterminalGrammarSlot(2296, "[_]+ ::= . [_]+ [_]", null, slot528, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot473 = new LastGrammarSlot(473, "ForUpdate ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot472, slot470, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot599 = new LastGrammarSlot(599, "Keyword ::= \"char\" .", slot598, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot195 = new NonterminalGrammarSlot(195, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot194, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1553 = new NonterminalGrammarSlot(1553, "StatementExpression ::= . Assignment", null, slot1539, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2019 = new TokenGrammarSlot(2019, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier", slot2018, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2549 = new LastGrammarSlot(2549, "NonWildTypeArguments? ::= NonWildTypeArguments .", slot2548, slot164, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2228 = new LastGrammarSlot(2228, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression .", slot2227, slot1349, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot8 = new TokenGrammarSlot(8, "FieldAccess ::= . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2639 = new NonterminalGrammarSlot(2639, "ClassBodyDeclaration ::= . ConstructorDeclaration", null, slot987, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot347 = new TokenGrammarSlot(347, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] . \"&\" layout[\"Layout\"] ReferenceType", slot346, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(38, 38)), "", new HashSet<Condition>(), null), "[&]", new HashSet<Condition>(), null)), "\"&\"", new HashSet<>(), null), 20, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2382 = new TokenGrammarSlot(2382, "Statement ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2381, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2453 = new NonterminalGrammarSlot(2453, "FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot2452, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot22 = new LastGrammarSlot(22, "FieldAccess ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .", slot21, slot7, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot241 = new TokenGrammarSlot(241, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] . \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", slot240, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot875 = new NonterminalGrammarSlot(875, "IdentifierChars ::= IdentifierChars . JavaLetterOrDigit", slot873, slot874, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1070 = new LastGrammarSlot(1070, "JavaLetterOrDigit ::= [A-Za-z$_0-9] .", slot1069, slot874, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1999 = new LastTokenSlot(1999, "StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] . \";\"", slot1998, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot969 = new NonterminalGrammarSlot(969, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot968, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1203 = new NonterminalGrammarSlot(1203, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1202, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2499 = new NonterminalGrammarSlot(2499, "ForUpdate? ::= . ForUpdate", null, slot470, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot819 = new LastGrammarSlot(819, "Primary ::= PrimaryNoNewArray .", slot818, slot16, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2050 = new LastTokenSlot(2050, "FieldModifier ::= . \"private\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), 60, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2493 = new LastGrammarSlot(2493, "( | PrimaryQualifiedIdentifier) ::= Primary .", slot2492, slot2267, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1542 = new NonterminalGrammarSlot(1542, "Assignment ::= LeftHandSide . layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression", slot1541, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot302 = new NonterminalGrammarSlot(302, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue", null, slot299, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1431 = new NonterminalGrammarSlot(1431, "ImportDeclaration ::= \"import\" . layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", slot1430, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1060 = new NonterminalGrammarSlot(1060, "ReferenceTypeNonArrayType ::= TypeDeclSpecifier . layout[\"Layout\"] TypeArguments?", slot1059, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot557 = new LastGrammarSlot(557, "UnicodeInputCharacter ::= RawInputCharacter .", slot556, slot554, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2102 = new NonterminalGrammarSlot(2102, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" . layout[\"Layout\"] UnaryExpression", slot2101, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2734 = new NonterminalGrammarSlot(2734, "ElementValuePair ::= Identifier . layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue", slot2733, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot645 = new LastGrammarSlot(645, "Keyword ::= \"return\" .", slot644, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1713 = new TokenGrammarSlot(1713, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= . \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1748 = new NonterminalGrammarSlot(1748, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType", null, slot1747, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1355 = new NonterminalGrammarSlot(1355, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" . layout[\"Layout\"] RelationalExpression", slot1354, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1814 = new NonterminalGrammarSlot(1814, "PrimaryNoNewArray ::= . Type layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"", null, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2707 = new LastGrammarSlot(2707, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= QualifiedIdentifier .", slot2706, slot316, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2436 = new NonterminalGrammarSlot(2436, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ . layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier", slot2435, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2169 = new NonterminalGrammarSlot(2169, "ConditionalOrExpression ::= . ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression", null, slot827, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2286 = new NonterminalGrammarSlot(2286, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . ClassBody?", slot2285, slot408, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1976 = new LastGrammarSlot(1976, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) .", slot1975, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot835 = new NonterminalGrammarSlot(835, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" . layout[\"Layout\"] ConditionalExpression", slot834, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot238 = new NonterminalGrammarSlot(238, "Annotation ::= \"@\" . layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", slot237, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2001 = new NonterminalGrammarSlot(2001, "StatementWithoutTrailingSubstatement ::= . StatementExpression layout[\"Layout\"] \";\"", null, slot1109, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot628 = new LastTokenSlot(628, "Keyword ::= . \"try\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"try\"", new HashSet<>(), null), 61, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1075 = new NonterminalGrammarSlot(1075, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1074, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1973 = new NonterminalGrammarSlot(1973, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] . Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))", slot1972, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2675 = new LastGrammarSlot(2675, "RawInputCharacter ::= [\\\\] .", slot2674, slot555, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1596 = new LastGrammarSlot(1596, "Expression ::= AssignmentExpression .", slot1595, slot80, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot361 = new LastGrammarSlot(361, "HexDigits ::= HexDigit .", slot360, slot353, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2501 = new EpsilonGrammarSlot(2501, "ForUpdate? ::= .", slot699);
  slot1272 = new TokenGrammarSlot(1272, "MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] . \"[\" layout[\"Layout\"] \"]\"", slot1271, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(91, 91)), "", new HashSet<Condition>(), null), "[[]", new HashSet<Condition>(), null)), "\"[\"", new HashSet<>(), null), 8, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot723 = new NonterminalGrammarSlot(723, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot722, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1975 = new NonterminalGrammarSlot(1975, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block layout[\"Layout\"] . ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))", slot1974, slot1700, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1353 = new NonterminalGrammarSlot(1353, "EqualityExpression ::= EqualityExpression . layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression", slot1352, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2088 = new LastGrammarSlot(2088, "CatchType ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ .", slot2087, slot2085, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2563 = new NonterminalGrammarSlot(2563, "HexSignificand ::= [0] [x] HexDigits? [.] . HexDigits", slot2562, slot353, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1507 = new NonterminalGrammarSlot(1507, "BinaryIntegerLiteral ::= . BinaryNumeral IntegerTypeSuffix?", null, slot1506, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2728 = new NonterminalGrammarSlot(2728, "{CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ . layout[\"Layout\"] CatchClause", slot2727, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot236 = new LastGrammarSlot(236, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? .", slot235, slot229, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1454 = new TokenGrammarSlot(1454, "SwitchLabel ::= . \"default\" layout[\"Layout\"] \":\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"default\"", new HashSet<>(), null), 4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot488 = new LastTokenSlot(488, "PrimitiveType ::= . \"int\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"int\"", new HashSet<>(), null), 29, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot621 = new LastGrammarSlot(621, "Keyword ::= \"volatile\" .", slot620, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1251 = new LastGrammarSlot(1251, "InterfaceModifier ::= \"protected\" .", slot1250, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1521 = new LastGrammarSlot(1521, "VariableModifier ::= \"final\" .", slot1520, slot1519, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2692 = new LastGrammarSlot(2692, "ClassModifier ::= \"abstract\" .", slot2691, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1960 = new NonterminalGrammarSlot(1960, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement . layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1959, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1915 = new LastGrammarSlot(1915, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) .", slot1914, slot1145, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2139 = new LastGrammarSlot(2139, "AssignmentOperator ::= \"*=\" .", slot2138, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot631 = new LastGrammarSlot(631, "Keyword ::= \"new\" .", slot630, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1425 = new NonterminalGrammarSlot(1425, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . TypeArgument", slot1424, slot1418, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1743 = new NonterminalGrammarSlot(1743, "HexDigitOrUnderscore* ::= . HexDigitOrUnderscore* HexDigitOrUnderscore", null, slot356, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1847 = new LastGrammarSlot(1847, "PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\" .", slot1846, slot75, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1500 = new NonterminalGrammarSlot(1500, "UnaryExpressionNotPlusMinus ::= \"!\" layout[\"Layout\"] . UnaryExpression", slot1499, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2070 = new NonterminalGrammarSlot(2070, "{Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] . Annotation", slot2069, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1219 = new LastGrammarSlot(1219, "PostfixExpression ::= PostIncrementExpression .", slot1218, slot465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot588 = new LastTokenSlot(588, "Keyword ::= . \"implements\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"implements\"", new HashSet<>(), null), 47, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot143 = new TokenGrammarSlot(143, "MethodInvocation ::= TypeName layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot142, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1985 = new TokenGrammarSlot(1985, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot1984, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2246 = new NonterminalGrammarSlot(2246, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] . (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2245, slot939, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1528 = new NonterminalGrammarSlot(1528, "SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ . layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+", slot1527, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot945 = new LastTokenSlot(945, "FloatTypeSuffix ::= . [fFdD]", null, new CharacterClass(new RegexAlt(list(Range.in(102, 102), Range.in(70, 70), Range.in(100, 100), Range.in(68, 68)), "", new HashSet<Condition>(), null), "[fFdD]", new HashSet<Condition>(), null), 80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2000 = new LastGrammarSlot(2000, "StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\" .", slot1999, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2351 = new NonterminalGrammarSlot(2351, "{ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] ImportDeclaration", slot2350, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1141 = new NonterminalGrammarSlot(1141, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ElementValuePair", slot1139, slot1140, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2419 = new NonterminalGrammarSlot(2419, "VariableDeclaratorId ::= Identifier . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", slot2418, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot348 = new NonterminalGrammarSlot(348, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" . layout[\"Layout\"] ReferenceType", slot347, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot38 = new NonterminalGrammarSlot(38, "DefaultValue ::= \"default\" layout[\"Layout\"] . ElementValue", slot36, slot37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1036 = new NonterminalGrammarSlot(1036, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] . Identifier layout[\"Layout\"] AnnotationTypeBody", slot1035, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2684 = new LastGrammarSlot(2684, "ClassModifier ::= \"protected\" .", slot2683, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1133 = new NonterminalGrammarSlot(1133, "{TypeDeclaration}* ::= . {TypeDeclaration layout[\"Layout\"]}+", null, slot1132, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot933 = new NonterminalGrammarSlot(933, "EnumDeclaration ::= . {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", null, slot108, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot290 = new LastGrammarSlot(290, "TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .", slot289, slot283, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1947 = new LastTokenSlot(1947, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] . \"}\"", slot1946, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2112 = new LastGrammarSlot(2112, "TypeName ::= QualifiedIdentifier .", slot2111, slot140, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1181 = new NonterminalGrammarSlot(1181, "ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression", slot1180, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot818 = new NonterminalGrammarSlot(818, "Primary ::= . PrimaryNoNewArray", null, slot75, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot510 = new NonterminalGrammarSlot(510, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ . layout[\"Layout\"] ArrayInitializer", slot509, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2181 = new LastGrammarSlot(2181, "TypeArgumentsOrDiamond ::= \"<\" layout[\"Layout\"] \">\" .", slot2180, slot2177, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2244 = new NonterminalGrammarSlot(2244, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2243, slot822, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot952 = new NonterminalGrammarSlot(952, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot951, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot956 = new NonterminalGrammarSlot(956, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"", slot955, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1761 = new LastGrammarSlot(1761, "NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .", slot1760, slot145, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1818 = new LastTokenSlot(1818, "PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" layout[\"Layout\"] . \"class\"", slot1817, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"class\"", new HashSet<>(), null), 70, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2011 = new NonterminalGrammarSlot(2011, "StatementWithoutTrailingSubstatement ::= . Block", null, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot52 = new LastGrammarSlot(52, "OctalDigitOrUnderscore ::= [_] .", slot51, slot47, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2303 = new NonterminalGrammarSlot(2303, "InclusiveOrExpression ::= . ExclusiveOrExpression", null, slot1338, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1444 = new LastTokenSlot(1444, "( | \"extends\"\"super\") ::= . \"extends\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"extends\"", new HashSet<>(), null), 72, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot484 = new LastTokenSlot(484, "PrimitiveType ::= . \"long\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null)), "\"long\"", new HashSet<>(), null), 27, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2609 = new EpsilonGrammarSlot(2609, "PackageDeclaration? ::= .", slot2162);
  slot578 = new LastTokenSlot(578, "Keyword ::= . \"native\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"native\"", new HashSet<>(), null), 43, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2428 = new NonterminalGrammarSlot(2428, "{ConstructorModifier layout[\"Layout\"]}+ ::= . ConstructorModifier", null, slot806, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot990 = new NonterminalGrammarSlot(990, "ConstructorDeclaration ::= {ConstructorModifier}* . layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody", slot989, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1763 = new LastGrammarSlot(1763, "{(\"[\" layout[\"Layout\"] \"]\")}* ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ .", slot1762, slot520, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2366 = new TokenGrammarSlot(2366, "Statement ::= Identifier layout[\"Layout\"] . \":\" layout[\"Layout\"] Statement", slot2365, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2338 = new NonterminalGrammarSlot(2338, "ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* . layout[\"Layout\"] \"}\"", slot2337, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot346 = new NonterminalGrammarSlot(346, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ . layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType", slot345, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2548 = new NonterminalGrammarSlot(2548, "NonWildTypeArguments? ::= . NonWildTypeArguments", null, slot145, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2236 = new NonterminalGrammarSlot(2236, "NormalClassDeclaration ::= . {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", null, slot108, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1913 = new LastGrammarSlot(1913, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) .", slot1912, slot1145, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot54 = new TokenGrammarSlot(54, "ConstructorBody ::= . \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1388 = new LastGrammarSlot(1388, "MethodModifier ::= \"protected\" .", slot1387, slot1374, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2083 = new NonterminalGrammarSlot(2083, "TypeBound ::= \"extends\" layout[\"Layout\"] . {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+", slot2082, slot344, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1225 = new NonterminalGrammarSlot(1225, "PostfixExpression ::= . ExpressionName", null, slot85, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot515 = new NonterminalGrammarSlot(515, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] . ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", slot514, slot0, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2643 = new LastTokenSlot(2643, "(FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter layout[\"Layout\"] . \",\"", slot2642, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots8() {
  slot1561 = new NonterminalGrammarSlot(1561, "StatementExpression ::= . PreDecrementExpression", null, slot761, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2659 = new EpsilonGrammarSlot(2659, "{InterfaceMemberDeclaration}* ::= .", slot1406);
  slot2537 = new TokenGrammarSlot(2537, "PreIncrementExpression ::= . \"++\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null)), "\"++\"", new HashSet<>(), null), 25, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1844 = new TokenGrammarSlot(1844, "PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] . \".\" layout[\"Layout\"] \"class\"", slot1843, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2153 = new NonterminalGrammarSlot(2153, "LastFormalParameter ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId", slot2152, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1032 = new TokenGrammarSlot(1032, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] . \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody", slot1031, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(64, 64)), "", new HashSet<Condition>(), null), "[@]", new HashSet<Condition>(), null)), "\"@\"", new HashSet<>(), null), 13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot152 = new NonterminalGrammarSlot(152, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"", slot151, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1804 = new LastGrammarSlot(1804, "( | ReferenceTypeNonArrayTypePrimitiveType) ::= PrimitiveType .", slot1803, slot505, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot833 = new NonterminalGrammarSlot(833, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression . layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression", slot832, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot263 = new NonterminalGrammarSlot(263, "DecimalFloatingPointLiteral ::= . Digits [.] Digits? ExponentPart? FloatTypeSuffix?", null, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot526 = new LastGrammarSlot(526, "OctalNumeral ::= [0] OctalDigits .", slot525, slot523, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1773 = new NonterminalGrammarSlot(1773, "Backslash ::= [\\\\] . [u]+ \"005\" [cC]", slot1772, slot864, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1855 = new NonterminalGrammarSlot(1855, "{MethodModifier layout[\"Layout\"]}+ ::= . {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] MethodModifier", null, slot1854, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2331 = new LastGrammarSlot(2331, "{InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= InterfaceMemberDeclaration .", slot2330, slot2325, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot26 = new TokenGrammarSlot(26, "FieldAccess ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot25, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2217 = new NonterminalGrammarSlot(2217, "RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType", null, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2404 = new NonterminalGrammarSlot(2404, "ConstantDeclaration ::= . {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", null, slot1480, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot679 = new NonterminalGrammarSlot(679, "StatementNoShortIf ::= . Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot609 = new LastGrammarSlot(609, "Keyword ::= \"default\" .", slot608, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot919 = new NonterminalGrammarSlot(919, "Throws ::= \"throws\" layout[\"Layout\"] . {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot917, slot918, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1892 = new NonterminalGrammarSlot(1892, "DecimalNumeral ::= NonZeroDigit [_]+ . Digits", slot1891, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2469 = new NonterminalGrammarSlot(2469, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2468, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2280 = new TokenGrammarSlot(2280, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2279, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot912 = new NonterminalGrammarSlot(912, "{FieldModifier}* ::= . {FieldModifier layout[\"Layout\"]}+", null, slot362, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1737 = new LastGrammarSlot(1737, "CommentTail ::= NotStar CommentTail .", slot1736, slot1729, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1321 = new LastGrammarSlot(1321, "TypeList ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot1320, slot1319, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot503 = new TokenGrammarSlot(503, "ArrayCreationExpression ::= . \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"new\"", new HashSet<>(), null), 34, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2140 = new LastTokenSlot(2140, "AssignmentOperator ::= . \"+=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"+=\"", new HashSet<>(), null), 122, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1202 = new NonterminalGrammarSlot(1202, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1201, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot328 = new NonterminalGrammarSlot(328, "{ConstantModifier layout[\"Layout\"]}+ ::= . ConstantModifier", null, slot327, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1178 = new NonterminalGrammarSlot(1178, "ShiftExpression ::= . AdditiveExpression", null, slot877, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1284 = new LastGrammarSlot(1284, "MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\" .", slot1283, slot1236, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1262 = new EpsilonGrammarSlot(1262, "{ImportDeclaration}* ::= .", slot1258);
  slot1030 = new NonterminalGrammarSlot(1030, "AnnotationTypeDeclaration ::= . {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody", null, slot537, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot180 = new NonterminalGrammarSlot(180, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot179, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot677 = new NonterminalGrammarSlot(677, "StatementNoShortIf ::= . StatementWithoutTrailingSubstatement", null, slot676, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1159 = new TokenGrammarSlot(1159, "Arguments ::= . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2036 = new NonterminalGrammarSlot(2036, "(CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* layout[\"Layout\"] . Finally", slot2035, slot803, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2608 = new LastGrammarSlot(2608, "ConstantModifier ::= \"static\" .", slot2607, slot327, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1309 = new LastGrammarSlot(1309, "EscapeSequence ::= Backslash [f] .", slot1308, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2380 = new TokenGrammarSlot(2380, "Statement ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"if\"", new HashSet<>(), null), 64, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1078 = new NonterminalGrammarSlot(1078, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter . layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1077, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1516 = new TokenGrammarSlot(1516, "BinaryNumeral ::= [0] . [b] BinaryDigits", slot1515, new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), 97, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot2505 = new LastGrammarSlot(2505, "{VariableInitializer \",\"}* ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot2504, slot780, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot200 = new NonterminalGrammarSlot(200, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"", slot199, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot481 = new LastGrammarSlot(481, "OctalDigits ::= OctalDigit .", slot480, slot474, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1496 = new NonterminalGrammarSlot(1496, "UnaryExpressionNotPlusMinus ::= \"~\" layout[\"Layout\"] . UnaryExpression", slot1495, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1758 = new NonterminalGrammarSlot(1758, "NonWildTypeArguments ::= \"<\" layout[\"Layout\"] . {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", slot1757, slot1747, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2600 = new LastGrammarSlot(2600, "CommentTailStar ::= NotStarNotSlash CommentTail .", slot2599, slot1731, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot684 = new LastGrammarSlot(684, "StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf .", slot683, slot675, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot851 = new NonterminalGrammarSlot(851, "{BlockStatement layout[\"Layout\"]}+ ::= . {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] BlockStatement", null, slot848, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2096 = new LastGrammarSlot(2096, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression .", slot2095, slot878, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1836 = new LastTokenSlot(1836, "PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\"", slot1835, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1486 = new NonterminalGrammarSlot(1486, "( | WhiteSpaceComment) ::= . Comment", null, slot662, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1021 = new NonterminalGrammarSlot(1021, "TypeArguments ::= \"<\" . layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", slot1020, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot120 = new NonterminalGrammarSlot(120, "ExponentPart ::= . ExponentIndicator SignedInteger", null, slot119, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot814 = new LastGrammarSlot(814, "ConstructorModifier ::= \"protected\" .", slot813, slot806, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2160 = new NonterminalGrammarSlot(2160, "LastFormalParameter ::= . FormalParameter", null, slot1076, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot842 = new LastGrammarSlot(842, "ElementValues ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot841, slot840, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot482 = new LastTokenSlot(482, "PrimitiveType ::= . \"float\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"float\"", new HashSet<>(), null), 26, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1607 = new TokenGrammarSlot(1607, "(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier", slot1606, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1573 = new LastGrammarSlot(1573, "Literal ::= IntegerLiteral .", slot1572, slot1565, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1981 = new LastTokenSlot(1981, "StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] . \";\"", slot1980, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1943 = new NonterminalGrammarSlot(1943, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] . {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1941, slot1942, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot696 = new NonterminalGrammarSlot(696, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot695, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot196 = new NonterminalGrammarSlot(196, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot195, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1615 = new LastGrammarSlot(1615, "ExplicitGenericInvocationSuffix ::= \"super\" layout[\"Layout\"] SuperSuffix .", slot1614, slot1611, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2676 = new EpsilonGrammarSlot(2676, "(( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= .", slot1880);
  slot2696 = new LastGrammarSlot(2696, "ClassModifier ::= \"public\" .", slot2695, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2606 = new LastGrammarSlot(2606, "ConstantModifier ::= \"public\" .", slot2605, slot327, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2727 = new NonterminalGrammarSlot(2727, "{CatchClause layout[\"Layout\"]}+ ::= . {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] CatchClause", null, slot1704, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2664 = new LastGrammarSlot(2664, "{Annotation}* ::= {Annotation layout[\"Layout\"]}+ .", slot2663, slot400, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2395 = new NonterminalGrammarSlot(2395, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2394, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot938 = new NonterminalGrammarSlot(938, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier . layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", slot937, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1084 = new NonterminalGrammarSlot(1084, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement", slot1083, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1166 = new NonterminalGrammarSlot(1166, "ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression", null, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1094 = new NonterminalGrammarSlot(1094, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1093, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot680 = new NonterminalGrammarSlot(680, "StatementNoShortIf ::= Identifier . layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf", slot679, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1594 = new LastGrammarSlot(1594, "MethodName ::= QualifiedIdentifier .", slot1593, slot130, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1463 = new LastTokenSlot(1463, "SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] . \":\"", slot1462, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(58, 58)), "", new HashSet<Condition>(), null), "[:]", new HashSet<Condition>(), null)), "\":\"", new HashSet<>(), null), 10, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot487 = new LastGrammarSlot(487, "PrimitiveType ::= \"double\" .", slot486, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1769 = new LastGrammarSlot(1769, "(\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" layout[\"Layout\"] TypeList .", slot1768, slot1765, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot700 = new NonterminalGrammarSlot(700, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] . ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot698, slot699, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2297 = new LastTokenSlot(2297, "[_]+ ::= [_]+ . [_]", slot2296, new CharacterClass(new RegexAlt(list(Range.in(95, 95)), "", new HashSet<Condition>(), null), "[_]", new HashSet<Condition>(), null), 5, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot1972 = new NonterminalGrammarSlot(1972, "StatementWithoutTrailingSubstatement ::= \"try\" . layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))", slot1971, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1640 = new NonterminalGrammarSlot(1640, "InterfaceMemberDeclaration ::= . ClassDeclaration", null, slot68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot916 = new TokenGrammarSlot(916, "Throws ::= . \"throws\" layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"throws\"", new HashSet<>(), null), 55, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot791 = new LastGrammarSlot(791, "\";\"? ::= \";\" .", slot790, slot376, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1017 = new NonterminalGrammarSlot(1017, "SuperSuffix ::= . Arguments", null, slot1016, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1446 = new NonterminalGrammarSlot(1446, "VariableDeclarator ::= . VariableDeclaratorId layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)?", null, slot547, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1620 = new LastTokenSlot(1620, "NullLiteral ::= . \"null\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"null\"", new HashSet<>(), null), 107, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2215 = new NonterminalGrammarSlot(2215, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] . ShiftExpression", slot2214, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2672 = new LastTokenSlot(2672, "RawInputCharacter ::= [\\\\] . [\\\\]", slot2671, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot1937 = new NonterminalGrammarSlot(1937, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1936, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2272 = new TokenGrammarSlot(2272, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] . \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2271, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"new\"", new HashSet<>(), null), 34, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2250 = new TokenGrammarSlot(2250, "ClassInstanceCreationExpression ::= . \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"new\"", new HashSet<>(), null), 34, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2266 = new LastGrammarSlot(2266, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody? .", slot2265, slot1555, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2610 = new NonterminalGrammarSlot(2610, "PackageDeclaration? ::= . PackageDeclaration", null, slot1869, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1712 = new LastGrammarSlot(1712, "FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId .", slot1711, slot1076, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot855 = new NonterminalGrammarSlot(855, "LocalVariableDeclarationStatement ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", null, slot542, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1745 = new NonterminalGrammarSlot(1745, "HexDigitOrUnderscore* ::= HexDigitOrUnderscore* . HexDigitOrUnderscore", slot1743, slot1744, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1304 = new NonterminalGrammarSlot(1304, "EscapeSequence ::= . Backslash [t]", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1253 = new LastGrammarSlot(1253, "InterfaceModifier ::= Annotation .", slot1252, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2666 = new NonterminalGrammarSlot(2666, "(\".\" layout[\"Layout\"] \"*\") ::= \".\" . layout[\"Layout\"] \"*\"", slot2665, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot349 = new NonterminalGrammarSlot(349, "{ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] . ReferenceType", slot348, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot298 = new LastGrammarSlot(298, "{SwitchLabel layout[\"Layout\"]}+ ::= SwitchLabel .", slot297, slot291, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot838 = new NonterminalGrammarSlot(838, "ConditionalExpression ::= . ConditionalOrExpression", null, slot827, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1373 = new EpsilonGrammarSlot(1373, "{ClassBodyDeclaration}* ::= .", slot1369);
  slot194 = new NonterminalGrammarSlot(194, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot193, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2710 = new LastTokenSlot(2710, "PostDecrementExpression ::= PostfixExpression layout[\"Layout\"] . \"--\"", slot2709, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null)), "\"--\"", new HashSet<>(), null), 74, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1232 = new NonterminalGrammarSlot(1232, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1231, slot771, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1706 = new LastGrammarSlot(1706, "( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= {CatchClause layout[\"Layout\"]}+ .", slot1705, slot1700, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2481 = new LastTokenSlot(2481, "ArrayType ::= Type layout[\"Layout\"] \"[\" layout[\"Layout\"] . \"]\"", slot2480, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(93, 93)), "", new HashSet<Condition>(), null), "[]]", new HashSet<Condition>(), null)), "\"]\"", new HashSet<>(), null), 9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot170 = new NonterminalGrammarSlot(170, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot169, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot269 = new NonterminalGrammarSlot(269, "DecimalFloatingPointLiteral ::= . Digits ExponentPart FloatTypeSuffix", null, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1946 = new NonterminalGrammarSlot(1946, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* . layout[\"Layout\"] \"}\"", slot1945, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1935 = new NonterminalGrammarSlot(1935, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1934, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2317 = new NonterminalGrammarSlot(2317, "SignedInteger ::= Sign? . Digits", slot2316, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2497 = new NonterminalGrammarSlot(2497, "Arguments? ::= . Arguments", null, slot1016, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1554 = new LastGrammarSlot(1554, "StatementExpression ::= Assignment .", slot1553, slot1109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot759 = new NonterminalGrammarSlot(759, "{DimExpr layout[\"Layout\"]}+ ::= . DimExpr", null, slot756, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot757 = new NonterminalGrammarSlot(757, "{DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] . DimExpr", slot755, slot756, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot685 = new TokenGrammarSlot(685, "StatementNoShortIf ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"for\"", new HashSet<>(), null), 41, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2128 = new LastTokenSlot(2128, "AssignmentOperator ::= . \"&=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(38, 38)), "", new HashSet<Condition>(), null), "[&]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"&=\"", new HashSet<>(), null), 117, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot189 = new TokenGrammarSlot(189, "MethodInvocation ::= . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot116 = new NonterminalGrammarSlot(116, "Digits? ::= . Digits", null, slot115, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1034 = new TokenGrammarSlot(1034, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] . \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody", slot1033, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"interface\"", new HashSet<>(), null), 65, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1101 = new TokenGrammarSlot(1101, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement", slot1100, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1089 = new TokenGrammarSlot(1089, "ForStatement ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1088, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot293 = new NonterminalGrammarSlot(293, "{SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ . layout[\"Layout\"] SwitchLabel", slot292, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2504 = new NonterminalGrammarSlot(2504, "{VariableInitializer \",\"}* ::= . {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot2503, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1134 = new LastGrammarSlot(1134, "{TypeDeclaration}* ::= {TypeDeclaration layout[\"Layout\"]}+ .", slot1133, slot1131, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1887 = new NonterminalGrammarSlot(1887, "DecimalNumeral ::= . NonZeroDigit Digits?", null, slot1156, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2430 = new NonterminalGrammarSlot(2430, "layout[\"Layout\"] ::= . ( | WhiteSpaceComment)*", null, slot210, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1230 = new NonterminalGrammarSlot(1230, "AbstractMethodDeclaration ::= . {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", null, slot796, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot281 = new NonterminalGrammarSlot(281, "ExceptionType ::= . TypeName", null, slot140, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2605 = new LastTokenSlot(2605, "ConstantModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1970 = new LastGrammarSlot(1970, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .", slot1969, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2426 = new NonterminalGrammarSlot(2426, "{ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ConstructorModifier", slot2425, slot806, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1242 = new LastGrammarSlot(1242, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\" .", slot1241, slot1229, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1876 = new LastTokenSlot(1876, "PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] . \";\"", slot1875, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2591 = new NonterminalGrammarSlot(2591, "LeftHandSide ::= . ArrayAccess", null, slot74, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1957 = new TokenGrammarSlot(1957, "StatementWithoutTrailingSubstatement ::= . \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null)), "\"do\"", new HashSet<>(), null), 73, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot847 = new LastGrammarSlot(847, "Result ::= Type .", slot846, slot843, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2292 = new NonterminalGrammarSlot(2292, "LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot2291, slot451, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1750 = new TokenGrammarSlot(1750, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ReferenceType", slot1749, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot925 = new LastTokenSlot(925, "BinaryDigitOrUnderscore ::= . [_]", null, new CharacterClass(new RegexAlt(list(Range.in(95, 95)), "", new HashSet<Condition>(), null), "[_]", new HashSet<Condition>(), null), 5, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot564 = new LastTokenSlot(564, "Keyword ::= . \"int\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"int\"", new HashSet<>(), null), 29, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot569 = new LastGrammarSlot(569, "Keyword ::= \"throw\" .", slot568, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1649 = new EpsilonGrammarSlot(1649, "{VariableModifier}* ::= .", slot542);
  slot2474 = new NonterminalGrammarSlot(2474, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] InterfaceBody", slot2473, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot486 = new LastTokenSlot(486, "PrimitiveType ::= . \"double\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"double\"", new HashSet<>(), null), 28, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1725 = new NonterminalGrammarSlot(1725, "{SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] . SwitchBlockStatementGroup", slot1724, slot1526, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2202 = new LastGrammarSlot(2202, "ElementValue ::= Annotation .", slot2201, slot37, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2385 = new NonterminalGrammarSlot(2385, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2384, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot15 = new LastGrammarSlot(15, "FieldAccess ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .", slot14, slot7, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1721 = new LastGrammarSlot(1721, "OctalIntegerLiteral ::= OctalNumeral IntegerTypeSuffix? .", slot1720, slot226, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot544 = new NonterminalGrammarSlot(544, "Resource ::= {VariableModifier}* . layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression", slot543, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot575 = new LastGrammarSlot(575, "Keyword ::= \"for\" .", slot574, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot288 = new NonterminalGrammarSlot(288, "TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"", slot287, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot237 = new TokenGrammarSlot(237, "Annotation ::= . \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(64, 64)), "", new HashSet<Condition>(), null), "[@]", new HashSet<Condition>(), null)), "\"@\"", new HashSet<>(), null), 13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot14 = new NonterminalGrammarSlot(14, "FieldAccess ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier", slot12, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot96 = new NonterminalGrammarSlot(96, "(\":\" layout[\"Layout\"] Expression) ::= \":\" . layout[\"Layout\"] Expression", slot95, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2190 = new NonterminalGrammarSlot(2190, "ForInit ::= . LocalVariableDeclaration", null, slot2189, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1816 = new TokenGrammarSlot(1816, "PrimaryNoNewArray ::= Type layout[\"Layout\"] . \".\" layout[\"Layout\"] \"class\"", slot1815, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2568 = new NonterminalGrammarSlot(2568, "InstanceInitializer ::= . Block", null, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1360 = new TokenGrammarSlot(1360, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] . \"==\" layout[\"Layout\"] RelationalExpression", slot1359, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"==\"", new HashSet<>(), null), 102, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2425 = new NonterminalGrammarSlot(2425, "{ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ConstructorModifier", slot2424, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2326 = new NonterminalGrammarSlot(2326, "{InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= . {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceMemberDeclaration", null, slot2325, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot603 = new LastGrammarSlot(603, "Keyword ::= \"const\" .", slot602, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2249 = new LastGrammarSlot(2249, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody .", slot2248, slot2235, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1936 = new NonterminalGrammarSlot(1936, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1935, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1227 = new NonterminalGrammarSlot(1227, "ArgumentList ::= . {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot898, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot480 = new NonterminalGrammarSlot(480, "OctalDigits ::= . OctalDigit", null, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot620 = new LastTokenSlot(620, "Keyword ::= . \"volatile\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"volatile\"", new HashSet<>(), null), 57, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2467 = new TokenGrammarSlot(2467, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] . \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2466, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"interface\"", new HashSet<>(), null), 65, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2324 = new LastGrammarSlot(2324, "HexDigits? ::= HexDigits .", slot2323, slot2321, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot750 = new NonterminalGrammarSlot(750, "(\"extends\" layout[\"Layout\"] Type) ::= \"extends\" . layout[\"Layout\"] Type", slot749, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot495 = new LastGrammarSlot(495, "PrimitiveType ::= \"short\" .", slot494, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot209 = new LastGrammarSlot(209, "{ClassModifier layout[\"Layout\"]}+ ::= ClassModifier .", slot208, slot109, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot849 = new NonterminalGrammarSlot(849, "{BlockStatement layout[\"Layout\"]}+ ::= . BlockStatement", null, slot64, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot885 = new NonterminalGrammarSlot(885, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] . MultiplicativeExpression", slot884, slot878, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1826 = new NonterminalGrammarSlot(1826, "PrimaryNoNewArray ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\"", null, slot23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2564 = new LastGrammarSlot(2564, "HexSignificand ::= [0] [x] HexDigits? [.] HexDigits .", slot2563, slot670, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1471 = new LastGrammarSlot(1471, "TypeDeclaration ::= ClassDeclaration .", slot1470, slot1465, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot889 = new TokenGrammarSlot(889, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] . \"+\" layout[\"Layout\"] MultiplicativeExpression", slot888, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null)), "\"+\"", new HashSet<>(), null), 79, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null)), "\"+\"", new HashSet<>(), null))))), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2013 = new NonterminalGrammarSlot(2013, "HexDigitOrUnderscore ::= . HexDigit", null, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1011 = new NonterminalGrammarSlot(1011, "SuperSuffix ::= \".\" . layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments?", slot1010, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot395 = new NonterminalGrammarSlot(395, "FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* . layout[\"Layout\"] LastFormalParameter", slot394, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2444 = new NonterminalGrammarSlot(2444, "BinaryDigits ::= BinaryDigit . BinaryDigitOrUnderscore* BinaryDigit", slot2443, slot1861, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2427 = new LastGrammarSlot(2427, "{ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstructorModifier .", slot2426, slot1581, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot147 = new NonterminalGrammarSlot(147, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot146, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1951 = new NonterminalGrammarSlot(1951, "StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\"", slot1950, slot694, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2360 = new NonterminalGrammarSlot(2360, "Statement ::= . StatementWithoutTrailingSubstatement", null, slot676, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot458 = new LastGrammarSlot(458, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator .", slot457, slot451, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot545 = new NonterminalGrammarSlot(545, "Resource ::= {VariableModifier}* layout[\"Layout\"] . ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression", slot544, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot128 = new EpsilonGrammarSlot(128, "DigitOrUnderscore* ::= .", slot123);
  slot1438 = new NonterminalGrammarSlot(1438, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? . layout[\"Layout\"] \";\"", slot1437, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1067 = new NonterminalGrammarSlot(1067, "InterfaceDeclaration ::= . AnnotationTypeDeclaration", null, slot1029, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1238 = new NonterminalGrammarSlot(1238, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator . layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1237, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots9() {
  slot625 = new LastGrammarSlot(625, "Keyword ::= \"finally\" .", slot624, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot901 = new TokenGrammarSlot(901, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] Expression", slot900, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2668 = new LastGrammarSlot(2668, "(\".\" layout[\"Layout\"] \"*\") ::= \".\" layout[\"Layout\"] \"*\" .", slot2667, slot1116, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2391 = new NonterminalGrammarSlot(2391, "Statement ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2390, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1167 = new NonterminalGrammarSlot(1167, "ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression", slot1166, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot790 = new LastTokenSlot(790, "\";\"? ::= . \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2167 = new NonterminalGrammarSlot(2167, "CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] . {TypeDeclaration}*", slot2166, slot1131, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot805 = new LastGrammarSlot(805, "Finally? ::= Finally .", slot804, slot801, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot672 = new NonterminalGrammarSlot(672, "HexadecimalFloatingPointLiteral ::= HexSignificand . BinaryExponent FloatTypeSuffix?", slot671, slot102, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot611 = new LastGrammarSlot(611, "Keyword ::= \"throws\" .", slot610, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot977 = new TokenGrammarSlot(977, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] . \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot976, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot417 = new LastGrammarSlot(417, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter .", slot416, slot286, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2535 = new NonterminalGrammarSlot(2535, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . VariableInitializer", null, slot386, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot100 = new NonterminalGrammarSlot(100, "ExpressionName ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot820 = new NonterminalGrammarSlot(820, "Primary ::= . ArrayCreationExpression", null, slot502, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1371 = new NonterminalGrammarSlot(1371, "{ClassBodyDeclaration}* ::= . {ClassBodyDeclaration layout[\"Layout\"]}+", null, slot1370, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1426 = new LastGrammarSlot(1426, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument .", slot1425, slot1022, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot601 = new LastGrammarSlot(601, "Keyword ::= \"super\" .", slot600, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1958 = new NonterminalGrammarSlot(1958, "StatementWithoutTrailingSubstatement ::= \"do\" . layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1957, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1654 = new TokenGrammarSlot(1654, "EndOfLineComment ::= . \"//\" InputCharacter*", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null)), "\"//\"", new HashSet<>(), null), 108, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot728 = new NonterminalGrammarSlot(728, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] . StatementNoShortIf", slot727, slot675, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot996 = new NonterminalGrammarSlot(996, "ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? . layout[\"Layout\"] ConstructorBody", slot995, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1961 = new TokenGrammarSlot(1961, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1960, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"while\"", new HashSet<>(), null), 49, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1397 = new NonterminalGrammarSlot(1397, "StaticInitializer ::= \"static\" . layout[\"Layout\"] Block", slot1396, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot122 = new LastGrammarSlot(122, "ExponentPart ::= ExponentIndicator SignedInteger .", slot121, slot118, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2575 = new NonterminalGrammarSlot(2575, "ClassMemberDeclaration ::= . MethodDeclaration", null, slot40, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1634 = new NonterminalGrammarSlot(1634, "InterfaceMemberDeclaration ::= . ConstantDeclaration", null, slot1195, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1044 = new EpsilonGrammarSlot(1044, "IntegerTypeSuffix? ::= .", slot745);
  slot1305 = new LastTokenSlot(1305, "EscapeSequence ::= Backslash . [t]", slot1304, new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), 95, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot261 = new NonterminalGrammarSlot(261, "DecimalFloatingPointLiteral ::= [.] Digits ExponentPart? . FloatTypeSuffix?", slot259, slot260, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1432 = new NonterminalGrammarSlot(1432, "ImportDeclaration ::= \"import\" layout[\"Layout\"] . \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", slot1431, slot792, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot762 = new TokenGrammarSlot(762, "PreDecrementExpression ::= . \"--\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null)), "\"--\"", new HashSet<>(), null), 74, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2165 = new NonterminalGrammarSlot(2165, "CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] . {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*", slot2164, slot1258, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1679 = new TokenGrammarSlot(1679, "OctalEscape ::= . [\\\\] ZeroToThree OctalDigit OctalDigit", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2164 = new NonterminalGrammarSlot(2164, "CompilationUnit ::= PackageDeclaration? . layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*", slot2163, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot372 = new NonterminalGrammarSlot(372, "ResourceSpecification ::= \"(\" . layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"", slot371, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2387 = new NonterminalGrammarSlot(2387, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement", slot2386, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot224 = new NonterminalGrammarSlot(224, "IntegerLiteral ::= . HexIntegerLiteral", null, slot223, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new IntermediateNodeCreator());
  slot1658 = new TokenGrammarSlot(1658, "(\"implements\" layout[\"Layout\"] TypeList) ::= . \"implements\" layout[\"Layout\"] TypeList", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"implements\"", new HashSet<>(), null), 47, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2372 = new TokenGrammarSlot(2372, "Statement ::= \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2371, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot795 = new EpsilonGrammarSlot(795, "\"static\"? ::= .", slot792);
  slot193 = new NonterminalGrammarSlot(193, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot192, slot164, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2556 = new TokenGrammarSlot(2556, "HexSignificand ::= [0] [X] HexDigits? . [.] HexDigits", slot2555, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null), 14, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1417 = new LastGrammarSlot(1417, "{AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= AnnotationTypeElementDeclaration .", slot1416, slot1411, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1472 = new EpsilonGrammarSlot(1472, "FormalParameterList? ::= .", slot1280);
  slot1669 = new LastGrammarSlot(1669, "{VariableModifier layout[\"Layout\"]}+ ::= VariableModifier .", slot1668, slot1646, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2451 = new NonterminalGrammarSlot(2451, "FieldDeclaration ::= {FieldModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot2450, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1255 = new LastGrammarSlot(1255, "InterfaceModifier ::= \"public\" .", slot1254, slot1243, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1998 = new NonterminalGrammarSlot(1998, "StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? . layout[\"Layout\"] \";\"", slot1997, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1179 = new LastGrammarSlot(1179, "ShiftExpression ::= AdditiveExpression .", slot1178, slot1165, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2025 = new TokenGrammarSlot(2025, "CharacterLiteral ::= . [\\'] SingleCharacter [\\']", null, new CharacterClass(new RegexAlt(list(Range.in(39, 39)), "", new HashSet<Condition>(), null), "[\\']", new HashSet<Condition>(), null), 94, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot403 = new NonterminalGrammarSlot(403, "EnumConstant ::= {Annotation}* layout[\"Layout\"] . Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?", slot402, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2399 = new NonterminalGrammarSlot(2399, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf . layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2398, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2480 = new NonterminalGrammarSlot(2480, "ArrayType ::= Type layout[\"Layout\"] \"[\" . layout[\"Layout\"] \"]\"", slot2479, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2652 = new NonterminalGrammarSlot(2652, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result . layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?", slot2651, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2268 = new NonterminalGrammarSlot(2268, "ClassInstanceCreationExpression ::= . ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", null, slot2267, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1605 = new NonterminalGrammarSlot(1605, "(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= . TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", null, slot445, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1967 = new TokenGrammarSlot(1967, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"", slot1966, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2287 = new LastGrammarSlot(2287, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody? .", slot2286, slot1555, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2005 = new TokenGrammarSlot(2005, "StatementWithoutTrailingSubstatement ::= . \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"continue\"", new HashSet<>(), null), 40, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2021 = new NonterminalGrammarSlot(2021, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier", slot2020, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2416 = new NonterminalGrammarSlot(2416, "VariableDeclarators ::= . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot451, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot647 = new LastGrammarSlot(647, "Keyword ::= \"else\" .", slot646, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2289 = new NonterminalGrammarSlot(2289, "LocalVariableDeclaration ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot2288, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1237 = new NonterminalGrammarSlot(1237, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] . MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"", slot1235, slot1236, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot862 = new LastTokenSlot(862, "LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"", slot861, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1911 = new NonterminalGrammarSlot(1911, "{(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ . layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)", slot1910, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2003 = new LastTokenSlot(2003, "StatementWithoutTrailingSubstatement ::= StatementExpression layout[\"Layout\"] . \";\"", slot2002, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1200 = new NonterminalGrammarSlot(1200, "AnnotationTypeElementDeclaration ::= . {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", null, slot796, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1422 = new NonterminalGrammarSlot(1422, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument", slot1421, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2470 = new NonterminalGrammarSlot(2470, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2469, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot741 = new LastGrammarSlot(741, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") .", slot740, slot234, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1798 = new LastGrammarSlot(1798, "UnaryExpression ::= PreDecrementExpression .", slot1797, slot764, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2066 = new LastGrammarSlot(2066, "start[CompilationUnit] ::= layout[\"Layout\"] CompilationUnit layout[\"Layout\"] .", slot2065, slot2061, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot163 = new NonterminalGrammarSlot(163, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot162, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2525 = new EpsilonGrammarSlot(2525, "StringCharacter* ::= .", slot2346);
  slot2305 = new NonterminalGrammarSlot(2305, "InclusiveOrExpression ::= . InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression", null, slot1053, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot440 = new LastTokenSlot(440, "AbstractMethodModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot882 = new NonterminalGrammarSlot(882, "AdditiveExpression ::= AdditiveExpression . layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression", slot881, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2596 = new LastTokenSlot(2596, "CommentTailStar ::= . \"/\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null)), "\"/\"", new HashSet<>(), null), 116, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot781 = new NonterminalGrammarSlot(781, "ArrayInitializer ::= \"{\" layout[\"Layout\"] . {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", slot779, slot780, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot858 = new NonterminalGrammarSlot(858, "LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot857, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1886 = new LastGrammarSlot(1886, "DecimalNumeral ::= [0] .", slot1885, slot743, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2009 = new LastTokenSlot(2009, "StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] . \";\"", slot2008, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot966 = new NonterminalGrammarSlot(966, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot965, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2340 = new LastGrammarSlot(2340, "ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\" .", slot2339, slot420, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2020 = new NonterminalGrammarSlot(2020, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier", slot2019, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot556 = new NonterminalGrammarSlot(556, "UnicodeInputCharacter ::= . RawInputCharacter", null, slot555, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2119 = new NonterminalGrammarSlot(2119, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* . layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot2118, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot654 = new LastTokenSlot(654, "Keyword ::= . \"extends\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(120, 120)), "", new HashSet<Condition>(), null), "[x]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"extends\"", new HashSet<>(), null), 72, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1046 = new NonterminalGrammarSlot(1046, "IntegerTypeSuffix? ::= . IntegerTypeSuffix", null, slot1045, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1687 = new LastGrammarSlot(1687, "OctalEscape ::= [\\\\] OctalDigit OctalDigit .", slot1686, slot1285, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(48, 55)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new NonterminalNodeCreator());
  slot1705 = new NonterminalGrammarSlot(1705, "( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= . {CatchClause layout[\"Layout\"]}+", null, slot1704, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1789 = new TokenGrammarSlot(1789, "UnaryExpression ::= . \"-\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null)), "\"-\"", new HashSet<>(), null), 78, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(45, 45)), "", new HashSet<Condition>(), null), "[-]", new HashSet<Condition>(), null)), "\"-\"", new HashSet<>(), null))))), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1659 = new NonterminalGrammarSlot(1659, "(\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" . layout[\"Layout\"] TypeList", slot1658, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2510 = new TokenGrammarSlot(2510, "HexNumeral ::= . [0] [X] HexDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2450 = new NonterminalGrammarSlot(2450, "FieldDeclaration ::= . {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", null, slot911, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2258 = new NonterminalGrammarSlot(2258, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2257, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1511 = new TokenGrammarSlot(1511, "BinaryNumeral ::= [0] . [B] BinaryDigits", slot1510, new CharacterClass(new RegexAlt(list(Range.in(66, 66)), "", new HashSet<Condition>(), null), "[B]", new HashSet<Condition>(), null), 106, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot2420 = new NonterminalGrammarSlot(2420, "VariableDeclaratorId ::= Identifier layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}*", slot2419, slot520, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2737 = new NonterminalGrammarSlot(2737, "ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] . ElementValue", slot2736, slot37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2717 = new NonterminalGrammarSlot(2717, "UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit HexDigit . HexDigit", slot2716, slot354, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot31 = new NonterminalGrammarSlot(31, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier", slot30, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2400 = new TokenGrammarSlot(2400, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] . \"else\" layout[\"Layout\"] Statement", slot2399, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"else\"", new HashSet<>(), null), 68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot58 = new NonterminalGrammarSlot(58, "ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? . layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"", slot57, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2452 = new NonterminalGrammarSlot(2452, "FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot2451, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1656 = new LastGrammarSlot(1656, "EndOfLineComment ::= \"//\" InputCharacter* .", slot1655, slot666, new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(1, 9), Range.in(11, 12), Range.in(14, 1114111)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new NonterminalNodeCreator());
  slot1175 = new NonterminalGrammarSlot(1175, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" . layout[\"Layout\"] AdditiveExpression", slot1174, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1950 = new NonterminalGrammarSlot(1950, "StatementWithoutTrailingSubstatement ::= \"return\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\"", slot1949, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot467 = new NonterminalGrammarSlot(467, "PostIncrementExpression ::= PostfixExpression . layout[\"Layout\"] \"++\"", slot466, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1042 = new LastTokenSlot(1042, "ZeroToThree ::= . [0-3]", null, new CharacterClass(new RegexAlt(list(Range.in(48, 51)), "", new HashSet<Condition>(), null), "[0-3]", new HashSet<Condition>(), null), 82, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1609 = new NonterminalGrammarSlot(1609, "(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier", slot1608, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot935 = new TokenGrammarSlot(935, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] . \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", slot934, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null)), "\"enum\"", new HashSet<>(), null), 62, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2632 = new LastGrammarSlot(2632, "InputCharacter ::= [\\a00] .", slot2631, slot309, new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(10, 10), Range.in(13, 13)), "", new HashSet<Condition>(), null), "[\\n\\r]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1817 = new NonterminalGrammarSlot(1817, "PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" . layout[\"Layout\"] \"class\"", slot1816, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1069 = new LastTokenSlot(1069, "JavaLetterOrDigit ::= . [A-Za-z$_0-9]", null, new CharacterClass(new RegexAlt(list(Range.in(65, 90), Range.in(97, 122), Range.in(36, 36), Range.in(95, 95), Range.in(48, 57)), "", new HashSet<Condition>(), null), "[A-Za-z$_0-9]", new HashSet<Condition>(), null), 84, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1442 = new LastTokenSlot(1442, "( | \"extends\"\"super\") ::= . \"super\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"super\"", new HashSet<>(), null), 2, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot734 = new LastGrammarSlot(734, "EnumBodyDeclarations? ::= EnumBodyDeclarations .", slot733, slot730, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2663 = new NonterminalGrammarSlot(2663, "{Annotation}* ::= . {Annotation layout[\"Layout\"]}+", null, slot2067, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2136 = new LastTokenSlot(2136, "AssignmentOperator ::= . \"/=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(47, 47)), "", new HashSet<Condition>(), null), "[/]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"/=\"", new HashSet<>(), null), 120, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot295 = new NonterminalGrammarSlot(295, "{SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] . SwitchLabel", slot293, slot294, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2589 = new NonterminalGrammarSlot(2589, "LeftHandSide ::= . ExpressionName", null, slot85, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot793 = new LastTokenSlot(793, "\"static\"? ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot876 = new LastGrammarSlot(876, "IdentifierChars ::= IdentifierChars JavaLetterOrDigit .", slot875, slot461, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot598 = new LastTokenSlot(598, "Keyword ::= . \"char\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"char\"", new HashSet<>(), null), 30, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2332 = new NonterminalGrammarSlot(2332, "Throws? ::= . Throws", null, slot915, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2530 = new NonterminalGrammarSlot(2530, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer", slot2529, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1601 = new NonterminalGrammarSlot(1601, "AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* . layout[\"Layout\"] \"}\"", slot1600, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2058 = new NonterminalGrammarSlot(2058, "(( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") . layout[\"Layout\"] Type", slot2057, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1891 = new NonterminalGrammarSlot(1891, "DecimalNumeral ::= NonZeroDigit . [_]+ Digits", slot1890, slot528, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1906 = new TokenGrammarSlot(1906, "CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] . \")\" layout[\"Layout\"] UnaryExpression", slot1905, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot809 = new LastTokenSlot(809, "ConstructorModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1921 = new NonterminalGrammarSlot(1921, "StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block . layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?", slot1920, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2367 = new NonterminalGrammarSlot(2367, "Statement ::= Identifier layout[\"Layout\"] \":\" . layout[\"Layout\"] Statement", slot2366, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2466 = new NonterminalGrammarSlot(2466, "NormalInterfaceDeclaration ::= {InterfaceModifier}* . layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2465, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot722 = new TokenGrammarSlot(722, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot721, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1629 = new NonterminalGrammarSlot(1629, "Digits ::= Digit DigitOrUnderscore* . Digit", slot1628, slot1153, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1697 = new EpsilonGrammarSlot(1697, "{AnnotationTypeElementDeclaration}* ::= .", slot1599);
  slot2129 = new LastGrammarSlot(2129, "AssignmentOperator ::= \"&=\" .", slot2128, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2569 = new LastGrammarSlot(2569, "InstanceInitializer ::= Block .", slot2568, slot2567, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1673 = new LastGrammarSlot(1673, "{VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] VariableModifier .", slot1672, slot1646, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2209 = new NonterminalGrammarSlot(2209, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] . ShiftExpression", slot2208, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1149 = new LastTokenSlot(1149, "IntegerTypeSuffix ::= . [L]", null, new CharacterClass(new RegexAlt(list(Range.in(76, 76)), "", new HashSet<Condition>(), null), "[L]", new HashSet<Condition>(), null), 85, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot778 = new TokenGrammarSlot(778, "ArrayInitializer ::= . \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2405 = new NonterminalGrammarSlot(2405, "ConstantDeclaration ::= {ConstantModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"", slot2404, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot658 = new LastTokenSlot(658, "Keyword ::= . \"abstract\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"abstract\"", new HashSet<>(), null), 23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1505 = new LastGrammarSlot(1505, "MethodBody ::= \";\" .", slot1504, slot44, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot378 = new NonterminalGrammarSlot(378, "ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? . layout[\"Layout\"] \")\"", slot377, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2650 = new NonterminalGrammarSlot(2650, "MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?", slot2649, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot783 = new NonterminalGrammarSlot(783, "ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] . \",\"? layout[\"Layout\"] \"}\"", slot782, slot430, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1293 = new NonterminalGrammarSlot(1293, "EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] . [u]+ \"005\" [cC]", slot1292, slot864, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1316 = new NonterminalGrammarSlot(1316, "EscapeSequence ::= . Backslash [n]", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot218 = new NonterminalGrammarSlot(218, "IntegerLiteral ::= . BinaryIntegerLiteral", null, slot217, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2471 = new NonterminalGrammarSlot(2471, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2470, slot771, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot618 = new LastTokenSlot(618, "Keyword ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1643 = new NonterminalGrammarSlot(1643, "{SwitchLabel}* ::= . {SwitchLabel layout[\"Layout\"]}+", null, slot291, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2685 = new LastTokenSlot(2685, "ClassModifier ::= . \"strictfp\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null)), "\"strictfp\"", new HashSet<>(), null), 39, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot112 = new EpsilonGrammarSlot(112, "{ClassModifier}* ::= .", slot108);
  slot343 = new LastGrammarSlot(343, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= Resource .", slot342, slot334, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1410 = new LastGrammarSlot(1410, "InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\" .", slot1409, slot1403, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot133 = new TokenGrammarSlot(133, "MethodInvocation ::= MethodName layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot132, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot377 = new NonterminalGrammarSlot(377, "ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] . \";\"? layout[\"Layout\"] \")\"", slot375, slot376, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot493 = new LastGrammarSlot(493, "PrimitiveType ::= \"boolean\" .", slot492, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot29 = new NonterminalGrammarSlot(29, "FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot28, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2424 = new NonterminalGrammarSlot(2424, "{ConstructorModifier layout[\"Layout\"]}+ ::= . {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstructorModifier", null, slot1581, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1050 = new NonterminalGrammarSlot(1050, "ConditionalAndExpression ::= ConditionalAndExpression . layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression", slot1049, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot335 = new NonterminalGrammarSlot(335, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= . {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] Resource", null, slot334, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot525 = new NonterminalGrammarSlot(525, "OctalNumeral ::= [0] . OctalDigits", slot524, slot474, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1732 = new NonterminalGrammarSlot(1732, "CommentTail ::= \"*\" . CommentTailStar", slot1730, slot1731, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1051 = new TokenGrammarSlot(1051, "ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] . \"&&\" layout[\"Layout\"] InclusiveOrExpression", slot1050, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(38, 38)), "", new HashSet<Condition>(), null), "[&]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(38, 38)), "", new HashSet<Condition>(), null), "[&]", new HashSet<Condition>(), null)), "\"&&\"", new HashSet<>(), null), 83, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot667 = new NonterminalGrammarSlot(667, "Comment ::= . EndOfLineComment", null, slot666, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1315 = new LastGrammarSlot(1315, "EscapeSequence ::= Backslash [r] .", slot1314, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2350 = new NonterminalGrammarSlot(2350, "{ImportDeclaration layout[\"Layout\"]}+ ::= . {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ImportDeclaration", null, slot1259, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot247 = new LastGrammarSlot(247, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\" .", slot246, slot229, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1948 = new LastGrammarSlot(1948, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\" .", slot1947, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1616 = new NonterminalGrammarSlot(1616, "ExplicitGenericInvocationSuffix ::= . Identifier layout[\"Layout\"] Arguments", null, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1082 = new NonterminalGrammarSlot(1082, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1081, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2680 = new LastGrammarSlot(2680, "BinaryExponentIndicator ::= [pP] .", slot2679, slot103, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2240 = new NonterminalGrammarSlot(2240, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2239, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1810 = new NonterminalGrammarSlot(1810, "TypeArguments? ::= . TypeArguments", null, slot1019, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1905 = new NonterminalGrammarSlot(1905, "CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType . layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression", slot1904, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot450 = new LastGrammarSlot(450, "ReferenceType ::= ArrayType .", slot449, slot4, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1801 = new NonterminalGrammarSlot(1801, "( | ReferenceTypeNonArrayTypePrimitiveType) ::= . ReferenceTypeNonArrayType", null, slot1058, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1433 = new NonterminalGrammarSlot(1433, "ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? . layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"", slot1432, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1796 = new LastGrammarSlot(1796, "UnaryExpression ::= \"+\" layout[\"Layout\"] UnaryExpression .", slot1795, slot764, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1192 = new LastGrammarSlot(1192, "AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration .", slot1191, slot1190, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot744 = new NonterminalGrammarSlot(744, "DecimalIntegerLiteral ::= . DecimalNumeral IntegerTypeSuffix?", null, slot743, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2642 = new NonterminalGrammarSlot(2642, "(FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter . layout[\"Layout\"] \",\"", slot2641, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot913 = new LastGrammarSlot(913, "{FieldModifier}* ::= {FieldModifier layout[\"Layout\"]}+ .", slot912, slot911, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1668 = new NonterminalGrammarSlot(1668, "{VariableModifier layout[\"Layout\"]}+ ::= . VariableModifier", null, slot1519, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1128 = new EpsilonGrammarSlot(1128, "{BlockStatement}* ::= .", slot59);
  slot742 = new EpsilonGrammarSlot(742, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= .", slot234);
  slot2133 = new LastGrammarSlot(2133, "AssignmentOperator ::= \">>=\" .", slot2132, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2468 = new NonterminalGrammarSlot(2468, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", slot2467, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1035 = new NonterminalGrammarSlot(1035, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" . layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody", slot1034, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot144 = new NonterminalGrammarSlot(144, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot143, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1987 = new NonterminalGrammarSlot(1987, "StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot1986, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2700 = new NonterminalGrammarSlot(2700, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier", null, slot316, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2448 = new LastGrammarSlot(2448, "BinaryDigits ::= BinaryDigit .", slot2447, slot1512, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2183 = new LastGrammarSlot(2183, "TypeArgumentsOrDiamond ::= TypeArguments .", slot2182, slot2177, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
}

private void initBodyGrammarSlots10() {
  slot687 = new TokenGrammarSlot(687, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot686, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot5 = new NonterminalGrammarSlot(5, "( | PrimitiveTypeReferenceType) ::= . ReferenceType", null, slot4, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2512 = new NonterminalGrammarSlot(2512, "HexNumeral ::= [0] [X] . HexDigits", slot2511, slot353, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot301 = new LastGrammarSlot(301, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ElementValue .", slot300, slot299, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1404 = new TokenGrammarSlot(1404, "InterfaceBody ::= . \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(123, 123)), "", new HashSet<Condition>(), null), "[{]", new HashSet<Condition>(), null)), "\"{\"", new HashSet<>(), null), 6, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot153 = new NonterminalGrammarSlot(153, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"", slot152, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot698 = new NonterminalGrammarSlot(698, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" . layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot697, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot746 = new NonterminalGrammarSlot(746, "DecimalIntegerLiteral ::= DecimalNumeral . IntegerTypeSuffix?", slot744, slot745, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot954 = new NonterminalGrammarSlot(954, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot953, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1399 = new LastGrammarSlot(1399, "StaticInitializer ::= \"static\" layout[\"Layout\"] Block .", slot1398, slot1395, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2461 = new LastGrammarSlot(2461, "EnumBodyDeclarations ::= \";\" layout[\"Layout\"] {ClassBodyDeclaration}* .", slot2460, slot732, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2037 = new LastGrammarSlot(2037, "(CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* layout[\"Layout\"] Finally .", slot2036, slot1701, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1849 = new LastGrammarSlot(1849, "PrimaryNoNewArray ::= Literal .", slot1848, slot75, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2658 = new LastGrammarSlot(2658, "TypeVariable ::= Identifier .", slot2657, slot2541, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot433 = new LastTokenSlot(433, "ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] . \"}\"", slot432, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1821 = new LastGrammarSlot(1821, "PrimaryNoNewArray ::= ArrayAccess .", slot1820, slot75, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1879 = new NonterminalGrammarSlot(1879, "TypeArgument ::= \"?\" . layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)?", slot1878, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2386 = new TokenGrammarSlot(2386, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement", slot2385, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2144 = new LastTokenSlot(2144, "AssignmentOperator ::= . \"|=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(124, 124)), "", new HashSet<Condition>(), null), "[|]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"|=\"", new HashSet<>(), null), 124, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2334 = new EpsilonGrammarSlot(2334, "Throws? ::= .", slot994);
  slot890 = new NonterminalGrammarSlot(890, "AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" . layout[\"Layout\"] MultiplicativeExpression", slot889, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot132 = new NonterminalGrammarSlot(132, "MethodInvocation ::= MethodName . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot131, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2729 = new NonterminalGrammarSlot(2729, "{CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] . CatchClause", slot2728, slot2113, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot903 = new NonterminalGrammarSlot(903, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . Expression", slot902, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot252 = new LastGrammarSlot(252, "DecimalFloatingPointLiteral ::= Digits FloatTypeSuffix .", slot251, slot248, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1176 = new NonterminalGrammarSlot(1176, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] . AdditiveExpression", slot1175, slot877, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot509 = new NonterminalGrammarSlot(509, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer", slot507, slot508, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot807 = new LastTokenSlot(807, "ConstructorModifier ::= . \"private\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"private\"", new HashSet<>(), null), 60, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1517 = new NonterminalGrammarSlot(1517, "BinaryNumeral ::= [0] [b] . BinaryDigits", slot1516, slot1512, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1104 = new LastGrammarSlot(1104, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .", slot1103, slot1071, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2345 = new TokenGrammarSlot(2345, "StringLiteral ::= . [\\\"] StringCharacter* [\\\"]", null, new CharacterClass(new RegexAlt(list(Range.in(34, 34)), "", new HashSet<Condition>(), null), "[\\\"]", new HashSet<Condition>(), null), 93, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1173 = new NonterminalGrammarSlot(1173, "ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression", slot1172, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2259 = new TokenGrammarSlot(2259, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2258, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot993 = new NonterminalGrammarSlot(993, "ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator . layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody", slot992, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot97 = new NonterminalGrammarSlot(97, "(\":\" layout[\"Layout\"] Expression) ::= \":\" layout[\"Layout\"] . Expression", slot96, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot363 = new NonterminalGrammarSlot(363, "{FieldModifier layout[\"Layout\"]}+ ::= . {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] FieldModifier", null, slot362, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot897 = new LastGrammarSlot(897, "{EnumConstant \",\"}* ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot896, slot893, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1150 = new LastGrammarSlot(1150, "IntegerTypeSuffix ::= [L] .", slot1149, slot1045, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1244 = new LastTokenSlot(1244, "InterfaceModifier ::= . \"abstract\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"abstract\"", new HashSet<>(), null), 23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2691 = new LastTokenSlot(2691, "ClassModifier ::= . \"abstract\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"abstract\"", new HashSet<>(), null), 23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1139 = new NonterminalGrammarSlot(1139, "{ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ElementValuePair", slot1138, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2557 = new NonterminalGrammarSlot(2557, "HexSignificand ::= [0] [X] HexDigits? [.] . HexDigits", slot2556, slot353, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot785 = new LastTokenSlot(785, "ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] . \"}\"", slot784, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1073 = new NonterminalGrammarSlot(1073, "ForStatement ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1072, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1495 = new NonterminalGrammarSlot(1495, "UnaryExpressionNotPlusMinus ::= \"~\" . layout[\"Layout\"] UnaryExpression", slot1494, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1793 = new TokenGrammarSlot(1793, "UnaryExpression ::= . \"+\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null)), "\"+\"", new HashSet<>(), null), 79, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(43, 43)), "", new HashSet<Condition>(), null), "[+]", new HashSet<Condition>(), null)), "\"+\"", new HashSet<>(), null))))), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2693 = new LastTokenSlot(2693, "ClassModifier ::= . \"static\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"static\"", new HashSet<>(), null), 56, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2555 = new NonterminalGrammarSlot(2555, "HexSignificand ::= [0] [X] . HexDigits? [.] HexDigits", slot2554, slot2321, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot720 = new NonterminalGrammarSlot(720, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot719, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2028 = new LastTokenSlot(2028, "CharacterLiteral ::= [\\'] SingleCharacter . [\\']", slot2027, new CharacterClass(new RegexAlt(list(Range.in(39, 39)), "", new HashSet<Condition>(), null), "[\\']", new HashSet<Condition>(), null), 94, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot235 = new NonterminalGrammarSlot(235, "Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] . (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?", slot233, slot234, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot865 = new LastTokenSlot(865, "[u]+ ::= . [u]", null, new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), 77, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2214 = new NonterminalGrammarSlot(2214, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" . layout[\"Layout\"] ShiftExpression", slot2213, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1210 = new NonterminalGrammarSlot(1210, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1209, slot520, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot568 = new LastTokenSlot(568, "Keyword ::= . \"throw\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(119, 119)), "", new HashSet<Condition>(), null), "[w]", new HashSet<Condition>(), null)), "\"throw\"", new HashSet<>(), null), 38, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot797 = new EpsilonGrammarSlot(797, "{AbstractMethodModifier}* ::= .", slot796);
  slot622 = new LastTokenSlot(622, "Keyword ::= . \"void\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"void\"", new HashSet<>(), null), 58, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1240 = new NonterminalGrammarSlot(1240, "AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? . layout[\"Layout\"] \";\"", slot1239, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1872 = new TokenGrammarSlot(1872, "PackageDeclaration ::= {Annotation}* layout[\"Layout\"] . \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"", slot1871, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(107, 107)), "", new HashSet<Condition>(), null), "[k]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(103, 103)), "", new HashSet<Condition>(), null), "[g]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"package\"", new HashSet<>(), null), 44, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1889 = new LastGrammarSlot(1889, "DecimalNumeral ::= NonZeroDigit Digits? .", slot1888, slot743, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot17 = new NonterminalGrammarSlot(17, "FieldAccess ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", null, slot16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2328 = new NonterminalGrammarSlot(2328, "{InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . InterfaceMemberDeclaration", slot2327, slot1631, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot951 = new TokenGrammarSlot(951, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot950, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2068 = new NonterminalGrammarSlot(2068, "{Annotation layout[\"Layout\"]}+ ::= . {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] Annotation", null, slot2067, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot713 = new NonterminalGrammarSlot(713, "StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf", slot712, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot227 = new NonterminalGrammarSlot(227, "IntegerLiteral ::= . OctalIntegerLiteral", null, slot226, FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new IntermediateNodeCreator());
  slot634 = new LastTokenSlot(634, "Keyword ::= . \"enum\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(109, 109)), "", new HashSet<Condition>(), null), "[m]", new HashSet<Condition>(), null)), "\"enum\"", new HashSet<>(), null), 62, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1421 = new NonterminalGrammarSlot(1421, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument", null, slot1022, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1345 = new LastGrammarSlot(1345, "ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression .", slot1344, slot1338, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2669 = new LastTokenSlot(2669, "RawInputCharacter ::= . [\\a01-[]-􏿿]", null, new CharacterClass(new RegexAlt(list(Range.in(1, 91), Range.in(93, 1114111)), "", new HashSet<Condition>(), null), "[\\a01-[]-􏿿]", new HashSet<Condition>(), null), 137, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1751 = new NonterminalGrammarSlot(1751, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ReferenceType", slot1750, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1994 = new NonterminalGrammarSlot(1994, "StatementWithoutTrailingSubstatement ::= \"assert\" . layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"", slot1993, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2146 = new LastTokenSlot(2146, "AssignmentOperator ::= . \">>>=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\">>>=\"", new HashSet<>(), null), 125, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot936 = new NonterminalGrammarSlot(936, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" . layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody", slot935, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot296 = new LastGrammarSlot(296, "{SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] SwitchLabel .", slot295, slot291, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot825 = new LastGrammarSlot(825, "(\"extends\" layout[\"Layout\"] Type)? ::= (\"extends\" layout[\"Layout\"] Type) .", slot824, slot822, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2318 = new LastGrammarSlot(2318, "SignedInteger ::= Sign? Digits .", slot2317, slot105, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2239 = new NonterminalGrammarSlot(2239, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2238, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot697 = new TokenGrammarSlot(697, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot696, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1317 = new LastTokenSlot(1317, "EscapeSequence ::= Backslash . [n]", slot1316, new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), 99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot1576 = new LastGrammarSlot(1576, "Literal ::= StringLiteral .", slot1575, slot1565, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2089 = new LastTokenSlot(2089, "ExponentIndicator ::= . [eE]", null, new CharacterClass(new RegexAlt(list(Range.in(101, 101), Range.in(69, 69)), "", new HashSet<Condition>(), null), "[eE]", new HashSet<Condition>(), null), 114, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2270 = new TokenGrammarSlot(2270, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] . \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2269, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(46, 46)), "", new HashSet<Condition>(), null), "[.]", new HashSet<Condition>(), null)), "\".\"", new HashSet<>(), null), 3, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot431 = new NonterminalGrammarSlot(431, "ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] . \",\"? layout[\"Layout\"] \"}\"", slot429, slot430, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1819 = new LastGrammarSlot(1819, "PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\" .", slot1818, slot75, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot401 = new NonterminalGrammarSlot(401, "EnumConstant ::= . {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?", null, slot400, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot853 = new NonterminalGrammarSlot(853, "{BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] . BlockStatement", slot852, slot64, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1023 = new NonterminalGrammarSlot(1023, "TypeArguments ::= \"<\" layout[\"Layout\"] . {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", slot1021, slot1022, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot107 = new LastGrammarSlot(107, "BinaryExponent ::= BinaryExponentIndicator SignedInteger .", slot106, slot102, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot368 = new NonterminalGrammarSlot(368, "{FieldModifier layout[\"Layout\"]}+ ::= . FieldModifier", null, slot365, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot574 = new LastTokenSlot(574, "Keyword ::= . \"for\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"for\"", new HashSet<>(), null), 41, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2670 = new LastGrammarSlot(2670, "RawInputCharacter ::= [\\a01-[]-􏿿] .", slot2669, slot555, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2484 = new LastGrammarSlot(2484, "{(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= (\"[\" layout[\"Layout\"] \"]\") .", slot2483, slot508, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot986 = new LastGrammarSlot(986, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .", slot985, slot767, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2695 = new LastTokenSlot(2695, "ClassModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1169 = new NonterminalGrammarSlot(1169, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" . layout[\"Layout\"] AdditiveExpression", slot1168, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1529 = new NonterminalGrammarSlot(1529, "SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] . {BlockStatement layout[\"Layout\"]}+", slot1528, slot848, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot70 = new LastGrammarSlot(70, "BlockStatement ::= ClassDeclaration .", slot69, slot64, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2532 = new NonterminalGrammarSlot(2532, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] VariableInitializer", slot2531, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot837 = new LastGrammarSlot(837, "ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression .", slot836, slot826, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1648 = new LastGrammarSlot(1648, "{VariableModifier}* ::= {VariableModifier layout[\"Layout\"]}+ .", slot1647, slot542, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1306 = new LastGrammarSlot(1306, "EscapeSequence ::= Backslash [t] .", slot1305, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2034 = new NonterminalGrammarSlot(2034, "(CatchClause* layout[\"Layout\"] Finally) ::= . {CatchClause}* layout[\"Layout\"] Finally", null, slot1738, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot380 = new LastGrammarSlot(380, "ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\" .", slot379, slot370, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1885 = new LastTokenSlot(1885, "DecimalNumeral ::= . [0]", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot641 = new LastGrammarSlot(641, "Keyword ::= \"interface\" .", slot640, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1708 = new NonterminalGrammarSlot(1708, "FormalParameter ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId", slot1707, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1735 = new NonterminalGrammarSlot(1735, "CommentTail ::= . NotStar CommentTail", null, slot1734, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2248 = new NonterminalGrammarSlot(2248, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . ClassBody", slot2247, slot420, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2711 = new LastGrammarSlot(2711, "PostDecrementExpression ::= PostfixExpression layout[\"Layout\"] \"--\" .", slot2710, slot1220, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot284 = new TokenGrammarSlot(284, "TypeParameters ::= . \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(60, 60)), "", new HashSet<Condition>(), null), "[\\<]", new HashSet<Condition>(), null)), "\"<\"", new HashSet<>(), null), 15, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2396 = new TokenGrammarSlot(2396, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2395, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2300 = new NonterminalGrammarSlot(2300, "HexIntegerLiteral ::= . HexNumeral IntegerTypeSuffix?", null, slot2299, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1162 = new NonterminalGrammarSlot(1162, "Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"", slot1161, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot527 = new TokenGrammarSlot(527, "OctalNumeral ::= . [0] [_]+ OctalDigits", null, new CharacterClass(new RegexAlt(list(Range.in(48, 48)), "", new HashSet<Condition>(), null), "[0]", new HashSet<Condition>(), null), 35, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1785 = new LastTokenSlot(1785, "LineTerminator ::= . [\\r\\n]", null, new CharacterClass(new RegexAlt(list(Range.in(13, 13), Range.in(10, 10)), "", new HashSet<Condition>(), null), "[\\r\\n]", new HashSet<Condition>(), null), 110, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1459 = new NonterminalGrammarSlot(1459, "SwitchLabel ::= \"case\" . layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\"", slot1458, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2031 = new NonterminalGrammarSlot(2031, "CharacterLiteral ::= [\\'] . EscapeSequence [\\']", slot2030, slot312, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot51 = new LastTokenSlot(51, "OctalDigitOrUnderscore ::= . [_]", null, new CharacterClass(new RegexAlt(list(Range.in(95, 95)), "", new HashSet<Condition>(), null), "[_]", new HashSet<Condition>(), null), 5, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot414 = new NonterminalGrammarSlot(414, "{TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] TypeParameter", slot413, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2554 = new TokenGrammarSlot(2554, "HexSignificand ::= [0] . [X] HexDigits? [.] HexDigits", slot2553, new CharacterClass(new RegexAlt(list(Range.in(88, 88)), "", new HashSet<Condition>(), null), "[X]", new HashSet<Condition>(), null), 135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new RightChildNodeCreator());
  slot1184 = new NonterminalGrammarSlot(1184, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] . AdditiveExpression", slot1183, slot877, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2515 = new LastGrammarSlot(2515, "AndExpression ::= EqualityExpression .", slot2514, slot1343, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot957 = new LastTokenSlot(957, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"", slot956, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot25 = new NonterminalGrammarSlot(25, "FieldAccess ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot24, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1595 = new NonterminalGrammarSlot(1595, "Expression ::= . AssignmentExpression", null, slot1546, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1693 = new NonterminalGrammarSlot(1693, "{TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . TypeDeclaration", slot1692, slot1465, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot873 = new NonterminalGrammarSlot(873, "IdentifierChars ::= . IdentifierChars JavaLetterOrDigit", null, slot461, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot93 = new LastGrammarSlot(93, "ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .", slot92, slot74, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1952 = new NonterminalGrammarSlot(1952, "StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\"", slot1951, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2379 = new LastGrammarSlot(2379, "Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .", slot2378, slot71, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2725 = new NonterminalGrammarSlot(2725, "{ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ExceptionType", null, slot280, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot846 = new NonterminalGrammarSlot(846, "Result ::= . Type", null, slot751, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2203 = new NonterminalGrammarSlot(2203, "RelationalExpression ::= . ShiftExpression", null, slot1165, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot536 = new EpsilonGrammarSlot(536, "(\"=\" layout[\"Layout\"] VariableInitializer)? ::= .", slot532);
  slot1867 = new NonterminalGrammarSlot(1867, "TraditionalComment ::= \"/*\" . CommentTail", slot1866, slot1729, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot446 = new NonterminalGrammarSlot(446, "ReferenceType ::= TypeDeclSpecifier layout[\"Layout\"] . TypeArguments?", slot444, slot445, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot156 = new NonterminalGrammarSlot(156, "MethodInvocation ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", null, slot23, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot437 = new LastGrammarSlot(437, "AbstractMethodModifier ::= \"abstract\" .", slot436, slot435, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot259 = new NonterminalGrammarSlot(259, "DecimalFloatingPointLiteral ::= [.] Digits . ExponentPart? FloatTypeSuffix?", slot257, slot258, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1726 = new LastGrammarSlot(1726, "{SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] SwitchBlockStatementGroup .", slot1725, slot1722, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1681 = new NonterminalGrammarSlot(1681, "OctalEscape ::= [\\\\] ZeroToThree . OctalDigit OctalDigit", slot1680, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1834 = new NonterminalGrammarSlot(1834, "PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\"", slot1833, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2475 = new NonterminalGrammarSlot(2475, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . InterfaceBody", slot2474, slot1403, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1413 = new NonterminalGrammarSlot(1413, "{AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] AnnotationTypeElementDeclaration", slot1412, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot426 = new NonterminalGrammarSlot(426, "ElementValueArrayInitializer ::= \"{\" . layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", slot425, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot596 = new LastTokenSlot(596, "Keyword ::= . \"assert\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"assert\"", new HashSet<>(), null), 51, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2421 = new LastGrammarSlot(2421, "VariableDeclaratorId ::= Identifier layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* .", slot2420, slot547, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2598 = new NonterminalGrammarSlot(2598, "CommentTailStar ::= . NotStarNotSlash CommentTail", null, slot2192, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2198 = new LastGrammarSlot(2198, "ElementValue ::= ElementValueArrayInitializer .", slot2197, slot37, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2222 = new LastGrammarSlot(2222, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType .", slot2221, slot1349, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2104 = new LastGrammarSlot(2104, "MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression .", slot2103, slot878, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot671 = new NonterminalGrammarSlot(671, "HexadecimalFloatingPointLiteral ::= . HexSignificand BinaryExponent FloatTypeSuffix?", null, slot670, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2018 = new NonterminalGrammarSlot(2018, "{Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier", slot2017, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2432 = new EpsilonGrammarSlot(2432, "(\"implements\" layout[\"Layout\"] TypeList)? ::= .", slot939);
  slot338 = new NonterminalGrammarSlot(338, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" . layout[\"Layout\"] Resource", slot337, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2433 = new NonterminalGrammarSlot(2433, "(\"implements\" layout[\"Layout\"] TypeList)? ::= . (\"implements\" layout[\"Layout\"] TypeList)", null, slot1657, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1208 = new TokenGrammarSlot(1208, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"", slot1207, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1663 = new NonterminalGrammarSlot(1663, "{InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ . layout[\"Layout\"] InterfaceModifier", slot1662, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1984 = new NonterminalGrammarSlot(1984, "StatementWithoutTrailingSubstatement ::= \"synchronized\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block", slot1983, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2592 = new LastGrammarSlot(2592, "LeftHandSide ::= ArrayAccess .", slot2591, slot1540, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot82 = new NonterminalGrammarSlot(82, "ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"", slot81, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1525 = new LastGrammarSlot(1525, "QualifiedIdentifier ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ .", slot1524, slot99, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2393 = new NonterminalGrammarSlot(2393, "Statement ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", slot2392, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot483 = new LastGrammarSlot(483, "PrimitiveType ::= \"float\" .", slot482, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1340 = new NonterminalGrammarSlot(1340, "ExclusiveOrExpression ::= ExclusiveOrExpression . layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression", slot1339, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2155 = new NonterminalGrammarSlot(2155, "LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId", slot2154, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1487 = new LastGrammarSlot(1487, "( | WhiteSpaceComment) ::= Comment .", slot1486, slot212, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1647 = new NonterminalGrammarSlot(1647, "{VariableModifier}* ::= . {VariableModifier layout[\"Layout\"]}+", null, slot1646, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot844 = new LastTokenSlot(844, "Result ::= . \"void\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"void\"", new HashSet<>(), null), 58, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2342 = new LastGrammarSlot(2342, "NotStar ::= InputCharacter .", slot2341, slot1734, new DefaultConditionTest(list(new RegularExpressionNotMatchAction(new RegularExpressionCondition(NOT_MATCH, new RegexAlt(list(new CharacterClass(new RegexAlt(list(Range.in(42, 42)), "", new HashSet<Condition>(), null), "[*]", new HashSet<Condition>(), null)), "", new HashSet<Condition>(), null))))), new NonterminalWithOneChildNodeCreator());
  slot1939 = new NonterminalGrammarSlot(1939, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1938, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1842 = new TokenGrammarSlot(1842, "PrimaryNoNewArray ::= . \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(118, 118)), "", new HashSet<Condition>(), null), "[v]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"void\"", new HashSet<>(), null), 58, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2054 = new LastTokenSlot(2054, "FieldModifier ::= . \"public\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(117, 117)), "", new HashSet<Condition>(), null), "[u]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null)), "\"public\"", new HashSet<>(), null), 24, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2142 = new LastTokenSlot(2142, "AssignmentOperator ::= . \"^=\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(94, 94)), "", new HashSet<Condition>(), null), "[^]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\"^=\"", new HashSet<>(), null), 123, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2099 = new NonterminalGrammarSlot(2099, "MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression", null, slot878, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1760 = new LastTokenSlot(1760, "NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"", slot1759, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">\"", new HashSet<>(), null), 16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot1039 = new NonterminalGrammarSlot(1039, "AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] . AnnotationTypeBody", slot1037, slot1038, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2620 = new NonterminalGrammarSlot(2620, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . EnumConstant", null, slot399, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2578 = new LastGrammarSlot(2578, "ClassMemberDeclaration ::= FieldDeclaration .", slot2577, slot2570, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1899 = new NonterminalGrammarSlot(1899, "CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" . layout[\"Layout\"] UnaryExpressionNotPlusMinus", slot1898, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2546 = new LastGrammarSlot(2546, "TypeParameter ::= TypeVariable layout[\"Layout\"] TypeBound? .", slot2545, slot415, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2539 = new NonterminalGrammarSlot(2539, "PreIncrementExpression ::= \"++\" layout[\"Layout\"] . UnaryExpression", slot2538, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1532 = new LastGrammarSlot(1532, "ConstantExpression ::= Expression .", slot1531, slot1460, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1196 = new NonterminalGrammarSlot(1196, "AnnotationTypeElementDeclaration ::= . ConstantDeclaration", null, slot1195, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot928 = new NonterminalGrammarSlot(928, "TypeDeclSpecifier ::= Identifier . layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*", slot927, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot439 = new LastGrammarSlot(439, "AbstractMethodModifier ::= Annotation .", slot438, slot435, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1902 = new TokenGrammarSlot(1902, "CastExpression ::= . \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2126 = new NonterminalGrammarSlot(2126, "CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] . Block", slot2125, slot273, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot538 = new EpsilonGrammarSlot(538, "{InterfaceModifier}* ::= .", slot537);
  slot1087 = new TokenGrammarSlot(1087, "ForStatement ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"for\"", new HashSet<>(), null), 41, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1630 = new LastGrammarSlot(1630, "Digits ::= Digit DigitOrUnderscore* Digit .", slot1629, slot115, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2077 = new NonterminalGrammarSlot(2077, "{MethodModifier}* ::= . {MethodModifier layout[\"Layout\"]}+", null, slot1854, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot983 = new TokenGrammarSlot(983, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"", slot982, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2008 = new NonterminalGrammarSlot(2008, "StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? . layout[\"Layout\"] \";\"", slot2007, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2180 = new LastTokenSlot(2180, "TypeArgumentsOrDiamond ::= \"<\" layout[\"Layout\"] . \">\"", slot2179, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">\"", new HashSet<>(), null), 16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2279 = new NonterminalGrammarSlot(2279, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2278, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1845 = new NonterminalGrammarSlot(1845, "PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" . layout[\"Layout\"] \"class\"", slot1844, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1001 = new NonterminalGrammarSlot(1001, "EnumBody ::= \"{\" layout[\"Layout\"] . {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"", slot1000, slot893, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1688 = new TokenGrammarSlot(1688, "OctalEscape ::= . [\\\\] OctalDigit", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new DefaultConditionTest(list(new RegularExpressionNotFollowAction(new RegularExpressionCondition(NOT_FOLLOW, new CharacterClass(new RegexAlt(list(Range.in(48, 55)), "", new HashSet<Condition>(), null), "", new HashSet<Condition>(), null))))), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
}

private void initBodyGrammarSlots11() {
  slot2690 = new LastGrammarSlot(2690, "ClassModifier ::= \"private\" .", slot2689, slot205, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1478 = new NonterminalGrammarSlot(1478, "FloatingPointLiteral ::= . DecimalFloatingPointLiteral", null, slot248, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1969 = new LastTokenSlot(1969, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"", slot1968, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot499 = new EpsilonGrammarSlot(499, "DefaultValue? ::= .", slot498);
  slot2459 = new NonterminalGrammarSlot(2459, "EnumBodyDeclarations ::= \";\" . layout[\"Layout\"] {ClassBodyDeclaration}*", slot2458, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2002 = new NonterminalGrammarSlot(2002, "StatementWithoutTrailingSubstatement ::= StatementExpression . layout[\"Layout\"] \";\"", slot2001, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot682 = new NonterminalGrammarSlot(682, "StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" . layout[\"Layout\"] StatementNoShortIf", slot681, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1537 = new LastTokenSlot(1537, "DimExpr ::= \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"", slot1536, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(93, 93)), "", new HashSet<Condition>(), null), "[]]", new HashSet<Condition>(), null)), "\"]\"", new HashSet<>(), null), 9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot2637 = new NonterminalGrammarSlot(2637, "ClassBodyDeclaration ::= . ClassMemberDeclaration", null, slot2570, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot310 = new NonterminalGrammarSlot(310, "StringCharacter ::= . InputCharacter", null, slot309, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1298 = new NonterminalGrammarSlot(1298, "EscapeSequence ::= . Backslash [\\\"]", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2352 = new NonterminalGrammarSlot(2352, "{ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . ImportDeclaration", slot2351, slot1429, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot717 = new NonterminalGrammarSlot(717, "StatementNoShortIf ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot716, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1945 = new NonterminalGrammarSlot(1945, "StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] . {SwitchLabel}* layout[\"Layout\"] \"}\"", slot1944, slot1642, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot90 = new NonterminalGrammarSlot(90, "ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"", slot89, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1577 = new NonterminalGrammarSlot(1577, "Literal ::= . BooleanLiteral", null, slot381, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2158 = new NonterminalGrammarSlot(2158, "LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] . VariableDeclaratorId", slot2157, slot547, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2141 = new LastGrammarSlot(2141, "AssignmentOperator ::= \"+=\" .", slot2140, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot186 = new NonterminalGrammarSlot(186, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"", slot185, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2584 = new NonterminalGrammarSlot(2584, "LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide . layout[\"Layout\"] \")\"", slot2583, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot148 = new NonterminalGrammarSlot(148, "MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot147, slot13, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot300 = new NonterminalGrammarSlot(300, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ElementValue", null, slot37, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot673 = new NonterminalGrammarSlot(673, "HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent . FloatTypeSuffix?", slot672, slot260, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2220 = new NonterminalGrammarSlot(2220, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" . layout[\"Layout\"] ReferenceType", slot2219, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot829 = new NonterminalGrammarSlot(829, "ConditionalExpression ::= ConditionalOrExpression . layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression", slot828, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot2187 = new NonterminalGrammarSlot(2187, "ForInit ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot471, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1361 = new NonterminalGrammarSlot(1361, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" . layout[\"Layout\"] RelationalExpression", slot1360, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2149 = new LastGrammarSlot(2149, "AssignmentOperator ::= \"%=\" .", slot2148, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1381 = new LastTokenSlot(1381, "MethodModifier ::= . \"strictfp\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(112, 112)), "", new HashSet<Condition>(), null), "[p]", new HashSet<Condition>(), null)), "\"strictfp\"", new HashSet<>(), null), 39, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1541 = new NonterminalGrammarSlot(1541, "Assignment ::= . LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression", null, slot1540, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2390 = new TokenGrammarSlot(2390, "Statement ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"if\"", new HashSet<>(), null), 64, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1527 = new NonterminalGrammarSlot(1527, "SwitchBlockStatementGroup ::= . {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+", null, slot291, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2435 = new NonterminalGrammarSlot(2435, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= . {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier", null, slot2086, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1635 = new LastGrammarSlot(1635, "InterfaceMemberDeclaration ::= ConstantDeclaration .", slot1634, slot1631, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2465 = new NonterminalGrammarSlot(2465, "NormalInterfaceDeclaration ::= . {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody", null, slot537, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1691 = new NonterminalGrammarSlot(1691, "{TypeDeclaration layout[\"Layout\"]}+ ::= . {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] TypeDeclaration", null, slot1132, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2526 = new NonterminalGrammarSlot(2526, "StringCharacter* ::= . StringCharacter* StringCharacter", null, slot2346, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot304 = new TokenGrammarSlot(304, "{ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ElementValue", slot303, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot490 = new LastTokenSlot(490, "PrimitiveType ::= . \"char\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null)), "\"char\"", new HashSet<>(), null), 30, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot955 = new TokenGrammarSlot(955, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"", slot954, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1884 = new LastGrammarSlot(1884, "TypeArgument ::= Type .", slot1883, slot1418, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot784 = new NonterminalGrammarSlot(784, "ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? . layout[\"Layout\"] \"}\"", slot783, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2581 = new TokenGrammarSlot(2581, "LeftHandSide ::= . \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2429 = new LastGrammarSlot(2429, "{ConstructorModifier layout[\"Layout\"]}+ ::= ConstructorModifier .", slot2428, slot1581, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot665 = new LastGrammarSlot(665, "Comment ::= TraditionalComment .", slot664, slot662, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2403 = new LastGrammarSlot(2403, "Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement .", slot2402, slot71, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot491 = new LastGrammarSlot(491, "PrimitiveType ::= \"char\" .", slot490, slot1, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot67 = new LastGrammarSlot(67, "BlockStatement ::= LocalVariableDeclarationStatement .", slot66, slot64, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1127 = new LastGrammarSlot(1127, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= Type .", slot1126, slot1119, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot702 = new TokenGrammarSlot(702, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf", slot701, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1579 = new NonterminalGrammarSlot(1579, "Literal ::= . FloatingPointLiteral", null, slot1475, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1299 = new LastTokenSlot(1299, "EscapeSequence ::= Backslash . [\\\"]", slot1298, new CharacterClass(new RegexAlt(list(Range.in(34, 34)), "", new HashSet<Condition>(), null), "[\\\"]", new HashSet<Condition>(), null), 93, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot1671 = new NonterminalGrammarSlot(1671, "{VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ . layout[\"Layout\"] VariableModifier", slot1670, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1755 = new LastGrammarSlot(1755, "{ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ReferenceType .", slot1754, slot1747, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot254 = new NonterminalGrammarSlot(254, "DecimalFloatingPointLiteral ::= Digits . ExponentPart", slot253, slot118, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1675 = new TokenGrammarSlot(1675, "(\"[\" layout[\"Layout\"] \"]\") ::= . \"[\" layout[\"Layout\"] \"]\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(91, 91)), "", new HashSet<Condition>(), null), "[[]", new HashSet<Condition>(), null)), "\"[\"", new HashSet<>(), null), 8, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot941 = new NonterminalGrammarSlot(941, "EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] EnumBody", slot940, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2291 = new NonterminalGrammarSlot(2291, "LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+", slot2290, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1152 = new LastGrammarSlot(1152, "IntegerTypeSuffix ::= [l] .", slot1151, slot1045, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2702 = new TokenGrammarSlot(2702, "{QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] QualifiedIdentifier", slot2701, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot199 = new NonterminalGrammarSlot(199, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"", slot198, slot135, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot429 = new NonterminalGrammarSlot(429, "ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? . layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"", slot428, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1455 = new NonterminalGrammarSlot(1455, "SwitchLabel ::= \"default\" . layout[\"Layout\"] \":\"", slot1454, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1366 = new NonterminalGrammarSlot(1366, "InputCharacter* ::= InputCharacter* . InputCharacter", slot1365, slot309, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot276 = new NonterminalGrammarSlot(276, "Block ::= \"{\" layout[\"Layout\"] . {BlockStatement}* layout[\"Layout\"] \"}\"", slot275, slot59, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1347 = new LastGrammarSlot(1347, "ExclusiveOrExpression ::= AndExpression .", slot1346, slot1338, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2621 = new LastGrammarSlot(2621, "{EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= EnumConstant .", slot2620, slot895, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2204 = new LastGrammarSlot(2204, "RelationalExpression ::= ShiftExpression .", slot2203, slot1349, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2500 = new LastGrammarSlot(2500, "ForUpdate? ::= ForUpdate .", slot2499, slot699, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1815 = new NonterminalGrammarSlot(1815, "PrimaryNoNewArray ::= Type . layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"", slot1814, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1790 = new NonterminalGrammarSlot(1790, "UnaryExpression ::= \"-\" . layout[\"Layout\"] UnaryExpression", slot1789, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1665 = new LastGrammarSlot(1665, "{InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceModifier .", slot1664, slot539, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1312 = new LastGrammarSlot(1312, "EscapeSequence ::= Backslash [b] .", slot1311, slot312, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1494 = new TokenGrammarSlot(1494, "UnaryExpressionNotPlusMinus ::= . \"~\" layout[\"Layout\"] UnaryExpression", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(126, 126)), "", new HashSet<Condition>(), null), "[~]", new HashSet<Condition>(), null)), "\"~\"", new HashSet<>(), null), 104, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot850 = new LastGrammarSlot(850, "{BlockStatement layout[\"Layout\"]}+ ::= BlockStatement .", slot849, slot848, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1473 = new NonterminalGrammarSlot(1473, "FormalParameterList? ::= . FormalParameterList", null, slot392, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1311 = new LastTokenSlot(1311, "EscapeSequence ::= Backslash . [b]", slot1310, new CharacterClass(new RegexAlt(list(Range.in(98, 98)), "", new HashSet<Condition>(), null), "[b]", new HashSet<Condition>(), null), 97, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new RightChildNodeCreator());
  slot2200 = new LastGrammarSlot(2200, "ElementValue ::= ConditionalExpression .", slot2199, slot37, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot841 = new NonterminalGrammarSlot(841, "ElementValues ::= . {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot299, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot197 = new TokenGrammarSlot(197, "MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot196, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2712 = new TokenGrammarSlot(2712, "UnicodeEscape ::= . [\\\\] [u]+ HexDigit HexDigit HexDigit HexDigit", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2171 = new TokenGrammarSlot(2171, "ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] . \"||\" layout[\"Layout\"] ConditionalAndExpression", slot2170, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(124, 124)), "", new HashSet<Condition>(), null), "[|]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(124, 124)), "", new HashSet<Condition>(), null), "[|]", new HashSet<Condition>(), null)), "\"||\"", new HashSet<>(), null), 129, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1447 = new NonterminalGrammarSlot(1447, "VariableDeclarator ::= VariableDeclaratorId . layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)?", slot1446, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1954 = new LastGrammarSlot(1954, "StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" .", slot1953, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2226 = new NonterminalGrammarSlot(2226, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" . layout[\"Layout\"] ShiftExpression", slot2225, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot612 = new LastTokenSlot(612, "Keyword ::= . \"float\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null)), "\"float\"", new HashSet<>(), null), 26, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2376 = new TokenGrammarSlot(2376, "Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement", slot2375, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(41, 41)), "", new HashSet<Condition>(), null), "[)]", new HashSet<Condition>(), null)), "\")\"", new HashSet<>(), null), 12, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2225 = new TokenGrammarSlot(2225, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \">\" layout[\"Layout\"] ShiftExpression", slot2224, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null)), "\">\"", new HashSet<>(), null), 16, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2213 = new TokenGrammarSlot(2213, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \">=\" layout[\"Layout\"] ShiftExpression", slot2212, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(62, 62)), "", new HashSet<Condition>(), null), "[\\>]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(61, 61)), "", new HashSet<Condition>(), null), "[=]", new HashSet<Condition>(), null)), "\">=\"", new HashSet<>(), null), 132, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot367 = new LastGrammarSlot(367, "{FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] FieldModifier .", slot366, slot362, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot390 = new NonterminalGrammarSlot(390, "VariableInitializer ::= . ArrayInitializer", null, slot389, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2601 = new LastTokenSlot(2601, "ConstantModifier ::= . \"final\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null)), "\"final\"", new HashSet<>(), null), 69, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot861 = new NonterminalGrammarSlot(861, "LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"", slot860, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot899 = new NonterminalGrammarSlot(899, "{Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Expression", null, slot898, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot552 = new NonterminalGrammarSlot(552, "Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] . Expression", slot551, slot80, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2174 = new LastGrammarSlot(2174, "ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression .", slot2173, slot827, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1711 = new NonterminalGrammarSlot(1711, "FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclaratorId", slot1710, slot547, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot39 = new LastGrammarSlot(39, "DefaultValue ::= \"default\" layout[\"Layout\"] ElementValue .", slot38, slot34, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot507 = new NonterminalGrammarSlot(507, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer", slot506, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot869 = new LastGrammarSlot(869, "[u]+ ::= [u]+ [u] .", slot868, slot864, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot804 = new NonterminalGrammarSlot(804, "Finally? ::= . Finally", null, slot803, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot816 = new NonterminalGrammarSlot(816, "FloatTypeSuffix? ::= . FloatTypeSuffix", null, slot250, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2173 = new NonterminalGrammarSlot(2173, "ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] . ConditionalAndExpression", slot2172, slot1048, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot459 = new NonterminalGrammarSlot(459, "{VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . VariableDeclarator", null, slot456, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2580 = new LastGrammarSlot(2580, "ClassMemberDeclaration ::= \";\" .", slot2579, slot2570, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2441 = new NonterminalGrammarSlot(2441, "{QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= . QualifiedIdentifier", null, slot99, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot590 = new LastTokenSlot(590, "Keyword ::= . \"case\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"case\"", new HashSet<>(), null), 48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1320 = new NonterminalGrammarSlot(1320, "TypeList ::= . {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+", null, slot1119, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2087 = new NonterminalGrammarSlot(2087, "CatchType ::= . {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+", null, slot2086, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot691 = new NonterminalGrammarSlot(691, "StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? . layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf", slot690, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1007 = new LastTokenSlot(1007, "EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] . \"}\"", slot1006, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(125, 125)), "", new HashSet<Condition>(), null), "[}]", new HashSet<Condition>(), null)), "\"}\"", new HashSet<>(), null), 7, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
  slot718 = new TokenGrammarSlot(718, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot717, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1621 = new LastGrammarSlot(1621, "NullLiteral ::= \"null\" .", slot1620, slot1569, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2333 = new LastGrammarSlot(2333, "Throws? ::= Throws .", slot2332, slot994, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2309 = new NonterminalGrammarSlot(2309, "InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] . ExclusiveOrExpression", slot2308, slot1338, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1736 = new NonterminalGrammarSlot(1736, "CommentTail ::= NotStar . CommentTail", slot1735, slot1729, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1416 = new NonterminalGrammarSlot(1416, "{AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= . AnnotationTypeElementDeclaration", null, slot1190, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2516 = new NonterminalGrammarSlot(2516, "AndExpression ::= . AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression", null, slot1343, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1268 = new NonterminalGrammarSlot(1268, "{(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] . (FormalParameter layout[\"Layout\"] \",\")", slot1267, slot1263, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2137 = new LastGrammarSlot(2137, "AssignmentOperator ::= \"/=\" .", slot2136, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2269 = new NonterminalGrammarSlot(2269, "ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) . layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2268, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1333 = new NonterminalGrammarSlot(1333, "ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"", slot1332, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1485 = new LastGrammarSlot(1485, "( | WhiteSpaceComment) ::= WhiteSpace .", slot1484, slot212, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1177 = new LastGrammarSlot(1177, "ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression .", slot1176, slot1165, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2043 = new LastGrammarSlot(2043, "FieldModifier ::= \"transient\" .", slot2042, slot365, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot653 = new LastGrammarSlot(653, "Keyword ::= \"goto\" .", slot652, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot2238 = new TokenGrammarSlot(2238, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] . \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2237, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null)), "\"class\"", new HashSet<>(), null), 70, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1307 = new NonterminalGrammarSlot(1307, "EscapeSequence ::= . Backslash [f]", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2196 = new LastGrammarSlot(2196, "NotStarNotSlash ::= LineTerminator .", slot2195, slot2192, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1344 = new NonterminalGrammarSlot(1344, "ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] . AndExpression", slot1342, slot1343, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2529 = new NonterminalGrammarSlot(2529, "{VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer", null, slot2503, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot337 = new TokenGrammarSlot(337, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] . \";\" layout[\"Layout\"] Resource", slot336, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(59, 59)), "", new HashSet<Condition>(), null), "[;]", new HashSet<Condition>(), null)), "\";\"", new HashSet<>(), null), 19, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot1996 = new NonterminalGrammarSlot(1996, "StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression . layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"", slot1995, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot678 = new LastGrammarSlot(678, "StatementNoShortIf ::= StatementWithoutTrailingSubstatement .", slot677, slot675, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot770 = new EpsilonGrammarSlot(770, "ExplicitConstructorInvocation? ::= .", slot56);
  slot1085 = new NonterminalGrammarSlot(1085, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement", slot1084, slot71, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot61 = new NonterminalGrammarSlot(61, "ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* . layout[\"Layout\"] \"}\"", slot60, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2645 = new NonterminalGrammarSlot(2645, "SingleCharacter ::= . InputCharacter", null, slot309, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1377 = new LastTokenSlot(1377, "MethodModifier ::= . \"synchronized\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(104, 104)), "", new HashSet<Condition>(), null), "[h]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(122, 122)), "", new HashSet<Condition>(), null), "[z]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(100, 100)), "", new HashSet<Condition>(), null), "[d]", new HashSet<Condition>(), null)), "\"synchronized\"", new HashSet<>(), null), 63, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2502 = new EpsilonGrammarSlot(2502, "{VariableInitializer \",\"}* ::= .", slot780);
  slot1567 = new NonterminalGrammarSlot(1567, "Literal ::= . CharacterLiteral", null, slot1566, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1890 = new NonterminalGrammarSlot(1890, "DecimalNumeral ::= . NonZeroDigit [_]+ Digits", null, slot1156, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2257 = new NonterminalGrammarSlot(2257, "ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] . TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?", slot2255, slot2256, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot854 = new LastGrammarSlot(854, "{BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] BlockStatement .", slot853, slot848, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1508 = new NonterminalGrammarSlot(1508, "BinaryIntegerLiteral ::= BinaryNumeral . IntegerTypeSuffix?", slot1507, slot745, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1213 = new NonterminalGrammarSlot(1213, "AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? . layout[\"Layout\"] \";\"", slot1212, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot920 = new LastGrammarSlot(920, "Throws ::= \"throws\" layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .", slot919, slot915, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot737 = new NonterminalGrammarSlot(737, "ArgumentList? ::= . ArgumentList", null, slot736, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1362 = new NonterminalGrammarSlot(1362, "EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] . RelationalExpression", slot1361, slot1349, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2476 = new LastGrammarSlot(2476, "NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody .", slot2475, slot1064, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2097 = new NonterminalGrammarSlot(2097, "MultiplicativeExpression ::= . UnaryExpression", null, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2071 = new LastGrammarSlot(2071, "{Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] Annotation .", slot2070, slot2067, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot139 = new LastGrammarSlot(139, "MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .", slot138, slot129, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot540 = new NonterminalGrammarSlot(540, "{InterfaceModifier}* ::= . {InterfaceModifier layout[\"Layout\"]}+", null, slot539, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2528 = new LastGrammarSlot(2528, "StringCharacter* ::= StringCharacter* StringCharacter .", slot2527, slot2346, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1661 = new LastGrammarSlot(1661, "(\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" layout[\"Layout\"] TypeList .", slot1660, slot1657, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot285 = new NonterminalGrammarSlot(285, "TypeParameters ::= \"<\" . layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"", slot284, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1310 = new NonterminalGrammarSlot(1310, "EscapeSequence ::= . Backslash [b]", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1121 = new NonterminalGrammarSlot(1121, "{Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] Type", slot1120, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot967 = new TokenGrammarSlot(967, "ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot966, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2219 = new TokenGrammarSlot(2219, "RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"instanceof\" layout[\"Layout\"] ReferenceType", slot2218, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(105, 105)), "", new HashSet<Condition>(), null), "[i]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(110, 110)), "", new HashSet<Condition>(), null), "[n]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(99, 99)), "", new HashSet<Condition>(), null), "[c]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(111, 111)), "", new HashSet<Condition>(), null), "[o]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null)), "\"instanceof\"", new HashSet<>(), null), 66, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2145 = new LastGrammarSlot(2145, "AssignmentOperator ::= \"|=\" .", slot2144, slot1543, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot174 = new LastGrammarSlot(174, "MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .", slot173, slot129, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1457 = new LastGrammarSlot(1457, "SwitchLabel ::= \"default\" layout[\"Layout\"] \":\" .", slot1456, slot294, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot1971 = new TokenGrammarSlot(1971, "StatementWithoutTrailingSubstatement ::= . \"try\" layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(116, 116)), "", new HashSet<Condition>(), null), "[t]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(114, 114)), "", new HashSet<Condition>(), null), "[r]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(121, 121)), "", new HashSet<Condition>(), null), "[y]", new HashSet<Condition>(), null)), "\"try\"", new HashSet<>(), null), 61, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot63 = new LastGrammarSlot(63, "ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\" .", slot62, slot53, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot725 = new NonterminalGrammarSlot(725, "StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf . layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf", slot724, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2336 = new NonterminalGrammarSlot(2336, "ClassBody ::= \"{\" . layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"", slot2335, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot617 = new LastGrammarSlot(617, "Keyword ::= \"static\" .", slot616, slot561, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1423 = new TokenGrammarSlot(1423, "{TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] TypeArgument", slot1422, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(44, 44)), "", new HashSet<Condition>(), null), "[,]", new HashSet<Condition>(), null)), "\",\"", new HashSet<>(), null), 17, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot740 = new NonterminalGrammarSlot(740, "(\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= . (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")", null, slot739, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1043 = new LastGrammarSlot(1043, "ZeroToThree ::= [0-3] .", slot1042, slot1041, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot142 = new NonterminalGrammarSlot(142, "MethodInvocation ::= TypeName . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot141, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1966 = new NonterminalGrammarSlot(1966, "StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"", slot1965, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot958 = new LastGrammarSlot(958, "ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .", slot957, slot767, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot371 = new TokenGrammarSlot(371, "ResourceSpecification ::= . \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot2626 = new NonterminalGrammarSlot(2626, "{SwitchBlockStatementGroup}* ::= . {SwitchBlockStatementGroup layout[\"Layout\"]}+", null, slot1722, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2423 = new EpsilonGrammarSlot(2423, "empty() ::= .", slot2422);
  slot747 = new LastGrammarSlot(747, "DecimalIntegerLiteral ::= DecimalNumeral IntegerTypeSuffix? .", slot746, slot220, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot765 = new NonterminalGrammarSlot(765, "PreDecrementExpression ::= \"--\" layout[\"Layout\"] . UnaryExpression", slot763, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2375 = new NonterminalGrammarSlot(2375, "Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot2374, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2357 = new EpsilonGrammarSlot(2357, "(\"extends\" layout[\"Layout\"] TypeList)? ::= .", slot2356);
  slot738 = new LastGrammarSlot(738, "ArgumentList? ::= ArgumentList .", slot737, slot135, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot336 = new NonterminalGrammarSlot(336, "{Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ . layout[\"Layout\"] \";\" layout[\"Layout\"] Resource", slot335, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator());
  slot1622 = new NonterminalGrammarSlot(1622, "ElementValues? ::= . ElementValues", null, slot840, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1117 = new NonterminalGrammarSlot(1117, "(\".\" layout[\"Layout\"] \"*\")? ::= . (\".\" layout[\"Layout\"] \"*\")", null, slot1116, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2010 = new LastGrammarSlot(2010, "StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\" .", slot2009, slot676, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2613 = new LastGrammarSlot(2613, "Resources ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ .", slot2612, slot373, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot69 = new NonterminalGrammarSlot(69, "BlockStatement ::= . ClassDeclaration", null, slot68, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1135 = new EpsilonGrammarSlot(1135, "{TypeDeclaration}* ::= .", slot1131);
  slot1252 = new NonterminalGrammarSlot(1252, "InterfaceModifier ::= . Annotation", null, slot229, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1313 = new NonterminalGrammarSlot(1313, "EscapeSequence ::= . Backslash [r]", null, slot1297, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1791 = new NonterminalGrammarSlot(1791, "UnaryExpression ::= \"-\" layout[\"Layout\"] . UnaryExpression", slot1790, slot764, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2611 = new LastGrammarSlot(2611, "PackageDeclaration? ::= PackageDeclaration .", slot2610, slot2162, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot183 = new TokenGrammarSlot(183, "MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"", slot182, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(40, 40)), "", new HashSet<Condition>(), null), "[(]", new HashSet<Condition>(), null)), "\"(\"", new HashSet<>(), null), 11, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator(), new IntermediateNodeCreator());
  slot2245 = new NonterminalGrammarSlot(2245, "NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? . layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody", slot2244, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot2176 = new LastGrammarSlot(2176, "ConditionalOrExpression ::= ConditionalAndExpression .", slot2175, slot827, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot519 = new NonterminalGrammarSlot(519, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", slot518, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1699 = new LastGrammarSlot(1699, "{AnnotationTypeElementDeclaration}* ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ .", slot1698, slot1599, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot518 = new NonterminalGrammarSlot(518, "ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] . {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*", slot516, slot517, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
}

private void initBodyGrammarSlots12() {
  slot2699 = new EpsilonGrammarSlot(2699, "TypeBound? ::= .", slot2544);
  slot1451 = new LastGrammarSlot(1451, "Type ::= ReferenceType .", slot1450, slot751, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot1479 = new LastGrammarSlot(1479, "FloatingPointLiteral ::= DecimalFloatingPointLiteral .", slot1478, slot1475, FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator());
  slot475 = new NonterminalGrammarSlot(475, "OctalDigits ::= . OctalDigit OctalDigitOrUnderscore* OctalDigit", null, slot48, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot860 = new NonterminalGrammarSlot(860, "LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"", slot858, slot859, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot1288 = new TokenGrammarSlot(1288, "EscapeSequence ::= . [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC]", null, new CharacterClass(new RegexAlt(list(Range.in(92, 92)), "", new HashSet<Condition>(), null), "[\\\\]", new HashSet<Condition>(), null), 90, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new RightChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1080 = new NonterminalGrammarSlot(1080, "ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement", slot1079, slot9, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new IntermediateNodeCreator());
  slot382 = new LastTokenSlot(382, "BooleanLiteral ::= . \"false\"", null, new Sequence(list(new CharacterClass(new RegexAlt(list(Range.in(102, 102)), "", new HashSet<Condition>(), null), "[f]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(97, 97)), "", new HashSet<Condition>(), null), "[a]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(108, 108)), "", new HashSet<Condition>(), null), "[l]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(115, 115)), "", new HashSet<Condition>(), null), "[s]", new HashSet<Condition>(), null), new CharacterClass(new RegexAlt(list(Range.in(101, 101)), "", new HashSet<Condition>(), null), "[e]", new HashSet<Condition>(), null)), "\"false\"", new HashSet<>(), null), 21, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalWithOneChildNodeCreator(), DummyNodeCreator.getInstance());
  slot1619 = new LastGrammarSlot(1619, "ExplicitGenericInvocationSuffix ::= Identifier layout[\"Layout\"] Arguments .", slot1618, slot1611, FalseConditionTest.getInstance(), new NonterminalNodeCreator());
  slot2032 = new LastTokenSlot(2032, "CharacterLiteral ::= [\\'] EscapeSequence . [\\']", slot2031, new CharacterClass(new RegexAlt(list(Range.in(39, 39)), "", new HashSet<Condition>(), null), "[\\']", new HashSet<Condition>(), null), 94, FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), FalseConditionTest.getInstance(), new NonterminalNodeCreator(), new IntermediateNodeCreator());
}

@Override
protected HeadGrammarSlot getStartSymbol(String name) {
    HeadGrammarSlot startSymbol = startSymbols.get(name);
    cs = startSymbol.getId();
    return startSymbol;
}

@Override
protected void parse(HeadGrammarSlot startSymbolName) {
  while (true) {
    switch (cs) {
case L0:
  if (hasNextDescriptor()) {
    Descriptor descriptor = nextDescriptor();
    log.trace("Processing %s", descriptor);
    cu = descriptor.getGSSNode();
    ci = descriptor.getInputIndex();
    cn = descriptor.getSPPFNode();
    cs = descriptor.getGrammarSlot().getId();
    break;
  } else {
    return;
  }

// ( | PrimitiveTypeReferenceType)
case 0:
  cs = slot0();
  break;

// ( | PrimitiveTypeReferenceType) ::= . PrimitiveType
case 2:
  cs = slot2();
  break;

// ( | PrimitiveTypeReferenceType) ::= PrimitiveType .
case 3:
  cs = slot3();
  break;

// ( | PrimitiveTypeReferenceType) ::= . ReferenceType
case 5:
  cs = slot5();
  break;

// ( | PrimitiveTypeReferenceType) ::= ReferenceType .
case 6:
  cs = slot6();
  break;

// PrimitiveType
case 1:
  cs = slot1();
  break;

// PrimitiveType ::= . \"float\"
case 482:
  cs = slot482();
  break;

// PrimitiveType ::= \"float\" .
case 483:
  cs = slot483();
  break;

// PrimitiveType ::= . \"long\"
case 484:
  cs = slot484();
  break;

// PrimitiveType ::= \"long\" .
case 485:
  cs = slot485();
  break;

// PrimitiveType ::= . \"double\"
case 486:
  cs = slot486();
  break;

// PrimitiveType ::= \"double\" .
case 487:
  cs = slot487();
  break;

// PrimitiveType ::= . \"int\"
case 488:
  cs = slot488();
  break;

// PrimitiveType ::= \"int\" .
case 489:
  cs = slot489();
  break;

// PrimitiveType ::= . \"char\"
case 490:
  cs = slot490();
  break;

// PrimitiveType ::= \"char\" .
case 491:
  cs = slot491();
  break;

// PrimitiveType ::= . \"boolean\"
case 492:
  cs = slot492();
  break;

// PrimitiveType ::= \"boolean\" .
case 493:
  cs = slot493();
  break;

// PrimitiveType ::= . \"short\"
case 494:
  cs = slot494();
  break;

// PrimitiveType ::= \"short\" .
case 495:
  cs = slot495();
  break;

// PrimitiveType ::= . \"byte\"
case 496:
  cs = slot496();
  break;

// PrimitiveType ::= \"byte\" .
case 497:
  cs = slot497();
  break;

// ReferenceType
case 4:
  cs = slot4();
  break;

// ReferenceType ::= . TypeDeclSpecifier layout[\"Layout\"] TypeArguments?
case 443:
  cs = slot443();
  break;

// ReferenceType ::= TypeDeclSpecifier . layout[\"Layout\"] TypeArguments?
case 444:
  cs = slot444();
  break;

// ReferenceType ::= TypeDeclSpecifier layout[\"Layout\"] . TypeArguments?
case 446:
  cs = slot446();
  break;

// ReferenceType ::= TypeDeclSpecifier layout[\"Layout\"] TypeArguments? .
case 447:
  cs = slot447();
  break;

// ReferenceType ::= . ArrayType
case 449:
  cs = slot449();
  break;

// ReferenceType ::= ArrayType .
case 450:
  cs = slot450();
  break;

// FieldAccess
case 7:
  cs = slot7();
  break;

// FieldAccess ::= . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 8:
  slot8();

// FieldAccess ::= \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 10:
  cs = slot10();
  break;

// FieldAccess ::= \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
case 11:
  slot11();

// FieldAccess ::= \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
case 12:
  cs = slot12();
  break;

// FieldAccess ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
case 14:
  cs = slot14();
  break;

// FieldAccess ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
case 15:
  cs = slot15();
  break;

// FieldAccess ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 17:
  cs = slot17();
  break;

// FieldAccess ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 18:
  cs = slot18();
  break;

// FieldAccess ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
case 19:
  slot19();

// FieldAccess ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
case 20:
  cs = slot20();
  break;

// FieldAccess ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
case 21:
  cs = slot21();
  break;

// FieldAccess ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
case 22:
  cs = slot22();
  break;

// FieldAccess ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 24:
  cs = slot24();
  break;

// FieldAccess ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 25:
  cs = slot25();
  break;

// FieldAccess ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 26:
  slot26();

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 27:
  cs = slot27();
  break;

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 28:
  slot28();

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 29:
  cs = slot29();
  break;

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
case 30:
  slot30();

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
case 31:
  cs = slot31();
  break;

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
case 32:
  cs = slot32();
  break;

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
case 33:
  cs = slot33();
  break;

// layout[\"Layout\"]
case 9:
  cs = slot9();
  break;

// layout[\"Layout\"] ::= . ( | WhiteSpaceComment)*
case 2430:
  cs = slot2430();
  break;

// layout[\"Layout\"] ::= ( | WhiteSpaceComment)* .
case 2431:
  cs = slot2431();
  break;

// Identifier
case 13:
  cs = slot13();
  break;

// Identifier ::= . IdentifierChars
case 462:
  cs = slot462();
  break;

// Identifier ::= IdentifierChars .
case 463:
  cs = slot463();
  break;

// Primary
case 16:
  cs = slot16();
  break;

// Primary ::= . PrimaryNoNewArray
case 818:
  cs = slot818();
  break;

// Primary ::= PrimaryNoNewArray .
case 819:
  cs = slot819();
  break;

// Primary ::= . ArrayCreationExpression
case 820:
  cs = slot820();
  break;

// Primary ::= ArrayCreationExpression .
case 821:
  cs = slot821();
  break;

// ClassName
case 23:
  cs = slot23();
  break;

// ClassName ::= . QualifiedIdentifier
case 2319:
  cs = slot2319();
  break;

// ClassName ::= QualifiedIdentifier .
case 2320:
  cs = slot2320();
  break;

// DefaultValue
case 34:
  cs = slot34();
  break;

// DefaultValue ::= . \"default\" layout[\"Layout\"] ElementValue
case 35:
  slot35();

// DefaultValue ::= \"default\" . layout[\"Layout\"] ElementValue
case 36:
  cs = slot36();
  break;

// DefaultValue ::= \"default\" layout[\"Layout\"] . ElementValue
case 38:
  cs = slot38();
  break;

// DefaultValue ::= \"default\" layout[\"Layout\"] ElementValue .
case 39:
  cs = slot39();
  break;

// ElementValue
case 37:
  cs = slot37();
  break;

// ElementValue ::= . ElementValueArrayInitializer
case 2197:
  cs = slot2197();
  break;

// ElementValue ::= ElementValueArrayInitializer .
case 2198:
  cs = slot2198();
  break;

// ElementValue ::= . ConditionalExpression
case 2199:
  cs = slot2199();
  break;

// ElementValue ::= ConditionalExpression .
case 2200:
  cs = slot2200();
  break;

// ElementValue ::= . Annotation
case 2201:
  cs = slot2201();
  break;

// ElementValue ::= Annotation .
case 2202:
  cs = slot2202();
  break;

// MethodDeclaration
case 40:
  cs = slot40();
  break;

// MethodDeclaration ::= . MethodHeader layout[\"Layout\"] MethodBody
case 42:
  cs = slot42();
  break;

// MethodDeclaration ::= MethodHeader . layout[\"Layout\"] MethodBody
case 43:
  cs = slot43();
  break;

// MethodDeclaration ::= MethodHeader layout[\"Layout\"] . MethodBody
case 45:
  cs = slot45();
  break;

// MethodDeclaration ::= MethodHeader layout[\"Layout\"] MethodBody .
case 46:
  cs = slot46();
  break;

// MethodHeader
case 41:
  cs = slot41();
  break;

// MethodHeader ::= . {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
case 2647:
  cs = slot2647();
  break;

// MethodHeader ::= {MethodModifier}* . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
case 2648:
  cs = slot2648();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
case 2649:
  cs = slot2649();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
case 2650:
  cs = slot2650();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
case 2651:
  cs = slot2651();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result . layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
case 2652:
  cs = slot2652();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] . MethodDeclarator layout[\"Layout\"] Throws?
case 2653:
  cs = slot2653();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator . layout[\"Layout\"] Throws?
case 2654:
  cs = slot2654();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] . Throws?
case 2655:
  cs = slot2655();
  break;

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? .
case 2656:
  cs = slot2656();
  break;

// MethodBody
case 44:
  cs = slot44();
  break;

// MethodBody ::= . Block
case 1502:
  cs = slot1502();
  break;

// MethodBody ::= Block .
case 1503:
  cs = slot1503();
  break;

// MethodBody ::= . \";\"
case 1504:
  cs = slot1504();
  break;

// MethodBody ::= \";\" .
case 1505:
  cs = slot1505();
  break;

// OctalDigitOrUnderscore
case 47:
  cs = slot47();
  break;

// OctalDigitOrUnderscore ::= . OctalDigit
case 49:
  cs = slot49();
  break;

// OctalDigitOrUnderscore ::= OctalDigit .
case 50:
  cs = slot50();
  break;

// OctalDigitOrUnderscore ::= . [_]
case 51:
  cs = slot51();
  break;

// OctalDigitOrUnderscore ::= [_] .
case 52:
  cs = slot52();
  break;

// OctalDigit
case 48:
  cs = slot48();
  break;

// OctalDigit ::= . [0-7]
case 1427:
  cs = slot1427();
  break;

// OctalDigit ::= [0-7] .
case 1428:
  cs = slot1428();
  break;

// ConstructorBody
case 53:
  cs = slot53();
  break;

// ConstructorBody ::= . \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
case 54:
  slot54();

// ConstructorBody ::= \"{\" . layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
case 55:
  cs = slot55();
  break;

// ConstructorBody ::= \"{\" layout[\"Layout\"] . ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
case 57:
  cs = slot57();
  break;

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? . layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
case 58:
  cs = slot58();
  break;

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] . {BlockStatement}* layout[\"Layout\"] \"}\"
case 60:
  cs = slot60();
  break;

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* . layout[\"Layout\"] \"}\"
case 61:
  cs = slot61();
  break;

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] . \"}\"
case 62:
  cs = slot62();
  break;

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\" .
case 63:
  cs = slot63();
  break;

// ExplicitConstructorInvocation?
case 56:
  cs = slot56();
  break;

// ExplicitConstructorInvocation? ::= . ExplicitConstructorInvocation
case 768:
  cs = slot768();
  break;

// ExplicitConstructorInvocation? ::= ExplicitConstructorInvocation .
case 769:
  cs = slot769();
  break;

// ExplicitConstructorInvocation? ::= .
case 770:
  cs = slot770();
  break;

// {BlockStatement}*
case 59:
  cs = slot59();
  break;

// {BlockStatement}* ::= .
case 1128:
  cs = slot1128();
  break;

// {BlockStatement}* ::= . {BlockStatement layout[\"Layout\"]}+
case 1129:
  cs = slot1129();
  break;

// {BlockStatement}* ::= {BlockStatement layout[\"Layout\"]}+ .
case 1130:
  cs = slot1130();
  break;

// BlockStatement
case 64:
  cs = slot64();
  break;

// BlockStatement ::= . LocalVariableDeclarationStatement
case 66:
  cs = slot66();
  break;

// BlockStatement ::= LocalVariableDeclarationStatement .
case 67:
  cs = slot67();
  break;

// BlockStatement ::= . ClassDeclaration
case 69:
  cs = slot69();
  break;

// BlockStatement ::= ClassDeclaration .
case 70:
  cs = slot70();
  break;

// BlockStatement ::= . Statement
case 72:
  cs = slot72();
  break;

// BlockStatement ::= Statement .
case 73:
  cs = slot73();
  break;

// LocalVariableDeclarationStatement
case 65:
  cs = slot65();
  break;

// LocalVariableDeclarationStatement ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 855:
  cs = slot855();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 856:
  cs = slot856();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 857:
  cs = slot857();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 858:
  cs = slot858();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"
case 860:
  cs = slot860();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"
case 861:
  cs = slot861();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"
case 862:
  cs = slot862();
  break;

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .
case 863:
  cs = slot863();
  break;

// ClassDeclaration
case 68:
  cs = slot68();
  break;

// ClassDeclaration ::= . NormalClassDeclaration
case 2622:
  cs = slot2622();
  break;

// ClassDeclaration ::= NormalClassDeclaration .
case 2623:
  cs = slot2623();
  break;

// ClassDeclaration ::= . EnumDeclaration
case 2624:
  cs = slot2624();
  break;

// ClassDeclaration ::= EnumDeclaration .
case 2625:
  cs = slot2625();
  break;

// Statement
case 71:
  cs = slot71();
  break;

// Statement ::= . StatementWithoutTrailingSubstatement
case 2360:
  cs = slot2360();
  break;

// Statement ::= StatementWithoutTrailingSubstatement .
case 2361:
  cs = slot2361();
  break;

// Statement ::= . ForStatement
case 2362:
  cs = slot2362();
  break;

// Statement ::= ForStatement .
case 2363:
  cs = slot2363();
  break;

// Statement ::= . Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] Statement
case 2364:
  cs = slot2364();
  break;

// Statement ::= Identifier . layout[\"Layout\"] \":\" layout[\"Layout\"] Statement
case 2365:
  cs = slot2365();
  break;

// Statement ::= Identifier layout[\"Layout\"] . \":\" layout[\"Layout\"] Statement
case 2366:
  slot2366();

// Statement ::= Identifier layout[\"Layout\"] \":\" . layout[\"Layout\"] Statement
case 2367:
  cs = slot2367();
  break;

// Statement ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] . Statement
case 2368:
  cs = slot2368();
  break;

// Statement ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] Statement .
case 2369:
  cs = slot2369();
  break;

// Statement ::= . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2370:
  slot2370();

// Statement ::= \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2371:
  cs = slot2371();
  break;

// Statement ::= \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2372:
  slot2372();

// Statement ::= \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2373:
  cs = slot2373();
  break;

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2374:
  cs = slot2374();
  break;

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2375:
  cs = slot2375();
  break;

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
case 2376:
  slot2376();

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
case 2377:
  cs = slot2377();
  break;

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
case 2378:
  cs = slot2378();
  break;

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
case 2379:
  cs = slot2379();
  break;

// Statement ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2380:
  slot2380();

// Statement ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2381:
  cs = slot2381();
  break;

// Statement ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2382:
  slot2382();

// Statement ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2383:
  cs = slot2383();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2384:
  cs = slot2384();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 2385:
  cs = slot2385();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
case 2386:
  slot2386();

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
case 2387:
  cs = slot2387();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
case 2388:
  cs = slot2388();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
case 2389:
  cs = slot2389();
  break;

// Statement ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2390:
  slot2390();

// Statement ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2391:
  cs = slot2391();
  break;

// Statement ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2392:
  slot2392();

// Statement ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2393:
  cs = slot2393();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2394:
  cs = slot2394();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2395:
  cs = slot2395();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2396:
  slot2396();

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2397:
  cs = slot2397();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2398:
  cs = slot2398();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf . layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
case 2399:
  cs = slot2399();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] . \"else\" layout[\"Layout\"] Statement
case 2400:
  slot2400();

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" . layout[\"Layout\"] Statement
case 2401:
  cs = slot2401();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] . Statement
case 2402:
  cs = slot2402();
  break;

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement .
case 2403:
  cs = slot2403();
  break;

// ArrayAccess
case 74:
  cs = slot74();
  break;

// ArrayAccess ::= . PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 76:
  cs = slot76();
  break;

// ArrayAccess ::= PrimaryNoNewArray . layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 77:
  cs = slot77();
  break;

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 78:
  slot78();

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 79:
  cs = slot79();
  break;

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"
case 81:
  cs = slot81();
  break;

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"
case 82:
  cs = slot82();
  break;

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"
case 83:
  cs = slot83();
  break;

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .
case 84:
  cs = slot84();
  break;

// ArrayAccess ::= . ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 86:
  cs = slot86();
  break;

// ArrayAccess ::= ExpressionName . layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 87:
  cs = slot87();
  break;

// ArrayAccess ::= ExpressionName layout[\"Layout\"] . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 88:
  slot88();

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 89:
  cs = slot89();
  break;

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"
case 90:
  cs = slot90();
  break;

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"
case 91:
  cs = slot91();
  break;

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"
case 92:
  cs = slot92();
  break;

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .
case 93:
  cs = slot93();
  break;

// PrimaryNoNewArray
case 75:
  cs = slot75();
  break;

// PrimaryNoNewArray ::= . Type layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
case 1814:
  cs = slot1814();
  break;

// PrimaryNoNewArray ::= Type . layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
case 1815:
  cs = slot1815();
  break;

// PrimaryNoNewArray ::= Type layout[\"Layout\"] . \".\" layout[\"Layout\"] \"class\"
case 1816:
  slot1816();

// PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" . layout[\"Layout\"] \"class\"
case 1817:
  cs = slot1817();
  break;

// PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" layout[\"Layout\"] . \"class\"
case 1818:
  cs = slot1818();
  break;

// PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\" .
case 1819:
  cs = slot1819();
  break;

// PrimaryNoNewArray ::= . ArrayAccess
case 1820:
  cs = slot1820();
  break;

// PrimaryNoNewArray ::= ArrayAccess .
case 1821:
  cs = slot1821();
  break;

// PrimaryNoNewArray ::= . MethodInvocation
case 1822:
  cs = slot1822();
  break;

// PrimaryNoNewArray ::= MethodInvocation .
case 1823:
  cs = slot1823();
  break;

// PrimaryNoNewArray ::= . ClassInstanceCreationExpression
case 1824:
  cs = slot1824();
  break;

// PrimaryNoNewArray ::= ClassInstanceCreationExpression .
case 1825:
  cs = slot1825();
  break;

// PrimaryNoNewArray ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\"
case 1826:
  cs = slot1826();
  break;

// PrimaryNoNewArray ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\"
case 1827:
  cs = slot1827();
  break;

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"this\"
case 1828:
  slot1828();

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"this\"
case 1829:
  cs = slot1829();
  break;

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"this\"
case 1830:
  cs = slot1830();
  break;

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\" .
case 1831:
  cs = slot1831();
  break;

// PrimaryNoNewArray ::= . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\"
case 1832:
  slot1832();

// PrimaryNoNewArray ::= \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\"
case 1833:
  cs = slot1833();
  break;

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\"
case 1834:
  cs = slot1834();
  break;

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\"
case 1835:
  cs = slot1835();
  break;

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\"
case 1836:
  cs = slot1836();
  break;

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" .
case 1837:
  cs = slot1837();
  break;

// PrimaryNoNewArray ::= . FieldAccess
case 1838:
  cs = slot1838();
  break;

// PrimaryNoNewArray ::= FieldAccess .
case 1839:
  cs = slot1839();
  break;

// PrimaryNoNewArray ::= . \"this\"
case 1840:
  cs = slot1840();
  break;

// PrimaryNoNewArray ::= \"this\" .
case 1841:
  cs = slot1841();
  break;

// PrimaryNoNewArray ::= . \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
case 1842:
  slot1842();

// PrimaryNoNewArray ::= \"void\" . layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
case 1843:
  cs = slot1843();
  break;

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] . \".\" layout[\"Layout\"] \"class\"
case 1844:
  slot1844();

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" . layout[\"Layout\"] \"class\"
case 1845:
  cs = slot1845();
  break;

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] . \"class\"
case 1846:
  cs = slot1846();
  break;

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\" .
case 1847:
  cs = slot1847();
  break;

// PrimaryNoNewArray ::= . Literal
case 1848:
  cs = slot1848();
  break;

// PrimaryNoNewArray ::= Literal .
case 1849:
  cs = slot1849();
  break;

// Expression
case 80:
  cs = slot80();
  break;

// Expression ::= . AssignmentExpression
case 1595:
  cs = slot1595();
  break;

// Expression ::= AssignmentExpression .
case 1596:
  cs = slot1596();
  break;

// ExpressionName
case 85:
  cs = slot85();
  break;

// ExpressionName ::= . QualifiedIdentifier
case 100:
  cs = slot100();
  break;

// ExpressionName ::= QualifiedIdentifier .
case 101:
  cs = slot101();
  break;

// (\":\" layout[\"Layout\"] Expression)
case 94:
  cs = slot94();
  break;

// (\":\" layout[\"Layout\"] Expression) ::= . \":\" layout[\"Layout\"] Expression
case 95:
  slot95();

// (\":\" layout[\"Layout\"] Expression) ::= \":\" . layout[\"Layout\"] Expression
case 96:
  cs = slot96();
  break;

// (\":\" layout[\"Layout\"] Expression) ::= \":\" layout[\"Layout\"] . Expression
case 97:
  cs = slot97();
  break;

// (\":\" layout[\"Layout\"] Expression) ::= \":\" layout[\"Layout\"] Expression .
case 98:
  cs = slot98();
  break;

// QualifiedIdentifier
case 99:
  cs = slot99();
  break;

// QualifiedIdentifier ::= . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+
case 1524:
  cs = slot1524();
  break;

// QualifiedIdentifier ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ .
case 1525:
  cs = slot1525();
  break;

// BinaryExponent
case 102:
  cs = slot102();
  break;

// BinaryExponent ::= . BinaryExponentIndicator SignedInteger
case 104:
  cs = slot104();
  break;

// BinaryExponent ::= BinaryExponentIndicator . SignedInteger
case 106:
  cs = slot106();
  break;

// BinaryExponent ::= BinaryExponentIndicator SignedInteger .
case 107:
  cs = slot107();
  break;

// BinaryExponentIndicator
case 103:
  cs = slot103();
  break;

// BinaryExponentIndicator ::= . [pP]
case 2679:
  cs = slot2679();
  break;

// BinaryExponentIndicator ::= [pP] .
case 2680:
  cs = slot2680();
  break;

// SignedInteger
case 105:
  cs = slot105();
  break;

// SignedInteger ::= . Sign? Digits
case 2316:
  cs = slot2316();
  break;

// SignedInteger ::= Sign? . Digits
case 2317:
  cs = slot2317();
  break;

// SignedInteger ::= Sign? Digits .
case 2318:
  cs = slot2318();
  break;

// {ClassModifier}*
case 108:
  cs = slot108();
  break;

// {ClassModifier}* ::= . {ClassModifier layout[\"Layout\"]}+
case 110:
  cs = slot110();
  break;

// {ClassModifier}* ::= {ClassModifier layout[\"Layout\"]}+ .
case 111:
  cs = slot111();
  break;

// {ClassModifier}* ::= .
case 112:
  cs = slot112();
  break;

// {ClassModifier layout[\"Layout\"]}+
case 109:
  cs = slot109();
  break;

// {ClassModifier layout[\"Layout\"]}+ ::= . {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] ClassModifier
case 203:
  cs = slot203();
  break;

// {ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ClassModifier
case 204:
  cs = slot204();
  break;

// {ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ClassModifier
case 206:
  cs = slot206();
  break;

// {ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] ClassModifier .
case 207:
  cs = slot207();
  break;

// {ClassModifier layout[\"Layout\"]}+ ::= . ClassModifier
case 208:
  cs = slot208();
  break;

// {ClassModifier layout[\"Layout\"]}+ ::= ClassModifier .
case 209:
  cs = slot209();
  break;

// Digits?
case 113:
  cs = slot113();
  break;

// Digits? ::= .
case 114:
  cs = slot114();
  break;

// Digits? ::= . Digits
case 116:
  cs = slot116();
  break;

// Digits? ::= Digits .
case 117:
  cs = slot117();
  break;

// Digits
case 115:
  cs = slot115();
  break;

// Digits ::= . Digit
case 1625:
  cs = slot1625();
  break;

// Digits ::= Digit .
case 1626:
  cs = slot1626();
  break;

// Digits ::= . Digit DigitOrUnderscore* Digit
case 1627:
  cs = slot1627();
  break;

// Digits ::= Digit . DigitOrUnderscore* Digit
case 1628:
  cs = slot1628();
  break;

// Digits ::= Digit DigitOrUnderscore* . Digit
case 1629:
  cs = slot1629();
  break;

// Digits ::= Digit DigitOrUnderscore* Digit .
case 1630:
  cs = slot1630();
  break;

// ExponentPart
case 118:
  cs = slot118();
  break;

// ExponentPart ::= . ExponentIndicator SignedInteger
case 120:
  cs = slot120();
  break;

// ExponentPart ::= ExponentIndicator . SignedInteger
case 121:
  cs = slot121();
  break;

// ExponentPart ::= ExponentIndicator SignedInteger .
case 122:
  cs = slot122();
  break;

// ExponentIndicator
case 119:
  cs = slot119();
  break;

// ExponentIndicator ::= . [eE]
case 2089:
  cs = slot2089();
  break;

// ExponentIndicator ::= [eE] .
case 2090:
  cs = slot2090();
  break;

// DigitOrUnderscore*
case 123:
  cs = slot123();
  break;

// DigitOrUnderscore* ::= . DigitOrUnderscore* DigitOrUnderscore
case 124:
  cs = slot124();
  break;

// DigitOrUnderscore* ::= DigitOrUnderscore* . DigitOrUnderscore
case 126:
  cs = slot126();
  break;

// DigitOrUnderscore* ::= DigitOrUnderscore* DigitOrUnderscore .
case 127:
  cs = slot127();
  break;

// DigitOrUnderscore* ::= .
case 128:
  cs = slot128();
  break;

// DigitOrUnderscore
case 125:
  cs = slot125();
  break;

// DigitOrUnderscore ::= . Digit
case 1650:
  cs = slot1650();
  break;

// DigitOrUnderscore ::= Digit .
case 1651:
  cs = slot1651();
  break;

// DigitOrUnderscore ::= . [_]
case 1652:
  cs = slot1652();
  break;

// DigitOrUnderscore ::= [_] .
case 1653:
  cs = slot1653();
  break;

// MethodInvocation
case 129:
  cs = slot129();
  break;

// MethodInvocation ::= . MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 131:
  cs = slot131();
  break;

// MethodInvocation ::= MethodName . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 132:
  cs = slot132();
  break;

// MethodInvocation ::= MethodName layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 133:
  slot133();

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 134:
  cs = slot134();
  break;

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
case 136:
  cs = slot136();
  break;

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
case 137:
  cs = slot137();
  break;

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
case 138:
  cs = slot138();
  break;

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
case 139:
  cs = slot139();
  break;

// MethodInvocation ::= . TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 141:
  cs = slot141();
  break;

// MethodInvocation ::= TypeName . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 142:
  cs = slot142();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 143:
  slot143();

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 144:
  cs = slot144();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 146:
  cs = slot146();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 147:
  cs = slot147();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 148:
  cs = slot148();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 149:
  cs = slot149();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 150:
  slot150();

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 151:
  cs = slot151();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
case 152:
  cs = slot152();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
case 153:
  cs = slot153();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
case 154:
  cs = slot154();
  break;

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
case 155:
  cs = slot155();
  break;

// MethodInvocation ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 156:
  cs = slot156();
  break;

// MethodInvocation ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 157:
  cs = slot157();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 158:
  slot158();

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 159:
  cs = slot159();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 160:
  slot160();

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 161:
  cs = slot161();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 162:
  slot162();

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 163:
  cs = slot163();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 165:
  cs = slot165();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 166:
  cs = slot166();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 167:
  cs = slot167();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 168:
  cs = slot168();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 169:
  slot169();

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 170:
  cs = slot170();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
case 171:
  cs = slot171();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
case 172:
  cs = slot172();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
case 173:
  cs = slot173();
  break;

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
case 174:
  cs = slot174();
  break;

// MethodInvocation ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 175:
  cs = slot175();
  break;

// MethodInvocation ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 176:
  cs = slot176();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 177:
  slot177();

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 178:
  cs = slot178();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 179:
  cs = slot179();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 180:
  cs = slot180();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 181:
  cs = slot181();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 182:
  cs = slot182();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 183:
  slot183();

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 184:
  cs = slot184();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
case 185:
  cs = slot185();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
case 186:
  cs = slot186();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
case 187:
  cs = slot187();
  break;

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
case 188:
  cs = slot188();
  break;

// MethodInvocation ::= . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 189:
  slot189();

// MethodInvocation ::= \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 190:
  cs = slot190();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 191:
  slot191();

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 192:
  cs = slot192();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 193:
  cs = slot193();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 194:
  cs = slot194();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 195:
  cs = slot195();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 196:
  cs = slot196();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 197:
  slot197();

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 198:
  cs = slot198();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
case 199:
  cs = slot199();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
case 200:
  cs = slot200();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
case 201:
  cs = slot201();
  break;

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
case 202:
  cs = slot202();
  break;

// MethodName
case 130:
  cs = slot130();
  break;

// MethodName ::= . QualifiedIdentifier
case 1593:
  cs = slot1593();
  break;

// MethodName ::= QualifiedIdentifier .
case 1594:
  cs = slot1594();
  break;

// ArgumentList?
case 135:
  cs = slot135();
  break;

// ArgumentList? ::= .
case 735:
  cs = slot735();
  break;

// ArgumentList? ::= . ArgumentList
case 737:
  cs = slot737();
  break;

// ArgumentList? ::= ArgumentList .
case 738:
  cs = slot738();
  break;

// TypeName
case 140:
  cs = slot140();
  break;

// TypeName ::= . QualifiedIdentifier
case 2111:
  cs = slot2111();
  break;

// TypeName ::= QualifiedIdentifier .
case 2112:
  cs = slot2112();
  break;

// NonWildTypeArguments
case 145:
  cs = slot145();
  break;

// NonWildTypeArguments ::= . \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 1756:
  slot1756();

// NonWildTypeArguments ::= \"<\" . layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 1757:
  cs = slot1757();
  break;

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] . {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 1758:
  cs = slot1758();
  break;

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"
case 1759:
  cs = slot1759();
  break;

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"
case 1760:
  cs = slot1760();
  break;

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .
case 1761:
  cs = slot1761();
  break;

// NonWildTypeArguments?
case 164:
  cs = slot164();
  break;

// NonWildTypeArguments? ::= .
case 2547:
  cs = slot2547();
  break;

// NonWildTypeArguments? ::= . NonWildTypeArguments
case 2548:
  cs = slot2548();
  break;

// NonWildTypeArguments? ::= NonWildTypeArguments .
case 2549:
  cs = slot2549();
  break;

// ClassModifier
case 205:
  cs = slot205();
  break;

// ClassModifier ::= . Annotation
case 2681:
  cs = slot2681();
  break;

// ClassModifier ::= Annotation .
case 2682:
  cs = slot2682();
  break;

// ClassModifier ::= . \"protected\"
case 2683:
  cs = slot2683();
  break;

// ClassModifier ::= \"protected\" .
case 2684:
  cs = slot2684();
  break;

// ClassModifier ::= . \"strictfp\"
case 2685:
  cs = slot2685();
  break;

// ClassModifier ::= \"strictfp\" .
case 2686:
  cs = slot2686();
  break;

// ClassModifier ::= . \"final\"
case 2687:
  cs = slot2687();
  break;

// ClassModifier ::= \"final\" .
case 2688:
  cs = slot2688();
  break;

// ClassModifier ::= . \"private\"
case 2689:
  cs = slot2689();
  break;

// ClassModifier ::= \"private\" .
case 2690:
  cs = slot2690();
  break;

// ClassModifier ::= . \"abstract\"
case 2691:
  cs = slot2691();
  break;

// ClassModifier ::= \"abstract\" .
case 2692:
  cs = slot2692();
  break;

// ClassModifier ::= . \"static\"
case 2693:
  cs = slot2693();
  break;

// ClassModifier ::= \"static\" .
case 2694:
  cs = slot2694();
  break;

// ClassModifier ::= . \"public\"
case 2695:
  cs = slot2695();
  break;

// ClassModifier ::= \"public\" .
case 2696:
  cs = slot2696();
  break;

// ( | WhiteSpaceComment)*
case 210:
  cs = slot210();
  break;

// ( | WhiteSpaceComment)* ::= . ( | WhiteSpaceComment)* ( | WhiteSpaceComment)
case 211:
  cs = slot211();
  break;

// ( | WhiteSpaceComment)* ::= ( | WhiteSpaceComment)* . ( | WhiteSpaceComment)
case 213:
  cs = slot213();
  break;

// ( | WhiteSpaceComment)* ::= ( | WhiteSpaceComment)* ( | WhiteSpaceComment) .
case 214:
  cs = slot214();
  break;

// ( | WhiteSpaceComment)* ::= .
case 215:
  cs = slot215();
  break;

// ( | WhiteSpaceComment)
case 212:
  cs = slot212();
  break;

// ( | WhiteSpaceComment) ::= . WhiteSpace
case 1484:
  cs = slot1484();
  break;

// ( | WhiteSpaceComment) ::= WhiteSpace .
case 1485:
  cs = slot1485();
  break;

// ( | WhiteSpaceComment) ::= . Comment
case 1486:
  cs = slot1486();
  break;

// ( | WhiteSpaceComment) ::= Comment .
case 1487:
  cs = slot1487();
  break;

// IntegerLiteral
case 216:
  cs = slot216();
  break;

// IntegerLiteral ::= . BinaryIntegerLiteral
case 218:
  cs = slot218();
  break;

// IntegerLiteral ::= BinaryIntegerLiteral .
case 219:
  cs = slot219();
  break;

// IntegerLiteral ::= . DecimalIntegerLiteral
case 221:
  cs = slot221();
  break;

// IntegerLiteral ::= DecimalIntegerLiteral .
case 222:
  cs = slot222();
  break;

// IntegerLiteral ::= . HexIntegerLiteral
case 224:
  cs = slot224();
  break;

// IntegerLiteral ::= HexIntegerLiteral .
case 225:
  cs = slot225();
  break;

// IntegerLiteral ::= . OctalIntegerLiteral
case 227:
  cs = slot227();
  break;

// IntegerLiteral ::= OctalIntegerLiteral .
case 228:
  cs = slot228();
  break;

// BinaryIntegerLiteral
case 217:
  cs = slot217();
  break;

// BinaryIntegerLiteral ::= . BinaryNumeral IntegerTypeSuffix?
case 1507:
  cs = slot1507();
  break;

// BinaryIntegerLiteral ::= BinaryNumeral . IntegerTypeSuffix?
case 1508:
  cs = slot1508();
  break;

// BinaryIntegerLiteral ::= BinaryNumeral IntegerTypeSuffix? .
case 1509:
  cs = slot1509();
  break;

// DecimalIntegerLiteral
case 220:
  cs = slot220();
  break;

// DecimalIntegerLiteral ::= . DecimalNumeral IntegerTypeSuffix?
case 744:
  cs = slot744();
  break;

// DecimalIntegerLiteral ::= DecimalNumeral . IntegerTypeSuffix?
case 746:
  cs = slot746();
  break;

// DecimalIntegerLiteral ::= DecimalNumeral IntegerTypeSuffix? .
case 747:
  cs = slot747();
  break;

// HexIntegerLiteral
case 223:
  cs = slot223();
  break;

// HexIntegerLiteral ::= . HexNumeral IntegerTypeSuffix?
case 2300:
  cs = slot2300();
  break;

// HexIntegerLiteral ::= HexNumeral . IntegerTypeSuffix?
case 2301:
  cs = slot2301();
  break;

// HexIntegerLiteral ::= HexNumeral IntegerTypeSuffix? .
case 2302:
  cs = slot2302();
  break;

// OctalIntegerLiteral
case 226:
  cs = slot226();
  break;

// OctalIntegerLiteral ::= . OctalNumeral IntegerTypeSuffix?
case 1719:
  cs = slot1719();
  break;

// OctalIntegerLiteral ::= OctalNumeral . IntegerTypeSuffix?
case 1720:
  cs = slot1720();
  break;

// OctalIntegerLiteral ::= OctalNumeral IntegerTypeSuffix? .
case 1721:
  cs = slot1721();
  break;

// Annotation
case 229:
  cs = slot229();
  break;

// Annotation ::= . \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
case 230:
  slot230();

// Annotation ::= \"@\" . layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
case 231:
  cs = slot231();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] . TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
case 232:
  cs = slot232();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName . layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
case 233:
  cs = slot233();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] . (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
case 235:
  cs = slot235();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? .
case 236:
  cs = slot236();
  break;

// Annotation ::= . \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 237:
  slot237();

// Annotation ::= \"@\" . layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 238:
  cs = slot238();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] . TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 239:
  cs = slot239();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName . layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 240:
  cs = slot240();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] . \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 241:
  slot241();

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" . layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 242:
  cs = slot242();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] . {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
case 244:
  cs = slot244();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* . layout[\"Layout\"] \")\"
case 245:
  cs = slot245();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] . \")\"
case 246:
  cs = slot246();
  break;

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\" .
case 247:
  cs = slot247();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
case 234:
  cs = slot234();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= . (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")
case 740:
  cs = slot740();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") .
case 741:
  cs = slot741();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= .
case 742:
  cs = slot742();
  break;

// {ElementValuePair \",\"}*
case 243:
  cs = slot243();
  break;

// {ElementValuePair \",\"}* ::= . {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 323:
  cs = slot323();
  break;

// {ElementValuePair \",\"}* ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 324:
  cs = slot324();
  break;

// {ElementValuePair \",\"}* ::= .
case 325:
  cs = slot325();
  break;

// DecimalFloatingPointLiteral
case 248:
  cs = slot248();
  break;

// DecimalFloatingPointLiteral ::= . Digits FloatTypeSuffix
case 249:
  cs = slot249();
  break;

// DecimalFloatingPointLiteral ::= Digits . FloatTypeSuffix
case 251:
  cs = slot251();
  break;

// DecimalFloatingPointLiteral ::= Digits FloatTypeSuffix .
case 252:
  cs = slot252();
  break;

// DecimalFloatingPointLiteral ::= . Digits ExponentPart
case 253:
  cs = slot253();
  break;

// DecimalFloatingPointLiteral ::= Digits . ExponentPart
case 254:
  cs = slot254();
  break;

// DecimalFloatingPointLiteral ::= Digits ExponentPart .
case 255:
  cs = slot255();
  break;

// DecimalFloatingPointLiteral ::= . [.] Digits ExponentPart? FloatTypeSuffix?
case 256:
  slot256();

// DecimalFloatingPointLiteral ::= [.] . Digits ExponentPart? FloatTypeSuffix?
case 257:
  cs = slot257();
  break;

// DecimalFloatingPointLiteral ::= [.] Digits . ExponentPart? FloatTypeSuffix?
case 259:
  cs = slot259();
  break;

// DecimalFloatingPointLiteral ::= [.] Digits ExponentPart? . FloatTypeSuffix?
case 261:
  cs = slot261();
  break;

// DecimalFloatingPointLiteral ::= [.] Digits ExponentPart? FloatTypeSuffix? .
case 262:
  cs = slot262();
  break;

// DecimalFloatingPointLiteral ::= . Digits [.] Digits? ExponentPart? FloatTypeSuffix?
case 263:
  cs = slot263();
  break;

// DecimalFloatingPointLiteral ::= Digits . [.] Digits? ExponentPart? FloatTypeSuffix?
case 264:
  slot264();

// DecimalFloatingPointLiteral ::= Digits [.] . Digits? ExponentPart? FloatTypeSuffix?
case 265:
  cs = slot265();
  break;

// DecimalFloatingPointLiteral ::= Digits [.] Digits? . ExponentPart? FloatTypeSuffix?
case 266:
  cs = slot266();
  break;

// DecimalFloatingPointLiteral ::= Digits [.] Digits? ExponentPart? . FloatTypeSuffix?
case 267:
  cs = slot267();
  break;

// DecimalFloatingPointLiteral ::= Digits [.] Digits? ExponentPart? FloatTypeSuffix? .
case 268:
  cs = slot268();
  break;

// DecimalFloatingPointLiteral ::= . Digits ExponentPart FloatTypeSuffix
case 269:
  cs = slot269();
  break;

// DecimalFloatingPointLiteral ::= Digits . ExponentPart FloatTypeSuffix
case 270:
  cs = slot270();
  break;

// DecimalFloatingPointLiteral ::= Digits ExponentPart . FloatTypeSuffix
case 271:
  cs = slot271();
  break;

// DecimalFloatingPointLiteral ::= Digits ExponentPart FloatTypeSuffix .
case 272:
  cs = slot272();
  break;

// FloatTypeSuffix
case 250:
  cs = slot250();
  break;

// FloatTypeSuffix ::= . [fFdD]
case 945:
  cs = slot945();
  break;

// FloatTypeSuffix ::= [fFdD] .
case 946:
  cs = slot946();
  break;

// ExponentPart?
case 258:
  cs = slot258();
  break;

// ExponentPart? ::= .
case 775:
  cs = slot775();
  break;

// ExponentPart? ::= . ExponentPart
case 776:
  cs = slot776();
  break;

// ExponentPart? ::= ExponentPart .
case 777:
  cs = slot777();
  break;

// FloatTypeSuffix?
case 260:
  cs = slot260();
  break;

// FloatTypeSuffix? ::= .
case 815:
  cs = slot815();
  break;

// FloatTypeSuffix? ::= . FloatTypeSuffix
case 816:
  cs = slot816();
  break;

// FloatTypeSuffix? ::= FloatTypeSuffix .
case 817:
  cs = slot817();
  break;

// Block
case 273:
  cs = slot273();
  break;

// Block ::= . \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
case 274:
  slot274();

// Block ::= \"{\" . layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
case 275:
  cs = slot275();
  break;

// Block ::= \"{\" layout[\"Layout\"] . {BlockStatement}* layout[\"Layout\"] \"}\"
case 276:
  cs = slot276();
  break;

// Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* . layout[\"Layout\"] \"}\"
case 277:
  cs = slot277();
  break;

// Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] . \"}\"
case 278:
  cs = slot278();
  break;

// Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\" .
case 279:
  cs = slot279();
  break;

// ExceptionType
case 280:
  cs = slot280();
  break;

// ExceptionType ::= . TypeName
case 281:
  cs = slot281();
  break;

// ExceptionType ::= TypeName .
case 282:
  cs = slot282();
  break;

// TypeParameters
case 283:
  cs = slot283();
  break;

// TypeParameters ::= . \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 284:
  slot284();

// TypeParameters ::= \"<\" . layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 285:
  cs = slot285();
  break;

// TypeParameters ::= \"<\" layout[\"Layout\"] . {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 287:
  cs = slot287();
  break;

// TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"
case 288:
  cs = slot288();
  break;

// TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"
case 289:
  cs = slot289();
  break;

// TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .
case 290:
  cs = slot290();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 286:
  cs = slot286();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter
case 411:
  cs = slot411();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter
case 412:
  cs = slot412();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] TypeParameter
case 413:
  slot413();

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] TypeParameter
case 414:
  cs = slot414();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . TypeParameter
case 416:
  cs = slot416();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter .
case 417:
  cs = slot417();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . TypeParameter
case 418:
  cs = slot418();
  break;

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= TypeParameter .
case 419:
  cs = slot419();
  break;

// {SwitchLabel layout[\"Layout\"]}+
case 291:
  cs = slot291();
  break;

// {SwitchLabel layout[\"Layout\"]}+ ::= . {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] SwitchLabel
case 292:
  cs = slot292();
  break;

// {SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ . layout[\"Layout\"] SwitchLabel
case 293:
  cs = slot293();
  break;

// {SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] . SwitchLabel
case 295:
  cs = slot295();
  break;

// {SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] SwitchLabel .
case 296:
  cs = slot296();
  break;

// {SwitchLabel layout[\"Layout\"]}+ ::= . SwitchLabel
case 297:
  cs = slot297();
  break;

// {SwitchLabel layout[\"Layout\"]}+ ::= SwitchLabel .
case 298:
  cs = slot298();
  break;

// SwitchLabel
case 294:
  cs = slot294();
  break;

// SwitchLabel ::= . \"default\" layout[\"Layout\"] \":\"
case 1454:
  slot1454();

// SwitchLabel ::= \"default\" . layout[\"Layout\"] \":\"
case 1455:
  cs = slot1455();
  break;

// SwitchLabel ::= \"default\" layout[\"Layout\"] . \":\"
case 1456:
  cs = slot1456();
  break;

// SwitchLabel ::= \"default\" layout[\"Layout\"] \":\" .
case 1457:
  cs = slot1457();
  break;

// SwitchLabel ::= . \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\"
case 1458:
  slot1458();

// SwitchLabel ::= \"case\" . layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\"
case 1459:
  cs = slot1459();
  break;

// SwitchLabel ::= \"case\" layout[\"Layout\"] . ConstantExpression layout[\"Layout\"] \":\"
case 1461:
  cs = slot1461();
  break;

// SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression . layout[\"Layout\"] \":\"
case 1462:
  cs = slot1462();
  break;

// SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] . \":\"
case 1463:
  cs = slot1463();
  break;

// SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\" .
case 1464:
  cs = slot1464();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 299:
  cs = slot299();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ElementValue
case 300:
  cs = slot300();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ElementValue .
case 301:
  cs = slot301();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue
case 302:
  cs = slot302();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue
case 303:
  cs = slot303();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ElementValue
case 304:
  slot304();

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ElementValue
case 305:
  cs = slot305();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ElementValue
case 306:
  cs = slot306();
  break;

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue .
case 307:
  cs = slot307();
  break;

// StringCharacter
case 308:
  cs = slot308();
  break;

// StringCharacter ::= . InputCharacter
case 310:
  cs = slot310();
  break;

// StringCharacter ::= InputCharacter .
case 311:
  cs = slot311();
  break;

// StringCharacter ::= . EscapeSequence
case 313:
  cs = slot313();
  break;

// StringCharacter ::= EscapeSequence .
case 314:
  cs = slot314();
  break;

// InputCharacter
case 309:
  cs = slot309();
  break;

// InputCharacter ::= . UnicodeInputCharacter
case 2629:
  cs = slot2629();
  break;

// InputCharacter ::= UnicodeInputCharacter .
case 2630:
  cs = slot2630();
  break;

// InputCharacter ::= . [\\a00]
case 2631:
  cs = slot2631();
  break;

// InputCharacter ::= [\\a00] .
case 2632:
  cs = slot2632();
  break;

// EscapeSequence
case 312:
  cs = slot312();
  break;

// EscapeSequence ::= . OctalEscape
case 1286:
  cs = slot1286();
  break;

// EscapeSequence ::= OctalEscape .
case 1287:
  cs = slot1287();
  break;

// EscapeSequence ::= . [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC]
case 1288:
  slot1288();

// EscapeSequence ::= [\\\\] . [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC]
case 1289:
  cs = slot1289();
  break;

// EscapeSequence ::= [\\\\] [u]+ . \"005\" [cC] [\\\\] [u]+ \"005\" [cC]
case 1290:
  slot1290();

// EscapeSequence ::= [\\\\] [u]+ \"005\" . [cC] [\\\\] [u]+ \"005\" [cC]
case 1291:
  slot1291();

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] . [\\\\] [u]+ \"005\" [cC]
case 1292:
  slot1292();

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] . [u]+ \"005\" [cC]
case 1293:
  cs = slot1293();
  break;

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ . \"005\" [cC]
case 1294:
  slot1294();

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" . [cC]
case 1295:
  cs = slot1295();
  break;

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC] .
case 1296:
  cs = slot1296();
  break;

// EscapeSequence ::= . Backslash [\\\"]
case 1298:
  cs = slot1298();
  break;

// EscapeSequence ::= Backslash . [\\\"]
case 1299:
  cs = slot1299();
  break;

// EscapeSequence ::= Backslash [\\\"] .
case 1300:
  cs = slot1300();
  break;

// EscapeSequence ::= . Backslash [\\']
case 1301:
  cs = slot1301();
  break;

// EscapeSequence ::= Backslash . [\\']
case 1302:
  cs = slot1302();
  break;

// EscapeSequence ::= Backslash [\\'] .
case 1303:
  cs = slot1303();
  break;

// EscapeSequence ::= . Backslash [t]
case 1304:
  cs = slot1304();
  break;

// EscapeSequence ::= Backslash . [t]
case 1305:
  cs = slot1305();
  break;

// EscapeSequence ::= Backslash [t] .
case 1306:
  cs = slot1306();
  break;

// EscapeSequence ::= . Backslash [f]
case 1307:
  cs = slot1307();
  break;

// EscapeSequence ::= Backslash . [f]
case 1308:
  cs = slot1308();
  break;

// EscapeSequence ::= Backslash [f] .
case 1309:
  cs = slot1309();
  break;

// EscapeSequence ::= . Backslash [b]
case 1310:
  cs = slot1310();
  break;

// EscapeSequence ::= Backslash . [b]
case 1311:
  cs = slot1311();
  break;

// EscapeSequence ::= Backslash [b] .
case 1312:
  cs = slot1312();
  break;

// EscapeSequence ::= . Backslash [r]
case 1313:
  cs = slot1313();
  break;

// EscapeSequence ::= Backslash . [r]
case 1314:
  cs = slot1314();
  break;

// EscapeSequence ::= Backslash [r] .
case 1315:
  cs = slot1315();
  break;

// EscapeSequence ::= . Backslash [n]
case 1316:
  cs = slot1316();
  break;

// EscapeSequence ::= Backslash . [n]
case 1317:
  cs = slot1317();
  break;

// EscapeSequence ::= Backslash [n] .
case 1318:
  cs = slot1318();
  break;

// QualifiedIdentifierList
case 315:
  cs = slot315();
  break;

// QualifiedIdentifierList ::= . {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 317:
  cs = slot317();
  break;

// QualifiedIdentifierList ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 318:
  cs = slot318();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 316:
  cs = slot316();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier
case 2700:
  cs = slot2700();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier
case 2701:
  cs = slot2701();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] QualifiedIdentifier
case 2702:
  slot2702();

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] QualifiedIdentifier
case 2703:
  cs = slot2703();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . QualifiedIdentifier
case 2704:
  cs = slot2704();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier .
case 2705:
  cs = slot2705();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . QualifiedIdentifier
case 2706:
  cs = slot2706();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= QualifiedIdentifier .
case 2707:
  cs = slot2707();
  break;

// WhiteSpace
case 319:
  cs = slot319();
  break;

// WhiteSpace ::= . [\\ \\t\\a0c\\r\\n\\a1a]
case 320:
  cs = slot320();
  break;

// WhiteSpace ::= [\\ \\t\\a0c\\r\\n\\a1a] .
case 321:
  cs = slot321();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 322:
  cs = slot322();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair
case 1136:
  cs = slot1136();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair
case 1137:
  cs = slot1137();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ElementValuePair
case 1138:
  slot1138();

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ElementValuePair
case 1139:
  cs = slot1139();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ElementValuePair
case 1141:
  cs = slot1141();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair .
case 1142:
  cs = slot1142();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ElementValuePair
case 1143:
  cs = slot1143();
  break;

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ElementValuePair .
case 1144:
  cs = slot1144();
  break;

// {ConstantModifier layout[\"Layout\"]}+
case 326:
  cs = slot326();
  break;

// {ConstantModifier layout[\"Layout\"]}+ ::= . ConstantModifier
case 328:
  cs = slot328();
  break;

// {ConstantModifier layout[\"Layout\"]}+ ::= ConstantModifier .
case 329:
  cs = slot329();
  break;

// {ConstantModifier layout[\"Layout\"]}+ ::= . {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstantModifier
case 330:
  cs = slot330();
  break;

// {ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ConstantModifier
case 331:
  cs = slot331();
  break;

// {ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ConstantModifier
case 332:
  cs = slot332();
  break;

// {ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstantModifier .
case 333:
  cs = slot333();
  break;

// ConstantModifier
case 327:
  cs = slot327();
  break;

// ConstantModifier ::= . \"final\"
case 2601:
  cs = slot2601();
  break;

// ConstantModifier ::= \"final\" .
case 2602:
  cs = slot2602();
  break;

// ConstantModifier ::= . Annotation
case 2603:
  cs = slot2603();
  break;

// ConstantModifier ::= Annotation .
case 2604:
  cs = slot2604();
  break;

// ConstantModifier ::= . \"public\"
case 2605:
  cs = slot2605();
  break;

// ConstantModifier ::= \"public\" .
case 2606:
  cs = slot2606();
  break;

// ConstantModifier ::= . \"static\"
case 2607:
  cs = slot2607();
  break;

// ConstantModifier ::= \"static\" .
case 2608:
  cs = slot2608();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+
case 334:
  cs = slot334();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= . {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] Resource
case 335:
  cs = slot335();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ . layout[\"Layout\"] \";\" layout[\"Layout\"] Resource
case 336:
  cs = slot336();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] . \";\" layout[\"Layout\"] Resource
case 337:
  slot337();

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" . layout[\"Layout\"] Resource
case 338:
  cs = slot338();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] . Resource
case 340:
  cs = slot340();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] Resource .
case 341:
  cs = slot341();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= . Resource
case 342:
  cs = slot342();
  break;

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= Resource .
case 343:
  cs = slot343();
  break;

// Resource
case 339:
  cs = slot339();
  break;

// Resource ::= . {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
case 543:
  cs = slot543();
  break;

// Resource ::= {VariableModifier}* . layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
case 544:
  cs = slot544();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] . ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
case 545:
  cs = slot545();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType . layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
case 546:
  cs = slot546();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] . VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
case 548:
  cs = slot548();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId . layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
case 549:
  cs = slot549();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] . \"=\" layout[\"Layout\"] Expression
case 550:
  slot550();

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" . layout[\"Layout\"] Expression
case 551:
  cs = slot551();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] . Expression
case 552:
  cs = slot552();
  break;

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression .
case 553:
  cs = slot553();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
case 344:
  cs = slot344();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= . {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType
case 345:
  cs = slot345();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ . layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType
case 346:
  cs = slot346();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] . \"&\" layout[\"Layout\"] ReferenceType
case 347:
  slot347();

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" . layout[\"Layout\"] ReferenceType
case 348:
  cs = slot348();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] . ReferenceType
case 349:
  cs = slot349();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType .
case 350:
  cs = slot350();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= . ReferenceType
case 351:
  cs = slot351();
  break;

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= ReferenceType .
case 352:
  cs = slot352();
  break;

// HexDigits
case 353:
  cs = slot353();
  break;

// HexDigits ::= . HexDigit HexDigitOrUnderscore* HexDigit
case 355:
  cs = slot355();
  break;

// HexDigits ::= HexDigit . HexDigitOrUnderscore* HexDigit
case 357:
  cs = slot357();
  break;

// HexDigits ::= HexDigit HexDigitOrUnderscore* . HexDigit
case 358:
  cs = slot358();
  break;

// HexDigits ::= HexDigit HexDigitOrUnderscore* HexDigit .
case 359:
  cs = slot359();
  break;

// HexDigits ::= . HexDigit
case 360:
  cs = slot360();
  break;

// HexDigits ::= HexDigit .
case 361:
  cs = slot361();
  break;

// HexDigit
case 354:
  cs = slot354();
  break;

// HexDigit ::= . [0-9a-fA-F]
case 787:
  cs = slot787();
  break;

// HexDigit ::= [0-9a-fA-F] .
case 788:
  cs = slot788();
  break;

// HexDigitOrUnderscore*
case 356:
  cs = slot356();
  break;

// HexDigitOrUnderscore* ::= .
case 1742:
  cs = slot1742();
  break;

// HexDigitOrUnderscore* ::= . HexDigitOrUnderscore* HexDigitOrUnderscore
case 1743:
  cs = slot1743();
  break;

// HexDigitOrUnderscore* ::= HexDigitOrUnderscore* . HexDigitOrUnderscore
case 1745:
  cs = slot1745();
  break;

// HexDigitOrUnderscore* ::= HexDigitOrUnderscore* HexDigitOrUnderscore .
case 1746:
  cs = slot1746();
  break;

// {FieldModifier layout[\"Layout\"]}+
case 362:
  cs = slot362();
  break;

// {FieldModifier layout[\"Layout\"]}+ ::= . {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] FieldModifier
case 363:
  cs = slot363();
  break;

// {FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ . layout[\"Layout\"] FieldModifier
case 364:
  cs = slot364();
  break;

// {FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] . FieldModifier
case 366:
  cs = slot366();
  break;

// {FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] FieldModifier .
case 367:
  cs = slot367();
  break;

// {FieldModifier layout[\"Layout\"]}+ ::= . FieldModifier
case 368:
  cs = slot368();
  break;

// {FieldModifier layout[\"Layout\"]}+ ::= FieldModifier .
case 369:
  cs = slot369();
  break;

// FieldModifier
case 365:
  cs = slot365();
  break;

// FieldModifier ::= . \"final\"
case 2040:
  cs = slot2040();
  break;

// FieldModifier ::= \"final\" .
case 2041:
  cs = slot2041();
  break;

// FieldModifier ::= . \"transient\"
case 2042:
  cs = slot2042();
  break;

// FieldModifier ::= \"transient\" .
case 2043:
  cs = slot2043();
  break;

// FieldModifier ::= . Annotation
case 2044:
  cs = slot2044();
  break;

// FieldModifier ::= Annotation .
case 2045:
  cs = slot2045();
  break;

// FieldModifier ::= . \"protected\"
case 2046:
  cs = slot2046();
  break;

// FieldModifier ::= \"protected\" .
case 2047:
  cs = slot2047();
  break;

// FieldModifier ::= . \"volatile\"
case 2048:
  cs = slot2048();
  break;

// FieldModifier ::= \"volatile\" .
case 2049:
  cs = slot2049();
  break;

// FieldModifier ::= . \"private\"
case 2050:
  cs = slot2050();
  break;

// FieldModifier ::= \"private\" .
case 2051:
  cs = slot2051();
  break;

// FieldModifier ::= . \"static\"
case 2052:
  cs = slot2052();
  break;

// FieldModifier ::= \"static\" .
case 2053:
  cs = slot2053();
  break;

// FieldModifier ::= . \"public\"
case 2054:
  cs = slot2054();
  break;

// FieldModifier ::= \"public\" .
case 2055:
  cs = slot2055();
  break;

// ResourceSpecification
case 370:
  cs = slot370();
  break;

// ResourceSpecification ::= . \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
case 371:
  slot371();

// ResourceSpecification ::= \"(\" . layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
case 372:
  cs = slot372();
  break;

// ResourceSpecification ::= \"(\" layout[\"Layout\"] . Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
case 374:
  cs = slot374();
  break;

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources . layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
case 375:
  cs = slot375();
  break;

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] . \";\"? layout[\"Layout\"] \")\"
case 377:
  cs = slot377();
  break;

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? . layout[\"Layout\"] \")\"
case 378:
  cs = slot378();
  break;

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] . \")\"
case 379:
  cs = slot379();
  break;

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\" .
case 380:
  cs = slot380();
  break;

// Resources
case 373:
  cs = slot373();
  break;

// Resources ::= . {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+
case 2612:
  cs = slot2612();
  break;

// Resources ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ .
case 2613:
  cs = slot2613();
  break;

// \";\"?
case 376:
  cs = slot376();
  break;

// \";\"? ::= .
case 789:
  cs = slot789();
  break;

// \";\"? ::= . \";\"
case 790:
  cs = slot790();
  break;

// \";\"? ::= \";\" .
case 791:
  cs = slot791();
  break;

// BooleanLiteral
case 381:
  cs = slot381();
  break;

// BooleanLiteral ::= . \"false\"
case 382:
  cs = slot382();
  break;

// BooleanLiteral ::= \"false\" .
case 383:
  cs = slot383();
  break;

// BooleanLiteral ::= . \"true\"
case 384:
  cs = slot384();
  break;

// BooleanLiteral ::= \"true\" .
case 385:
  cs = slot385();
  break;

// VariableInitializer
case 386:
  cs = slot386();
  break;

// VariableInitializer ::= . Expression
case 387:
  cs = slot387();
  break;

// VariableInitializer ::= Expression .
case 388:
  cs = slot388();
  break;

// VariableInitializer ::= . ArrayInitializer
case 390:
  cs = slot390();
  break;

// VariableInitializer ::= ArrayInitializer .
case 391:
  cs = slot391();
  break;

// ArrayInitializer
case 389:
  cs = slot389();
  break;

// ArrayInitializer ::= . \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 778:
  slot778();

// ArrayInitializer ::= \"{\" . layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 779:
  cs = slot779();
  break;

// ArrayInitializer ::= \"{\" layout[\"Layout\"] . {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 781:
  cs = slot781();
  break;

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* . layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 782:
  cs = slot782();
  break;

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] . \",\"? layout[\"Layout\"] \"}\"
case 783:
  cs = slot783();
  break;

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? . layout[\"Layout\"] \"}\"
case 784:
  cs = slot784();
  break;

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] . \"}\"
case 785:
  cs = slot785();
  break;

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\" .
case 786:
  cs = slot786();
  break;

// FormalParameterList
case 392:
  cs = slot392();
  break;

// FormalParameterList ::= . {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] LastFormalParameter
case 394:
  cs = slot394();
  break;

// FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* . layout[\"Layout\"] LastFormalParameter
case 395:
  cs = slot395();
  break;

// FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] . LastFormalParameter
case 397:
  cs = slot397();
  break;

// FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] LastFormalParameter .
case 398:
  cs = slot398();
  break;

// {(FormalParameter layout[\"Layout\"] \",\")}*
case 393:
  cs = slot393();
  break;

// {(FormalParameter layout[\"Layout\"] \",\")}* ::= .
case 907:
  cs = slot907();
  break;

// {(FormalParameter layout[\"Layout\"] \",\")}* ::= . {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+
case 909:
  cs = slot909();
  break;

// {(FormalParameter layout[\"Layout\"] \",\")}* ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ .
case 910:
  cs = slot910();
  break;

// LastFormalParameter
case 396:
  cs = slot396();
  break;

// LastFormalParameter ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
case 2152:
  cs = slot2152();
  break;

// LastFormalParameter ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
case 2153:
  cs = slot2153();
  break;

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
case 2154:
  cs = slot2154();
  break;

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
case 2155:
  cs = slot2155();
  break;

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . \"...\" layout[\"Layout\"] VariableDeclaratorId
case 2156:
  slot2156();

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" . layout[\"Layout\"] VariableDeclaratorId
case 2157:
  cs = slot2157();
  break;

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] . VariableDeclaratorId
case 2158:
  cs = slot2158();
  break;

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId .
case 2159:
  cs = slot2159();
  break;

// LastFormalParameter ::= . FormalParameter
case 2160:
  cs = slot2160();
  break;

// LastFormalParameter ::= FormalParameter .
case 2161:
  cs = slot2161();
  break;

// EnumConstant
case 399:
  cs = slot399();
  break;

// EnumConstant ::= . {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
case 401:
  cs = slot401();
  break;

// EnumConstant ::= {Annotation}* . layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
case 402:
  cs = slot402();
  break;

// EnumConstant ::= {Annotation}* layout[\"Layout\"] . Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
case 403:
  cs = slot403();
  break;

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier . layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
case 404:
  cs = slot404();
  break;

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] . Arguments? layout[\"Layout\"] ClassBody?
case 406:
  cs = slot406();
  break;

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? . layout[\"Layout\"] ClassBody?
case 407:
  cs = slot407();
  break;

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] . ClassBody?
case 409:
  cs = slot409();
  break;

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody? .
case 410:
  cs = slot410();
  break;

// {Annotation}*
case 400:
  cs = slot400();
  break;

// {Annotation}* ::= .
case 2662:
  cs = slot2662();
  break;

// {Annotation}* ::= . {Annotation layout[\"Layout\"]}+
case 2663:
  cs = slot2663();
  break;

// {Annotation}* ::= {Annotation layout[\"Layout\"]}+ .
case 2664:
  cs = slot2664();
  break;

// Arguments?
case 405:
  cs = slot405();
  break;

// Arguments? ::= .
case 2496:
  cs = slot2496();
  break;

// Arguments? ::= . Arguments
case 2497:
  cs = slot2497();
  break;

// Arguments? ::= Arguments .
case 2498:
  cs = slot2498();
  break;

// ClassBody?
case 408:
  cs = slot408();
  break;

// ClassBody? ::= . ClassBody
case 421:
  cs = slot421();
  break;

// ClassBody? ::= ClassBody .
case 422:
  cs = slot422();
  break;

// ClassBody? ::= .
case 423:
  cs = slot423();
  break;

// TypeParameter
case 415:
  cs = slot415();
  break;

// TypeParameter ::= . TypeVariable layout[\"Layout\"] TypeBound?
case 2542:
  cs = slot2542();
  break;

// TypeParameter ::= TypeVariable . layout[\"Layout\"] TypeBound?
case 2543:
  cs = slot2543();
  break;

// TypeParameter ::= TypeVariable layout[\"Layout\"] . TypeBound?
case 2545:
  cs = slot2545();
  break;

// TypeParameter ::= TypeVariable layout[\"Layout\"] TypeBound? .
case 2546:
  cs = slot2546();
  break;

// ClassBody
case 420:
  cs = slot420();
  break;

// ClassBody ::= . \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"
case 2335:
  slot2335();

// ClassBody ::= \"{\" . layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"
case 2336:
  cs = slot2336();
  break;

// ClassBody ::= \"{\" layout[\"Layout\"] . {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"
case 2337:
  cs = slot2337();
  break;

// ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* . layout[\"Layout\"] \"}\"
case 2338:
  cs = slot2338();
  break;

// ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] . \"}\"
case 2339:
  cs = slot2339();
  break;

// ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\" .
case 2340:
  cs = slot2340();
  break;

// ElementValueArrayInitializer
case 424:
  cs = slot424();
  break;

// ElementValueArrayInitializer ::= . \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 425:
  slot425();

// ElementValueArrayInitializer ::= \"{\" . layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 426:
  cs = slot426();
  break;

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] . ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 428:
  cs = slot428();
  break;

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? . layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
case 429:
  cs = slot429();
  break;

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] . \",\"? layout[\"Layout\"] \"}\"
case 431:
  cs = slot431();
  break;

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? . layout[\"Layout\"] \"}\"
case 432:
  cs = slot432();
  break;

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] . \"}\"
case 433:
  cs = slot433();
  break;

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\" .
case 434:
  cs = slot434();
  break;

// ElementValues?
case 427:
  cs = slot427();
  break;

// ElementValues? ::= . ElementValues
case 1622:
  cs = slot1622();
  break;

// ElementValues? ::= ElementValues .
case 1623:
  cs = slot1623();
  break;

// ElementValues? ::= .
case 1624:
  cs = slot1624();
  break;

// \",\"?
case 430:
  cs = slot430();
  break;

// \",\"? ::= .
case 2522:
  cs = slot2522();
  break;

// \",\"? ::= . \",\"
case 2523:
  cs = slot2523();
  break;

// \",\"? ::= \",\" .
case 2524:
  cs = slot2524();
  break;

// AbstractMethodModifier
case 435:
  cs = slot435();
  break;

// AbstractMethodModifier ::= . \"abstract\"
case 436:
  cs = slot436();
  break;

// AbstractMethodModifier ::= \"abstract\" .
case 437:
  cs = slot437();
  break;

// AbstractMethodModifier ::= . Annotation
case 438:
  cs = slot438();
  break;

// AbstractMethodModifier ::= Annotation .
case 439:
  cs = slot439();
  break;

// AbstractMethodModifier ::= . \"public\"
case 440:
  cs = slot440();
  break;

// AbstractMethodModifier ::= \"public\" .
case 441:
  cs = slot441();
  break;

// TypeDeclSpecifier
case 442:
  cs = slot442();
  break;

// TypeDeclSpecifier ::= . Identifier layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
case 927:
  cs = slot927();
  break;

// TypeDeclSpecifier ::= Identifier . layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
case 928:
  cs = slot928();
  break;

// TypeDeclSpecifier ::= Identifier layout[\"Layout\"] . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
case 930:
  cs = slot930();
  break;

// TypeDeclSpecifier ::= Identifier layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* .
case 931:
  cs = slot931();
  break;

// TypeArguments?
case 445:
  cs = slot445();
  break;

// TypeArguments? ::= .
case 1809:
  cs = slot1809();
  break;

// TypeArguments? ::= . TypeArguments
case 1810:
  cs = slot1810();
  break;

// TypeArguments? ::= TypeArguments .
case 1811:
  cs = slot1811();
  break;

// ArrayType
case 448:
  cs = slot448();
  break;

// ArrayType ::= . Type layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
case 2477:
  cs = slot2477();
  break;

// ArrayType ::= Type . layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
case 2478:
  cs = slot2478();
  break;

// ArrayType ::= Type layout[\"Layout\"] . \"[\" layout[\"Layout\"] \"]\"
case 2479:
  slot2479();

// ArrayType ::= Type layout[\"Layout\"] \"[\" . layout[\"Layout\"] \"]\"
case 2480:
  cs = slot2480();
  break;

// ArrayType ::= Type layout[\"Layout\"] \"[\" layout[\"Layout\"] . \"]\"
case 2481:
  cs = slot2481();
  break;

// ArrayType ::= Type layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\" .
case 2482:
  cs = slot2482();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 451:
  cs = slot451();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator
case 452:
  cs = slot452();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator
case 453:
  cs = slot453();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] VariableDeclarator
case 454:
  slot454();

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] VariableDeclarator
case 455:
  cs = slot455();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . VariableDeclarator
case 457:
  cs = slot457();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator .
case 458:
  cs = slot458();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . VariableDeclarator
case 459:
  cs = slot459();
  break;

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= VariableDeclarator .
case 460:
  cs = slot460();
  break;

// VariableDeclarator
case 456:
  cs = slot456();
  break;

// VariableDeclarator ::= . VariableDeclaratorId layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)?
case 1446:
  cs = slot1446();
  break;

// VariableDeclarator ::= VariableDeclaratorId . layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)?
case 1447:
  cs = slot1447();
  break;

// VariableDeclarator ::= VariableDeclaratorId layout[\"Layout\"] . (\"=\" layout[\"Layout\"] VariableInitializer)?
case 1448:
  cs = slot1448();
  break;

// VariableDeclarator ::= VariableDeclaratorId layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)? .
case 1449:
  cs = slot1449();
  break;

// IdentifierChars
case 461:
  cs = slot461();
  break;

// IdentifierChars ::= . JavaLetter
case 871:
  cs = slot871();
  break;

// IdentifierChars ::= JavaLetter .
case 872:
  cs = slot872();
  break;

// IdentifierChars ::= . IdentifierChars JavaLetterOrDigit
case 873:
  cs = slot873();
  break;

// IdentifierChars ::= IdentifierChars . JavaLetterOrDigit
case 875:
  cs = slot875();
  break;

// IdentifierChars ::= IdentifierChars JavaLetterOrDigit .
case 876:
  cs = slot876();
  break;

// PostIncrementExpression
case 464:
  cs = slot464();
  break;

// PostIncrementExpression ::= . PostfixExpression layout[\"Layout\"] \"++\"
case 466:
  cs = slot466();
  break;

// PostIncrementExpression ::= PostfixExpression . layout[\"Layout\"] \"++\"
case 467:
  cs = slot467();
  break;

// PostIncrementExpression ::= PostfixExpression layout[\"Layout\"] . \"++\"
case 468:
  cs = slot468();
  break;

// PostIncrementExpression ::= PostfixExpression layout[\"Layout\"] \"++\" .
case 469:
  cs = slot469();
  break;

// PostfixExpression
case 465:
  cs = slot465();
  break;

// PostfixExpression ::= . PostIncrementExpression
case 1218:
  cs = slot1218();
  break;

// PostfixExpression ::= PostIncrementExpression .
case 1219:
  cs = slot1219();
  break;

// PostfixExpression ::= . PostDecrementExpression
case 1221:
  cs = slot1221();
  break;

// PostfixExpression ::= PostDecrementExpression .
case 1222:
  cs = slot1222();
  break;

// PostfixExpression ::= . Primary
case 1223:
  cs = slot1223();
  break;

// PostfixExpression ::= Primary .
case 1224:
  cs = slot1224();
  break;

// PostfixExpression ::= . ExpressionName
case 1225:
  cs = slot1225();
  break;

// PostfixExpression ::= ExpressionName .
case 1226:
  cs = slot1226();
  break;

// ForUpdate
case 470:
  cs = slot470();
  break;

// ForUpdate ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 472:
  cs = slot472();
  break;

// ForUpdate ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 473:
  cs = slot473();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 471:
  cs = slot471();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression
case 1105:
  cs = slot1105();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression
case 1106:
  cs = slot1106();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] StatementExpression
case 1107:
  slot1107();

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] StatementExpression
case 1108:
  cs = slot1108();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . StatementExpression
case 1110:
  cs = slot1110();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression .
case 1111:
  cs = slot1111();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . StatementExpression
case 1112:
  cs = slot1112();
  break;

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= StatementExpression .
case 1113:
  cs = slot1113();
  break;

// OctalDigits
case 474:
  cs = slot474();
  break;

// OctalDigits ::= . OctalDigit OctalDigitOrUnderscore* OctalDigit
case 475:
  cs = slot475();
  break;

// OctalDigits ::= OctalDigit . OctalDigitOrUnderscore* OctalDigit
case 477:
  cs = slot477();
  break;

// OctalDigits ::= OctalDigit OctalDigitOrUnderscore* . OctalDigit
case 478:
  cs = slot478();
  break;

// OctalDigits ::= OctalDigit OctalDigitOrUnderscore* OctalDigit .
case 479:
  cs = slot479();
  break;

// OctalDigits ::= . OctalDigit
case 480:
  cs = slot480();
  break;

// OctalDigits ::= OctalDigit .
case 481:
  cs = slot481();
  break;

// OctalDigitOrUnderscore*
case 476:
  cs = slot476();
  break;

// OctalDigitOrUnderscore* ::= .
case 2311:
  cs = slot2311();
  break;

// OctalDigitOrUnderscore* ::= . OctalDigitOrUnderscore* OctalDigitOrUnderscore
case 2312:
  cs = slot2312();
  break;

// OctalDigitOrUnderscore* ::= OctalDigitOrUnderscore* . OctalDigitOrUnderscore
case 2313:
  cs = slot2313();
  break;

// OctalDigitOrUnderscore* ::= OctalDigitOrUnderscore* OctalDigitOrUnderscore .
case 2314:
  cs = slot2314();
  break;

// DefaultValue?
case 498:
  cs = slot498();
  break;

// DefaultValue? ::= .
case 499:
  cs = slot499();
  break;

// DefaultValue? ::= . DefaultValue
case 500:
  cs = slot500();
  break;

// DefaultValue? ::= DefaultValue .
case 501:
  cs = slot501();
  break;

// ArrayCreationExpression
case 502:
  cs = slot502();
  break;

// ArrayCreationExpression ::= . \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
case 503:
  slot503();

// ArrayCreationExpression ::= \"new\" . layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
case 504:
  cs = slot504();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] . ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
case 506:
  cs = slot506();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
case 507:
  cs = slot507();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
case 509:
  cs = slot509();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ . layout[\"Layout\"] ArrayInitializer
case 510:
  cs = slot510();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] . ArrayInitializer
case 511:
  cs = slot511();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer .
case 512:
  cs = slot512();
  break;

// ArrayCreationExpression ::= . \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 513:
  slot513();

// ArrayCreationExpression ::= \"new\" . layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 514:
  cs = slot514();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] . ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 515:
  cs = slot515();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) . layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 516:
  cs = slot516();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] . {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 518:
  cs = slot518();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 519:
  cs = slot519();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}*
case 521:
  cs = slot521();
  break;

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* .
case 522:
  cs = slot522();
  break;

// ( | ReferenceTypeNonArrayTypePrimitiveType)
case 505:
  cs = slot505();
  break;

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= . ReferenceTypeNonArrayType
case 1801:
  cs = slot1801();
  break;

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= ReferenceTypeNonArrayType .
case 1802:
  cs = slot1802();
  break;

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= . PrimitiveType
case 1803:
  cs = slot1803();
  break;

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= PrimitiveType .
case 1804:
  cs = slot1804();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+
case 508:
  cs = slot508();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= . (\"[\" layout[\"Layout\"] \"]\")
case 2483:
  cs = slot2483();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= (\"[\" layout[\"Layout\"] \"]\") .
case 2484:
  cs = slot2484();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\")
case 2485:
  cs = slot2485();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ . layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\")
case 2486:
  cs = slot2486();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] . (\"[\" layout[\"Layout\"] \"]\")
case 2487:
  cs = slot2487();
  break;

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\") .
case 2488:
  cs = slot2488();
  break;

// {DimExpr layout[\"Layout\"]}+
case 517:
  cs = slot517();
  break;

// {DimExpr layout[\"Layout\"]}+ ::= . {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] DimExpr
case 754:
  cs = slot754();
  break;

// {DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ . layout[\"Layout\"] DimExpr
case 755:
  cs = slot755();
  break;

// {DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] . DimExpr
case 757:
  cs = slot757();
  break;

// {DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] DimExpr .
case 758:
  cs = slot758();
  break;

// {DimExpr layout[\"Layout\"]}+ ::= . DimExpr
case 759:
  cs = slot759();
  break;

// {DimExpr layout[\"Layout\"]}+ ::= DimExpr .
case 760:
  cs = slot760();
  break;

// {(\"[\" layout[\"Layout\"] \"]\")}*
case 520:
  cs = slot520();
  break;

// {(\"[\" layout[\"Layout\"] \"]\")}* ::= . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+
case 1762:
  cs = slot1762();
  break;

// {(\"[\" layout[\"Layout\"] \"]\")}* ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ .
case 1763:
  cs = slot1763();
  break;

// {(\"[\" layout[\"Layout\"] \"]\")}* ::= .
case 1764:
  cs = slot1764();
  break;

// OctalNumeral
case 523:
  cs = slot523();
  break;

// OctalNumeral ::= . [0] OctalDigits
case 524:
  slot524();

// OctalNumeral ::= [0] . OctalDigits
case 525:
  cs = slot525();
  break;

// OctalNumeral ::= [0] OctalDigits .
case 526:
  cs = slot526();
  break;

// OctalNumeral ::= . [0] [_]+ OctalDigits
case 527:
  slot527();

// OctalNumeral ::= [0] . [_]+ OctalDigits
case 529:
  cs = slot529();
  break;

// OctalNumeral ::= [0] [_]+ . OctalDigits
case 530:
  cs = slot530();
  break;

// OctalNumeral ::= [0] [_]+ OctalDigits .
case 531:
  cs = slot531();
  break;

// [_]+
case 528:
  cs = slot528();
  break;

// [_]+ ::= . [_]
case 2294:
  cs = slot2294();
  break;

// [_]+ ::= [_] .
case 2295:
  cs = slot2295();
  break;

// [_]+ ::= . [_]+ [_]
case 2296:
  cs = slot2296();
  break;

// [_]+ ::= [_]+ . [_]
case 2297:
  cs = slot2297();
  break;

// [_]+ ::= [_]+ [_] .
case 2298:
  cs = slot2298();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer)?
case 532:
  cs = slot532();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer)? ::= . (\"=\" layout[\"Layout\"] VariableInitializer)
case 534:
  cs = slot534();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer)? ::= (\"=\" layout[\"Layout\"] VariableInitializer) .
case 535:
  cs = slot535();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer)? ::= .
case 536:
  cs = slot536();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer)
case 533:
  cs = slot533();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= . \"=\" layout[\"Layout\"] VariableInitializer
case 1589:
  slot1589();

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" . layout[\"Layout\"] VariableInitializer
case 1590:
  cs = slot1590();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" layout[\"Layout\"] . VariableInitializer
case 1591:
  cs = slot1591();
  break;

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" layout[\"Layout\"] VariableInitializer .
case 1592:
  cs = slot1592();
  break;

// {InterfaceModifier}*
case 537:
  cs = slot537();
  break;

// {InterfaceModifier}* ::= .
case 538:
  cs = slot538();
  break;

// {InterfaceModifier}* ::= . {InterfaceModifier layout[\"Layout\"]}+
case 540:
  cs = slot540();
  break;

// {InterfaceModifier}* ::= {InterfaceModifier layout[\"Layout\"]}+ .
case 541:
  cs = slot541();
  break;

// {InterfaceModifier layout[\"Layout\"]}+
case 539:
  cs = slot539();
  break;

// {InterfaceModifier layout[\"Layout\"]}+ ::= . {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceModifier
case 1662:
  cs = slot1662();
  break;

// {InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ . layout[\"Layout\"] InterfaceModifier
case 1663:
  cs = slot1663();
  break;

// {InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] . InterfaceModifier
case 1664:
  cs = slot1664();
  break;

// {InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceModifier .
case 1665:
  cs = slot1665();
  break;

// {InterfaceModifier layout[\"Layout\"]}+ ::= . InterfaceModifier
case 1666:
  cs = slot1666();
  break;

// {InterfaceModifier layout[\"Layout\"]}+ ::= InterfaceModifier .
case 1667:
  cs = slot1667();
  break;

// {VariableModifier}*
case 542:
  cs = slot542();
  break;

// {VariableModifier}* ::= . {VariableModifier layout[\"Layout\"]}+
case 1647:
  cs = slot1647();
  break;

// {VariableModifier}* ::= {VariableModifier layout[\"Layout\"]}+ .
case 1648:
  cs = slot1648();
  break;

// {VariableModifier}* ::= .
case 1649:
  cs = slot1649();
  break;

// VariableDeclaratorId
case 547:
  cs = slot547();
  break;

// VariableDeclaratorId ::= . Identifier layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 2418:
  cs = slot2418();
  break;

// VariableDeclaratorId ::= Identifier . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
case 2419:
  cs = slot2419();
  break;

// VariableDeclaratorId ::= Identifier layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}*
case 2420:
  cs = slot2420();
  break;

// VariableDeclaratorId ::= Identifier layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* .
case 2421:
  cs = slot2421();
  break;

// UnicodeInputCharacter
case 554:
  cs = slot554();
  break;

// UnicodeInputCharacter ::= . RawInputCharacter
case 556:
  cs = slot556();
  break;

// UnicodeInputCharacter ::= RawInputCharacter .
case 557:
  cs = slot557();
  break;

// UnicodeInputCharacter ::= . UnicodeEscape
case 559:
  cs = slot559();
  break;

// UnicodeInputCharacter ::= UnicodeEscape .
case 560:
  cs = slot560();
  break;

// RawInputCharacter
case 555:
  cs = slot555();
  break;

// RawInputCharacter ::= . [\\a01-[]-􏿿]
case 2669:
  cs = slot2669();
  break;

// RawInputCharacter ::= [\\a01-[]-􏿿] .
case 2670:
  cs = slot2670();
  break;

// RawInputCharacter ::= . [\\\\] [\\\\]
case 2671:
  slot2671();

// RawInputCharacter ::= [\\\\] . [\\\\]
case 2672:
  cs = slot2672();
  break;

// RawInputCharacter ::= [\\\\] [\\\\] .
case 2673:
  cs = slot2673();
  break;

// RawInputCharacter ::= . [\\\\]
case 2674:
  cs = slot2674();
  break;

// RawInputCharacter ::= [\\\\] .
case 2675:
  cs = slot2675();
  break;

// UnicodeEscape
case 558:
  cs = slot558();
  break;

// UnicodeEscape ::= . [\\\\] [u]+ HexDigit HexDigit HexDigit HexDigit
case 2712:
  slot2712();

// UnicodeEscape ::= [\\\\] . [u]+ HexDigit HexDigit HexDigit HexDigit
case 2713:
  cs = slot2713();
  break;

// UnicodeEscape ::= [\\\\] [u]+ . HexDigit HexDigit HexDigit HexDigit
case 2714:
  cs = slot2714();
  break;

// UnicodeEscape ::= [\\\\] [u]+ HexDigit . HexDigit HexDigit HexDigit
case 2715:
  cs = slot2715();
  break;

// UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit . HexDigit HexDigit
case 2716:
  cs = slot2716();
  break;

// UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit HexDigit . HexDigit
case 2717:
  cs = slot2717();
  break;

// UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit HexDigit HexDigit .
case 2718:
  cs = slot2718();
  break;

// Keyword
case 561:
  cs = slot561();
  break;

// Keyword ::= . \"double\"
case 562:
  cs = slot562();
  break;

// Keyword ::= \"double\" .
case 563:
  cs = slot563();
  break;

// Keyword ::= . \"int\"
case 564:
  cs = slot564();
  break;

// Keyword ::= \"int\" .
case 565:
  cs = slot565();
  break;

// Keyword ::= . \"catch\"
case 566:
  cs = slot566();
  break;

// Keyword ::= \"catch\" .
case 567:
  cs = slot567();
  break;

// Keyword ::= . \"throw\"
case 568:
  cs = slot568();
  break;

// Keyword ::= \"throw\" .
case 569:
  cs = slot569();
  break;

// Keyword ::= . \"strictfp\"
case 570:
  cs = slot570();
  break;

// Keyword ::= \"strictfp\" .
case 571:
  cs = slot571();
  break;

// Keyword ::= . \"continue\"
case 572:
  cs = slot572();
  break;

// Keyword ::= \"continue\" .
case 573:
  cs = slot573();
  break;

// Keyword ::= . \"for\"
case 574:
  cs = slot574();
  break;

// Keyword ::= \"for\" .
case 575:
  cs = slot575();
  break;

// Keyword ::= . \"break\"
case 576:
  cs = slot576();
  break;

// Keyword ::= \"break\" .
case 577:
  cs = slot577();
  break;

// Keyword ::= . \"native\"
case 578:
  cs = slot578();
  break;

// Keyword ::= \"native\" .
case 579:
  cs = slot579();
  break;

// Keyword ::= . \"package\"
case 580:
  cs = slot580();
  break;

// Keyword ::= \"package\" .
case 581:
  cs = slot581();
  break;

// Keyword ::= . \"short\"
case 582:
  cs = slot582();
  break;

// Keyword ::= \"short\" .
case 583:
  cs = slot583();
  break;

// Keyword ::= . \"import\"
case 584:
  cs = slot584();
  break;

// Keyword ::= \"import\" .
case 585:
  cs = slot585();
  break;

// Keyword ::= . \"protected\"
case 586:
  cs = slot586();
  break;

// Keyword ::= \"protected\" .
case 587:
  cs = slot587();
  break;

// Keyword ::= . \"implements\"
case 588:
  cs = slot588();
  break;

// Keyword ::= \"implements\" .
case 589:
  cs = slot589();
  break;

// Keyword ::= . \"case\"
case 590:
  cs = slot590();
  break;

// Keyword ::= \"case\" .
case 591:
  cs = slot591();
  break;

// Keyword ::= . \"while\"
case 592:
  cs = slot592();
  break;

// Keyword ::= \"while\" .
case 593:
  cs = slot593();
  break;

// Keyword ::= . \"switch\"
case 594:
  cs = slot594();
  break;

// Keyword ::= \"switch\" .
case 595:
  cs = slot595();
  break;

// Keyword ::= . \"assert\"
case 596:
  cs = slot596();
  break;

// Keyword ::= \"assert\" .
case 597:
  cs = slot597();
  break;

// Keyword ::= . \"char\"
case 598:
  cs = slot598();
  break;

// Keyword ::= \"char\" .
case 599:
  cs = slot599();
  break;

// Keyword ::= . \"super\"
case 600:
  cs = slot600();
  break;

// Keyword ::= \"super\" .
case 601:
  cs = slot601();
  break;

// Keyword ::= . \"const\"
case 602:
  cs = slot602();
  break;

// Keyword ::= \"const\" .
case 603:
  cs = slot603();
  break;

// Keyword ::= . \"this\"
case 604:
  cs = slot604();
  break;

// Keyword ::= \"this\" .
case 605:
  cs = slot605();
  break;

// Keyword ::= . \"transient\"
case 606:
  cs = slot606();
  break;

// Keyword ::= \"transient\" .
case 607:
  cs = slot607();
  break;

// Keyword ::= . \"default\"
case 608:
  cs = slot608();
  break;

// Keyword ::= \"default\" .
case 609:
  cs = slot609();
  break;

// Keyword ::= . \"throws\"
case 610:
  cs = slot610();
  break;

// Keyword ::= \"throws\" .
case 611:
  cs = slot611();
  break;

// Keyword ::= . \"float\"
case 612:
  cs = slot612();
  break;

// Keyword ::= \"float\" .
case 613:
  cs = slot613();
  break;

// Keyword ::= . \"long\"
case 614:
  cs = slot614();
  break;

// Keyword ::= \"long\" .
case 615:
  cs = slot615();
  break;

// Keyword ::= . \"static\"
case 616:
  cs = slot616();
  break;

// Keyword ::= \"static\" .
case 617:
  cs = slot617();
  break;

// Keyword ::= . \"public\"
case 618:
  cs = slot618();
  break;

// Keyword ::= \"public\" .
case 619:
  cs = slot619();
  break;

// Keyword ::= . \"volatile\"
case 620:
  cs = slot620();
  break;

// Keyword ::= \"volatile\" .
case 621:
  cs = slot621();
  break;

// Keyword ::= . \"void\"
case 622:
  cs = slot622();
  break;

// Keyword ::= \"void\" .
case 623:
  cs = slot623();
  break;

// Keyword ::= . \"finally\"
case 624:
  cs = slot624();
  break;

// Keyword ::= \"finally\" .
case 625:
  cs = slot625();
  break;

// Keyword ::= . \"private\"
case 626:
  cs = slot626();
  break;

// Keyword ::= \"private\" .
case 627:
  cs = slot627();
  break;

// Keyword ::= . \"try\"
case 628:
  cs = slot628();
  break;

// Keyword ::= \"try\" .
case 629:
  cs = slot629();
  break;

// Keyword ::= . \"new\"
case 630:
  cs = slot630();
  break;

// Keyword ::= \"new\" .
case 631:
  cs = slot631();
  break;

// Keyword ::= . \"byte\"
case 632:
  cs = slot632();
  break;

// Keyword ::= \"byte\" .
case 633:
  cs = slot633();
  break;

// Keyword ::= . \"enum\"
case 634:
  cs = slot634();
  break;

// Keyword ::= \"enum\" .
case 635:
  cs = slot635();
  break;

// Keyword ::= . \"synchronized\"
case 636:
  cs = slot636();
  break;

// Keyword ::= \"synchronized\" .
case 637:
  cs = slot637();
  break;

// Keyword ::= . \"if\"
case 638:
  cs = slot638();
  break;

// Keyword ::= \"if\" .
case 639:
  cs = slot639();
  break;

// Keyword ::= . \"interface\"
case 640:
  cs = slot640();
  break;

// Keyword ::= \"interface\" .
case 641:
  cs = slot641();
  break;

// Keyword ::= . \"instanceof\"
case 642:
  cs = slot642();
  break;

// Keyword ::= \"instanceof\" .
case 643:
  cs = slot643();
  break;

// Keyword ::= . \"return\"
case 644:
  cs = slot644();
  break;

// Keyword ::= \"return\" .
case 645:
  cs = slot645();
  break;

// Keyword ::= . \"else\"
case 646:
  cs = slot646();
  break;

// Keyword ::= \"else\" .
case 647:
  cs = slot647();
  break;

// Keyword ::= . \"final\"
case 648:
  cs = slot648();
  break;

// Keyword ::= \"final\" .
case 649:
  cs = slot649();
  break;

// Keyword ::= . \"class\"
case 650:
  cs = slot650();
  break;

// Keyword ::= \"class\" .
case 651:
  cs = slot651();
  break;

// Keyword ::= . \"goto\"
case 652:
  cs = slot652();
  break;

// Keyword ::= \"goto\" .
case 653:
  cs = slot653();
  break;

// Keyword ::= . \"extends\"
case 654:
  cs = slot654();
  break;

// Keyword ::= \"extends\" .
case 655:
  cs = slot655();
  break;

// Keyword ::= . \"do\"
case 656:
  cs = slot656();
  break;

// Keyword ::= \"do\" .
case 657:
  cs = slot657();
  break;

// Keyword ::= . \"abstract\"
case 658:
  cs = slot658();
  break;

// Keyword ::= \"abstract\" .
case 659:
  cs = slot659();
  break;

// Keyword ::= . \"boolean\"
case 660:
  cs = slot660();
  break;

// Keyword ::= \"boolean\" .
case 661:
  cs = slot661();
  break;

// Comment
case 662:
  cs = slot662();
  break;

// Comment ::= . TraditionalComment
case 664:
  cs = slot664();
  break;

// Comment ::= TraditionalComment .
case 665:
  cs = slot665();
  break;

// Comment ::= . EndOfLineComment
case 667:
  cs = slot667();
  break;

// Comment ::= EndOfLineComment .
case 668:
  cs = slot668();
  break;

// TraditionalComment
case 663:
  cs = slot663();
  break;

// TraditionalComment ::= . \"/*\" CommentTail
case 1866:
  slot1866();

// TraditionalComment ::= \"/*\" . CommentTail
case 1867:
  cs = slot1867();
  break;

// TraditionalComment ::= \"/*\" CommentTail .
case 1868:
  cs = slot1868();
  break;

// EndOfLineComment
case 666:
  cs = slot666();
  break;

// EndOfLineComment ::= . \"//\" InputCharacter*
case 1654:
  slot1654();

// EndOfLineComment ::= \"//\" . InputCharacter*
case 1655:
  cs = slot1655();
  break;

// EndOfLineComment ::= \"//\" InputCharacter* .
case 1656:
  cs = slot1656();
  break;

// HexadecimalFloatingPointLiteral
case 669:
  cs = slot669();
  break;

// HexadecimalFloatingPointLiteral ::= . HexSignificand BinaryExponent FloatTypeSuffix?
case 671:
  cs = slot671();
  break;

// HexadecimalFloatingPointLiteral ::= HexSignificand . BinaryExponent FloatTypeSuffix?
case 672:
  cs = slot672();
  break;

// HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent . FloatTypeSuffix?
case 673:
  cs = slot673();
  break;

// HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent FloatTypeSuffix? .
case 674:
  cs = slot674();
  break;

// HexSignificand
case 670:
  cs = slot670();
  break;

// HexSignificand ::= . HexNumeral [.]
case 2550:
  cs = slot2550();
  break;

// HexSignificand ::= HexNumeral . [.]
case 2551:
  cs = slot2551();
  break;

// HexSignificand ::= HexNumeral [.] .
case 2552:
  cs = slot2552();
  break;

// HexSignificand ::= . [0] [X] HexDigits? [.] HexDigits
case 2553:
  slot2553();

// HexSignificand ::= [0] . [X] HexDigits? [.] HexDigits
case 2554:
  slot2554();

// HexSignificand ::= [0] [X] . HexDigits? [.] HexDigits
case 2555:
  cs = slot2555();
  break;

// HexSignificand ::= [0] [X] HexDigits? . [.] HexDigits
case 2556:
  slot2556();

// HexSignificand ::= [0] [X] HexDigits? [.] . HexDigits
case 2557:
  cs = slot2557();
  break;

// HexSignificand ::= [0] [X] HexDigits? [.] HexDigits .
case 2558:
  cs = slot2558();
  break;

// HexSignificand ::= . [0] [x] HexDigits? [.] HexDigits
case 2559:
  slot2559();

// HexSignificand ::= [0] . [x] HexDigits? [.] HexDigits
case 2560:
  slot2560();

// HexSignificand ::= [0] [x] . HexDigits? [.] HexDigits
case 2561:
  cs = slot2561();
  break;

// HexSignificand ::= [0] [x] HexDigits? . [.] HexDigits
case 2562:
  slot2562();

// HexSignificand ::= [0] [x] HexDigits? [.] . HexDigits
case 2563:
  cs = slot2563();
  break;

// HexSignificand ::= [0] [x] HexDigits? [.] HexDigits .
case 2564:
  cs = slot2564();
  break;

// HexSignificand ::= . HexNumeral
case 2565:
  cs = slot2565();
  break;

// HexSignificand ::= HexNumeral .
case 2566:
  cs = slot2566();
  break;

// StatementNoShortIf
case 675:
  cs = slot675();
  break;

// StatementNoShortIf ::= . StatementWithoutTrailingSubstatement
case 677:
  cs = slot677();
  break;

// StatementNoShortIf ::= StatementWithoutTrailingSubstatement .
case 678:
  cs = slot678();
  break;

// StatementNoShortIf ::= . Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf
case 679:
  cs = slot679();
  break;

// StatementNoShortIf ::= Identifier . layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf
case 680:
  cs = slot680();
  break;

// StatementNoShortIf ::= Identifier layout[\"Layout\"] . \":\" layout[\"Layout\"] StatementNoShortIf
case 681:
  slot681();

// StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" . layout[\"Layout\"] StatementNoShortIf
case 682:
  cs = slot682();
  break;

// StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] . StatementNoShortIf
case 683:
  cs = slot683();
  break;

// StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf .
case 684:
  cs = slot684();
  break;

// StatementNoShortIf ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 685:
  slot685();

// StatementNoShortIf ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 686:
  cs = slot686();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 687:
  slot687();

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 688:
  cs = slot688();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 690:
  cs = slot690();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? . layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 691:
  cs = slot691();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] . \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 692:
  slot692();

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 693:
  cs = slot693();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 695:
  cs = slot695();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 696:
  cs = slot696();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 697:
  slot697();

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" . layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 698:
  cs = slot698();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] . ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 700:
  cs = slot700();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 701:
  cs = slot701();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf
case 702:
  slot702();

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf
case 703:
  cs = slot703();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf
case 704:
  cs = slot704();
  break;

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf .
case 705:
  cs = slot705();
  break;

// StatementNoShortIf ::= . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 706:
  slot706();

// StatementNoShortIf ::= \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 707:
  cs = slot707();
  break;

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 708:
  slot708();

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 709:
  cs = slot709();
  break;

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 710:
  cs = slot710();
  break;

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
case 711:
  cs = slot711();
  break;

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf
case 712:
  slot712();

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf
case 713:
  cs = slot713();
  break;

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf
case 714:
  cs = slot714();
  break;

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf .
case 715:
  cs = slot715();
  break;

// StatementNoShortIf ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 716:
  slot716();

// StatementNoShortIf ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 717:
  cs = slot717();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 718:
  slot718();

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 719:
  cs = slot719();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 720:
  cs = slot720();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 721:
  cs = slot721();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 722:
  slot722();

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 723:
  cs = slot723();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 724:
  cs = slot724();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf . layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
case 725:
  cs = slot725();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] . \"else\" layout[\"Layout\"] StatementNoShortIf
case 726:
  slot726();

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" . layout[\"Layout\"] StatementNoShortIf
case 727:
  cs = slot727();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] . StatementNoShortIf
case 728:
  cs = slot728();
  break;

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf .
case 729:
  cs = slot729();
  break;

// StatementWithoutTrailingSubstatement
case 676:
  cs = slot676();
  break;

// StatementWithoutTrailingSubstatement ::= . \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
case 1916:
  slot1916();

// StatementWithoutTrailingSubstatement ::= \"try\" . layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
case 1917:
  cs = slot1917();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] . ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
case 1918:
  cs = slot1918();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification . layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
case 1919:
  cs = slot1919();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] . Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
case 1920:
  cs = slot1920();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block . layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
case 1921:
  cs = slot1921();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] . {CatchClause}* layout[\"Layout\"] Finally?
case 1922:
  cs = slot1922();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* . layout[\"Layout\"] Finally?
case 1923:
  cs = slot1923();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] . Finally?
case 1924:
  cs = slot1924();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally? .
case 1925:
  cs = slot1925();
  break;

// StatementWithoutTrailingSubstatement ::= . \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] \";\"
case 1926:
  slot1926();

// StatementWithoutTrailingSubstatement ::= \"throw\" . layout[\"Layout\"] Expression layout[\"Layout\"] \";\"
case 1927:
  cs = slot1927();
  break;

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] . Expression layout[\"Layout\"] \";\"
case 1928:
  cs = slot1928();
  break;

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression . layout[\"Layout\"] \";\"
case 1929:
  cs = slot1929();
  break;

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] . \";\"
case 1930:
  cs = slot1930();
  break;

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] \";\" .
case 1931:
  cs = slot1931();
  break;

// StatementWithoutTrailingSubstatement ::= . \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1932:
  slot1932();

// StatementWithoutTrailingSubstatement ::= \"switch\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1933:
  cs = slot1933();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1934:
  slot1934();

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1935:
  cs = slot1935();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1936:
  cs = slot1936();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1937:
  cs = slot1937();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1938:
  slot1938();

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1939:
  cs = slot1939();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1940:
  slot1940();

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" . layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1941:
  cs = slot1941();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] . {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1943:
  cs = slot1943();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* . layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1944:
  cs = slot1944();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] . {SwitchLabel}* layout[\"Layout\"] \"}\"
case 1945:
  cs = slot1945();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* . layout[\"Layout\"] \"}\"
case 1946:
  cs = slot1946();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] . \"}\"
case 1947:
  cs = slot1947();
  break;

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\" .
case 1948:
  cs = slot1948();
  break;

// StatementWithoutTrailingSubstatement ::= . \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\"
case 1949:
  slot1949();

// StatementWithoutTrailingSubstatement ::= \"return\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\"
case 1950:
  cs = slot1950();
  break;

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\"
case 1951:
  cs = slot1951();
  break;

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\"
case 1952:
  cs = slot1952();
  break;

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\"
case 1953:
  cs = slot1953();
  break;

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" .
case 1954:
  cs = slot1954();
  break;

// StatementWithoutTrailingSubstatement ::= . \";\"
case 1955:
  cs = slot1955();
  break;

// StatementWithoutTrailingSubstatement ::= \";\" .
case 1956:
  cs = slot1956();
  break;

// StatementWithoutTrailingSubstatement ::= . \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1957:
  slot1957();

// StatementWithoutTrailingSubstatement ::= \"do\" . layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1958:
  cs = slot1958();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] . Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1959:
  cs = slot1959();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement . layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1960:
  cs = slot1960();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1961:
  slot1961();

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1962:
  cs = slot1962();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1963:
  slot1963();

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1964:
  cs = slot1964();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1965:
  cs = slot1965();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 1966:
  cs = slot1966();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
case 1967:
  slot1967();

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
case 1968:
  cs = slot1968();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
case 1969:
  cs = slot1969();
  break;

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
case 1970:
  cs = slot1970();
  break;

// StatementWithoutTrailingSubstatement ::= . \"try\" layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
case 1971:
  slot1971();

// StatementWithoutTrailingSubstatement ::= \"try\" . layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
case 1972:
  cs = slot1972();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] . Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
case 1973:
  cs = slot1973();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block . layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
case 1974:
  cs = slot1974();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block layout[\"Layout\"] . ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
case 1975:
  cs = slot1975();
  break;

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) .
case 1976:
  cs = slot1976();
  break;

// StatementWithoutTrailingSubstatement ::= . \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
case 1977:
  slot1977();

// StatementWithoutTrailingSubstatement ::= \"break\" . layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
case 1978:
  cs = slot1978();
  break;

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] . Identifier? layout[\"Layout\"] \";\"
case 1979:
  cs = slot1979();
  break;

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? . layout[\"Layout\"] \";\"
case 1980:
  cs = slot1980();
  break;

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] . \";\"
case 1981:
  cs = slot1981();
  break;

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\" .
case 1982:
  cs = slot1982();
  break;

// StatementWithoutTrailingSubstatement ::= . \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 1983:
  slot1983();

// StatementWithoutTrailingSubstatement ::= \"synchronized\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 1984:
  cs = slot1984();
  break;

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 1985:
  slot1985();

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 1986:
  cs = slot1986();
  break;

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 1987:
  cs = slot1987();
  break;

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 1988:
  cs = slot1988();
  break;

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Block
case 1989:
  slot1989();

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Block
case 1990:
  cs = slot1990();
  break;

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Block
case 1991:
  cs = slot1991();
  break;

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block .
case 1992:
  cs = slot1992();
  break;

// StatementWithoutTrailingSubstatement ::= . \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
case 1993:
  slot1993();

// StatementWithoutTrailingSubstatement ::= \"assert\" . layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
case 1994:
  cs = slot1994();
  break;

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] . Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
case 1995:
  cs = slot1995();
  break;

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression . layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
case 1996:
  cs = slot1996();
  break;

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] . (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
case 1997:
  cs = slot1997();
  break;

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? . layout[\"Layout\"] \";\"
case 1998:
  cs = slot1998();
  break;

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] . \";\"
case 1999:
  cs = slot1999();
  break;

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\" .
case 2000:
  cs = slot2000();
  break;

// StatementWithoutTrailingSubstatement ::= . StatementExpression layout[\"Layout\"] \";\"
case 2001:
  cs = slot2001();
  break;

// StatementWithoutTrailingSubstatement ::= StatementExpression . layout[\"Layout\"] \";\"
case 2002:
  cs = slot2002();
  break;

// StatementWithoutTrailingSubstatement ::= StatementExpression layout[\"Layout\"] . \";\"
case 2003:
  cs = slot2003();
  break;

// StatementWithoutTrailingSubstatement ::= StatementExpression layout[\"Layout\"] \";\" .
case 2004:
  cs = slot2004();
  break;

// StatementWithoutTrailingSubstatement ::= . \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
case 2005:
  slot2005();

// StatementWithoutTrailingSubstatement ::= \"continue\" . layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
case 2006:
  cs = slot2006();
  break;

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] . Identifier? layout[\"Layout\"] \";\"
case 2007:
  cs = slot2007();
  break;

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? . layout[\"Layout\"] \";\"
case 2008:
  cs = slot2008();
  break;

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] . \";\"
case 2009:
  cs = slot2009();
  break;

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\" .
case 2010:
  cs = slot2010();
  break;

// StatementWithoutTrailingSubstatement ::= . Block
case 2011:
  cs = slot2011();
  break;

// StatementWithoutTrailingSubstatement ::= Block .
case 2012:
  cs = slot2012();
  break;

// ForInit?
case 689:
  cs = slot689();
  break;

// ForInit? ::= .
case 1186:
  cs = slot1186();
  break;

// ForInit? ::= . ForInit
case 1188:
  cs = slot1188();
  break;

// ForInit? ::= ForInit .
case 1189:
  cs = slot1189();
  break;

// Expression?
case 694:
  cs = slot694();
  break;

// Expression? ::= . Expression
case 1400:
  cs = slot1400();
  break;

// Expression? ::= Expression .
case 1401:
  cs = slot1401();
  break;

// Expression? ::= .
case 1402:
  cs = slot1402();
  break;

// ForUpdate?
case 699:
  cs = slot699();
  break;

// ForUpdate? ::= . ForUpdate
case 2499:
  cs = slot2499();
  break;

// ForUpdate? ::= ForUpdate .
case 2500:
  cs = slot2500();
  break;

// ForUpdate? ::= .
case 2501:
  cs = slot2501();
  break;

// EnumBodyDeclarations?
case 730:
  cs = slot730();
  break;

// EnumBodyDeclarations? ::= .
case 731:
  cs = slot731();
  break;

// EnumBodyDeclarations? ::= . EnumBodyDeclarations
case 733:
  cs = slot733();
  break;

// EnumBodyDeclarations? ::= EnumBodyDeclarations .
case 734:
  cs = slot734();
  break;

// EnumBodyDeclarations
case 732:
  cs = slot732();
  break;

// EnumBodyDeclarations ::= . \";\" layout[\"Layout\"] {ClassBodyDeclaration}*
case 2458:
  slot2458();

// EnumBodyDeclarations ::= \";\" . layout[\"Layout\"] {ClassBodyDeclaration}*
case 2459:
  cs = slot2459();
  break;

// EnumBodyDeclarations ::= \";\" layout[\"Layout\"] . {ClassBodyDeclaration}*
case 2460:
  cs = slot2460();
  break;

// EnumBodyDeclarations ::= \";\" layout[\"Layout\"] {ClassBodyDeclaration}* .
case 2461:
  cs = slot2461();
  break;

// ArgumentList
case 736:
  cs = slot736();
  break;

// ArgumentList ::= . {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 1227:
  cs = slot1227();
  break;

// ArgumentList ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 1228:
  cs = slot1228();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")
case 739:
  cs = slot739();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= . \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\"
case 1713:
  slot1713();

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" . layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\"
case 1714:
  cs = slot1714();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] . ElementValue layout[\"Layout\"] \")\"
case 1715:
  cs = slot1715();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue . layout[\"Layout\"] \")\"
case 1716:
  cs = slot1716();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] . \")\"
case 1717:
  cs = slot1717();
  break;

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\" .
case 1718:
  cs = slot1718();
  break;

// DecimalNumeral
case 743:
  cs = slot743();
  break;

// DecimalNumeral ::= . [0]
case 1885:
  cs = slot1885();
  break;

// DecimalNumeral ::= [0] .
case 1886:
  cs = slot1886();
  break;

// DecimalNumeral ::= . NonZeroDigit Digits?
case 1887:
  cs = slot1887();
  break;

// DecimalNumeral ::= NonZeroDigit . Digits?
case 1888:
  cs = slot1888();
  break;

// DecimalNumeral ::= NonZeroDigit Digits? .
case 1889:
  cs = slot1889();
  break;

// DecimalNumeral ::= . NonZeroDigit [_]+ Digits
case 1890:
  cs = slot1890();
  break;

// DecimalNumeral ::= NonZeroDigit . [_]+ Digits
case 1891:
  cs = slot1891();
  break;

// DecimalNumeral ::= NonZeroDigit [_]+ . Digits
case 1892:
  cs = slot1892();
  break;

// DecimalNumeral ::= NonZeroDigit [_]+ Digits .
case 1893:
  cs = slot1893();
  break;

// IntegerTypeSuffix?
case 745:
  cs = slot745();
  break;

// IntegerTypeSuffix? ::= .
case 1044:
  cs = slot1044();
  break;

// IntegerTypeSuffix? ::= . IntegerTypeSuffix
case 1046:
  cs = slot1046();
  break;

// IntegerTypeSuffix? ::= IntegerTypeSuffix .
case 1047:
  cs = slot1047();
  break;

// (\"extends\" layout[\"Layout\"] Type)
case 748:
  cs = slot748();
  break;

// (\"extends\" layout[\"Layout\"] Type) ::= . \"extends\" layout[\"Layout\"] Type
case 749:
  slot749();

// (\"extends\" layout[\"Layout\"] Type) ::= \"extends\" . layout[\"Layout\"] Type
case 750:
  cs = slot750();
  break;

// (\"extends\" layout[\"Layout\"] Type) ::= \"extends\" layout[\"Layout\"] . Type
case 752:
  cs = slot752();
  break;

// (\"extends\" layout[\"Layout\"] Type) ::= \"extends\" layout[\"Layout\"] Type .
case 753:
  cs = slot753();
  break;

// Type
case 751:
  cs = slot751();
  break;

// Type ::= . ReferenceType
case 1450:
  cs = slot1450();
  break;

// Type ::= ReferenceType .
case 1451:
  cs = slot1451();
  break;

// Type ::= . PrimitiveType
case 1452:
  cs = slot1452();
  break;

// Type ::= PrimitiveType .
case 1453:
  cs = slot1453();
  break;

// DimExpr
case 756:
  cs = slot756();
  break;

// DimExpr ::= . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 1533:
  slot1533();

// DimExpr ::= \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
case 1534:
  cs = slot1534();
  break;

// DimExpr ::= \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"
case 1535:
  cs = slot1535();
  break;

// DimExpr ::= \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"
case 1536:
  cs = slot1536();
  break;

// DimExpr ::= \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"
case 1537:
  cs = slot1537();
  break;

// DimExpr ::= \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .
case 1538:
  cs = slot1538();
  break;

// PreDecrementExpression
case 761:
  cs = slot761();
  break;

// PreDecrementExpression ::= . \"--\" layout[\"Layout\"] UnaryExpression
case 762:
  slot762();

// PreDecrementExpression ::= \"--\" . layout[\"Layout\"] UnaryExpression
case 763:
  cs = slot763();
  break;

// PreDecrementExpression ::= \"--\" layout[\"Layout\"] . UnaryExpression
case 765:
  cs = slot765();
  break;

// PreDecrementExpression ::= \"--\" layout[\"Layout\"] UnaryExpression .
case 766:
  cs = slot766();
  break;

// UnaryExpression
case 764:
  cs = slot764();
  break;

// UnaryExpression ::= . PreIncrementExpression
case 1787:
  cs = slot1787();
  break;

// UnaryExpression ::= PreIncrementExpression .
case 1788:
  cs = slot1788();
  break;

// UnaryExpression ::= . \"-\" layout[\"Layout\"] UnaryExpression
case 1789:
  slot1789();

// UnaryExpression ::= \"-\" . layout[\"Layout\"] UnaryExpression
case 1790:
  cs = slot1790();
  break;

// UnaryExpression ::= \"-\" layout[\"Layout\"] . UnaryExpression
case 1791:
  cs = slot1791();
  break;

// UnaryExpression ::= \"-\" layout[\"Layout\"] UnaryExpression .
case 1792:
  cs = slot1792();
  break;

// UnaryExpression ::= . \"+\" layout[\"Layout\"] UnaryExpression
case 1793:
  slot1793();

// UnaryExpression ::= \"+\" . layout[\"Layout\"] UnaryExpression
case 1794:
  cs = slot1794();
  break;

// UnaryExpression ::= \"+\" layout[\"Layout\"] . UnaryExpression
case 1795:
  cs = slot1795();
  break;

// UnaryExpression ::= \"+\" layout[\"Layout\"] UnaryExpression .
case 1796:
  cs = slot1796();
  break;

// UnaryExpression ::= . PreDecrementExpression
case 1797:
  cs = slot1797();
  break;

// UnaryExpression ::= PreDecrementExpression .
case 1798:
  cs = slot1798();
  break;

// UnaryExpression ::= . UnaryExpressionNotPlusMinus
case 1799:
  cs = slot1799();
  break;

// UnaryExpression ::= UnaryExpressionNotPlusMinus .
case 1800:
  cs = slot1800();
  break;

// ExplicitConstructorInvocation
case 767:
  cs = slot767();
  break;

// ExplicitConstructorInvocation ::= . NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 947:
  cs = slot947();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? . layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 948:
  cs = slot948();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] . \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 949:
  slot949();

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 950:
  cs = slot950();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 951:
  slot951();

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 952:
  cs = slot952();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 953:
  cs = slot953();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 954:
  cs = slot954();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
case 955:
  slot955();

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
case 956:
  cs = slot956();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
case 957:
  cs = slot957();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
case 958:
  cs = slot958();
  break;

// ExplicitConstructorInvocation ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 959:
  cs = slot959();
  break;

// ExplicitConstructorInvocation ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 960:
  cs = slot960();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 961:
  slot961();

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 962:
  cs = slot962();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 963:
  cs = slot963();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 964:
  cs = slot964();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 965:
  slot965();

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 966:
  cs = slot966();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 967:
  slot967();

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 968:
  cs = slot968();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 969:
  cs = slot969();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 970:
  cs = slot970();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
case 971:
  slot971();

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
case 972:
  cs = slot972();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
case 973:
  cs = slot973();
  break;

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
case 974:
  cs = slot974();
  break;

// ExplicitConstructorInvocation ::= . NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 975:
  cs = slot975();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? . layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 976:
  cs = slot976();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] . \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 977:
  slot977();

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 978:
  cs = slot978();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 979:
  slot979();

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 980:
  cs = slot980();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 981:
  cs = slot981();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
case 982:
  cs = slot982();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
case 983:
  slot983();

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
case 984:
  cs = slot984();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
case 985:
  cs = slot985();
  break;

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
case 986:
  cs = slot986();
  break;

// TypeParameters?
case 771:
  cs = slot771();
  break;

// TypeParameters? ::= .
case 772:
  cs = slot772();
  break;

// TypeParameters? ::= . TypeParameters
case 773:
  cs = slot773();
  break;

// TypeParameters? ::= TypeParameters .
case 774:
  cs = slot774();
  break;

// {VariableInitializer \",\"}*
case 780:
  cs = slot780();
  break;

// {VariableInitializer \",\"}* ::= .
case 2502:
  cs = slot2502();
  break;

// {VariableInitializer \",\"}* ::= . {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2504:
  cs = slot2504();
  break;

// {VariableInitializer \",\"}* ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 2505:
  cs = slot2505();
  break;

// \"static\"?
case 792:
  cs = slot792();
  break;

// \"static\"? ::= . \"static\"
case 793:
  cs = slot793();
  break;

// \"static\"? ::= \"static\" .
case 794:
  cs = slot794();
  break;

// \"static\"? ::= .
case 795:
  cs = slot795();
  break;

// {AbstractMethodModifier}*
case 796:
  cs = slot796();
  break;

// {AbstractMethodModifier}* ::= .
case 797:
  cs = slot797();
  break;

// {AbstractMethodModifier}* ::= . {AbstractMethodModifier layout[\"Layout\"]}+
case 799:
  cs = slot799();
  break;

// {AbstractMethodModifier}* ::= {AbstractMethodModifier layout[\"Layout\"]}+ .
case 800:
  cs = slot800();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+
case 798:
  cs = slot798();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= . AbstractMethodModifier
case 1322:
  cs = slot1322();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= AbstractMethodModifier .
case 1323:
  cs = slot1323();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= . {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] AbstractMethodModifier
case 1324:
  cs = slot1324();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ . layout[\"Layout\"] AbstractMethodModifier
case 1325:
  cs = slot1325();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] . AbstractMethodModifier
case 1326:
  cs = slot1326();
  break;

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] AbstractMethodModifier .
case 1327:
  cs = slot1327();
  break;

// Finally?
case 801:
  cs = slot801();
  break;

// Finally? ::= .
case 802:
  cs = slot802();
  break;

// Finally? ::= . Finally
case 804:
  cs = slot804();
  break;

// Finally? ::= Finally .
case 805:
  cs = slot805();
  break;

// Finally
case 803:
  cs = slot803();
  break;

// Finally ::= . \"finally\" layout[\"Layout\"] Block
case 2412:
  slot2412();

// Finally ::= \"finally\" . layout[\"Layout\"] Block
case 2413:
  cs = slot2413();
  break;

// Finally ::= \"finally\" layout[\"Layout\"] . Block
case 2414:
  cs = slot2414();
  break;

// Finally ::= \"finally\" layout[\"Layout\"] Block .
case 2415:
  cs = slot2415();
  break;

// ConstructorModifier
case 806:
  cs = slot806();
  break;

// ConstructorModifier ::= . \"private\"
case 807:
  cs = slot807();
  break;

// ConstructorModifier ::= \"private\" .
case 808:
  cs = slot808();
  break;

// ConstructorModifier ::= . \"public\"
case 809:
  cs = slot809();
  break;

// ConstructorModifier ::= \"public\" .
case 810:
  cs = slot810();
  break;

// ConstructorModifier ::= . Annotation
case 811:
  cs = slot811();
  break;

// ConstructorModifier ::= Annotation .
case 812:
  cs = slot812();
  break;

// ConstructorModifier ::= . \"protected\"
case 813:
  cs = slot813();
  break;

// ConstructorModifier ::= \"protected\" .
case 814:
  cs = slot814();
  break;

// (\"extends\" layout[\"Layout\"] Type)?
case 822:
  cs = slot822();
  break;

// (\"extends\" layout[\"Layout\"] Type)? ::= .
case 823:
  cs = slot823();
  break;

// (\"extends\" layout[\"Layout\"] Type)? ::= . (\"extends\" layout[\"Layout\"] Type)
case 824:
  cs = slot824();
  break;

// (\"extends\" layout[\"Layout\"] Type)? ::= (\"extends\" layout[\"Layout\"] Type) .
case 825:
  cs = slot825();
  break;

// ConditionalExpression
case 826:
  cs = slot826();
  break;

// ConditionalExpression ::= . ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
case 828:
  cs = slot828();
  break;

// ConditionalExpression ::= ConditionalOrExpression . layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
case 829:
  cs = slot829();
  break;

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] . \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
case 830:
  slot830();

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" . layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
case 831:
  cs = slot831();
  break;

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] . Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
case 832:
  cs = slot832();
  break;

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression . layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
case 833:
  cs = slot833();
  break;

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] . \":\" layout[\"Layout\"] ConditionalExpression
case 834:
  slot834();

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" . layout[\"Layout\"] ConditionalExpression
case 835:
  cs = slot835();
  break;

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] . ConditionalExpression
case 836:
  cs = slot836();
  break;

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression .
case 837:
  cs = slot837();
  break;

// ConditionalExpression ::= . ConditionalOrExpression
case 838:
  cs = slot838();
  break;

// ConditionalExpression ::= ConditionalOrExpression .
case 839:
  cs = slot839();
  break;

// ConditionalOrExpression
case 827:
  cs = slot827();
  break;

// ConditionalOrExpression ::= . ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression
case 2169:
  cs = slot2169();
  break;

// ConditionalOrExpression ::= ConditionalOrExpression . layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression
case 2170:
  cs = slot2170();
  break;

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] . \"||\" layout[\"Layout\"] ConditionalAndExpression
case 2171:
  slot2171();

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" . layout[\"Layout\"] ConditionalAndExpression
case 2172:
  cs = slot2172();
  break;

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] . ConditionalAndExpression
case 2173:
  cs = slot2173();
  break;

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression .
case 2174:
  cs = slot2174();
  break;

// ConditionalOrExpression ::= . ConditionalAndExpression
case 2175:
  cs = slot2175();
  break;

// ConditionalOrExpression ::= ConditionalAndExpression .
case 2176:
  cs = slot2176();
  break;

// ElementValues
case 840:
  cs = slot840();
  break;

// ElementValues ::= . {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 841:
  cs = slot841();
  break;

// ElementValues ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 842:
  cs = slot842();
  break;

// Result
case 843:
  cs = slot843();
  break;

// Result ::= . \"void\"
case 844:
  cs = slot844();
  break;

// Result ::= \"void\" .
case 845:
  cs = slot845();
  break;

// Result ::= . Type
case 846:
  cs = slot846();
  break;

// Result ::= Type .
case 847:
  cs = slot847();
  break;

// {BlockStatement layout[\"Layout\"]}+
case 848:
  cs = slot848();
  break;

// {BlockStatement layout[\"Layout\"]}+ ::= . BlockStatement
case 849:
  cs = slot849();
  break;

// {BlockStatement layout[\"Layout\"]}+ ::= BlockStatement .
case 850:
  cs = slot850();
  break;

// {BlockStatement layout[\"Layout\"]}+ ::= . {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] BlockStatement
case 851:
  cs = slot851();
  break;

// {BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ . layout[\"Layout\"] BlockStatement
case 852:
  cs = slot852();
  break;

// {BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] . BlockStatement
case 853:
  cs = slot853();
  break;

// {BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] BlockStatement .
case 854:
  cs = slot854();
  break;

// VariableDeclarators
case 859:
  cs = slot859();
  break;

// VariableDeclarators ::= . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2416:
  cs = slot2416();
  break;

// VariableDeclarators ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 2417:
  cs = slot2417();
  break;

// [u]+
case 864:
  cs = slot864();
  break;

// [u]+ ::= . [u]
case 865:
  cs = slot865();
  break;

// [u]+ ::= [u] .
case 866:
  cs = slot866();
  break;

// [u]+ ::= . [u]+ [u]
case 867:
  cs = slot867();
  break;

// [u]+ ::= [u]+ . [u]
case 868:
  cs = slot868();
  break;

// [u]+ ::= [u]+ [u] .
case 869:
  cs = slot869();
  break;

// JavaLetter
case 870:
  cs = slot870();
  break;

// JavaLetter ::= . [A-Za-z$_]
case 2074:
  cs = slot2074();
  break;

// JavaLetter ::= [A-Za-z$_] .
case 2075:
  cs = slot2075();
  break;

// JavaLetterOrDigit
case 874:
  cs = slot874();
  break;

// JavaLetterOrDigit ::= . [A-Za-z$_0-9]
case 1069:
  cs = slot1069();
  break;

// JavaLetterOrDigit ::= [A-Za-z$_0-9] .
case 1070:
  cs = slot1070();
  break;

// AdditiveExpression
case 877:
  cs = slot877();
  break;

// AdditiveExpression ::= . MultiplicativeExpression
case 879:
  cs = slot879();
  break;

// AdditiveExpression ::= MultiplicativeExpression .
case 880:
  cs = slot880();
  break;

// AdditiveExpression ::= . AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression
case 881:
  cs = slot881();
  break;

// AdditiveExpression ::= AdditiveExpression . layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression
case 882:
  cs = slot882();
  break;

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] . \"-\" layout[\"Layout\"] MultiplicativeExpression
case 883:
  slot883();

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" . layout[\"Layout\"] MultiplicativeExpression
case 884:
  cs = slot884();
  break;

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] . MultiplicativeExpression
case 885:
  cs = slot885();
  break;

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression .
case 886:
  cs = slot886();
  break;

// AdditiveExpression ::= . AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression
case 887:
  cs = slot887();
  break;

// AdditiveExpression ::= AdditiveExpression . layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression
case 888:
  cs = slot888();
  break;

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] . \"+\" layout[\"Layout\"] MultiplicativeExpression
case 889:
  slot889();

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" . layout[\"Layout\"] MultiplicativeExpression
case 890:
  cs = slot890();
  break;

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] . MultiplicativeExpression
case 891:
  cs = slot891();
  break;

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression .
case 892:
  cs = slot892();
  break;

// MultiplicativeExpression
case 878:
  cs = slot878();
  break;

// MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression
case 2091:
  cs = slot2091();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression
case 2092:
  cs = slot2092();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"%\" layout[\"Layout\"] UnaryExpression
case 2093:
  slot2093();

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" . layout[\"Layout\"] UnaryExpression
case 2094:
  cs = slot2094();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] . UnaryExpression
case 2095:
  cs = slot2095();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression .
case 2096:
  cs = slot2096();
  break;

// MultiplicativeExpression ::= . UnaryExpression
case 2097:
  cs = slot2097();
  break;

// MultiplicativeExpression ::= UnaryExpression .
case 2098:
  cs = slot2098();
  break;

// MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression
case 2099:
  cs = slot2099();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression
case 2100:
  cs = slot2100();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"*\" layout[\"Layout\"] UnaryExpression
case 2101:
  slot2101();

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" . layout[\"Layout\"] UnaryExpression
case 2102:
  cs = slot2102();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] . UnaryExpression
case 2103:
  cs = slot2103();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression .
case 2104:
  cs = slot2104();
  break;

// MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression
case 2105:
  cs = slot2105();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression
case 2106:
  cs = slot2106();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"/\" layout[\"Layout\"] UnaryExpression
case 2107:
  slot2107();

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" . layout[\"Layout\"] UnaryExpression
case 2108:
  cs = slot2108();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] . UnaryExpression
case 2109:
  cs = slot2109();
  break;

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression .
case 2110:
  cs = slot2110();
  break;

// {EnumConstant \",\"}*
case 893:
  cs = slot893();
  break;

// {EnumConstant \",\"}* ::= .
case 894:
  cs = slot894();
  break;

// {EnumConstant \",\"}* ::= . {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 896:
  cs = slot896();
  break;

// {EnumConstant \",\"}* ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 897:
  cs = slot897();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 895:
  cs = slot895();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant
case 2614:
  cs = slot2614();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant
case 2615:
  cs = slot2615();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] EnumConstant
case 2616:
  slot2616();

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] EnumConstant
case 2617:
  cs = slot2617();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . EnumConstant
case 2618:
  cs = slot2618();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant .
case 2619:
  cs = slot2619();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . EnumConstant
case 2620:
  cs = slot2620();
  break;

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= EnumConstant .
case 2621:
  cs = slot2621();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 898:
  cs = slot898();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Expression
case 899:
  cs = slot899();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] Expression
case 900:
  cs = slot900();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] Expression
case 901:
  slot901();

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] Expression
case 902:
  cs = slot902();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . Expression
case 903:
  cs = slot903();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Expression .
case 904:
  cs = slot904();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . Expression
case 905:
  cs = slot905();
  break;

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= Expression .
case 906:
  cs = slot906();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+
case 908:
  cs = slot908();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= . (FormalParameter layout[\"Layout\"] \",\")
case 1264:
  cs = slot1264();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= (FormalParameter layout[\"Layout\"] \",\") .
case 1265:
  cs = slot1265();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= . {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\")
case 1266:
  cs = slot1266();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ . layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\")
case 1267:
  cs = slot1267();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] . (FormalParameter layout[\"Layout\"] \",\")
case 1268:
  cs = slot1268();
  break;

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\") .
case 1269:
  cs = slot1269();
  break;

// {FieldModifier}*
case 911:
  cs = slot911();
  break;

// {FieldModifier}* ::= . {FieldModifier layout[\"Layout\"]}+
case 912:
  cs = slot912();
  break;

// {FieldModifier}* ::= {FieldModifier layout[\"Layout\"]}+ .
case 913:
  cs = slot913();
  break;

// {FieldModifier}* ::= .
case 914:
  cs = slot914();
  break;

// Throws
case 915:
  cs = slot915();
  break;

// Throws ::= . \"throws\" layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 916:
  slot916();

// Throws ::= \"throws\" . layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 917:
  cs = slot917();
  break;

// Throws ::= \"throws\" layout[\"Layout\"] . {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 919:
  cs = slot919();
  break;

// Throws ::= \"throws\" layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 920:
  cs = slot920();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 918:
  cs = slot918();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType
case 2719:
  cs = slot2719();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType
case 2720:
  cs = slot2720();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ExceptionType
case 2721:
  slot2721();

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ExceptionType
case 2722:
  cs = slot2722();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ExceptionType
case 2723:
  cs = slot2723();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType .
case 2724:
  cs = slot2724();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ExceptionType
case 2725:
  cs = slot2725();
  break;

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ExceptionType .
case 2726:
  cs = slot2726();
  break;

// BinaryDigitOrUnderscore
case 921:
  cs = slot921();
  break;

// BinaryDigitOrUnderscore ::= . BinaryDigit
case 923:
  cs = slot923();
  break;

// BinaryDigitOrUnderscore ::= BinaryDigit .
case 924:
  cs = slot924();
  break;

// BinaryDigitOrUnderscore ::= . [_]
case 925:
  cs = slot925();
  break;

// BinaryDigitOrUnderscore ::= [_] .
case 926:
  cs = slot926();
  break;

// BinaryDigit
case 922:
  cs = slot922();
  break;

// BinaryDigit ::= . [0-1]
case 1027:
  cs = slot1027();
  break;

// BinaryDigit ::= [0-1] .
case 1028:
  cs = slot1028();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
case 929:
  cs = slot929();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+
case 1146:
  cs = slot1146();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ .
case 1147:
  cs = slot1147();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= .
case 1148:
  cs = slot1148();
  break;

// EnumDeclaration
case 932:
  cs = slot932();
  break;

// EnumDeclaration ::= . {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 933:
  cs = slot933();
  break;

// EnumDeclaration ::= {ClassModifier}* . layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 934:
  cs = slot934();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] . \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 935:
  slot935();

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" . layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 936:
  cs = slot936();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] . Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 937:
  cs = slot937();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier . layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 938:
  cs = slot938();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] . (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
case 940:
  cs = slot940();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] EnumBody
case 941:
  cs = slot941();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . EnumBody
case 943:
  cs = slot943();
  break;

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody .
case 944:
  cs = slot944();
  break;

// (\"implements\" layout[\"Layout\"] TypeList)?
case 939:
  cs = slot939();
  break;

// (\"implements\" layout[\"Layout\"] TypeList)? ::= .
case 2432:
  cs = slot2432();
  break;

// (\"implements\" layout[\"Layout\"] TypeList)? ::= . (\"implements\" layout[\"Layout\"] TypeList)
case 2433:
  cs = slot2433();
  break;

// (\"implements\" layout[\"Layout\"] TypeList)? ::= (\"implements\" layout[\"Layout\"] TypeList) .
case 2434:
  cs = slot2434();
  break;

// EnumBody
case 942:
  cs = slot942();
  break;

// EnumBody ::= . \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 999:
  slot999();

// EnumBody ::= \"{\" . layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 1000:
  cs = slot1000();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] . {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 1001:
  cs = slot1001();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* . layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 1002:
  cs = slot1002();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] . \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 1003:
  cs = slot1003();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? . layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 1004:
  cs = slot1004();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] . EnumBodyDeclarations? layout[\"Layout\"] \"}\"
case 1005:
  cs = slot1005();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? . layout[\"Layout\"] \"}\"
case 1006:
  cs = slot1006();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] . \"}\"
case 1007:
  cs = slot1007();
  break;

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\" .
case 1008:
  cs = slot1008();
  break;

// ConstructorDeclaration
case 987:
  cs = slot987();
  break;

// ConstructorDeclaration ::= . {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
case 989:
  cs = slot989();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* . layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
case 990:
  cs = slot990();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] . ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
case 992:
  cs = slot992();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator . layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
case 993:
  cs = slot993();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] . Throws? layout[\"Layout\"] ConstructorBody
case 995:
  cs = slot995();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? . layout[\"Layout\"] ConstructorBody
case 996:
  cs = slot996();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] . ConstructorBody
case 997:
  cs = slot997();
  break;

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody .
case 998:
  cs = slot998();
  break;

// {ConstructorModifier}*
case 988:
  cs = slot988();
  break;

// {ConstructorModifier}* ::= . {ConstructorModifier layout[\"Layout\"]}+
case 1582:
  cs = slot1582();
  break;

// {ConstructorModifier}* ::= {ConstructorModifier layout[\"Layout\"]}+ .
case 1583:
  cs = slot1583();
  break;

// {ConstructorModifier}* ::= .
case 1584:
  cs = slot1584();
  break;

// ConstructorDeclarator
case 991:
  cs = slot991();
  break;

// ConstructorDeclarator ::= . TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1328:
  cs = slot1328();
  break;

// ConstructorDeclarator ::= TypeParameters? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1329:
  cs = slot1329();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1330:
  cs = slot1330();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1331:
  cs = slot1331();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1332:
  slot1332();

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1333:
  cs = slot1333();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameterList? layout[\"Layout\"] \")\"
case 1334:
  cs = slot1334();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? . layout[\"Layout\"] \")\"
case 1335:
  cs = slot1335();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] . \")\"
case 1336:
  cs = slot1336();
  break;

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\" .
case 1337:
  cs = slot1337();
  break;

// Throws?
case 994:
  cs = slot994();
  break;

// Throws? ::= . Throws
case 2332:
  cs = slot2332();
  break;

// Throws? ::= Throws .
case 2333:
  cs = slot2333();
  break;

// Throws? ::= .
case 2334:
  cs = slot2334();
  break;

// SuperSuffix
case 1009:
  cs = slot1009();
  break;

// SuperSuffix ::= . \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments?
case 1010:
  slot1010();

// SuperSuffix ::= \".\" . layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments?
case 1011:
  cs = slot1011();
  break;

// SuperSuffix ::= \".\" layout[\"Layout\"] . Identifier layout[\"Layout\"] Arguments?
case 1012:
  cs = slot1012();
  break;

// SuperSuffix ::= \".\" layout[\"Layout\"] Identifier . layout[\"Layout\"] Arguments?
case 1013:
  cs = slot1013();
  break;

// SuperSuffix ::= \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] . Arguments?
case 1014:
  cs = slot1014();
  break;

// SuperSuffix ::= \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? .
case 1015:
  cs = slot1015();
  break;

// SuperSuffix ::= . Arguments
case 1017:
  cs = slot1017();
  break;

// SuperSuffix ::= Arguments .
case 1018:
  cs = slot1018();
  break;

// Arguments
case 1016:
  cs = slot1016();
  break;

// Arguments ::= . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 1159:
  slot1159();

// Arguments ::= \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
case 1160:
  cs = slot1160();
  break;

// Arguments ::= \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
case 1161:
  cs = slot1161();
  break;

// Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
case 1162:
  cs = slot1162();
  break;

// Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
case 1163:
  cs = slot1163();
  break;

// Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
case 1164:
  cs = slot1164();
  break;

// TypeArguments
case 1019:
  cs = slot1019();
  break;

// TypeArguments ::= . \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 1020:
  slot1020();

// TypeArguments ::= \"<\" . layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 1021:
  cs = slot1021();
  break;

// TypeArguments ::= \"<\" layout[\"Layout\"] . {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
case 1023:
  cs = slot1023();
  break;

// TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"
case 1024:
  cs = slot1024();
  break;

// TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"
case 1025:
  cs = slot1025();
  break;

// TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .
case 1026:
  cs = slot1026();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 1022:
  cs = slot1022();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . TypeArgument
case 1419:
  cs = slot1419();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= TypeArgument .
case 1420:
  cs = slot1420();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument
case 1421:
  cs = slot1421();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument
case 1422:
  cs = slot1422();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] TypeArgument
case 1423:
  slot1423();

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] TypeArgument
case 1424:
  cs = slot1424();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . TypeArgument
case 1425:
  cs = slot1425();
  break;

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument .
case 1426:
  cs = slot1426();
  break;

// AnnotationTypeDeclaration
case 1029:
  cs = slot1029();
  break;

// AnnotationTypeDeclaration ::= . {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
case 1030:
  cs = slot1030();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* . layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
case 1031:
  cs = slot1031();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] . \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
case 1032:
  slot1032();

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" . layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
case 1033:
  cs = slot1033();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] . \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
case 1034:
  slot1034();

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" . layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
case 1035:
  cs = slot1035();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] . Identifier layout[\"Layout\"] AnnotationTypeBody
case 1036:
  cs = slot1036();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier . layout[\"Layout\"] AnnotationTypeBody
case 1037:
  cs = slot1037();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] . AnnotationTypeBody
case 1039:
  cs = slot1039();
  break;

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody .
case 1040:
  cs = slot1040();
  break;

// AnnotationTypeBody
case 1038:
  cs = slot1038();
  break;

// AnnotationTypeBody ::= . \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"
case 1597:
  slot1597();

// AnnotationTypeBody ::= \"{\" . layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"
case 1598:
  cs = slot1598();
  break;

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] . {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"
case 1600:
  cs = slot1600();
  break;

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* . layout[\"Layout\"] \"}\"
case 1601:
  cs = slot1601();
  break;

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] . \"}\"
case 1602:
  cs = slot1602();
  break;

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\" .
case 1603:
  cs = slot1603();
  break;

// ZeroToThree
case 1041:
  cs = slot1041();
  break;

// ZeroToThree ::= . [0-3]
case 1042:
  cs = slot1042();
  break;

// ZeroToThree ::= [0-3] .
case 1043:
  cs = slot1043();
  break;

// IntegerTypeSuffix
case 1045:
  cs = slot1045();
  break;

// IntegerTypeSuffix ::= . [L]
case 1149:
  cs = slot1149();
  break;

// IntegerTypeSuffix ::= [L] .
case 1150:
  cs = slot1150();
  break;

// IntegerTypeSuffix ::= . [l]
case 1151:
  cs = slot1151();
  break;

// IntegerTypeSuffix ::= [l] .
case 1152:
  cs = slot1152();
  break;

// ConditionalAndExpression
case 1048:
  cs = slot1048();
  break;

// ConditionalAndExpression ::= . ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression
case 1049:
  cs = slot1049();
  break;

// ConditionalAndExpression ::= ConditionalAndExpression . layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression
case 1050:
  cs = slot1050();
  break;

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] . \"&&\" layout[\"Layout\"] InclusiveOrExpression
case 1051:
  slot1051();

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" . layout[\"Layout\"] InclusiveOrExpression
case 1052:
  cs = slot1052();
  break;

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] . InclusiveOrExpression
case 1054:
  cs = slot1054();
  break;

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression .
case 1055:
  cs = slot1055();
  break;

// ConditionalAndExpression ::= . InclusiveOrExpression
case 1056:
  cs = slot1056();
  break;

// ConditionalAndExpression ::= InclusiveOrExpression .
case 1057:
  cs = slot1057();
  break;

// InclusiveOrExpression
case 1053:
  cs = slot1053();
  break;

// InclusiveOrExpression ::= . ExclusiveOrExpression
case 2303:
  cs = slot2303();
  break;

// InclusiveOrExpression ::= ExclusiveOrExpression .
case 2304:
  cs = slot2304();
  break;

// InclusiveOrExpression ::= . InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression
case 2305:
  cs = slot2305();
  break;

// InclusiveOrExpression ::= InclusiveOrExpression . layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression
case 2306:
  cs = slot2306();
  break;

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] . \"|\" layout[\"Layout\"] ExclusiveOrExpression
case 2307:
  slot2307();

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" . layout[\"Layout\"] ExclusiveOrExpression
case 2308:
  cs = slot2308();
  break;

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] . ExclusiveOrExpression
case 2309:
  cs = slot2309();
  break;

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression .
case 2310:
  cs = slot2310();
  break;

// ReferenceTypeNonArrayType
case 1058:
  cs = slot1058();
  break;

// ReferenceTypeNonArrayType ::= . TypeDeclSpecifier layout[\"Layout\"] TypeArguments?
case 1059:
  cs = slot1059();
  break;

// ReferenceTypeNonArrayType ::= TypeDeclSpecifier . layout[\"Layout\"] TypeArguments?
case 1060:
  cs = slot1060();
  break;

// ReferenceTypeNonArrayType ::= TypeDeclSpecifier layout[\"Layout\"] . TypeArguments?
case 1061:
  cs = slot1061();
  break;

// ReferenceTypeNonArrayType ::= TypeDeclSpecifier layout[\"Layout\"] TypeArguments? .
case 1062:
  cs = slot1062();
  break;

// InterfaceDeclaration
case 1063:
  cs = slot1063();
  break;

// InterfaceDeclaration ::= . NormalInterfaceDeclaration
case 1065:
  cs = slot1065();
  break;

// InterfaceDeclaration ::= NormalInterfaceDeclaration .
case 1066:
  cs = slot1066();
  break;

// InterfaceDeclaration ::= . AnnotationTypeDeclaration
case 1067:
  cs = slot1067();
  break;

// InterfaceDeclaration ::= AnnotationTypeDeclaration .
case 1068:
  cs = slot1068();
  break;

// NormalInterfaceDeclaration
case 1064:
  cs = slot1064();
  break;

// NormalInterfaceDeclaration ::= . {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2465:
  cs = slot2465();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* . layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2466:
  cs = slot2466();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] . \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2467:
  slot2467();

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2468:
  cs = slot2468();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2469:
  cs = slot2469();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2470:
  cs = slot2470();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2471:
  cs = slot2471();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2472:
  cs = slot2472();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
case 2473:
  cs = slot2473();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] InterfaceBody
case 2474:
  cs = slot2474();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . InterfaceBody
case 2475:
  cs = slot2475();
  break;

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody .
case 2476:
  cs = slot2476();
  break;

// ForStatement
case 1071:
  cs = slot1071();
  break;

// ForStatement ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1072:
  slot1072();

// ForStatement ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1073:
  cs = slot1073();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1074:
  slot1074();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1075:
  cs = slot1075();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1077:
  cs = slot1077();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter . layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1078:
  cs = slot1078();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] . \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1079:
  slot1079();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1080:
  cs = slot1080();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1081:
  cs = slot1081();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1082:
  cs = slot1082();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
case 1083:
  slot1083();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
case 1084:
  cs = slot1084();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
case 1085:
  cs = slot1085();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
case 1086:
  cs = slot1086();
  break;

// ForStatement ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1087:
  slot1087();

// ForStatement ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1088:
  cs = slot1088();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1089:
  slot1089();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1090:
  cs = slot1090();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1091:
  cs = slot1091();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? . layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1092:
  cs = slot1092();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] . \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1093:
  slot1093();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1094:
  cs = slot1094();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1095:
  cs = slot1095();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1096:
  cs = slot1096();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1097:
  slot1097();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" . layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1098:
  cs = slot1098();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] . ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1099:
  cs = slot1099();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
case 1100:
  cs = slot1100();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
case 1101:
  slot1101();

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
case 1102:
  cs = slot1102();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
case 1103:
  cs = slot1103();
  break;

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
case 1104:
  cs = slot1104();
  break;

// FormalParameter
case 1076:
  cs = slot1076();
  break;

// FormalParameter ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId
case 1707:
  cs = slot1707();
  break;

// FormalParameter ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId
case 1708:
  cs = slot1708();
  break;

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclaratorId
case 1709:
  cs = slot1709();
  break;

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclaratorId
case 1710:
  cs = slot1710();
  break;

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclaratorId
case 1711:
  cs = slot1711();
  break;

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId .
case 1712:
  cs = slot1712();
  break;

// StatementExpression
case 1109:
  cs = slot1109();
  break;

// StatementExpression ::= . PostIncrementExpression
case 1549:
  cs = slot1549();
  break;

// StatementExpression ::= PostIncrementExpression .
case 1550:
  cs = slot1550();
  break;

// StatementExpression ::= . PostDecrementExpression
case 1551:
  cs = slot1551();
  break;

// StatementExpression ::= PostDecrementExpression .
case 1552:
  cs = slot1552();
  break;

// StatementExpression ::= . Assignment
case 1553:
  cs = slot1553();
  break;

// StatementExpression ::= Assignment .
case 1554:
  cs = slot1554();
  break;

// StatementExpression ::= . ClassInstanceCreationExpression
case 1556:
  cs = slot1556();
  break;

// StatementExpression ::= ClassInstanceCreationExpression .
case 1557:
  cs = slot1557();
  break;

// StatementExpression ::= . PreIncrementExpression
case 1559:
  cs = slot1559();
  break;

// StatementExpression ::= PreIncrementExpression .
case 1560:
  cs = slot1560();
  break;

// StatementExpression ::= . PreDecrementExpression
case 1561:
  cs = slot1561();
  break;

// StatementExpression ::= PreDecrementExpression .
case 1562:
  cs = slot1562();
  break;

// StatementExpression ::= . MethodInvocation
case 1563:
  cs = slot1563();
  break;

// StatementExpression ::= MethodInvocation .
case 1564:
  cs = slot1564();
  break;

// (\".\" layout[\"Layout\"] \"*\")?
case 1114:
  cs = slot1114();
  break;

// (\".\" layout[\"Layout\"] \"*\")? ::= .
case 1115:
  cs = slot1115();
  break;

// (\".\" layout[\"Layout\"] \"*\")? ::= . (\".\" layout[\"Layout\"] \"*\")
case 1117:
  cs = slot1117();
  break;

// (\".\" layout[\"Layout\"] \"*\")? ::= (\".\" layout[\"Layout\"] \"*\") .
case 1118:
  cs = slot1118();
  break;

// (\".\" layout[\"Layout\"] \"*\")
case 1116:
  cs = slot1116();
  break;

// (\".\" layout[\"Layout\"] \"*\") ::= . \".\" layout[\"Layout\"] \"*\"
case 2665:
  slot2665();

// (\".\" layout[\"Layout\"] \"*\") ::= \".\" . layout[\"Layout\"] \"*\"
case 2666:
  cs = slot2666();
  break;

// (\".\" layout[\"Layout\"] \"*\") ::= \".\" layout[\"Layout\"] . \"*\"
case 2667:
  cs = slot2667();
  break;

// (\".\" layout[\"Layout\"] \"*\") ::= \".\" layout[\"Layout\"] \"*\" .
case 2668:
  cs = slot2668();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 1119:
  cs = slot1119();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Type
case 1120:
  cs = slot1120();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] Type
case 1121:
  cs = slot1121();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] Type
case 1122:
  slot1122();

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] Type
case 1123:
  cs = slot1123();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . Type
case 1124:
  cs = slot1124();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Type .
case 1125:
  cs = slot1125();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . Type
case 1126:
  cs = slot1126();
  break;

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= Type .
case 1127:
  cs = slot1127();
  break;

// {TypeDeclaration}*
case 1131:
  cs = slot1131();
  break;

// {TypeDeclaration}* ::= . {TypeDeclaration layout[\"Layout\"]}+
case 1133:
  cs = slot1133();
  break;

// {TypeDeclaration}* ::= {TypeDeclaration layout[\"Layout\"]}+ .
case 1134:
  cs = slot1134();
  break;

// {TypeDeclaration}* ::= .
case 1135:
  cs = slot1135();
  break;

// {TypeDeclaration layout[\"Layout\"]}+
case 1132:
  cs = slot1132();
  break;

// {TypeDeclaration layout[\"Layout\"]}+ ::= . {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] TypeDeclaration
case 1691:
  cs = slot1691();
  break;

// {TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] TypeDeclaration
case 1692:
  cs = slot1692();
  break;

// {TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . TypeDeclaration
case 1693:
  cs = slot1693();
  break;

// {TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] TypeDeclaration .
case 1694:
  cs = slot1694();
  break;

// {TypeDeclaration layout[\"Layout\"]}+ ::= . TypeDeclaration
case 1695:
  cs = slot1695();
  break;

// {TypeDeclaration layout[\"Layout\"]}+ ::= TypeDeclaration .
case 1696:
  cs = slot1696();
  break;

// ElementValuePair
case 1140:
  cs = slot1140();
  break;

// ElementValuePair ::= . Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue
case 2733:
  cs = slot2733();
  break;

// ElementValuePair ::= Identifier . layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue
case 2734:
  cs = slot2734();
  break;

// ElementValuePair ::= Identifier layout[\"Layout\"] . \"=\" layout[\"Layout\"] ElementValue
case 2735:
  slot2735();

// ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" . layout[\"Layout\"] ElementValue
case 2736:
  cs = slot2736();
  break;

// ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] . ElementValue
case 2737:
  cs = slot2737();
  break;

// ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue .
case 2738:
  cs = slot2738();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+
case 1145:
  cs = slot1145();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
case 1910:
  cs = slot1910();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ . layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
case 1911:
  cs = slot1911();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] . (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
case 1912:
  cs = slot1912();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) .
case 1913:
  cs = slot1913();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= . (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
case 1914:
  cs = slot1914();
  break;

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) .
case 1915:
  cs = slot1915();
  break;

// Digit
case 1153:
  cs = slot1153();
  break;

// Digit ::= . [0]
case 1154:
  cs = slot1154();
  break;

// Digit ::= [0] .
case 1155:
  cs = slot1155();
  break;

// Digit ::= . NonZeroDigit
case 1157:
  cs = slot1157();
  break;

// Digit ::= NonZeroDigit .
case 1158:
  cs = slot1158();
  break;

// NonZeroDigit
case 1156:
  cs = slot1156();
  break;

// NonZeroDigit ::= . [1-9]
case 1812:
  cs = slot1812();
  break;

// NonZeroDigit ::= [1-9] .
case 1813:
  cs = slot1813();
  break;

// ShiftExpression
case 1165:
  cs = slot1165();
  break;

// ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression
case 1166:
  cs = slot1166();
  break;

// ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression
case 1167:
  cs = slot1167();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \"<<\" layout[\"Layout\"] AdditiveExpression
case 1168:
  slot1168();

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" . layout[\"Layout\"] AdditiveExpression
case 1169:
  cs = slot1169();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] . AdditiveExpression
case 1170:
  cs = slot1170();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression .
case 1171:
  cs = slot1171();
  break;

// ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression
case 1172:
  cs = slot1172();
  break;

// ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression
case 1173:
  cs = slot1173();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \">>\" layout[\"Layout\"] AdditiveExpression
case 1174:
  slot1174();

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" . layout[\"Layout\"] AdditiveExpression
case 1175:
  cs = slot1175();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] . AdditiveExpression
case 1176:
  cs = slot1176();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression .
case 1177:
  cs = slot1177();
  break;

// ShiftExpression ::= . AdditiveExpression
case 1178:
  cs = slot1178();
  break;

// ShiftExpression ::= AdditiveExpression .
case 1179:
  cs = slot1179();
  break;

// ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression
case 1180:
  cs = slot1180();
  break;

// ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression
case 1181:
  cs = slot1181();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \">>>\" layout[\"Layout\"] AdditiveExpression
case 1182:
  slot1182();

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" . layout[\"Layout\"] AdditiveExpression
case 1183:
  cs = slot1183();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] . AdditiveExpression
case 1184:
  cs = slot1184();
  break;

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression .
case 1185:
  cs = slot1185();
  break;

// ForInit
case 1187:
  cs = slot1187();
  break;

// ForInit ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2187:
  cs = slot2187();
  break;

// ForInit ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 2188:
  cs = slot2188();
  break;

// ForInit ::= . LocalVariableDeclaration
case 2190:
  cs = slot2190();
  break;

// ForInit ::= LocalVariableDeclaration .
case 2191:
  cs = slot2191();
  break;

// AnnotationTypeElementDeclaration
case 1190:
  cs = slot1190();
  break;

// AnnotationTypeElementDeclaration ::= . AnnotationTypeDeclaration
case 1191:
  cs = slot1191();
  break;

// AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration .
case 1192:
  cs = slot1192();
  break;

// AnnotationTypeElementDeclaration ::= . InterfaceDeclaration
case 1193:
  cs = slot1193();
  break;

// AnnotationTypeElementDeclaration ::= InterfaceDeclaration .
case 1194:
  cs = slot1194();
  break;

// AnnotationTypeElementDeclaration ::= . ConstantDeclaration
case 1196:
  cs = slot1196();
  break;

// AnnotationTypeElementDeclaration ::= ConstantDeclaration .
case 1197:
  cs = slot1197();
  break;

// AnnotationTypeElementDeclaration ::= . \";\"
case 1198:
  cs = slot1198();
  break;

// AnnotationTypeElementDeclaration ::= \";\" .
case 1199:
  cs = slot1199();
  break;

// AnnotationTypeElementDeclaration ::= . {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1200:
  cs = slot1200();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1201:
  cs = slot1201();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1202:
  cs = slot1202();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1203:
  cs = slot1203();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1204:
  cs = slot1204();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1205:
  cs = slot1205();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1206:
  slot1206();

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1207:
  cs = slot1207();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1208:
  slot1208();

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1209:
  cs = slot1209();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1210:
  cs = slot1210();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* . layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
case 1211:
  cs = slot1211();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] . DefaultValue? layout[\"Layout\"] \";\"
case 1212:
  cs = slot1212();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? . layout[\"Layout\"] \";\"
case 1213:
  cs = slot1213();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] . \";\"
case 1214:
  cs = slot1214();
  break;

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\" .
case 1215:
  cs = slot1215();
  break;

// AnnotationTypeElementDeclaration ::= . ClassDeclaration
case 1216:
  cs = slot1216();
  break;

// AnnotationTypeElementDeclaration ::= ClassDeclaration .
case 1217:
  cs = slot1217();
  break;

// ConstantDeclaration
case 1195:
  cs = slot1195();
  break;

// ConstantDeclaration ::= . {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2404:
  cs = slot2404();
  break;

// ConstantDeclaration ::= {ConstantModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2405:
  cs = slot2405();
  break;

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2406:
  cs = slot2406();
  break;

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2407:
  cs = slot2407();
  break;

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"
case 2408:
  cs = slot2408();
  break;

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"
case 2409:
  cs = slot2409();
  break;

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"
case 2410:
  cs = slot2410();
  break;

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .
case 2411:
  cs = slot2411();
  break;

// PostDecrementExpression
case 1220:
  cs = slot1220();
  break;

// PostDecrementExpression ::= . PostfixExpression layout[\"Layout\"] \"--\"
case 2708:
  cs = slot2708();
  break;

// PostDecrementExpression ::= PostfixExpression . layout[\"Layout\"] \"--\"
case 2709:
  cs = slot2709();
  break;

// PostDecrementExpression ::= PostfixExpression layout[\"Layout\"] . \"--\"
case 2710:
  cs = slot2710();
  break;

// PostDecrementExpression ::= PostfixExpression layout[\"Layout\"] \"--\" .
case 2711:
  cs = slot2711();
  break;

// AbstractMethodDeclaration
case 1229:
  cs = slot1229();
  break;

// AbstractMethodDeclaration ::= . {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1230:
  cs = slot1230();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1231:
  cs = slot1231();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1232:
  cs = slot1232();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1233:
  cs = slot1233();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1234:
  cs = slot1234();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result . layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1235:
  cs = slot1235();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] . MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1237:
  cs = slot1237();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator . layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
case 1238:
  cs = slot1238();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] . Throws? layout[\"Layout\"] \";\"
case 1239:
  cs = slot1239();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? . layout[\"Layout\"] \";\"
case 1240:
  cs = slot1240();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] . \";\"
case 1241:
  cs = slot1241();
  break;

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\" .
case 1242:
  cs = slot1242();
  break;

// MethodDeclarator
case 1236:
  cs = slot1236();
  break;

// MethodDeclarator ::= . MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
case 1270:
  cs = slot1270();
  break;

// MethodDeclarator ::= MethodDeclarator . layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
case 1271:
  cs = slot1271();
  break;

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] . \"[\" layout[\"Layout\"] \"]\"
case 1272:
  slot1272();

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" . layout[\"Layout\"] \"]\"
case 1273:
  cs = slot1273();
  break;

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] . \"]\"
case 1274:
  cs = slot1274();
  break;

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\" .
case 1275:
  cs = slot1275();
  break;

// MethodDeclarator ::= . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1276:
  cs = slot1276();
  break;

// MethodDeclarator ::= Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1277:
  cs = slot1277();
  break;

// MethodDeclarator ::= Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1278:
  slot1278();

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
case 1279:
  cs = slot1279();
  break;

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameterList? layout[\"Layout\"] \")\"
case 1281:
  cs = slot1281();
  break;

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? . layout[\"Layout\"] \")\"
case 1282:
  cs = slot1282();
  break;

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] . \")\"
case 1283:
  cs = slot1283();
  break;

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\" .
case 1284:
  cs = slot1284();
  break;

// InterfaceModifier
case 1243:
  cs = slot1243();
  break;

// InterfaceModifier ::= . \"abstract\"
case 1244:
  cs = slot1244();
  break;

// InterfaceModifier ::= \"abstract\" .
case 1245:
  cs = slot1245();
  break;

// InterfaceModifier ::= . \"private\"
case 1246:
  cs = slot1246();
  break;

// InterfaceModifier ::= \"private\" .
case 1247:
  cs = slot1247();
  break;

// InterfaceModifier ::= . \"strictfp\"
case 1248:
  cs = slot1248();
  break;

// InterfaceModifier ::= \"strictfp\" .
case 1249:
  cs = slot1249();
  break;

// InterfaceModifier ::= . \"protected\"
case 1250:
  cs = slot1250();
  break;

// InterfaceModifier ::= \"protected\" .
case 1251:
  cs = slot1251();
  break;

// InterfaceModifier ::= . Annotation
case 1252:
  cs = slot1252();
  break;

// InterfaceModifier ::= Annotation .
case 1253:
  cs = slot1253();
  break;

// InterfaceModifier ::= . \"public\"
case 1254:
  cs = slot1254();
  break;

// InterfaceModifier ::= \"public\" .
case 1255:
  cs = slot1255();
  break;

// InterfaceModifier ::= . \"static\"
case 1256:
  cs = slot1256();
  break;

// InterfaceModifier ::= \"static\" .
case 1257:
  cs = slot1257();
  break;

// {ImportDeclaration}*
case 1258:
  cs = slot1258();
  break;

// {ImportDeclaration}* ::= . {ImportDeclaration layout[\"Layout\"]}+
case 1260:
  cs = slot1260();
  break;

// {ImportDeclaration}* ::= {ImportDeclaration layout[\"Layout\"]}+ .
case 1261:
  cs = slot1261();
  break;

// {ImportDeclaration}* ::= .
case 1262:
  cs = slot1262();
  break;

// {ImportDeclaration layout[\"Layout\"]}+
case 1259:
  cs = slot1259();
  break;

// {ImportDeclaration layout[\"Layout\"]}+ ::= . {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ImportDeclaration
case 2350:
  cs = slot2350();
  break;

// {ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] ImportDeclaration
case 2351:
  cs = slot2351();
  break;

// {ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . ImportDeclaration
case 2352:
  cs = slot2352();
  break;

// {ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ImportDeclaration .
case 2353:
  cs = slot2353();
  break;

// {ImportDeclaration layout[\"Layout\"]}+ ::= . ImportDeclaration
case 2354:
  cs = slot2354();
  break;

// {ImportDeclaration layout[\"Layout\"]}+ ::= ImportDeclaration .
case 2355:
  cs = slot2355();
  break;

// (FormalParameter layout[\"Layout\"] \",\")
case 1263:
  cs = slot1263();
  break;

// (FormalParameter layout[\"Layout\"] \",\") ::= . FormalParameter layout[\"Layout\"] \",\"
case 2641:
  cs = slot2641();
  break;

// (FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter . layout[\"Layout\"] \",\"
case 2642:
  cs = slot2642();
  break;

// (FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter layout[\"Layout\"] . \",\"
case 2643:
  cs = slot2643();
  break;

// (FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter layout[\"Layout\"] \",\" .
case 2644:
  cs = slot2644();
  break;

// FormalParameterList?
case 1280:
  cs = slot1280();
  break;

// FormalParameterList? ::= .
case 1472:
  cs = slot1472();
  break;

// FormalParameterList? ::= . FormalParameterList
case 1473:
  cs = slot1473();
  break;

// FormalParameterList? ::= FormalParameterList .
case 1474:
  cs = slot1474();
  break;

// OctalEscape
case 1285:
  cs = slot1285();
  break;

// OctalEscape ::= . [\\\\] ZeroToThree OctalDigit OctalDigit
case 1679:
  slot1679();

// OctalEscape ::= [\\\\] . ZeroToThree OctalDigit OctalDigit
case 1680:
  cs = slot1680();
  break;

// OctalEscape ::= [\\\\] ZeroToThree . OctalDigit OctalDigit
case 1681:
  cs = slot1681();
  break;

// OctalEscape ::= [\\\\] ZeroToThree OctalDigit . OctalDigit
case 1682:
  cs = slot1682();
  break;

// OctalEscape ::= [\\\\] ZeroToThree OctalDigit OctalDigit .
case 1683:
  cs = slot1683();
  break;

// OctalEscape ::= . [\\\\] OctalDigit OctalDigit
case 1684:
  slot1684();

// OctalEscape ::= [\\\\] . OctalDigit OctalDigit
case 1685:
  cs = slot1685();
  break;

// OctalEscape ::= [\\\\] OctalDigit . OctalDigit
case 1686:
  cs = slot1686();
  break;

// OctalEscape ::= [\\\\] OctalDigit OctalDigit .
case 1687:
  cs = slot1687();
  break;

// OctalEscape ::= . [\\\\] OctalDigit
case 1688:
  slot1688();

// OctalEscape ::= [\\\\] . OctalDigit
case 1689:
  cs = slot1689();
  break;

// OctalEscape ::= [\\\\] OctalDigit .
case 1690:
  cs = slot1690();
  break;

// Backslash
case 1297:
  cs = slot1297();
  break;

// Backslash ::= . [\\\\]
case 1770:
  cs = slot1770();
  break;

// Backslash ::= [\\\\] .
case 1771:
  cs = slot1771();
  break;

// Backslash ::= . [\\\\] [u]+ \"005\" [cC]
case 1772:
  slot1772();

// Backslash ::= [\\\\] . [u]+ \"005\" [cC]
case 1773:
  cs = slot1773();
  break;

// Backslash ::= [\\\\] [u]+ . \"005\" [cC]
case 1774:
  slot1774();

// Backslash ::= [\\\\] [u]+ \"005\" . [cC]
case 1775:
  cs = slot1775();
  break;

// Backslash ::= [\\\\] [u]+ \"005\" [cC] .
case 1776:
  cs = slot1776();
  break;

// TypeList
case 1319:
  cs = slot1319();
  break;

// TypeList ::= . {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 1320:
  cs = slot1320();
  break;

// TypeList ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 1321:
  cs = slot1321();
  break;

// ExclusiveOrExpression
case 1338:
  cs = slot1338();
  break;

// ExclusiveOrExpression ::= . ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression
case 1339:
  cs = slot1339();
  break;

// ExclusiveOrExpression ::= ExclusiveOrExpression . layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression
case 1340:
  cs = slot1340();
  break;

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] . \"^\" layout[\"Layout\"] AndExpression
case 1341:
  slot1341();

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" . layout[\"Layout\"] AndExpression
case 1342:
  cs = slot1342();
  break;

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] . AndExpression
case 1344:
  cs = slot1344();
  break;

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression .
case 1345:
  cs = slot1345();
  break;

// ExclusiveOrExpression ::= . AndExpression
case 1346:
  cs = slot1346();
  break;

// ExclusiveOrExpression ::= AndExpression .
case 1347:
  cs = slot1347();
  break;

// AndExpression
case 1343:
  cs = slot1343();
  break;

// AndExpression ::= . EqualityExpression
case 2514:
  cs = slot2514();
  break;

// AndExpression ::= EqualityExpression .
case 2515:
  cs = slot2515();
  break;

// AndExpression ::= . AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression
case 2516:
  cs = slot2516();
  break;

// AndExpression ::= AndExpression . layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression
case 2517:
  cs = slot2517();
  break;

// AndExpression ::= AndExpression layout[\"Layout\"] . \"&\" layout[\"Layout\"] EqualityExpression
case 2518:
  slot2518();

// AndExpression ::= AndExpression layout[\"Layout\"] \"&\" . layout[\"Layout\"] EqualityExpression
case 2519:
  cs = slot2519();
  break;

// AndExpression ::= AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] . EqualityExpression
case 2520:
  cs = slot2520();
  break;

// AndExpression ::= AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression .
case 2521:
  cs = slot2521();
  break;

// EqualityExpression
case 1348:
  cs = slot1348();
  break;

// EqualityExpression ::= . RelationalExpression
case 1350:
  cs = slot1350();
  break;

// EqualityExpression ::= RelationalExpression .
case 1351:
  cs = slot1351();
  break;

// EqualityExpression ::= . EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression
case 1352:
  cs = slot1352();
  break;

// EqualityExpression ::= EqualityExpression . layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression
case 1353:
  cs = slot1353();
  break;

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] . \"!=\" layout[\"Layout\"] RelationalExpression
case 1354:
  slot1354();

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" . layout[\"Layout\"] RelationalExpression
case 1355:
  cs = slot1355();
  break;

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] . RelationalExpression
case 1356:
  cs = slot1356();
  break;

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression .
case 1357:
  cs = slot1357();
  break;

// EqualityExpression ::= . EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression
case 1358:
  cs = slot1358();
  break;

// EqualityExpression ::= EqualityExpression . layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression
case 1359:
  cs = slot1359();
  break;

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] . \"==\" layout[\"Layout\"] RelationalExpression
case 1360:
  slot1360();

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" . layout[\"Layout\"] RelationalExpression
case 1361:
  cs = slot1361();
  break;

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] . RelationalExpression
case 1362:
  cs = slot1362();
  break;

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression .
case 1363:
  cs = slot1363();
  break;

// RelationalExpression
case 1349:
  cs = slot1349();
  break;

// RelationalExpression ::= . ShiftExpression
case 2203:
  cs = slot2203();
  break;

// RelationalExpression ::= ShiftExpression .
case 2204:
  cs = slot2204();
  break;

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression
case 2205:
  cs = slot2205();
  break;

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression
case 2206:
  cs = slot2206();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"<=\" layout[\"Layout\"] ShiftExpression
case 2207:
  slot2207();

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" . layout[\"Layout\"] ShiftExpression
case 2208:
  cs = slot2208();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] . ShiftExpression
case 2209:
  cs = slot2209();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression .
case 2210:
  cs = slot2210();
  break;

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression
case 2211:
  cs = slot2211();
  break;

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression
case 2212:
  cs = slot2212();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \">=\" layout[\"Layout\"] ShiftExpression
case 2213:
  slot2213();

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" . layout[\"Layout\"] ShiftExpression
case 2214:
  cs = slot2214();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] . ShiftExpression
case 2215:
  cs = slot2215();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression .
case 2216:
  cs = slot2216();
  break;

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType
case 2217:
  cs = slot2217();
  break;

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType
case 2218:
  cs = slot2218();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"instanceof\" layout[\"Layout\"] ReferenceType
case 2219:
  slot2219();

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" . layout[\"Layout\"] ReferenceType
case 2220:
  cs = slot2220();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] . ReferenceType
case 2221:
  cs = slot2221();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType .
case 2222:
  cs = slot2222();
  break;

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression
case 2223:
  cs = slot2223();
  break;

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression
case 2224:
  cs = slot2224();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \">\" layout[\"Layout\"] ShiftExpression
case 2225:
  slot2225();

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" . layout[\"Layout\"] ShiftExpression
case 2226:
  cs = slot2226();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] . ShiftExpression
case 2227:
  cs = slot2227();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression .
case 2228:
  cs = slot2228();
  break;

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression
case 2229:
  cs = slot2229();
  break;

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression
case 2230:
  cs = slot2230();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"<\" layout[\"Layout\"] ShiftExpression
case 2231:
  slot2231();

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" . layout[\"Layout\"] ShiftExpression
case 2232:
  cs = slot2232();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] . ShiftExpression
case 2233:
  cs = slot2233();
  break;

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression .
case 2234:
  cs = slot2234();
  break;

// InputCharacter*
case 1364:
  cs = slot1364();
  break;

// InputCharacter* ::= . InputCharacter* InputCharacter
case 1365:
  cs = slot1365();
  break;

// InputCharacter* ::= InputCharacter* . InputCharacter
case 1366:
  cs = slot1366();
  break;

// InputCharacter* ::= InputCharacter* InputCharacter .
case 1367:
  cs = slot1367();
  break;

// InputCharacter* ::= .
case 1368:
  cs = slot1368();
  break;

// {ClassBodyDeclaration}*
case 1369:
  cs = slot1369();
  break;

// {ClassBodyDeclaration}* ::= . {ClassBodyDeclaration layout[\"Layout\"]}+
case 1371:
  cs = slot1371();
  break;

// {ClassBodyDeclaration}* ::= {ClassBodyDeclaration layout[\"Layout\"]}+ .
case 1372:
  cs = slot1372();
  break;

// {ClassBodyDeclaration}* ::= .
case 1373:
  cs = slot1373();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+
case 1370:
  cs = slot1370();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= . {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ClassBodyDeclaration
case 1777:
  cs = slot1777();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] ClassBodyDeclaration
case 1778:
  cs = slot1778();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . ClassBodyDeclaration
case 1780:
  cs = slot1780();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ClassBodyDeclaration .
case 1781:
  cs = slot1781();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= . ClassBodyDeclaration
case 1782:
  cs = slot1782();
  break;

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= ClassBodyDeclaration .
case 1783:
  cs = slot1783();
  break;

// MethodModifier
case 1374:
  cs = slot1374();
  break;

// MethodModifier ::= . \"private\"
case 1375:
  cs = slot1375();
  break;

// MethodModifier ::= \"private\" .
case 1376:
  cs = slot1376();
  break;

// MethodModifier ::= . \"synchronized\"
case 1377:
  cs = slot1377();
  break;

// MethodModifier ::= \"synchronized\" .
case 1378:
  cs = slot1378();
  break;

// MethodModifier ::= . \"final\"
case 1379:
  cs = slot1379();
  break;

// MethodModifier ::= \"final\" .
case 1380:
  cs = slot1380();
  break;

// MethodModifier ::= . \"strictfp\"
case 1381:
  cs = slot1381();
  break;

// MethodModifier ::= \"strictfp\" .
case 1382:
  cs = slot1382();
  break;

// MethodModifier ::= . \"abstract\"
case 1383:
  cs = slot1383();
  break;

// MethodModifier ::= \"abstract\" .
case 1384:
  cs = slot1384();
  break;

// MethodModifier ::= . \"native\"
case 1385:
  cs = slot1385();
  break;

// MethodModifier ::= \"native\" .
case 1386:
  cs = slot1386();
  break;

// MethodModifier ::= . \"protected\"
case 1387:
  cs = slot1387();
  break;

// MethodModifier ::= \"protected\" .
case 1388:
  cs = slot1388();
  break;

// MethodModifier ::= . Annotation
case 1389:
  cs = slot1389();
  break;

// MethodModifier ::= Annotation .
case 1390:
  cs = slot1390();
  break;

// MethodModifier ::= . \"public\"
case 1391:
  cs = slot1391();
  break;

// MethodModifier ::= \"public\" .
case 1392:
  cs = slot1392();
  break;

// MethodModifier ::= . \"static\"
case 1393:
  cs = slot1393();
  break;

// MethodModifier ::= \"static\" .
case 1394:
  cs = slot1394();
  break;

// StaticInitializer
case 1395:
  cs = slot1395();
  break;

// StaticInitializer ::= . \"static\" layout[\"Layout\"] Block
case 1396:
  slot1396();

// StaticInitializer ::= \"static\" . layout[\"Layout\"] Block
case 1397:
  cs = slot1397();
  break;

// StaticInitializer ::= \"static\" layout[\"Layout\"] . Block
case 1398:
  cs = slot1398();
  break;

// StaticInitializer ::= \"static\" layout[\"Layout\"] Block .
case 1399:
  cs = slot1399();
  break;

// InterfaceBody
case 1403:
  cs = slot1403();
  break;

// InterfaceBody ::= . \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"
case 1404:
  slot1404();

// InterfaceBody ::= \"{\" . layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"
case 1405:
  cs = slot1405();
  break;

// InterfaceBody ::= \"{\" layout[\"Layout\"] . {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"
case 1407:
  cs = slot1407();
  break;

// InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* . layout[\"Layout\"] \"}\"
case 1408:
  cs = slot1408();
  break;

// InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] . \"}\"
case 1409:
  cs = slot1409();
  break;

// InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\" .
case 1410:
  cs = slot1410();
  break;

// {InterfaceMemberDeclaration}*
case 1406:
  cs = slot1406();
  break;

// {InterfaceMemberDeclaration}* ::= .
case 2659:
  cs = slot2659();
  break;

// {InterfaceMemberDeclaration}* ::= . {InterfaceMemberDeclaration layout[\"Layout\"]}+
case 2660:
  cs = slot2660();
  break;

// {InterfaceMemberDeclaration}* ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ .
case 2661:
  cs = slot2661();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+
case 1411:
  cs = slot1411();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= . {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] AnnotationTypeElementDeclaration
case 1412:
  cs = slot1412();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] AnnotationTypeElementDeclaration
case 1413:
  cs = slot1413();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . AnnotationTypeElementDeclaration
case 1414:
  cs = slot1414();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] AnnotationTypeElementDeclaration .
case 1415:
  cs = slot1415();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= . AnnotationTypeElementDeclaration
case 1416:
  cs = slot1416();
  break;

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= AnnotationTypeElementDeclaration .
case 1417:
  cs = slot1417();
  break;

// TypeArgument
case 1418:
  cs = slot1418();
  break;

// TypeArgument ::= . \"?\" layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
case 1878:
  slot1878();

// TypeArgument ::= \"?\" . layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
case 1879:
  cs = slot1879();
  break;

// TypeArgument ::= \"?\" layout[\"Layout\"] . (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
case 1881:
  cs = slot1881();
  break;

// TypeArgument ::= \"?\" layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)? .
case 1882:
  cs = slot1882();
  break;

// TypeArgument ::= . Type
case 1883:
  cs = slot1883();
  break;

// TypeArgument ::= Type .
case 1884:
  cs = slot1884();
  break;

// ImportDeclaration
case 1429:
  cs = slot1429();
  break;

// ImportDeclaration ::= . \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1430:
  slot1430();

// ImportDeclaration ::= \"import\" . layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1431:
  cs = slot1431();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] . \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1432:
  cs = slot1432();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? . layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1433:
  cs = slot1433();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1435:
  cs = slot1435();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ . layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1436:
  cs = slot1436();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] . (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
case 1437:
  cs = slot1437();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? . layout[\"Layout\"] \";\"
case 1438:
  cs = slot1438();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] . \";\"
case 1439:
  cs = slot1439();
  break;

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\" .
case 1440:
  cs = slot1440();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+
case 1434:
  cs = slot1434();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 2017:
  cs = slot2017();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 2018:
  cs = slot2018();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
case 2019:
  slot2019();

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
case 2020:
  cs = slot2020();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
case 2021:
  cs = slot2021();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
case 2022:
  cs = slot2022();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= . Identifier
case 2023:
  cs = slot2023();
  break;

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= Identifier .
case 2024:
  cs = slot2024();
  break;

// ( | \"extends\"\"super\")
case 1441:
  cs = slot1441();
  break;

// ( | \"extends\"\"super\") ::= . \"super\"
case 1442:
  cs = slot1442();
  break;

// ( | \"extends\"\"super\") ::= \"super\" .
case 1443:
  cs = slot1443();
  break;

// ( | \"extends\"\"super\") ::= . \"extends\"
case 1444:
  cs = slot1444();
  break;

// ( | \"extends\"\"super\") ::= \"extends\" .
case 1445:
  cs = slot1445();
  break;

// ConstantExpression
case 1460:
  cs = slot1460();
  break;

// ConstantExpression ::= . Expression
case 1531:
  cs = slot1531();
  break;

// ConstantExpression ::= Expression .
case 1532:
  cs = slot1532();
  break;

// TypeDeclaration
case 1465:
  cs = slot1465();
  break;

// TypeDeclaration ::= . InterfaceDeclaration
case 1466:
  cs = slot1466();
  break;

// TypeDeclaration ::= InterfaceDeclaration .
case 1467:
  cs = slot1467();
  break;

// TypeDeclaration ::= . \";\"
case 1468:
  cs = slot1468();
  break;

// TypeDeclaration ::= \";\" .
case 1469:
  cs = slot1469();
  break;

// TypeDeclaration ::= . ClassDeclaration
case 1470:
  cs = slot1470();
  break;

// TypeDeclaration ::= ClassDeclaration .
case 1471:
  cs = slot1471();
  break;

// FloatingPointLiteral
case 1475:
  cs = slot1475();
  break;

// FloatingPointLiteral ::= . HexadecimalFloatingPointLiteral
case 1476:
  cs = slot1476();
  break;

// FloatingPointLiteral ::= HexadecimalFloatingPointLiteral .
case 1477:
  cs = slot1477();
  break;

// FloatingPointLiteral ::= . DecimalFloatingPointLiteral
case 1478:
  cs = slot1478();
  break;

// FloatingPointLiteral ::= DecimalFloatingPointLiteral .
case 1479:
  cs = slot1479();
  break;

// {ConstantModifier}*
case 1480:
  cs = slot1480();
  break;

// {ConstantModifier}* ::= . {ConstantModifier layout[\"Layout\"]}+
case 1481:
  cs = slot1481();
  break;

// {ConstantModifier}* ::= {ConstantModifier layout[\"Layout\"]}+ .
case 1482:
  cs = slot1482();
  break;

// {ConstantModifier}* ::= .
case 1483:
  cs = slot1483();
  break;

// UnaryExpressionNotPlusMinus
case 1488:
  cs = slot1488();
  break;

// UnaryExpressionNotPlusMinus ::= . CastExpression
case 1490:
  cs = slot1490();
  break;

// UnaryExpressionNotPlusMinus ::= CastExpression .
case 1491:
  cs = slot1491();
  break;

// UnaryExpressionNotPlusMinus ::= . PostfixExpression
case 1492:
  cs = slot1492();
  break;

// UnaryExpressionNotPlusMinus ::= PostfixExpression .
case 1493:
  cs = slot1493();
  break;

// UnaryExpressionNotPlusMinus ::= . \"~\" layout[\"Layout\"] UnaryExpression
case 1494:
  slot1494();

// UnaryExpressionNotPlusMinus ::= \"~\" . layout[\"Layout\"] UnaryExpression
case 1495:
  cs = slot1495();
  break;

// UnaryExpressionNotPlusMinus ::= \"~\" layout[\"Layout\"] . UnaryExpression
case 1496:
  cs = slot1496();
  break;

// UnaryExpressionNotPlusMinus ::= \"~\" layout[\"Layout\"] UnaryExpression .
case 1497:
  cs = slot1497();
  break;

// UnaryExpressionNotPlusMinus ::= . \"!\" layout[\"Layout\"] UnaryExpression
case 1498:
  slot1498();

// UnaryExpressionNotPlusMinus ::= \"!\" . layout[\"Layout\"] UnaryExpression
case 1499:
  cs = slot1499();
  break;

// UnaryExpressionNotPlusMinus ::= \"!\" layout[\"Layout\"] . UnaryExpression
case 1500:
  cs = slot1500();
  break;

// UnaryExpressionNotPlusMinus ::= \"!\" layout[\"Layout\"] UnaryExpression .
case 1501:
  cs = slot1501();
  break;

// CastExpression
case 1489:
  cs = slot1489();
  break;

// CastExpression ::= . \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
case 1894:
  slot1894();

// CastExpression ::= \"(\" . layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
case 1895:
  cs = slot1895();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] . ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
case 1896:
  cs = slot1896();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType . layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
case 1897:
  cs = slot1897();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] . \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
case 1898:
  slot1898();

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" . layout[\"Layout\"] UnaryExpressionNotPlusMinus
case 1899:
  cs = slot1899();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] . UnaryExpressionNotPlusMinus
case 1900:
  cs = slot1900();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus .
case 1901:
  cs = slot1901();
  break;

// CastExpression ::= . \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
case 1902:
  slot1902();

// CastExpression ::= \"(\" . layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
case 1903:
  cs = slot1903();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] . PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
case 1904:
  cs = slot1904();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType . layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
case 1905:
  cs = slot1905();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] . \")\" layout[\"Layout\"] UnaryExpression
case 1906:
  slot1906();

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" . layout[\"Layout\"] UnaryExpression
case 1907:
  cs = slot1907();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] . UnaryExpression
case 1908:
  cs = slot1908();
  break;

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression .
case 1909:
  cs = slot1909();
  break;

// BinaryNumeral
case 1506:
  cs = slot1506();
  break;

// BinaryNumeral ::= . [0] [B] BinaryDigits
case 1510:
  slot1510();

// BinaryNumeral ::= [0] . [B] BinaryDigits
case 1511:
  slot1511();

// BinaryNumeral ::= [0] [B] . BinaryDigits
case 1513:
  cs = slot1513();
  break;

// BinaryNumeral ::= [0] [B] BinaryDigits .
case 1514:
  cs = slot1514();
  break;

// BinaryNumeral ::= . [0] [b] BinaryDigits
case 1515:
  slot1515();

// BinaryNumeral ::= [0] . [b] BinaryDigits
case 1516:
  slot1516();

// BinaryNumeral ::= [0] [b] . BinaryDigits
case 1517:
  cs = slot1517();
  break;

// BinaryNumeral ::= [0] [b] BinaryDigits .
case 1518:
  cs = slot1518();
  break;

// BinaryDigits
case 1512:
  cs = slot1512();
  break;

// BinaryDigits ::= . BinaryDigit BinaryDigitOrUnderscore* BinaryDigit
case 2443:
  cs = slot2443();
  break;

// BinaryDigits ::= BinaryDigit . BinaryDigitOrUnderscore* BinaryDigit
case 2444:
  cs = slot2444();
  break;

// BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* . BinaryDigit
case 2445:
  cs = slot2445();
  break;

// BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* BinaryDigit .
case 2446:
  cs = slot2446();
  break;

// BinaryDigits ::= . BinaryDigit
case 2447:
  cs = slot2447();
  break;

// BinaryDigits ::= BinaryDigit .
case 2448:
  cs = slot2448();
  break;

// VariableModifier
case 1519:
  cs = slot1519();
  break;

// VariableModifier ::= . \"final\"
case 1520:
  cs = slot1520();
  break;

// VariableModifier ::= \"final\" .
case 1521:
  cs = slot1521();
  break;

// VariableModifier ::= . Annotation
case 1522:
  cs = slot1522();
  break;

// VariableModifier ::= Annotation .
case 1523:
  cs = slot1523();
  break;

// SwitchBlockStatementGroup
case 1526:
  cs = slot1526();
  break;

// SwitchBlockStatementGroup ::= . {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+
case 1527:
  cs = slot1527();
  break;

// SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ . layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+
case 1528:
  cs = slot1528();
  break;

// SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] . {BlockStatement layout[\"Layout\"]}+
case 1529:
  cs = slot1529();
  break;

// SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+ .
case 1530:
  cs = slot1530();
  break;

// Assignment
case 1539:
  cs = slot1539();
  break;

// Assignment ::= . LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression
case 1541:
  cs = slot1541();
  break;

// Assignment ::= LeftHandSide . layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression
case 1542:
  cs = slot1542();
  break;

// Assignment ::= LeftHandSide layout[\"Layout\"] . AssignmentOperator layout[\"Layout\"] AssignmentExpression
case 1544:
  cs = slot1544();
  break;

// Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator . layout[\"Layout\"] AssignmentExpression
case 1545:
  cs = slot1545();
  break;

// Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] . AssignmentExpression
case 1547:
  cs = slot1547();
  break;

// Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression .
case 1548:
  cs = slot1548();
  break;

// LeftHandSide
case 1540:
  cs = slot1540();
  break;

// LeftHandSide ::= . \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\"
case 2581:
  slot2581();

// LeftHandSide ::= \"(\" . layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\"
case 2582:
  cs = slot2582();
  break;

// LeftHandSide ::= \"(\" layout[\"Layout\"] . LeftHandSide layout[\"Layout\"] \")\"
case 2583:
  cs = slot2583();
  break;

// LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide . layout[\"Layout\"] \")\"
case 2584:
  cs = slot2584();
  break;

// LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] . \")\"
case 2585:
  cs = slot2585();
  break;

// LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\" .
case 2586:
  cs = slot2586();
  break;

// LeftHandSide ::= . FieldAccess
case 2587:
  cs = slot2587();
  break;

// LeftHandSide ::= FieldAccess .
case 2588:
  cs = slot2588();
  break;

// LeftHandSide ::= . ExpressionName
case 2589:
  cs = slot2589();
  break;

// LeftHandSide ::= ExpressionName .
case 2590:
  cs = slot2590();
  break;

// LeftHandSide ::= . ArrayAccess
case 2591:
  cs = slot2591();
  break;

// LeftHandSide ::= ArrayAccess .
case 2592:
  cs = slot2592();
  break;

// AssignmentOperator
case 1543:
  cs = slot1543();
  break;

// AssignmentOperator ::= . \"&=\"
case 2128:
  cs = slot2128();
  break;

// AssignmentOperator ::= \"&=\" .
case 2129:
  cs = slot2129();
  break;

// AssignmentOperator ::= . \"=\"
case 2130:
  cs = slot2130();
  break;

// AssignmentOperator ::= \"=\" .
case 2131:
  cs = slot2131();
  break;

// AssignmentOperator ::= . \">>=\"
case 2132:
  cs = slot2132();
  break;

// AssignmentOperator ::= \">>=\" .
case 2133:
  cs = slot2133();
  break;

// AssignmentOperator ::= . \"-=\"
case 2134:
  cs = slot2134();
  break;

// AssignmentOperator ::= \"-=\" .
case 2135:
  cs = slot2135();
  break;

// AssignmentOperator ::= . \"/=\"
case 2136:
  cs = slot2136();
  break;

// AssignmentOperator ::= \"/=\" .
case 2137:
  cs = slot2137();
  break;

// AssignmentOperator ::= . \"*=\"
case 2138:
  cs = slot2138();
  break;

// AssignmentOperator ::= \"*=\" .
case 2139:
  cs = slot2139();
  break;

// AssignmentOperator ::= . \"+=\"
case 2140:
  cs = slot2140();
  break;

// AssignmentOperator ::= \"+=\" .
case 2141:
  cs = slot2141();
  break;

// AssignmentOperator ::= . \"^=\"
case 2142:
  cs = slot2142();
  break;

// AssignmentOperator ::= \"^=\" .
case 2143:
  cs = slot2143();
  break;

// AssignmentOperator ::= . \"|=\"
case 2144:
  cs = slot2144();
  break;

// AssignmentOperator ::= \"|=\" .
case 2145:
  cs = slot2145();
  break;

// AssignmentOperator ::= . \">>>=\"
case 2146:
  cs = slot2146();
  break;

// AssignmentOperator ::= \">>>=\" .
case 2147:
  cs = slot2147();
  break;

// AssignmentOperator ::= . \"%=\"
case 2148:
  cs = slot2148();
  break;

// AssignmentOperator ::= \"%=\" .
case 2149:
  cs = slot2149();
  break;

// AssignmentOperator ::= . \"<<=\"
case 2150:
  cs = slot2150();
  break;

// AssignmentOperator ::= \"<<=\" .
case 2151:
  cs = slot2151();
  break;

// AssignmentExpression
case 1546:
  cs = slot1546();
  break;

// AssignmentExpression ::= . Assignment
case 1850:
  cs = slot1850();
  break;

// AssignmentExpression ::= Assignment .
case 1851:
  cs = slot1851();
  break;

// AssignmentExpression ::= . ConditionalExpression
case 1852:
  cs = slot1852();
  break;

// AssignmentExpression ::= ConditionalExpression .
case 1853:
  cs = slot1853();
  break;

// ClassInstanceCreationExpression
case 1555:
  cs = slot1555();
  break;

// ClassInstanceCreationExpression ::= . \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2250:
  slot2250();

// ClassInstanceCreationExpression ::= \"new\" . layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2251:
  cs = slot2251();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] . TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2252:
  cs = slot2252();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? . layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2253:
  cs = slot2253();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] . TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2254:
  cs = slot2254();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier . layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2255:
  cs = slot2255();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] . TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2257:
  cs = slot2257();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2258:
  cs = slot2258();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2259:
  slot2259();

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2260:
  cs = slot2260();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2261:
  cs = slot2261();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2262:
  cs = slot2262();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] ClassBody?
case 2263:
  slot2263();

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] ClassBody?
case 2264:
  cs = slot2264();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . ClassBody?
case 2265:
  cs = slot2265();
  break;

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody? .
case 2266:
  cs = slot2266();
  break;

// ClassInstanceCreationExpression ::= . ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2268:
  cs = slot2268();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) . layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2269:
  cs = slot2269();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] . \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2270:
  slot2270();

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" . layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2271:
  cs = slot2271();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] . \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2272:
  slot2272();

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" . layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2273:
  cs = slot2273();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] . TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2274:
  cs = slot2274();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2275:
  cs = slot2275();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2276:
  cs = slot2276();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2277:
  cs = slot2277();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2278:
  cs = slot2278();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2279:
  cs = slot2279();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2280:
  slot2280();

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2281:
  cs = slot2281();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2282:
  cs = slot2282();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
case 2283:
  cs = slot2283();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] ClassBody?
case 2284:
  slot2284();

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] ClassBody?
case 2285:
  cs = slot2285();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . ClassBody?
case 2286:
  cs = slot2286();
  break;

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody? .
case 2287:
  cs = slot2287();
  break;

// PreIncrementExpression
case 1558:
  cs = slot1558();
  break;

// PreIncrementExpression ::= . \"++\" layout[\"Layout\"] UnaryExpression
case 2537:
  slot2537();

// PreIncrementExpression ::= \"++\" . layout[\"Layout\"] UnaryExpression
case 2538:
  cs = slot2538();
  break;

// PreIncrementExpression ::= \"++\" layout[\"Layout\"] . UnaryExpression
case 2539:
  cs = slot2539();
  break;

// PreIncrementExpression ::= \"++\" layout[\"Layout\"] UnaryExpression .
case 2540:
  cs = slot2540();
  break;

// Literal
case 1565:
  cs = slot1565();
  break;

// Literal ::= . CharacterLiteral
case 1567:
  cs = slot1567();
  break;

// Literal ::= CharacterLiteral .
case 1568:
  cs = slot1568();
  break;

// Literal ::= . NullLiteral
case 1570:
  cs = slot1570();
  break;

// Literal ::= NullLiteral .
case 1571:
  cs = slot1571();
  break;

// Literal ::= . IntegerLiteral
case 1572:
  cs = slot1572();
  break;

// Literal ::= IntegerLiteral .
case 1573:
  cs = slot1573();
  break;

// Literal ::= . StringLiteral
case 1575:
  cs = slot1575();
  break;

// Literal ::= StringLiteral .
case 1576:
  cs = slot1576();
  break;

// Literal ::= . BooleanLiteral
case 1577:
  cs = slot1577();
  break;

// Literal ::= BooleanLiteral .
case 1578:
  cs = slot1578();
  break;

// Literal ::= . FloatingPointLiteral
case 1579:
  cs = slot1579();
  break;

// Literal ::= FloatingPointLiteral .
case 1580:
  cs = slot1580();
  break;

// CharacterLiteral
case 1566:
  cs = slot1566();
  break;

// CharacterLiteral ::= . [\\'] SingleCharacter [\\']
case 2025:
  slot2025();

// CharacterLiteral ::= [\\'] . SingleCharacter [\\']
case 2027:
  cs = slot2027();
  break;

// CharacterLiteral ::= [\\'] SingleCharacter . [\\']
case 2028:
  cs = slot2028();
  break;

// CharacterLiteral ::= [\\'] SingleCharacter [\\'] .
case 2029:
  cs = slot2029();
  break;

// CharacterLiteral ::= . [\\'] EscapeSequence [\\']
case 2030:
  slot2030();

// CharacterLiteral ::= [\\'] . EscapeSequence [\\']
case 2031:
  cs = slot2031();
  break;

// CharacterLiteral ::= [\\'] EscapeSequence . [\\']
case 2032:
  cs = slot2032();
  break;

// CharacterLiteral ::= [\\'] EscapeSequence [\\'] .
case 2033:
  cs = slot2033();
  break;

// NullLiteral
case 1569:
  cs = slot1569();
  break;

// NullLiteral ::= . \"null\"
case 1620:
  cs = slot1620();
  break;

// NullLiteral ::= \"null\" .
case 1621:
  cs = slot1621();
  break;

// StringLiteral
case 1574:
  cs = slot1574();
  break;

// StringLiteral ::= . [\\\"] StringCharacter* [\\\"]
case 2345:
  slot2345();

// StringLiteral ::= [\\\"] . StringCharacter* [\\\"]
case 2347:
  cs = slot2347();
  break;

// StringLiteral ::= [\\\"] StringCharacter* . [\\\"]
case 2348:
  cs = slot2348();
  break;

// StringLiteral ::= [\\\"] StringCharacter* [\\\"] .
case 2349:
  cs = slot2349();
  break;

// {ConstructorModifier layout[\"Layout\"]}+
case 1581:
  cs = slot1581();
  break;

// {ConstructorModifier layout[\"Layout\"]}+ ::= . {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstructorModifier
case 2424:
  cs = slot2424();
  break;

// {ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ConstructorModifier
case 2425:
  cs = slot2425();
  break;

// {ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ConstructorModifier
case 2426:
  cs = slot2426();
  break;

// {ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstructorModifier .
case 2427:
  cs = slot2427();
  break;

// {ConstructorModifier layout[\"Layout\"]}+ ::= . ConstructorModifier
case 2428:
  cs = slot2428();
  break;

// {ConstructorModifier layout[\"Layout\"]}+ ::= ConstructorModifier .
case 2429:
  cs = slot2429();
  break;

// (\":\" layout[\"Layout\"] Expression)?
case 1585:
  cs = slot1585();
  break;

// (\":\" layout[\"Layout\"] Expression)? ::= . (\":\" layout[\"Layout\"] Expression)
case 1586:
  cs = slot1586();
  break;

// (\":\" layout[\"Layout\"] Expression)? ::= (\":\" layout[\"Layout\"] Expression) .
case 1587:
  cs = slot1587();
  break;

// (\":\" layout[\"Layout\"] Expression)? ::= .
case 1588:
  cs = slot1588();
  break;

// {AnnotationTypeElementDeclaration}*
case 1599:
  cs = slot1599();
  break;

// {AnnotationTypeElementDeclaration}* ::= .
case 1697:
  cs = slot1697();
  break;

// {AnnotationTypeElementDeclaration}* ::= . {AnnotationTypeElementDeclaration layout[\"Layout\"]}+
case 1698:
  cs = slot1698();
  break;

// {AnnotationTypeElementDeclaration}* ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ .
case 1699:
  cs = slot1699();
  break;

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
case 1604:
  cs = slot1604();
  break;

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= . TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 1605:
  cs = slot1605();
  break;

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
case 1606:
  cs = slot1606();
  break;

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
case 1607:
  slot1607();

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
case 1608:
  cs = slot1608();
  break;

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
case 1609:
  cs = slot1609();
  break;

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
case 1610:
  cs = slot1610();
  break;

// ExplicitGenericInvocationSuffix
case 1611:
  cs = slot1611();
  break;

// ExplicitGenericInvocationSuffix ::= . \"super\" layout[\"Layout\"] SuperSuffix
case 1612:
  slot1612();

// ExplicitGenericInvocationSuffix ::= \"super\" . layout[\"Layout\"] SuperSuffix
case 1613:
  cs = slot1613();
  break;

// ExplicitGenericInvocationSuffix ::= \"super\" layout[\"Layout\"] . SuperSuffix
case 1614:
  cs = slot1614();
  break;

// ExplicitGenericInvocationSuffix ::= \"super\" layout[\"Layout\"] SuperSuffix .
case 1615:
  cs = slot1615();
  break;

// ExplicitGenericInvocationSuffix ::= . Identifier layout[\"Layout\"] Arguments
case 1616:
  cs = slot1616();
  break;

// ExplicitGenericInvocationSuffix ::= Identifier . layout[\"Layout\"] Arguments
case 1617:
  cs = slot1617();
  break;

// ExplicitGenericInvocationSuffix ::= Identifier layout[\"Layout\"] . Arguments
case 1618:
  cs = slot1618();
  break;

// ExplicitGenericInvocationSuffix ::= Identifier layout[\"Layout\"] Arguments .
case 1619:
  cs = slot1619();
  break;

// InterfaceMemberDeclaration
case 1631:
  cs = slot1631();
  break;

// InterfaceMemberDeclaration ::= . InterfaceDeclaration
case 1632:
  cs = slot1632();
  break;

// InterfaceMemberDeclaration ::= InterfaceDeclaration .
case 1633:
  cs = slot1633();
  break;

// InterfaceMemberDeclaration ::= . ConstantDeclaration
case 1634:
  cs = slot1634();
  break;

// InterfaceMemberDeclaration ::= ConstantDeclaration .
case 1635:
  cs = slot1635();
  break;

// InterfaceMemberDeclaration ::= . \";\"
case 1636:
  cs = slot1636();
  break;

// InterfaceMemberDeclaration ::= \";\" .
case 1637:
  cs = slot1637();
  break;

// InterfaceMemberDeclaration ::= . AbstractMethodDeclaration
case 1638:
  cs = slot1638();
  break;

// InterfaceMemberDeclaration ::= AbstractMethodDeclaration .
case 1639:
  cs = slot1639();
  break;

// InterfaceMemberDeclaration ::= . ClassDeclaration
case 1640:
  cs = slot1640();
  break;

// InterfaceMemberDeclaration ::= ClassDeclaration .
case 1641:
  cs = slot1641();
  break;

// {SwitchLabel}*
case 1642:
  cs = slot1642();
  break;

// {SwitchLabel}* ::= . {SwitchLabel layout[\"Layout\"]}+
case 1643:
  cs = slot1643();
  break;

// {SwitchLabel}* ::= {SwitchLabel layout[\"Layout\"]}+ .
case 1644:
  cs = slot1644();
  break;

// {SwitchLabel}* ::= .
case 1645:
  cs = slot1645();
  break;

// {VariableModifier layout[\"Layout\"]}+
case 1646:
  cs = slot1646();
  break;

// {VariableModifier layout[\"Layout\"]}+ ::= . VariableModifier
case 1668:
  cs = slot1668();
  break;

// {VariableModifier layout[\"Layout\"]}+ ::= VariableModifier .
case 1669:
  cs = slot1669();
  break;

// {VariableModifier layout[\"Layout\"]}+ ::= . {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] VariableModifier
case 1670:
  cs = slot1670();
  break;

// {VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ . layout[\"Layout\"] VariableModifier
case 1671:
  cs = slot1671();
  break;

// {VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] . VariableModifier
case 1672:
  cs = slot1672();
  break;

// {VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] VariableModifier .
case 1673:
  cs = slot1673();
  break;

// (\"implements\" layout[\"Layout\"] TypeList)
case 1657:
  cs = slot1657();
  break;

// (\"implements\" layout[\"Layout\"] TypeList) ::= . \"implements\" layout[\"Layout\"] TypeList
case 1658:
  slot1658();

// (\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" . layout[\"Layout\"] TypeList
case 1659:
  cs = slot1659();
  break;

// (\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" layout[\"Layout\"] . TypeList
case 1660:
  cs = slot1660();
  break;

// (\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" layout[\"Layout\"] TypeList .
case 1661:
  cs = slot1661();
  break;

// (\"[\" layout[\"Layout\"] \"]\")
case 1674:
  cs = slot1674();
  break;

// (\"[\" layout[\"Layout\"] \"]\") ::= . \"[\" layout[\"Layout\"] \"]\"
case 1675:
  slot1675();

// (\"[\" layout[\"Layout\"] \"]\") ::= \"[\" . layout[\"Layout\"] \"]\"
case 1676:
  cs = slot1676();
  break;

// (\"[\" layout[\"Layout\"] \"]\") ::= \"[\" layout[\"Layout\"] . \"]\"
case 1677:
  cs = slot1677();
  break;

// (\"[\" layout[\"Layout\"] \"]\") ::= \"[\" layout[\"Layout\"] \"]\" .
case 1678:
  cs = slot1678();
  break;

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
case 1700:
  cs = slot1700();
  break;

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= . (CatchClause* layout[\"Layout\"] Finally)
case 1702:
  cs = slot1702();
  break;

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= (CatchClause* layout[\"Layout\"] Finally) .
case 1703:
  cs = slot1703();
  break;

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= . {CatchClause layout[\"Layout\"]}+
case 1705:
  cs = slot1705();
  break;

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= {CatchClause layout[\"Layout\"]}+ .
case 1706:
  cs = slot1706();
  break;

// (CatchClause* layout[\"Layout\"] Finally)
case 1701:
  cs = slot1701();
  break;

// (CatchClause* layout[\"Layout\"] Finally) ::= . {CatchClause}* layout[\"Layout\"] Finally
case 2034:
  cs = slot2034();
  break;

// (CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* . layout[\"Layout\"] Finally
case 2035:
  cs = slot2035();
  break;

// (CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* layout[\"Layout\"] . Finally
case 2036:
  cs = slot2036();
  break;

// (CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* layout[\"Layout\"] Finally .
case 2037:
  cs = slot2037();
  break;

// {CatchClause layout[\"Layout\"]}+
case 1704:
  cs = slot1704();
  break;

// {CatchClause layout[\"Layout\"]}+ ::= . {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] CatchClause
case 2727:
  cs = slot2727();
  break;

// {CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ . layout[\"Layout\"] CatchClause
case 2728:
  cs = slot2728();
  break;

// {CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] . CatchClause
case 2729:
  cs = slot2729();
  break;

// {CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] CatchClause .
case 2730:
  cs = slot2730();
  break;

// {CatchClause layout[\"Layout\"]}+ ::= . CatchClause
case 2731:
  cs = slot2731();
  break;

// {CatchClause layout[\"Layout\"]}+ ::= CatchClause .
case 2732:
  cs = slot2732();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+
case 1722:
  cs = slot1722();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= . {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] SwitchBlockStatementGroup
case 1723:
  cs = slot1723();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ . layout[\"Layout\"] SwitchBlockStatementGroup
case 1724:
  cs = slot1724();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] . SwitchBlockStatementGroup
case 1725:
  cs = slot1725();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] SwitchBlockStatementGroup .
case 1726:
  cs = slot1726();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= . SwitchBlockStatementGroup
case 1727:
  cs = slot1727();
  break;

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= SwitchBlockStatementGroup .
case 1728:
  cs = slot1728();
  break;

// CommentTail
case 1729:
  cs = slot1729();
  break;

// CommentTail ::= . \"*\" CommentTailStar
case 1730:
  slot1730();

// CommentTail ::= \"*\" . CommentTailStar
case 1732:
  cs = slot1732();
  break;

// CommentTail ::= \"*\" CommentTailStar .
case 1733:
  cs = slot1733();
  break;

// CommentTail ::= . NotStar CommentTail
case 1735:
  cs = slot1735();
  break;

// CommentTail ::= NotStar . CommentTail
case 1736:
  cs = slot1736();
  break;

// CommentTail ::= NotStar CommentTail .
case 1737:
  cs = slot1737();
  break;

// CommentTailStar
case 1731:
  cs = slot1731();
  break;

// CommentTailStar ::= . \"*\" CommentTailStar
case 2593:
  slot2593();

// CommentTailStar ::= \"*\" . CommentTailStar
case 2594:
  cs = slot2594();
  break;

// CommentTailStar ::= \"*\" CommentTailStar .
case 2595:
  cs = slot2595();
  break;

// CommentTailStar ::= . \"/\"
case 2596:
  cs = slot2596();
  break;

// CommentTailStar ::= \"/\" .
case 2597:
  cs = slot2597();
  break;

// CommentTailStar ::= . NotStarNotSlash CommentTail
case 2598:
  cs = slot2598();
  break;

// CommentTailStar ::= NotStarNotSlash . CommentTail
case 2599:
  cs = slot2599();
  break;

// CommentTailStar ::= NotStarNotSlash CommentTail .
case 2600:
  cs = slot2600();
  break;

// NotStar
case 1734:
  cs = slot1734();
  break;

// NotStar ::= . InputCharacter
case 2341:
  cs = slot2341();
  break;

// NotStar ::= InputCharacter .
case 2342:
  cs = slot2342();
  break;

// NotStar ::= . LineTerminator
case 2343:
  cs = slot2343();
  break;

// NotStar ::= LineTerminator .
case 2344:
  cs = slot2344();
  break;

// {CatchClause}*
case 1738:
  cs = slot1738();
  break;

// {CatchClause}* ::= .
case 1739:
  cs = slot1739();
  break;

// {CatchClause}* ::= . {CatchClause layout[\"Layout\"]}+
case 1740:
  cs = slot1740();
  break;

// {CatchClause}* ::= {CatchClause layout[\"Layout\"]}+ .
case 1741:
  cs = slot1741();
  break;

// HexDigitOrUnderscore
case 1744:
  cs = slot1744();
  break;

// HexDigitOrUnderscore ::= . HexDigit
case 2013:
  cs = slot2013();
  break;

// HexDigitOrUnderscore ::= HexDigit .
case 2014:
  cs = slot2014();
  break;

// HexDigitOrUnderscore ::= . [_]
case 2015:
  cs = slot2015();
  break;

// HexDigitOrUnderscore ::= [_] .
case 2016:
  cs = slot2016();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 1747:
  cs = slot1747();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType
case 1748:
  cs = slot1748();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType
case 1749:
  cs = slot1749();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ReferenceType
case 1750:
  slot1750();

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ReferenceType
case 1751:
  cs = slot1751();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ReferenceType
case 1752:
  cs = slot1752();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType .
case 1753:
  cs = slot1753();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ReferenceType
case 1754:
  cs = slot1754();
  break;

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ReferenceType .
case 1755:
  cs = slot1755();
  break;

// (\"extends\" layout[\"Layout\"] TypeList)
case 1765:
  cs = slot1765();
  break;

// (\"extends\" layout[\"Layout\"] TypeList) ::= . \"extends\" layout[\"Layout\"] TypeList
case 1766:
  slot1766();

// (\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" . layout[\"Layout\"] TypeList
case 1767:
  cs = slot1767();
  break;

// (\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" layout[\"Layout\"] . TypeList
case 1768:
  cs = slot1768();
  break;

// (\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" layout[\"Layout\"] TypeList .
case 1769:
  cs = slot1769();
  break;

// ClassBodyDeclaration
case 1779:
  cs = slot1779();
  break;

// ClassBodyDeclaration ::= . InstanceInitializer
case 2633:
  cs = slot2633();
  break;

// ClassBodyDeclaration ::= InstanceInitializer .
case 2634:
  cs = slot2634();
  break;

// ClassBodyDeclaration ::= . StaticInitializer
case 2635:
  cs = slot2635();
  break;

// ClassBodyDeclaration ::= StaticInitializer .
case 2636:
  cs = slot2636();
  break;

// ClassBodyDeclaration ::= . ClassMemberDeclaration
case 2637:
  cs = slot2637();
  break;

// ClassBodyDeclaration ::= ClassMemberDeclaration .
case 2638:
  cs = slot2638();
  break;

// ClassBodyDeclaration ::= . ConstructorDeclaration
case 2639:
  cs = slot2639();
  break;

// ClassBodyDeclaration ::= ConstructorDeclaration .
case 2640:
  cs = slot2640();
  break;

// LineTerminator
case 1784:
  cs = slot1784();
  break;

// LineTerminator ::= . [\\r\\n]
case 1785:
  cs = slot1785();
  break;

// LineTerminator ::= [\\r\\n] .
case 1786:
  cs = slot1786();
  break;

// Identifier?
case 1805:
  cs = slot1805();
  break;

// Identifier? ::= . Identifier
case 1806:
  cs = slot1806();
  break;

// Identifier? ::= Identifier .
case 1807:
  cs = slot1807();
  break;

// Identifier? ::= .
case 1808:
  cs = slot1808();
  break;

// {MethodModifier layout[\"Layout\"]}+
case 1854:
  cs = slot1854();
  break;

// {MethodModifier layout[\"Layout\"]}+ ::= . {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] MethodModifier
case 1855:
  cs = slot1855();
  break;

// {MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ . layout[\"Layout\"] MethodModifier
case 1856:
  cs = slot1856();
  break;

// {MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] . MethodModifier
case 1857:
  cs = slot1857();
  break;

// {MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] MethodModifier .
case 1858:
  cs = slot1858();
  break;

// {MethodModifier layout[\"Layout\"]}+ ::= . MethodModifier
case 1859:
  cs = slot1859();
  break;

// {MethodModifier layout[\"Layout\"]}+ ::= MethodModifier .
case 1860:
  cs = slot1860();
  break;

// BinaryDigitOrUnderscore*
case 1861:
  cs = slot1861();
  break;

// BinaryDigitOrUnderscore* ::= .
case 1862:
  cs = slot1862();
  break;

// BinaryDigitOrUnderscore* ::= . BinaryDigitOrUnderscore* BinaryDigitOrUnderscore
case 1863:
  cs = slot1863();
  break;

// BinaryDigitOrUnderscore* ::= BinaryDigitOrUnderscore* . BinaryDigitOrUnderscore
case 1864:
  cs = slot1864();
  break;

// BinaryDigitOrUnderscore* ::= BinaryDigitOrUnderscore* BinaryDigitOrUnderscore .
case 1865:
  cs = slot1865();
  break;

// PackageDeclaration
case 1869:
  cs = slot1869();
  break;

// PackageDeclaration ::= . {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
case 1870:
  cs = slot1870();
  break;

// PackageDeclaration ::= {Annotation}* . layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
case 1871:
  cs = slot1871();
  break;

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] . \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
case 1872:
  slot1872();

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" . layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
case 1873:
  cs = slot1873();
  break;

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] . QualifiedIdentifier layout[\"Layout\"] \";\"
case 1874:
  cs = slot1874();
  break;

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier . layout[\"Layout\"] \";\"
case 1875:
  cs = slot1875();
  break;

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] . \";\"
case 1876:
  cs = slot1876();
  break;

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\" .
case 1877:
  cs = slot1877();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
case 1880:
  cs = slot1880();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= .
case 2676:
  cs = slot2676();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= . (( | \"extends\"\"super\") layout[\"Layout\"] Type)
case 2677:
  cs = slot2677();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= (( | \"extends\"\"super\") layout[\"Layout\"] Type) .
case 2678:
  cs = slot2678();
  break;

// {SwitchBlockStatementGroup}*
case 1942:
  cs = slot1942();
  break;

// {SwitchBlockStatementGroup}* ::= . {SwitchBlockStatementGroup layout[\"Layout\"]}+
case 2626:
  cs = slot2626();
  break;

// {SwitchBlockStatementGroup}* ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ .
case 2627:
  cs = slot2627();
  break;

// {SwitchBlockStatementGroup}* ::= .
case 2628:
  cs = slot2628();
  break;

// SingleCharacter
case 2026:
  cs = slot2026();
  break;

// SingleCharacter ::= . InputCharacter
case 2645:
  cs = slot2645();
  break;

// SingleCharacter ::= InputCharacter .
case 2646:
  cs = slot2646();
  break;

// layout[\"$default$\"]
case 2038:
  cs = slot2038();
  break;

// layout[\"$default$\"] ::= .
case 2039:
  cs = slot2039();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)
case 2056:
  cs = slot2056();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= . ( | \"extends\"\"super\") layout[\"Layout\"] Type
case 2057:
  cs = slot2057();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") . layout[\"Layout\"] Type
case 2058:
  cs = slot2058();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") layout[\"Layout\"] . Type
case 2059:
  cs = slot2059();
  break;

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") layout[\"Layout\"] Type .
case 2060:
  cs = slot2060();
  break;

// start[CompilationUnit]
case 2061:
  cs = slot2061();
  break;

// start[CompilationUnit] ::= . layout[\"Layout\"] CompilationUnit layout[\"Layout\"]
case 2062:
  cs = slot2062();
  break;

// start[CompilationUnit] ::= layout[\"Layout\"] . CompilationUnit layout[\"Layout\"]
case 2064:
  cs = slot2064();
  break;

// start[CompilationUnit] ::= layout[\"Layout\"] CompilationUnit . layout[\"Layout\"]
case 2065:
  cs = slot2065();
  break;

// start[CompilationUnit] ::= layout[\"Layout\"] CompilationUnit layout[\"Layout\"] .
case 2066:
  cs = slot2066();
  break;

// CompilationUnit
case 2063:
  cs = slot2063();
  break;

// CompilationUnit ::= . PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*
case 2163:
  cs = slot2163();
  break;

// CompilationUnit ::= PackageDeclaration? . layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*
case 2164:
  cs = slot2164();
  break;

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] . {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*
case 2165:
  cs = slot2165();
  break;

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* . layout[\"Layout\"] {TypeDeclaration}*
case 2166:
  cs = slot2166();
  break;

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] . {TypeDeclaration}*
case 2167:
  cs = slot2167();
  break;

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}* .
case 2168:
  cs = slot2168();
  break;

// {Annotation layout[\"Layout\"]}+
case 2067:
  cs = slot2067();
  break;

// {Annotation layout[\"Layout\"]}+ ::= . {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] Annotation
case 2068:
  cs = slot2068();
  break;

// {Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ . layout[\"Layout\"] Annotation
case 2069:
  cs = slot2069();
  break;

// {Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] . Annotation
case 2070:
  cs = slot2070();
  break;

// {Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] Annotation .
case 2071:
  cs = slot2071();
  break;

// {Annotation layout[\"Layout\"]}+ ::= . Annotation
case 2072:
  cs = slot2072();
  break;

// {Annotation layout[\"Layout\"]}+ ::= Annotation .
case 2073:
  cs = slot2073();
  break;

// {MethodModifier}*
case 2076:
  cs = slot2076();
  break;

// {MethodModifier}* ::= . {MethodModifier layout[\"Layout\"]}+
case 2077:
  cs = slot2077();
  break;

// {MethodModifier}* ::= {MethodModifier layout[\"Layout\"]}+ .
case 2078:
  cs = slot2078();
  break;

// {MethodModifier}* ::= .
case 2079:
  cs = slot2079();
  break;

// TypeBound
case 2080:
  cs = slot2080();
  break;

// TypeBound ::= . \"extends\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
case 2081:
  slot2081();

// TypeBound ::= \"extends\" . layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
case 2082:
  cs = slot2082();
  break;

// TypeBound ::= \"extends\" layout[\"Layout\"] . {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
case 2083:
  cs = slot2083();
  break;

// TypeBound ::= \"extends\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ .
case 2084:
  cs = slot2084();
  break;

// CatchType
case 2085:
  cs = slot2085();
  break;

// CatchType ::= . {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+
case 2087:
  cs = slot2087();
  break;

// CatchType ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ .
case 2088:
  cs = slot2088();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+
case 2086:
  cs = slot2086();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= . {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier
case 2435:
  cs = slot2435();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ . layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier
case 2436:
  cs = slot2436();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] . \"|\" layout[\"Layout\"] QualifiedIdentifier
case 2437:
  slot2437();

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" . layout[\"Layout\"] QualifiedIdentifier
case 2438:
  cs = slot2438();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] . QualifiedIdentifier
case 2439:
  cs = slot2439();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier .
case 2440:
  cs = slot2440();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= . QualifiedIdentifier
case 2441:
  cs = slot2441();
  break;

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= QualifiedIdentifier .
case 2442:
  cs = slot2442();
  break;

// CatchClause
case 2113:
  cs = slot2113();
  break;

// CatchClause ::= . \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2114:
  slot2114();

// CatchClause ::= \"catch\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2115:
  cs = slot2115();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2116:
  slot2116();

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2117:
  cs = slot2117();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2118:
  cs = slot2118();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* . layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2119:
  cs = slot2119();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] . CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2120:
  cs = slot2120();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType . layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2121:
  cs = slot2121();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] . Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2122:
  cs = slot2122();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier . layout[\"Layout\"] \")\" layout[\"Layout\"] Block
case 2123:
  cs = slot2123();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] . \")\" layout[\"Layout\"] Block
case 2124:
  slot2124();

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" . layout[\"Layout\"] Block
case 2125:
  cs = slot2125();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] . Block
case 2126:
  cs = slot2126();
  break;

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block .
case 2127:
  cs = slot2127();
  break;

// PackageDeclaration?
case 2162:
  cs = slot2162();
  break;

// PackageDeclaration? ::= .
case 2609:
  cs = slot2609();
  break;

// PackageDeclaration? ::= . PackageDeclaration
case 2610:
  cs = slot2610();
  break;

// PackageDeclaration? ::= PackageDeclaration .
case 2611:
  cs = slot2611();
  break;

// TypeArgumentsOrDiamond
case 2177:
  cs = slot2177();
  break;

// TypeArgumentsOrDiamond ::= . \"<\" layout[\"Layout\"] \">\"
case 2178:
  slot2178();

// TypeArgumentsOrDiamond ::= \"<\" . layout[\"Layout\"] \">\"
case 2179:
  cs = slot2179();
  break;

// TypeArgumentsOrDiamond ::= \"<\" layout[\"Layout\"] . \">\"
case 2180:
  cs = slot2180();
  break;

// TypeArgumentsOrDiamond ::= \"<\" layout[\"Layout\"] \">\" .
case 2181:
  cs = slot2181();
  break;

// TypeArgumentsOrDiamond ::= . TypeArguments
case 2182:
  cs = slot2182();
  break;

// TypeArgumentsOrDiamond ::= TypeArguments .
case 2183:
  cs = slot2183();
  break;

// Sign
case 2184:
  cs = slot2184();
  break;

// Sign ::= . [+-]
case 2185:
  cs = slot2185();
  break;

// Sign ::= [+-] .
case 2186:
  cs = slot2186();
  break;

// LocalVariableDeclaration
case 2189:
  cs = slot2189();
  break;

// LocalVariableDeclaration ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2288:
  cs = slot2288();
  break;

// LocalVariableDeclaration ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2289:
  cs = slot2289();
  break;

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2290:
  cs = slot2290();
  break;

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2291:
  cs = slot2291();
  break;

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2292:
  cs = slot2292();
  break;

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
case 2293:
  cs = slot2293();
  break;

// NotStarNotSlash
case 2192:
  cs = slot2192();
  break;

// NotStarNotSlash ::= . InputCharacter
case 2193:
  cs = slot2193();
  break;

// NotStarNotSlash ::= InputCharacter .
case 2194:
  cs = slot2194();
  break;

// NotStarNotSlash ::= . LineTerminator
case 2195:
  cs = slot2195();
  break;

// NotStarNotSlash ::= LineTerminator .
case 2196:
  cs = slot2196();
  break;

// NormalClassDeclaration
case 2235:
  cs = slot2235();
  break;

// NormalClassDeclaration ::= . {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2236:
  cs = slot2236();
  break;

// NormalClassDeclaration ::= {ClassModifier}* . layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2237:
  cs = slot2237();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] . \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2238:
  slot2238();

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2239:
  cs = slot2239();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2240:
  cs = slot2240();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2241:
  cs = slot2241();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2242:
  cs = slot2242();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2243:
  cs = slot2243();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2244:
  cs = slot2244();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? . layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2245:
  cs = slot2245();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] . (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
case 2246:
  cs = slot2246();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] ClassBody
case 2247:
  cs = slot2247();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . ClassBody
case 2248:
  cs = slot2248();
  break;

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody .
case 2249:
  cs = slot2249();
  break;

// TypeArgumentsOrDiamond?
case 2256:
  cs = slot2256();
  break;

// TypeArgumentsOrDiamond? ::= . TypeArgumentsOrDiamond
case 2462:
  cs = slot2462();
  break;

// TypeArgumentsOrDiamond? ::= TypeArgumentsOrDiamond .
case 2463:
  cs = slot2463();
  break;

// TypeArgumentsOrDiamond? ::= .
case 2464:
  cs = slot2464();
  break;

// ( | PrimaryQualifiedIdentifier)
case 2267:
  cs = slot2267();
  break;

// ( | PrimaryQualifiedIdentifier) ::= . Primary
case 2492:
  cs = slot2492();
  break;

// ( | PrimaryQualifiedIdentifier) ::= Primary .
case 2493:
  cs = slot2493();
  break;

// ( | PrimaryQualifiedIdentifier) ::= . QualifiedIdentifier
case 2494:
  cs = slot2494();
  break;

// ( | PrimaryQualifiedIdentifier) ::= QualifiedIdentifier .
case 2495:
  cs = slot2495();
  break;

// HexNumeral
case 2299:
  cs = slot2299();
  break;

// HexNumeral ::= . [0] [x] HexDigits
case 2506:
  slot2506();

// HexNumeral ::= [0] . [x] HexDigits
case 2507:
  slot2507();

// HexNumeral ::= [0] [x] . HexDigits
case 2508:
  cs = slot2508();
  break;

// HexNumeral ::= [0] [x] HexDigits .
case 2509:
  cs = slot2509();
  break;

// HexNumeral ::= . [0] [X] HexDigits
case 2510:
  slot2510();

// HexNumeral ::= [0] . [X] HexDigits
case 2511:
  slot2511();

// HexNumeral ::= [0] [X] . HexDigits
case 2512:
  cs = slot2512();
  break;

// HexNumeral ::= [0] [X] HexDigits .
case 2513:
  cs = slot2513();
  break;

// Sign?
case 2315:
  cs = slot2315();
  break;

// Sign? ::= . Sign
case 2489:
  cs = slot2489();
  break;

// Sign? ::= Sign .
case 2490:
  cs = slot2490();
  break;

// Sign? ::= .
case 2491:
  cs = slot2491();
  break;

// HexDigits?
case 2321:
  cs = slot2321();
  break;

// HexDigits? ::= .
case 2322:
  cs = slot2322();
  break;

// HexDigits? ::= . HexDigits
case 2323:
  cs = slot2323();
  break;

// HexDigits? ::= HexDigits .
case 2324:
  cs = slot2324();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+
case 2325:
  cs = slot2325();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= . {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceMemberDeclaration
case 2326:
  cs = slot2326();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] InterfaceMemberDeclaration
case 2327:
  cs = slot2327();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . InterfaceMemberDeclaration
case 2328:
  cs = slot2328();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceMemberDeclaration .
case 2329:
  cs = slot2329();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= . InterfaceMemberDeclaration
case 2330:
  cs = slot2330();
  break;

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= InterfaceMemberDeclaration .
case 2331:
  cs = slot2331();
  break;

// StringCharacter*
case 2346:
  cs = slot2346();
  break;

// StringCharacter* ::= .
case 2525:
  cs = slot2525();
  break;

// StringCharacter* ::= . StringCharacter* StringCharacter
case 2526:
  cs = slot2526();
  break;

// StringCharacter* ::= StringCharacter* . StringCharacter
case 2527:
  cs = slot2527();
  break;

// StringCharacter* ::= StringCharacter* StringCharacter .
case 2528:
  cs = slot2528();
  break;

// (\"extends\" layout[\"Layout\"] TypeList)?
case 2356:
  cs = slot2356();
  break;

// (\"extends\" layout[\"Layout\"] TypeList)? ::= .
case 2357:
  cs = slot2357();
  break;

// (\"extends\" layout[\"Layout\"] TypeList)? ::= . (\"extends\" layout[\"Layout\"] TypeList)
case 2358:
  cs = slot2358();
  break;

// (\"extends\" layout[\"Layout\"] TypeList)? ::= (\"extends\" layout[\"Layout\"] TypeList) .
case 2359:
  cs = slot2359();
  break;

// empty()
case 2422:
  cs = slot2422();
  break;

// empty() ::= .
case 2423:
  cs = slot2423();
  break;

// FieldDeclaration
case 2449:
  cs = slot2449();
  break;

// FieldDeclaration ::= . {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2450:
  cs = slot2450();
  break;

// FieldDeclaration ::= {FieldModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2451:
  cs = slot2451();
  break;

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2452:
  cs = slot2452();
  break;

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
case 2453:
  cs = slot2453();
  break;

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"
case 2454:
  cs = slot2454();
  break;

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"
case 2455:
  cs = slot2455();
  break;

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"
case 2456:
  cs = slot2456();
  break;

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .
case 2457:
  cs = slot2457();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+
case 2503:
  cs = slot2503();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer
case 2529:
  cs = slot2529();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer
case 2530:
  cs = slot2530();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] VariableInitializer
case 2531:
  slot2531();

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] VariableInitializer
case 2532:
  cs = slot2532();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . VariableInitializer
case 2533:
  cs = slot2533();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer .
case 2534:
  cs = slot2534();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . VariableInitializer
case 2535:
  cs = slot2535();
  break;

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= VariableInitializer .
case 2536:
  cs = slot2536();
  break;

// TypeVariable
case 2541:
  cs = slot2541();
  break;

// TypeVariable ::= . Identifier
case 2657:
  cs = slot2657();
  break;

// TypeVariable ::= Identifier .
case 2658:
  cs = slot2658();
  break;

// TypeBound?
case 2544:
  cs = slot2544();
  break;

// TypeBound? ::= . TypeBound
case 2697:
  cs = slot2697();
  break;

// TypeBound? ::= TypeBound .
case 2698:
  cs = slot2698();
  break;

// TypeBound? ::= .
case 2699:
  cs = slot2699();
  break;

// InstanceInitializer
case 2567:
  cs = slot2567();
  break;

// InstanceInitializer ::= . Block
case 2568:
  cs = slot2568();
  break;

// InstanceInitializer ::= Block .
case 2569:
  cs = slot2569();
  break;

// ClassMemberDeclaration
case 2570:
  cs = slot2570();
  break;

// ClassMemberDeclaration ::= . InterfaceDeclaration
case 2571:
  cs = slot2571();
  break;

// ClassMemberDeclaration ::= InterfaceDeclaration .
case 2572:
  cs = slot2572();
  break;

// ClassMemberDeclaration ::= . ClassDeclaration
case 2573:
  cs = slot2573();
  break;

// ClassMemberDeclaration ::= ClassDeclaration .
case 2574:
  cs = slot2574();
  break;

// ClassMemberDeclaration ::= . MethodDeclaration
case 2575:
  cs = slot2575();
  break;

// ClassMemberDeclaration ::= MethodDeclaration .
case 2576:
  cs = slot2576();
  break;

// ClassMemberDeclaration ::= . FieldDeclaration
case 2577:
  cs = slot2577();
  break;

// ClassMemberDeclaration ::= FieldDeclaration .
case 2578:
  cs = slot2578();
  break;

// ClassMemberDeclaration ::= . \";\"
case 2579:
  cs = slot2579();
  break;

// ClassMemberDeclaration ::= \";\" .
case 2580:
  cs = slot2580();
  break;

    }
  }
}

// ( | PrimitiveTypeReferenceType)
private final int slot0() {
  Set<Integer> set = slot0.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot0.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot0.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot0.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot0.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | PrimitiveTypeReferenceType) ::= . PrimitiveType
private final int slot2() {
  if (!slot1.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2);
    return L0;
  }
  if (slot2.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot3, slot1);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | PrimitiveTypeReferenceType) ::= PrimitiveType .
private final int slot3() {
  if (slot0.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | PrimitiveTypeReferenceType) ::= . ReferenceType
private final int slot5() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot5);
    return L0;
  }
  if (slot5.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot6, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | PrimitiveTypeReferenceType) ::= ReferenceType .
private final int slot6() {
  if (slot0.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType
private final int slot1() {
  Set<Integer> set = slot1.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PrimitiveType ::= . \"float\"
private final int slot482() {
  if (slot482.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 26);
  if (length < 0) {
    recordParseError(slot482);
    return L0;
  }
  if (slot482.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(26, ci, length);
  cn = slot482.getNodeCreator().create(this, slot483, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"float\" .
private final int slot483() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"long\"
private final int slot484() {
  if (slot484.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 27);
  if (length < 0) {
    recordParseError(slot484);
    return L0;
  }
  if (slot484.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(27, ci, length);
  cn = slot484.getNodeCreator().create(this, slot485, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"long\" .
private final int slot485() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"double\"
private final int slot486() {
  if (slot486.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 28);
  if (length < 0) {
    recordParseError(slot486);
    return L0;
  }
  if (slot486.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(28, ci, length);
  cn = slot486.getNodeCreator().create(this, slot487, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"double\" .
private final int slot487() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"int\"
private final int slot488() {
  if (slot488.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 29);
  if (length < 0) {
    recordParseError(slot488);
    return L0;
  }
  if (slot488.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(29, ci, length);
  cn = slot488.getNodeCreator().create(this, slot489, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"int\" .
private final int slot489() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"char\"
private final int slot490() {
  if (slot490.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 30);
  if (length < 0) {
    recordParseError(slot490);
    return L0;
  }
  if (slot490.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(30, ci, length);
  cn = slot490.getNodeCreator().create(this, slot491, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"char\" .
private final int slot491() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"boolean\"
private final int slot492() {
  if (slot492.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 31);
  if (length < 0) {
    recordParseError(slot492);
    return L0;
  }
  if (slot492.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(31, ci, length);
  cn = slot492.getNodeCreator().create(this, slot493, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"boolean\" .
private final int slot493() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"short\"
private final int slot494() {
  if (slot494.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 32);
  if (length < 0) {
    recordParseError(slot494);
    return L0;
  }
  if (slot494.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(32, ci, length);
  cn = slot494.getNodeCreator().create(this, slot495, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"short\" .
private final int slot495() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimitiveType ::= . \"byte\"
private final int slot496() {
  if (slot496.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 33);
  if (length < 0) {
    recordParseError(slot496);
    return L0;
  }
  if (slot496.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(33, ci, length);
  cn = slot496.getNodeCreator().create(this, slot497, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimitiveType ::= \"byte\" .
private final int slot497() {
  if (slot1.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ReferenceType
private final int slot4() {
  Set<Integer> set = slot4.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot4.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot4.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot4.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot4.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ReferenceType ::= . TypeDeclSpecifier layout[\"Layout\"] TypeArguments?
private final int slot443() {
  if (!slot442.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot443);
    return L0;
  }
  if (slot443.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot444, slot442);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceType ::= TypeDeclSpecifier . layout[\"Layout\"] TypeArguments?
private final int slot444() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot444);
    return L0;
  }
  if (slot444.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot446, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceType ::= TypeDeclSpecifier layout[\"Layout\"] . TypeArguments?
private final int slot446() {
  if (!slot445.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot446);
    return L0;
  }
  if (slot446.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot447, slot445);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceType ::= TypeDeclSpecifier layout[\"Layout\"] TypeArguments? .
private final int slot447() {
  if (slot4.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ReferenceType ::= . ArrayType
private final int slot449() {
  if (!slot448.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot449);
    return L0;
  }
  if (slot449.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot450, slot448);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceType ::= ArrayType .
private final int slot450() {
  if (slot4.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldAccess
private final int slot7() {
  Set<Integer> set = slot7.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot7.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot7.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot7.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot7.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FieldAccess ::= . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot8() {
if (slot8.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot8);
    return L0;
  }
  if (slot8.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot8.getNodeCreator().create(this, slot10, cn, cr);
  return L0;
}

// FieldAccess ::= \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot10() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot10);
    return L0;
  }
  if (slot10.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot11, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
private final int slot11() {
if (slot11.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot11);
    return L0;
  }
  if (slot11.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot11.getNodeCreator().create(this, slot12, cn, cr);
  return L0;
}

// FieldAccess ::= \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
private final int slot12() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot12);
    return L0;
  }
  if (slot12.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot14, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
private final int slot14() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot14);
    return L0;
  }
  if (slot14.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot15, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
private final int slot15() {
  if (slot7.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldAccess ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot17() {
  if (!slot16.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot17);
    return L0;
  }
  if (slot17.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot18, slot16);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot18() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot18);
    return L0;
  }
  if (slot18.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot19, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
private final int slot19() {
if (slot19.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot19);
    return L0;
  }
  if (slot19.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot19.getNodeCreator().create(this, slot20, cn, cr);
  return L0;
}

// FieldAccess ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
private final int slot20() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot20);
    return L0;
  }
  if (slot20.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot21, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
private final int slot21() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot21);
    return L0;
  }
  if (slot21.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot22, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
private final int slot22() {
  if (slot7.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldAccess ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot24() {
  if (!slot23.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot24);
    return L0;
  }
  if (slot24.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot25, slot23);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot25() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot25);
    return L0;
  }
  if (slot25.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot26, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot26() {
if (slot26.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot26);
    return L0;
  }
  if (slot26.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot26.getNodeCreator().create(this, slot27, cn, cr);
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot27() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot27);
    return L0;
  }
  if (slot27.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot28, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot28() {
if (slot28.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot28);
    return L0;
  }
  if (slot28.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot28.getNodeCreator().create(this, slot29, cn, cr);
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot29() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot29);
    return L0;
  }
  if (slot29.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot30, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
private final int slot30() {
if (slot30.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot30);
    return L0;
  }
  if (slot30.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot30.getNodeCreator().create(this, slot31, cn, cr);
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
private final int slot31() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot31);
    return L0;
  }
  if (slot31.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot32, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
private final int slot32() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot32);
    return L0;
  }
  if (slot32.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot33, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldAccess ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
private final int slot33() {
  if (slot7.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// layout[\"Layout\"]
private final int slot9() {
  Set<Integer> set = slot9.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot9.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot9.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot9.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot9.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// layout[\"Layout\"] ::= . ( | WhiteSpaceComment)*
private final int slot2430() {
  if (!slot210.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2430);
    return L0;
  }
  if (slot2430.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2431, slot210);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// layout[\"Layout\"] ::= ( | WhiteSpaceComment)* .
private final int slot2431() {
  if (slot9.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Identifier
private final int slot13() {
  Set<Integer> set = slot13.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot13.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot13.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot13.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot13.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Identifier ::= . IdentifierChars
private final int slot462() {
  if (!slot461.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot462);
    return L0;
  }
  if (slot462.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot463, slot461);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Identifier ::= IdentifierChars .
private final int slot463() {
  if (slot13.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Primary
private final int slot16() {
  Set<Integer> set = slot16.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot16.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot16.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot16.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot16.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Primary ::= . PrimaryNoNewArray
private final int slot818() {
  if (!slot75.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot818);
    return L0;
  }
  if (slot818.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot819, slot75);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Primary ::= PrimaryNoNewArray .
private final int slot819() {
  if (slot16.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Primary ::= . ArrayCreationExpression
private final int slot820() {
  if (!slot502.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot820);
    return L0;
  }
  if (slot820.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot821, slot502);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Primary ::= ArrayCreationExpression .
private final int slot821() {
  if (slot16.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassName
private final int slot23() {
  Set<Integer> set = slot23.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot23.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot23.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot23.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot23.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassName ::= . QualifiedIdentifier
private final int slot2319() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2319);
    return L0;
  }
  if (slot2319.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2320, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassName ::= QualifiedIdentifier .
private final int slot2320() {
  if (slot23.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DefaultValue
private final int slot34() {
  Set<Integer> set = slot34.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot34.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot34.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot34.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot34.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DefaultValue ::= . \"default\" layout[\"Layout\"] ElementValue
private final int slot35() {
if (slot35.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 4);
  if (length < 0) {
    recordParseError(slot35);
    return L0;
  }
  if (slot35.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(4, ci, length);
  cn = slot35.getNodeCreator().create(this, slot36, cn, cr);
  return L0;
}

// DefaultValue ::= \"default\" . layout[\"Layout\"] ElementValue
private final int slot36() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot36);
    return L0;
  }
  if (slot36.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot38, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DefaultValue ::= \"default\" layout[\"Layout\"] . ElementValue
private final int slot38() {
  if (!slot37.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot38);
    return L0;
  }
  if (slot38.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot39, slot37);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DefaultValue ::= \"default\" layout[\"Layout\"] ElementValue .
private final int slot39() {
  if (slot34.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValue
private final int slot37() {
  Set<Integer> set = slot37.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot37.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot37.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot37.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot37.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ElementValue ::= . ElementValueArrayInitializer
private final int slot2197() {
  if (!slot424.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2197);
    return L0;
  }
  if (slot2197.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2198, slot424);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValue ::= ElementValueArrayInitializer .
private final int slot2198() {
  if (slot37.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValue ::= . ConditionalExpression
private final int slot2199() {
  if (!slot826.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2199);
    return L0;
  }
  if (slot2199.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2200, slot826);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValue ::= ConditionalExpression .
private final int slot2200() {
  if (slot37.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValue ::= . Annotation
private final int slot2201() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2201);
    return L0;
  }
  if (slot2201.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2202, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValue ::= Annotation .
private final int slot2202() {
  if (slot37.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodDeclaration
private final int slot40() {
  Set<Integer> set = slot40.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot40.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot40.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot40.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot40.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodDeclaration ::= . MethodHeader layout[\"Layout\"] MethodBody
private final int slot42() {
  if (!slot41.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot42);
    return L0;
  }
  if (slot42.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot43, slot41);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclaration ::= MethodHeader . layout[\"Layout\"] MethodBody
private final int slot43() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot43);
    return L0;
  }
  if (slot43.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot45, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclaration ::= MethodHeader layout[\"Layout\"] . MethodBody
private final int slot45() {
  if (!slot44.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot45);
    return L0;
  }
  if (slot45.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot46, slot44);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclaration ::= MethodHeader layout[\"Layout\"] MethodBody .
private final int slot46() {
  if (slot40.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodHeader
private final int slot41() {
  Set<Integer> set = slot41.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot41.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot41.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot41.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot41.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodHeader ::= . {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2647() {
  if (!slot2076.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2647);
    return L0;
  }
  if (slot2647.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2648, slot2076);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2648() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2648);
    return L0;
  }
  if (slot2648.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2649, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2649() {
  if (!slot771.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2649);
    return L0;
  }
  if (slot2649.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2650, slot771);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2650() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2650);
    return L0;
  }
  if (slot2650.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2651, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2651() {
  if (!slot843.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2651);
    return L0;
  }
  if (slot2651.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2652, slot843);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result . layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2652() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2652);
    return L0;
  }
  if (slot2652.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2653, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] . MethodDeclarator layout[\"Layout\"] Throws?
private final int slot2653() {
  if (!slot1236.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2653);
    return L0;
  }
  if (slot2653.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2654, slot1236);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator . layout[\"Layout\"] Throws?
private final int slot2654() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2654);
    return L0;
  }
  if (slot2654.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2655, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] . Throws?
private final int slot2655() {
  if (!slot994.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2655);
    return L0;
  }
  if (slot2655.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2656, slot994);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodHeader ::= {MethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? .
private final int slot2656() {
  if (slot41.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodBody
private final int slot44() {
  Set<Integer> set = slot44.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot44.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot44.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot44.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot44.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodBody ::= . Block
private final int slot1502() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1502);
    return L0;
  }
  if (slot1502.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1503, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodBody ::= Block .
private final int slot1503() {
  if (slot44.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodBody ::= . \";\"
private final int slot1504() {
  if (slot1504.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1504);
    return L0;
  }
  if (slot1504.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1504.getNodeCreator().create(this, slot1505, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodBody ::= \";\" .
private final int slot1505() {
  if (slot44.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigitOrUnderscore
private final int slot47() {
  Set<Integer> set = slot47.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot47.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot47.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot47.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot47.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalDigitOrUnderscore ::= . OctalDigit
private final int slot49() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot49);
    return L0;
  }
  if (slot49.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot50, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigitOrUnderscore ::= OctalDigit .
private final int slot50() {
  if (slot47.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigitOrUnderscore ::= . [_]
private final int slot51() {
  if (slot51.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 5);
  if (length < 0) {
    recordParseError(slot51);
    return L0;
  }
  if (slot51.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(5, ci, length);
  cn = slot51.getNodeCreator().create(this, slot52, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// OctalDigitOrUnderscore ::= [_] .
private final int slot52() {
  if (slot47.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigit
private final int slot48() {
  Set<Integer> set = slot48.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot48.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot48.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot48.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot48.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalDigit ::= . [0-7]
private final int slot1427() {
  if (slot1427.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 103);
  if (length < 0) {
    recordParseError(slot1427);
    return L0;
  }
  if (slot1427.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(103, ci, length);
  cn = slot1427.getNodeCreator().create(this, slot1428, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// OctalDigit ::= [0-7] .
private final int slot1428() {
  if (slot48.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorBody
private final int slot53() {
  Set<Integer> set = slot53.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot53.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot53.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot53.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot53.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstructorBody ::= . \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot54() {
if (slot54.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot54);
    return L0;
  }
  if (slot54.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot54.getNodeCreator().create(this, slot55, cn, cr);
  return L0;
}

// ConstructorBody ::= \"{\" . layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot55() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot55);
    return L0;
  }
  if (slot55.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot57, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorBody ::= \"{\" layout[\"Layout\"] . ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot57() {
  if (!slot56.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot57);
    return L0;
  }
  if (slot57.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot58, slot56);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? . layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot58() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot58);
    return L0;
  }
  if (slot58.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot60, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] . {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot60() {
  if (!slot59.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot60);
    return L0;
  }
  if (slot60.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot61, slot59);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* . layout[\"Layout\"] \"}\"
private final int slot61() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot61);
    return L0;
  }
  if (slot61.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot62, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] . \"}\"
private final int slot62() {
  if (slot62.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot62);
    return L0;
  }
  if (slot62.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot62.getNodeCreator().create(this, slot63, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstructorBody ::= \"{\" layout[\"Layout\"] ExplicitConstructorInvocation? layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\" .
private final int slot63() {
  if (slot53.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitConstructorInvocation?
private final int slot56() {
  Set<Integer> set = slot56.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot56.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot56.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot56.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot56.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExplicitConstructorInvocation? ::= . ExplicitConstructorInvocation
private final int slot768() {
  if (!slot767.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot768);
    return L0;
  }
  if (slot768.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot769, slot767);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation? ::= ExplicitConstructorInvocation .
private final int slot769() {
  if (slot56.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitConstructorInvocation? ::= .
private final int slot770() {
  if (slot56.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot56, ci, ci);
    sppfLookup.addPackedNode(node, slot770, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {BlockStatement}*
private final int slot59() {
  Set<Integer> set = slot59.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot59.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot59.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot59.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot59.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {BlockStatement}* ::= .
private final int slot1128() {
  if (slot59.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot59, ci, ci);
    sppfLookup.addPackedNode(node, slot1128, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {BlockStatement}* ::= . {BlockStatement layout[\"Layout\"]}+
private final int slot1129() {
  if (!slot848.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1129);
    return L0;
  }
  if (slot1129.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1130, slot848);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {BlockStatement}* ::= {BlockStatement layout[\"Layout\"]}+ .
private final int slot1130() {
  if (slot59.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BlockStatement
private final int slot64() {
  Set<Integer> set = slot64.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot64.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot64.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot64.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot64.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BlockStatement ::= . LocalVariableDeclarationStatement
private final int slot66() {
  if (!slot65.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot66);
    return L0;
  }
  if (slot66.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot67, slot65);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BlockStatement ::= LocalVariableDeclarationStatement .
private final int slot67() {
  if (slot64.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BlockStatement ::= . ClassDeclaration
private final int slot69() {
  if (!slot68.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot69);
    return L0;
  }
  if (slot69.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot70, slot68);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BlockStatement ::= ClassDeclaration .
private final int slot70() {
  if (slot64.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BlockStatement ::= . Statement
private final int slot72() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot72);
    return L0;
  }
  if (slot72.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot73, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BlockStatement ::= Statement .
private final int slot73() {
  if (slot64.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LocalVariableDeclarationStatement
private final int slot65() {
  Set<Integer> set = slot65.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot65.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot65.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot65.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot65.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot855() {
  if (!slot542.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot855);
    return L0;
  }
  if (slot855.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot856, slot542);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot856() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot856);
    return L0;
  }
  if (slot856.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot857, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot857() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot857);
    return L0;
  }
  if (slot857.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot858, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot858() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot858);
    return L0;
  }
  if (slot858.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot860, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"
private final int slot860() {
  if (!slot859.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot860);
    return L0;
  }
  if (slot860.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot861, slot859);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"
private final int slot861() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot861);
    return L0;
  }
  if (slot861.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot862, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"
private final int slot862() {
  if (slot862.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot862);
    return L0;
  }
  if (slot862.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot862.getNodeCreator().create(this, slot863, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclarationStatement ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .
private final int slot863() {
  if (slot65.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassDeclaration
private final int slot68() {
  Set<Integer> set = slot68.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot68.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot68.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot68.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot68.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassDeclaration ::= . NormalClassDeclaration
private final int slot2622() {
  if (!slot2235.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2622);
    return L0;
  }
  if (slot2622.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2623, slot2235);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassDeclaration ::= NormalClassDeclaration .
private final int slot2623() {
  if (slot68.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassDeclaration ::= . EnumDeclaration
private final int slot2624() {
  if (!slot932.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2624);
    return L0;
  }
  if (slot2624.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2625, slot932);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassDeclaration ::= EnumDeclaration .
private final int slot2625() {
  if (slot68.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Statement
private final int slot71() {
  Set<Integer> set = slot71.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot71.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot71.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot71.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot71.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Statement ::= . StatementWithoutTrailingSubstatement
private final int slot2360() {
  if (!slot676.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2360);
    return L0;
  }
  if (slot2360.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2361, slot676);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= StatementWithoutTrailingSubstatement .
private final int slot2361() {
  if (slot71.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Statement ::= . ForStatement
private final int slot2362() {
  if (!slot1071.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2362);
    return L0;
  }
  if (slot2362.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2363, slot1071);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= ForStatement .
private final int slot2363() {
  if (slot71.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Statement ::= . Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] Statement
private final int slot2364() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2364);
    return L0;
  }
  if (slot2364.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2365, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= Identifier . layout[\"Layout\"] \":\" layout[\"Layout\"] Statement
private final int slot2365() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2365);
    return L0;
  }
  if (slot2365.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2366, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= Identifier layout[\"Layout\"] . \":\" layout[\"Layout\"] Statement
private final int slot2366() {
if (slot2366.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot2366);
    return L0;
  }
  if (slot2366.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot2366.getNodeCreator().create(this, slot2367, cn, cr);
  return L0;
}

// Statement ::= Identifier layout[\"Layout\"] \":\" . layout[\"Layout\"] Statement
private final int slot2367() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2367);
    return L0;
  }
  if (slot2367.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2368, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] . Statement
private final int slot2368() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2368);
    return L0;
  }
  if (slot2368.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2369, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] Statement .
private final int slot2369() {
  if (slot71.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Statement ::= . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2370() {
if (slot2370.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 49);
  if (length < 0) {
    recordParseError(slot2370);
    return L0;
  }
  if (slot2370.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(49, ci, length);
  cn = slot2370.getNodeCreator().create(this, slot2371, cn, cr);
  return L0;
}

// Statement ::= \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2371() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2371);
    return L0;
  }
  if (slot2371.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2372, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2372() {
if (slot2372.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2372);
    return L0;
  }
  if (slot2372.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2372.getNodeCreator().create(this, slot2373, cn, cr);
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2373() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2373);
    return L0;
  }
  if (slot2373.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2374, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2374() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2374);
    return L0;
  }
  if (slot2374.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2375, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2375() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2375);
    return L0;
  }
  if (slot2375.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2376, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
private final int slot2376() {
if (slot2376.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2376);
    return L0;
  }
  if (slot2376.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2376.getNodeCreator().create(this, slot2377, cn, cr);
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
private final int slot2377() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2377);
    return L0;
  }
  if (slot2377.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2378, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
private final int slot2378() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2378);
    return L0;
  }
  if (slot2378.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2379, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
private final int slot2379() {
  if (slot71.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Statement ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2380() {
if (slot2380.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 64);
  if (length < 0) {
    recordParseError(slot2380);
    return L0;
  }
  if (slot2380.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(64, ci, length);
  cn = slot2380.getNodeCreator().create(this, slot2381, cn, cr);
  return L0;
}

// Statement ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2381() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2381);
    return L0;
  }
  if (slot2381.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2382, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2382() {
if (slot2382.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2382);
    return L0;
  }
  if (slot2382.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2382.getNodeCreator().create(this, slot2383, cn, cr);
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2383() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2383);
    return L0;
  }
  if (slot2383.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2384, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2384() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2384);
    return L0;
  }
  if (slot2384.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2385, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot2385() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2385);
    return L0;
  }
  if (slot2385.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2386, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
private final int slot2386() {
if (slot2386.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2386);
    return L0;
  }
  if (slot2386.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2386.getNodeCreator().create(this, slot2387, cn, cr);
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
private final int slot2387() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2387);
    return L0;
  }
  if (slot2387.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2388, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
private final int slot2388() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2388);
    return L0;
  }
  if (slot2388.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2389, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
private final int slot2389() {
  if (slot71.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Statement ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2390() {
if (slot2390.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 64);
  if (length < 0) {
    recordParseError(slot2390);
    return L0;
  }
  if (slot2390.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(64, ci, length);
  cn = slot2390.getNodeCreator().create(this, slot2391, cn, cr);
  return L0;
}

// Statement ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2391() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2391);
    return L0;
  }
  if (slot2391.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2392, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2392() {
if (slot2392.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2392);
    return L0;
  }
  if (slot2392.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2392.getNodeCreator().create(this, slot2393, cn, cr);
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2393() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2393);
    return L0;
  }
  if (slot2393.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2394, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2394() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2394);
    return L0;
  }
  if (slot2394.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2395, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2395() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2395);
    return L0;
  }
  if (slot2395.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2396, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2396() {
if (slot2396.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2396);
    return L0;
  }
  if (slot2396.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2396.getNodeCreator().create(this, slot2397, cn, cr);
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2397() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2397);
    return L0;
  }
  if (slot2397.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2398, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2398() {
  if (!slot675.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2398);
    return L0;
  }
  if (slot2398.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2399, slot675);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf . layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement
private final int slot2399() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2399);
    return L0;
  }
  if (slot2399.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2400, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] . \"else\" layout[\"Layout\"] Statement
private final int slot2400() {
if (slot2400.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 68);
  if (length < 0) {
    recordParseError(slot2400);
    return L0;
  }
  if (slot2400.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(68, ci, length);
  cn = slot2400.getNodeCreator().create(this, slot2401, cn, cr);
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" . layout[\"Layout\"] Statement
private final int slot2401() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2401);
    return L0;
  }
  if (slot2401.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2402, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] . Statement
private final int slot2402() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2402);
    return L0;
  }
  if (slot2402.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2403, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Statement ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] Statement .
private final int slot2403() {
  if (slot71.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArrayAccess
private final int slot74() {
  Set<Integer> set = slot74.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot74.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot74.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot74.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot74.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ArrayAccess ::= . PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot76() {
  if (!slot75.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot76);
    return L0;
  }
  if (slot76.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot77, slot75);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray . layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot77() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot77);
    return L0;
  }
  if (slot77.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot78, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot78() {
if (slot78.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 8);
  if (length < 0) {
    recordParseError(slot78);
    return L0;
  }
  if (slot78.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(8, ci, length);
  cn = slot78.getNodeCreator().create(this, slot79, cn, cr);
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot79() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot79);
    return L0;
  }
  if (slot79.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot81, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"
private final int slot81() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot81);
    return L0;
  }
  if (slot81.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot82, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"
private final int slot82() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot82);
    return L0;
  }
  if (slot82.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot83, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"
private final int slot83() {
  if (slot83.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 9);
  if (length < 0) {
    recordParseError(slot83);
    return L0;
  }
  if (slot83.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(9, ci, length);
  cn = slot83.getNodeCreator().create(this, slot84, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= PrimaryNoNewArray layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .
private final int slot84() {
  if (slot74.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArrayAccess ::= . ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot86() {
  if (!slot85.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot86);
    return L0;
  }
  if (slot86.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot87, slot85);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= ExpressionName . layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot87() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot87);
    return L0;
  }
  if (slot87.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot88, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= ExpressionName layout[\"Layout\"] . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot88() {
if (slot88.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 8);
  if (length < 0) {
    recordParseError(slot88);
    return L0;
  }
  if (slot88.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(8, ci, length);
  cn = slot88.getNodeCreator().create(this, slot89, cn, cr);
  return L0;
}

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot89() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot89);
    return L0;
  }
  if (slot89.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot90, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"
private final int slot90() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot90);
    return L0;
  }
  if (slot90.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot91, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"
private final int slot91() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot91);
    return L0;
  }
  if (slot91.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot92, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"
private final int slot92() {
  if (slot92.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 9);
  if (length < 0) {
    recordParseError(slot92);
    return L0;
  }
  if (slot92.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(9, ci, length);
  cn = slot92.getNodeCreator().create(this, slot93, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ArrayAccess ::= ExpressionName layout[\"Layout\"] \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .
private final int slot93() {
  if (slot74.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray
private final int slot75() {
  Set<Integer> set = slot75.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot75.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot75.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot75.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot75.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PrimaryNoNewArray ::= . Type layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
private final int slot1814() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1814);
    return L0;
  }
  if (slot1814.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1815, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= Type . layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
private final int slot1815() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1815);
    return L0;
  }
  if (slot1815.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1816, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= Type layout[\"Layout\"] . \".\" layout[\"Layout\"] \"class\"
private final int slot1816() {
if (slot1816.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot1816);
    return L0;
  }
  if (slot1816.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot1816.getNodeCreator().create(this, slot1817, cn, cr);
  return L0;
}

// PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" . layout[\"Layout\"] \"class\"
private final int slot1817() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1817);
    return L0;
  }
  if (slot1817.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1818, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" layout[\"Layout\"] . \"class\"
private final int slot1818() {
  if (slot1818.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 70);
  if (length < 0) {
    recordParseError(slot1818);
    return L0;
  }
  if (slot1818.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(70, ci, length);
  cn = slot1818.getNodeCreator().create(this, slot1819, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= Type layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\" .
private final int slot1819() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . ArrayAccess
private final int slot1820() {
  if (!slot74.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1820);
    return L0;
  }
  if (slot1820.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1821, slot74);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= ArrayAccess .
private final int slot1821() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . MethodInvocation
private final int slot1822() {
  if (!slot129.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1822);
    return L0;
  }
  if (slot1822.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1823, slot129);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= MethodInvocation .
private final int slot1823() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . ClassInstanceCreationExpression
private final int slot1824() {
  if (!slot1555.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1824);
    return L0;
  }
  if (slot1824.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1825, slot1555);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= ClassInstanceCreationExpression .
private final int slot1825() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\"
private final int slot1826() {
  if (!slot23.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1826);
    return L0;
  }
  if (slot1826.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1827, slot23);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\"
private final int slot1827() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1827);
    return L0;
  }
  if (slot1827.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1828, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"this\"
private final int slot1828() {
if (slot1828.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot1828);
    return L0;
  }
  if (slot1828.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot1828.getNodeCreator().create(this, slot1829, cn, cr);
  return L0;
}

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"this\"
private final int slot1829() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1829);
    return L0;
  }
  if (slot1829.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1830, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"this\"
private final int slot1830() {
  if (slot1830.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 53);
  if (length < 0) {
    recordParseError(slot1830);
    return L0;
  }
  if (slot1830.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(53, ci, length);
  cn = slot1830.getNodeCreator().create(this, slot1831, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"this\" .
private final int slot1831() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\"
private final int slot1832() {
if (slot1832.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1832);
    return L0;
  }
  if (slot1832.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1832.getNodeCreator().create(this, slot1833, cn, cr);
  return L0;
}

// PrimaryNoNewArray ::= \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\"
private final int slot1833() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1833);
    return L0;
  }
  if (slot1833.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1834, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\"
private final int slot1834() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1834);
    return L0;
  }
  if (slot1834.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1835, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\"
private final int slot1835() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1835);
    return L0;
  }
  if (slot1835.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1836, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\"
private final int slot1836() {
  if (slot1836.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1836);
    return L0;
  }
  if (slot1836.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1836.getNodeCreator().create(this, slot1837, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" .
private final int slot1837() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . FieldAccess
private final int slot1838() {
  if (!slot7.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1838);
    return L0;
  }
  if (slot1838.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1839, slot7);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= FieldAccess .
private final int slot1839() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . \"this\"
private final int slot1840() {
  if (slot1840.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 53);
  if (length < 0) {
    recordParseError(slot1840);
    return L0;
  }
  if (slot1840.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(53, ci, length);
  cn = slot1840.getNodeCreator().create(this, slot1841, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"this\" .
private final int slot1841() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
private final int slot1842() {
if (slot1842.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 58);
  if (length < 0) {
    recordParseError(slot1842);
    return L0;
  }
  if (slot1842.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(58, ci, length);
  cn = slot1842.getNodeCreator().create(this, slot1843, cn, cr);
  return L0;
}

// PrimaryNoNewArray ::= \"void\" . layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\"
private final int slot1843() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1843);
    return L0;
  }
  if (slot1843.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1844, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] . \".\" layout[\"Layout\"] \"class\"
private final int slot1844() {
if (slot1844.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot1844);
    return L0;
  }
  if (slot1844.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot1844.getNodeCreator().create(this, slot1845, cn, cr);
  return L0;
}

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" . layout[\"Layout\"] \"class\"
private final int slot1845() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1845);
    return L0;
  }
  if (slot1845.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1846, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] . \"class\"
private final int slot1846() {
  if (slot1846.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 70);
  if (length < 0) {
    recordParseError(slot1846);
    return L0;
  }
  if (slot1846.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(70, ci, length);
  cn = slot1846.getNodeCreator().create(this, slot1847, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= \"void\" layout[\"Layout\"] \".\" layout[\"Layout\"] \"class\" .
private final int slot1847() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PrimaryNoNewArray ::= . Literal
private final int slot1848() {
  if (!slot1565.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1848);
    return L0;
  }
  if (slot1848.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1849, slot1565);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PrimaryNoNewArray ::= Literal .
private final int slot1849() {
  if (slot75.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Expression
private final int slot80() {
  Set<Integer> set = slot80.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot80.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot80.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot80.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot80.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Expression ::= . AssignmentExpression
private final int slot1595() {
  if (!slot1546.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1595);
    return L0;
  }
  if (slot1595.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1596, slot1546);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Expression ::= AssignmentExpression .
private final int slot1596() {
  if (slot80.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExpressionName
private final int slot85() {
  Set<Integer> set = slot85.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot85.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot85.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot85.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot85.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExpressionName ::= . QualifiedIdentifier
private final int slot100() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot100);
    return L0;
  }
  if (slot100.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot101, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExpressionName ::= QualifiedIdentifier .
private final int slot101() {
  if (slot85.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression)
private final int slot94() {
  Set<Integer> set = slot94.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot94.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot94.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot94.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot94.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression) ::= . \":\" layout[\"Layout\"] Expression
private final int slot95() {
if (slot95.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot95);
    return L0;
  }
  if (slot95.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot95.getNodeCreator().create(this, slot96, cn, cr);
  return L0;
}

// (\":\" layout[\"Layout\"] Expression) ::= \":\" . layout[\"Layout\"] Expression
private final int slot96() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot96);
    return L0;
  }
  if (slot96.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot97, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression) ::= \":\" layout[\"Layout\"] . Expression
private final int slot97() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot97);
    return L0;
  }
  if (slot97.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot98, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression) ::= \":\" layout[\"Layout\"] Expression .
private final int slot98() {
  if (slot94.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// QualifiedIdentifier
private final int slot99() {
  Set<Integer> set = slot99.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot99.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot99.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot99.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot99.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// QualifiedIdentifier ::= . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+
private final int slot1524() {
  if (!slot1434.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1524);
    return L0;
  }
  if (slot1524.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1525, slot1434);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// QualifiedIdentifier ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ .
private final int slot1525() {
  if (slot99.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryExponent
private final int slot102() {
  Set<Integer> set = slot102.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot102.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot102.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot102.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot102.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryExponent ::= . BinaryExponentIndicator SignedInteger
private final int slot104() {
  if (!slot103.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot104);
    return L0;
  }
  if (slot104.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot106, slot103);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryExponent ::= BinaryExponentIndicator . SignedInteger
private final int slot106() {
  if (!slot105.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot106);
    return L0;
  }
  if (slot106.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot107, slot105);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryExponent ::= BinaryExponentIndicator SignedInteger .
private final int slot107() {
  if (slot102.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryExponentIndicator
private final int slot103() {
  Set<Integer> set = slot103.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot103.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot103.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot103.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot103.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryExponentIndicator ::= . [pP]
private final int slot2679() {
  if (slot2679.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 138);
  if (length < 0) {
    recordParseError(slot2679);
    return L0;
  }
  if (slot2679.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(138, ci, length);
  cn = slot2679.getNodeCreator().create(this, slot2680, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// BinaryExponentIndicator ::= [pP] .
private final int slot2680() {
  if (slot103.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// SignedInteger
private final int slot105() {
  Set<Integer> set = slot105.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot105.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot105.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot105.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot105.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// SignedInteger ::= . Sign? Digits
private final int slot2316() {
  if (!slot2315.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2316);
    return L0;
  }
  if (slot2316.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2317, slot2315);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SignedInteger ::= Sign? . Digits
private final int slot2317() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2317);
    return L0;
  }
  if (slot2317.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2318, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SignedInteger ::= Sign? Digits .
private final int slot2318() {
  if (slot105.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassModifier}*
private final int slot108() {
  Set<Integer> set = slot108.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot108.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot108.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot108.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot108.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ClassModifier}* ::= . {ClassModifier layout[\"Layout\"]}+
private final int slot110() {
  if (!slot109.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot110);
    return L0;
  }
  if (slot110.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot111, slot109);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassModifier}* ::= {ClassModifier layout[\"Layout\"]}+ .
private final int slot111() {
  if (slot108.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassModifier}* ::= .
private final int slot112() {
  if (slot108.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot108, ci, ci);
    sppfLookup.addPackedNode(node, slot112, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+
private final int slot109() {
  Set<Integer> set = slot109.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot109.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot109.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot109.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot109.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+ ::= . {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] ClassModifier
private final int slot203() {
  if (!slot109.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot203);
    return L0;
  }
  if (slot203.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot204, slot109);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ClassModifier
private final int slot204() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot204);
    return L0;
  }
  if (slot204.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot206, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ClassModifier
private final int slot206() {
  if (!slot205.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot206);
    return L0;
  }
  if (slot206.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot207, slot205);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+ ::= {ClassModifier layout[\"Layout\"]}+ layout[\"Layout\"] ClassModifier .
private final int slot207() {
  if (slot109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+ ::= . ClassModifier
private final int slot208() {
  if (!slot205.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot208);
    return L0;
  }
  if (slot208.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot209, slot205);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassModifier layout[\"Layout\"]}+ ::= ClassModifier .
private final int slot209() {
  if (slot109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Digits?
private final int slot113() {
  Set<Integer> set = slot113.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot113.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot113.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot113.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot113.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Digits? ::= .
private final int slot114() {
  if (slot113.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot113, ci, ci);
    sppfLookup.addPackedNode(node, slot114, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// Digits? ::= . Digits
private final int slot116() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot116);
    return L0;
  }
  if (slot116.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot117, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Digits? ::= Digits .
private final int slot117() {
  if (slot113.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Digits
private final int slot115() {
  Set<Integer> set = slot115.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot115.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot115.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot115.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot115.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Digits ::= . Digit
private final int slot1625() {
  if (!slot1153.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1625);
    return L0;
  }
  if (slot1625.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1626, slot1153);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Digits ::= Digit .
private final int slot1626() {
  if (slot115.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Digits ::= . Digit DigitOrUnderscore* Digit
private final int slot1627() {
  if (!slot1153.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1627);
    return L0;
  }
  if (slot1627.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1628, slot1153);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Digits ::= Digit . DigitOrUnderscore* Digit
private final int slot1628() {
  if (!slot123.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1628);
    return L0;
  }
  if (slot1628.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1629, slot123);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Digits ::= Digit DigitOrUnderscore* . Digit
private final int slot1629() {
  if (!slot1153.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1629);
    return L0;
  }
  if (slot1629.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1630, slot1153);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Digits ::= Digit DigitOrUnderscore* Digit .
private final int slot1630() {
  if (slot115.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExponentPart
private final int slot118() {
  Set<Integer> set = slot118.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot118.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot118.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot118.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot118.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExponentPart ::= . ExponentIndicator SignedInteger
private final int slot120() {
  if (!slot119.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot120);
    return L0;
  }
  if (slot120.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot121, slot119);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExponentPart ::= ExponentIndicator . SignedInteger
private final int slot121() {
  if (!slot105.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot121);
    return L0;
  }
  if (slot121.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot122, slot105);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExponentPart ::= ExponentIndicator SignedInteger .
private final int slot122() {
  if (slot118.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExponentIndicator
private final int slot119() {
  Set<Integer> set = slot119.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot119.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot119.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot119.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot119.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExponentIndicator ::= . [eE]
private final int slot2089() {
  if (slot2089.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 114);
  if (length < 0) {
    recordParseError(slot2089);
    return L0;
  }
  if (slot2089.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(114, ci, length);
  cn = slot2089.getNodeCreator().create(this, slot2090, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ExponentIndicator ::= [eE] .
private final int slot2090() {
  if (slot119.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DigitOrUnderscore*
private final int slot123() {
  Set<Integer> set = slot123.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot123.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot123.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot123.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot123.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DigitOrUnderscore* ::= . DigitOrUnderscore* DigitOrUnderscore
private final int slot124() {
  if (!slot123.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot124);
    return L0;
  }
  if (slot124.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot126, slot123);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DigitOrUnderscore* ::= DigitOrUnderscore* . DigitOrUnderscore
private final int slot126() {
  if (!slot125.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot126);
    return L0;
  }
  if (slot126.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot127, slot125);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DigitOrUnderscore* ::= DigitOrUnderscore* DigitOrUnderscore .
private final int slot127() {
  if (slot123.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DigitOrUnderscore* ::= .
private final int slot128() {
  if (slot123.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot123, ci, ci);
    sppfLookup.addPackedNode(node, slot128, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// DigitOrUnderscore
private final int slot125() {
  Set<Integer> set = slot125.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot125.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot125.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot125.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot125.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DigitOrUnderscore ::= . Digit
private final int slot1650() {
  if (!slot1153.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1650);
    return L0;
  }
  if (slot1650.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1651, slot1153);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DigitOrUnderscore ::= Digit .
private final int slot1651() {
  if (slot125.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DigitOrUnderscore ::= . [_]
private final int slot1652() {
  if (slot1652.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 5);
  if (length < 0) {
    recordParseError(slot1652);
    return L0;
  }
  if (slot1652.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(5, ci, length);
  cn = slot1652.getNodeCreator().create(this, slot1653, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// DigitOrUnderscore ::= [_] .
private final int slot1653() {
  if (slot125.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodInvocation
private final int slot129() {
  Set<Integer> set = slot129.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot129.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot129.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot129.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot129.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodInvocation ::= . MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot131() {
  if (!slot130.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot131);
    return L0;
  }
  if (slot131.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot132, slot130);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= MethodName . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot132() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot132);
    return L0;
  }
  if (slot132.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot133, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= MethodName layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot133() {
if (slot133.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot133);
    return L0;
  }
  if (slot133.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot133.getNodeCreator().create(this, slot134, cn, cr);
  return L0;
}

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot134() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot134);
    return L0;
  }
  if (slot134.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot136, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
private final int slot136() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot136);
    return L0;
  }
  if (slot136.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot137, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
private final int slot137() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot137);
    return L0;
  }
  if (slot137.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot138, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
private final int slot138() {
  if (slot138.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot138);
    return L0;
  }
  if (slot138.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot138.getNodeCreator().create(this, slot139, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= MethodName layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
private final int slot139() {
  if (slot129.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodInvocation ::= . TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot141() {
  if (!slot140.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot141);
    return L0;
  }
  if (slot141.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot142, slot140);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot142() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot142);
    return L0;
  }
  if (slot142.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot143, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot143() {
if (slot143.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot143);
    return L0;
  }
  if (slot143.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot143.getNodeCreator().create(this, slot144, cn, cr);
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot144() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot144);
    return L0;
  }
  if (slot144.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot146, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot146() {
  if (!slot145.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot146);
    return L0;
  }
  if (slot146.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot147, slot145);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot147() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot147);
    return L0;
  }
  if (slot147.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot148, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot148() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot148);
    return L0;
  }
  if (slot148.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot149, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot149() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot149);
    return L0;
  }
  if (slot149.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot150, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot150() {
if (slot150.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot150);
    return L0;
  }
  if (slot150.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot150.getNodeCreator().create(this, slot151, cn, cr);
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot151() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot151);
    return L0;
  }
  if (slot151.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot152, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
private final int slot152() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot152);
    return L0;
  }
  if (slot152.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot153, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
private final int slot153() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot153);
    return L0;
  }
  if (slot153.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot154, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
private final int slot154() {
  if (slot154.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot154);
    return L0;
  }
  if (slot154.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot154.getNodeCreator().create(this, slot155, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= TypeName layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
private final int slot155() {
  if (slot129.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodInvocation ::= . ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot156() {
  if (!slot23.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot156);
    return L0;
  }
  if (slot156.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot157, slot23);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName . layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot157() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot157);
    return L0;
  }
  if (slot157.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot158, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] . \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot158() {
if (slot158.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot158);
    return L0;
  }
  if (slot158.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot158.getNodeCreator().create(this, slot159, cn, cr);
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" . layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot159() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot159);
    return L0;
  }
  if (slot159.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot160, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot160() {
if (slot160.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot160);
    return L0;
  }
  if (slot160.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot160.getNodeCreator().create(this, slot161, cn, cr);
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot161() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot161);
    return L0;
  }
  if (slot161.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot162, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot162() {
if (slot162.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot162);
    return L0;
  }
  if (slot162.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot162.getNodeCreator().create(this, slot163, cn, cr);
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot163() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot163);
    return L0;
  }
  if (slot163.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot165, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot165() {
  if (!slot164.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot165);
    return L0;
  }
  if (slot165.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot166, slot164);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot166() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot166);
    return L0;
  }
  if (slot166.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot167, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot167() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot167);
    return L0;
  }
  if (slot167.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot168, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot168() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot168);
    return L0;
  }
  if (slot168.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot169, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot169() {
if (slot169.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot169);
    return L0;
  }
  if (slot169.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot169.getNodeCreator().create(this, slot170, cn, cr);
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot170() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot170);
    return L0;
  }
  if (slot170.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot171, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
private final int slot171() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot171);
    return L0;
  }
  if (slot171.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot172, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
private final int slot172() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot172);
    return L0;
  }
  if (slot172.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot173, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
private final int slot173() {
  if (slot173.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot173);
    return L0;
  }
  if (slot173.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot173.getNodeCreator().create(this, slot174, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= ClassName layout[\"Layout\"] \".\" layout[\"Layout\"] \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
private final int slot174() {
  if (slot129.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodInvocation ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot175() {
  if (!slot16.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot175);
    return L0;
  }
  if (slot175.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot176, slot16);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot176() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot176);
    return L0;
  }
  if (slot176.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot177, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot177() {
if (slot177.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot177);
    return L0;
  }
  if (slot177.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot177.getNodeCreator().create(this, slot178, cn, cr);
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot178() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot178);
    return L0;
  }
  if (slot178.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot179, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot179() {
  if (!slot164.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot179);
    return L0;
  }
  if (slot179.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot180, slot164);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot180() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot180);
    return L0;
  }
  if (slot180.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot181, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot181() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot181);
    return L0;
  }
  if (slot181.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot182, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot182() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot182);
    return L0;
  }
  if (slot182.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot183, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot183() {
if (slot183.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot183);
    return L0;
  }
  if (slot183.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot183.getNodeCreator().create(this, slot184, cn, cr);
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot184() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot184);
    return L0;
  }
  if (slot184.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot185, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
private final int slot185() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot185);
    return L0;
  }
  if (slot185.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot186, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
private final int slot186() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot186);
    return L0;
  }
  if (slot186.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot187, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
private final int slot187() {
  if (slot187.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot187);
    return L0;
  }
  if (slot187.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot187.getNodeCreator().create(this, slot188, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
private final int slot188() {
  if (slot129.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodInvocation ::= . \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot189() {
if (slot189.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot189);
    return L0;
  }
  if (slot189.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot189.getNodeCreator().create(this, slot190, cn, cr);
  return L0;
}

// MethodInvocation ::= \"super\" . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot190() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot190);
    return L0;
  }
  if (slot190.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot191, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot191() {
if (slot191.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot191);
    return L0;
  }
  if (slot191.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot191.getNodeCreator().create(this, slot192, cn, cr);
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot192() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot192);
    return L0;
  }
  if (slot192.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot193, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot193() {
  if (!slot164.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot193);
    return L0;
  }
  if (slot193.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot194, slot164);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot194() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot194);
    return L0;
  }
  if (slot194.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot195, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot195() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot195);
    return L0;
  }
  if (slot195.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot196, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot196() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot196);
    return L0;
  }
  if (slot196.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot197, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot197() {
if (slot197.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot197);
    return L0;
  }
  if (slot197.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot197.getNodeCreator().create(this, slot198, cn, cr);
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot198() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot198);
    return L0;
  }
  if (slot198.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot199, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
private final int slot199() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot199);
    return L0;
  }
  if (slot199.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot200, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
private final int slot200() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot200);
    return L0;
  }
  if (slot200.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot201, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
private final int slot201() {
  if (slot201.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot201);
    return L0;
  }
  if (slot201.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot201.getNodeCreator().create(this, slot202, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodInvocation ::= \"super\" layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
private final int slot202() {
  if (slot129.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodName
private final int slot130() {
  Set<Integer> set = slot130.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot130.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot130.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot130.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot130.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodName ::= . QualifiedIdentifier
private final int slot1593() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1593);
    return L0;
  }
  if (slot1593.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1594, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodName ::= QualifiedIdentifier .
private final int slot1594() {
  if (slot130.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArgumentList?
private final int slot135() {
  Set<Integer> set = slot135.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot135.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot135.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot135.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot135.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ArgumentList? ::= .
private final int slot735() {
  if (slot135.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot135, ci, ci);
    sppfLookup.addPackedNode(node, slot735, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ArgumentList? ::= . ArgumentList
private final int slot737() {
  if (!slot736.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot737);
    return L0;
  }
  if (slot737.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot738, slot736);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArgumentList? ::= ArgumentList .
private final int slot738() {
  if (slot135.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeName
private final int slot140() {
  Set<Integer> set = slot140.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot140.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot140.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot140.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot140.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeName ::= . QualifiedIdentifier
private final int slot2111() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2111);
    return L0;
  }
  if (slot2111.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2112, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeName ::= QualifiedIdentifier .
private final int slot2112() {
  if (slot140.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NonWildTypeArguments
private final int slot145() {
  Set<Integer> set = slot145.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot145.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot145.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot145.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot145.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NonWildTypeArguments ::= . \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot1756() {
if (slot1756.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 15);
  if (length < 0) {
    recordParseError(slot1756);
    return L0;
  }
  if (slot1756.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(15, ci, length);
  cn = slot1756.getNodeCreator().create(this, slot1757, cn, cr);
  return L0;
}

// NonWildTypeArguments ::= \"<\" . layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot1757() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1757);
    return L0;
  }
  if (slot1757.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1758, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] . {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot1758() {
  if (!slot1747.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1758);
    return L0;
  }
  if (slot1758.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1759, slot1747);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"
private final int slot1759() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1759);
    return L0;
  }
  if (slot1759.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1760, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"
private final int slot1760() {
  if (slot1760.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 16);
  if (length < 0) {
    recordParseError(slot1760);
    return L0;
  }
  if (slot1760.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(16, ci, length);
  cn = slot1760.getNodeCreator().create(this, slot1761, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// NonWildTypeArguments ::= \"<\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .
private final int slot1761() {
  if (slot145.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NonWildTypeArguments?
private final int slot164() {
  Set<Integer> set = slot164.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot164.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot164.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot164.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot164.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NonWildTypeArguments? ::= .
private final int slot2547() {
  if (slot164.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot164, ci, ci);
    sppfLookup.addPackedNode(node, slot2547, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// NonWildTypeArguments? ::= . NonWildTypeArguments
private final int slot2548() {
  if (!slot145.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2548);
    return L0;
  }
  if (slot2548.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2549, slot145);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NonWildTypeArguments? ::= NonWildTypeArguments .
private final int slot2549() {
  if (slot164.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier
private final int slot205() {
  Set<Integer> set = slot205.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot205.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot205.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot205.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot205.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassModifier ::= . Annotation
private final int slot2681() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2681);
    return L0;
  }
  if (slot2681.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2682, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= Annotation .
private final int slot2682() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"protected\"
private final int slot2683() {
  if (slot2683.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 46);
  if (length < 0) {
    recordParseError(slot2683);
    return L0;
  }
  if (slot2683.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(46, ci, length);
  cn = slot2683.getNodeCreator().create(this, slot2684, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"protected\" .
private final int slot2684() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"strictfp\"
private final int slot2685() {
  if (slot2685.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 39);
  if (length < 0) {
    recordParseError(slot2685);
    return L0;
  }
  if (slot2685.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(39, ci, length);
  cn = slot2685.getNodeCreator().create(this, slot2686, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"strictfp\" .
private final int slot2686() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"final\"
private final int slot2687() {
  if (slot2687.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 69);
  if (length < 0) {
    recordParseError(slot2687);
    return L0;
  }
  if (slot2687.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(69, ci, length);
  cn = slot2687.getNodeCreator().create(this, slot2688, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"final\" .
private final int slot2688() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"private\"
private final int slot2689() {
  if (slot2689.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 60);
  if (length < 0) {
    recordParseError(slot2689);
    return L0;
  }
  if (slot2689.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(60, ci, length);
  cn = slot2689.getNodeCreator().create(this, slot2690, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"private\" .
private final int slot2690() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"abstract\"
private final int slot2691() {
  if (slot2691.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 23);
  if (length < 0) {
    recordParseError(slot2691);
    return L0;
  }
  if (slot2691.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(23, ci, length);
  cn = slot2691.getNodeCreator().create(this, slot2692, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"abstract\" .
private final int slot2692() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"static\"
private final int slot2693() {
  if (slot2693.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot2693);
    return L0;
  }
  if (slot2693.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot2693.getNodeCreator().create(this, slot2694, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"static\" .
private final int slot2694() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassModifier ::= . \"public\"
private final int slot2695() {
  if (slot2695.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot2695);
    return L0;
  }
  if (slot2695.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot2695.getNodeCreator().create(this, slot2696, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassModifier ::= \"public\" .
private final int slot2696() {
  if (slot205.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | WhiteSpaceComment)*
private final int slot210() {
  Set<Integer> set = slot210.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot210.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot210.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot210.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot210.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | WhiteSpaceComment)* ::= . ( | WhiteSpaceComment)* ( | WhiteSpaceComment)
private final int slot211() {
  if (!slot210.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot211);
    return L0;
  }
  if (slot211.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot213, slot210);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | WhiteSpaceComment)* ::= ( | WhiteSpaceComment)* . ( | WhiteSpaceComment)
private final int slot213() {
  if (!slot212.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot213);
    return L0;
  }
  if (slot213.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot214, slot212);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | WhiteSpaceComment)* ::= ( | WhiteSpaceComment)* ( | WhiteSpaceComment) .
private final int slot214() {
  if (slot210.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | WhiteSpaceComment)* ::= .
private final int slot215() {
  if (slot210.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot210, ci, ci);
    sppfLookup.addPackedNode(node, slot215, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ( | WhiteSpaceComment)
private final int slot212() {
  Set<Integer> set = slot212.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot212.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot212.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot212.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot212.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | WhiteSpaceComment) ::= . WhiteSpace
private final int slot1484() {
  if (!slot319.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1484);
    return L0;
  }
  if (slot1484.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1485, slot319);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | WhiteSpaceComment) ::= WhiteSpace .
private final int slot1485() {
  if (slot212.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | WhiteSpaceComment) ::= . Comment
private final int slot1486() {
  if (!slot662.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1486);
    return L0;
  }
  if (slot1486.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1487, slot662);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | WhiteSpaceComment) ::= Comment .
private final int slot1487() {
  if (slot212.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerLiteral
private final int slot216() {
  Set<Integer> set = slot216.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot216.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot216.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot216.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot216.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// IntegerLiteral ::= . BinaryIntegerLiteral
private final int slot218() {
  if (!slot217.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot218);
    return L0;
  }
  if (slot218.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot219, slot217);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IntegerLiteral ::= BinaryIntegerLiteral .
private final int slot219() {
  if (slot216.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerLiteral ::= . DecimalIntegerLiteral
private final int slot221() {
  if (!slot220.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot221);
    return L0;
  }
  if (slot221.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot222, slot220);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IntegerLiteral ::= DecimalIntegerLiteral .
private final int slot222() {
  if (slot216.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerLiteral ::= . HexIntegerLiteral
private final int slot224() {
  if (!slot223.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot224);
    return L0;
  }
  if (slot224.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot225, slot223);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IntegerLiteral ::= HexIntegerLiteral .
private final int slot225() {
  if (slot216.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerLiteral ::= . OctalIntegerLiteral
private final int slot227() {
  if (!slot226.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot227);
    return L0;
  }
  if (slot227.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot228, slot226);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IntegerLiteral ::= OctalIntegerLiteral .
private final int slot228() {
  if (slot216.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryIntegerLiteral
private final int slot217() {
  Set<Integer> set = slot217.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot217.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot217.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot217.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot217.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryIntegerLiteral ::= . BinaryNumeral IntegerTypeSuffix?
private final int slot1507() {
  if (!slot1506.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1507);
    return L0;
  }
  if (slot1507.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1508, slot1506);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryIntegerLiteral ::= BinaryNumeral . IntegerTypeSuffix?
private final int slot1508() {
  if (!slot745.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1508);
    return L0;
  }
  if (slot1508.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1509, slot745);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryIntegerLiteral ::= BinaryNumeral IntegerTypeSuffix? .
private final int slot1509() {
  if (slot217.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalIntegerLiteral
private final int slot220() {
  Set<Integer> set = slot220.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot220.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot220.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot220.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot220.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DecimalIntegerLiteral ::= . DecimalNumeral IntegerTypeSuffix?
private final int slot744() {
  if (!slot743.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot744);
    return L0;
  }
  if (slot744.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot746, slot743);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalIntegerLiteral ::= DecimalNumeral . IntegerTypeSuffix?
private final int slot746() {
  if (!slot745.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot746);
    return L0;
  }
  if (slot746.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot747, slot745);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalIntegerLiteral ::= DecimalNumeral IntegerTypeSuffix? .
private final int slot747() {
  if (slot220.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexIntegerLiteral
private final int slot223() {
  Set<Integer> set = slot223.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot223.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot223.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot223.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot223.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexIntegerLiteral ::= . HexNumeral IntegerTypeSuffix?
private final int slot2300() {
  if (!slot2299.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2300);
    return L0;
  }
  if (slot2300.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2301, slot2299);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexIntegerLiteral ::= HexNumeral . IntegerTypeSuffix?
private final int slot2301() {
  if (!slot745.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2301);
    return L0;
  }
  if (slot2301.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2302, slot745);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexIntegerLiteral ::= HexNumeral IntegerTypeSuffix? .
private final int slot2302() {
  if (slot223.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalIntegerLiteral
private final int slot226() {
  Set<Integer> set = slot226.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot226.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot226.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot226.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot226.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalIntegerLiteral ::= . OctalNumeral IntegerTypeSuffix?
private final int slot1719() {
  if (!slot523.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1719);
    return L0;
  }
  if (slot1719.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1720, slot523);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalIntegerLiteral ::= OctalNumeral . IntegerTypeSuffix?
private final int slot1720() {
  if (!slot745.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1720);
    return L0;
  }
  if (slot1720.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1721, slot745);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalIntegerLiteral ::= OctalNumeral IntegerTypeSuffix? .
private final int slot1721() {
  if (slot226.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Annotation
private final int slot229() {
  Set<Integer> set = slot229.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot229.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot229.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot229.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot229.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Annotation ::= . \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
private final int slot230() {
if (slot230.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 13);
  if (length < 0) {
    recordParseError(slot230);
    return L0;
  }
  if (slot230.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(13, ci, length);
  cn = slot230.getNodeCreator().create(this, slot231, cn, cr);
  return L0;
}

// Annotation ::= \"@\" . layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
private final int slot231() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot231);
    return L0;
  }
  if (slot231.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot232, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] . TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
private final int slot232() {
  if (!slot140.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot232);
    return L0;
  }
  if (slot232.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot233, slot140);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName . layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
private final int slot233() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot233);
    return L0;
  }
  if (slot233.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot235, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] . (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
private final int slot235() {
  if (!slot234.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot235);
    return L0;
  }
  if (slot235.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot236, slot234);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? .
private final int slot236() {
  if (slot229.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Annotation ::= . \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot237() {
if (slot237.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 13);
  if (length < 0) {
    recordParseError(slot237);
    return L0;
  }
  if (slot237.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(13, ci, length);
  cn = slot237.getNodeCreator().create(this, slot238, cn, cr);
  return L0;
}

// Annotation ::= \"@\" . layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot238() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot238);
    return L0;
  }
  if (slot238.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot239, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] . TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot239() {
  if (!slot140.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot239);
    return L0;
  }
  if (slot239.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot240, slot140);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName . layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot240() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot240);
    return L0;
  }
  if (slot240.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot241, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] . \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot241() {
if (slot241.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot241);
    return L0;
  }
  if (slot241.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot241.getNodeCreator().create(this, slot242, cn, cr);
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" . layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot242() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot242);
    return L0;
  }
  if (slot242.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot244, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] . {ElementValuePair \",\"}* layout[\"Layout\"] \")\"
private final int slot244() {
  if (!slot243.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot244);
    return L0;
  }
  if (slot244.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot245, slot243);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* . layout[\"Layout\"] \")\"
private final int slot245() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot245);
    return L0;
  }
  if (slot245.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot246, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] . \")\"
private final int slot246() {
  if (slot246.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot246);
    return L0;
  }
  if (slot246.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot246.getNodeCreator().create(this, slot247, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Annotation ::= \"@\" layout[\"Layout\"] TypeName layout[\"Layout\"] \"(\" layout[\"Layout\"] {ElementValuePair \",\"}* layout[\"Layout\"] \")\" .
private final int slot247() {
  if (slot229.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")?
private final int slot234() {
  Set<Integer> set = slot234.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot234.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot234.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot234.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot234.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= . (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")
private final int slot740() {
  if (!slot739.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot740);
    return L0;
  }
  if (slot740.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot741, slot739);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") .
private final int slot741() {
  if (slot234.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")? ::= .
private final int slot742() {
  if (slot234.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot234, ci, ci);
    sppfLookup.addPackedNode(node, slot742, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {ElementValuePair \",\"}*
private final int slot243() {
  Set<Integer> set = slot243.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot243.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot243.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot243.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot243.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ElementValuePair \",\"}* ::= . {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot323() {
  if (!slot322.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot323);
    return L0;
  }
  if (slot323.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot324, slot322);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValuePair \",\"}* ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot324() {
  if (slot243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ElementValuePair \",\"}* ::= .
private final int slot325() {
  if (slot243.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot243, ci, ci);
    sppfLookup.addPackedNode(node, slot325, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalFloatingPointLiteral
private final int slot248() {
  Set<Integer> set = slot248.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot248.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot248.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot248.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot248.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= . Digits FloatTypeSuffix
private final int slot249() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot249);
    return L0;
  }
  if (slot249.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot251, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits . FloatTypeSuffix
private final int slot251() {
  if (!slot250.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot251);
    return L0;
  }
  if (slot251.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot252, slot250);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits FloatTypeSuffix .
private final int slot252() {
  if (slot248.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= . Digits ExponentPart
private final int slot253() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot253);
    return L0;
  }
  if (slot253.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot254, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits . ExponentPart
private final int slot254() {
  if (!slot118.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot254);
    return L0;
  }
  if (slot254.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot255, slot118);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits ExponentPart .
private final int slot255() {
  if (slot248.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= . [.] Digits ExponentPart? FloatTypeSuffix?
private final int slot256() {
if (slot256.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 14);
  if (length < 0) {
    recordParseError(slot256);
    return L0;
  }
  if (slot256.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(14, ci, length);
  cn = slot256.getNodeCreator().create(this, slot257, cn, cr);
  return L0;
}

// DecimalFloatingPointLiteral ::= [.] . Digits ExponentPart? FloatTypeSuffix?
private final int slot257() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot257);
    return L0;
  }
  if (slot257.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot259, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= [.] Digits . ExponentPart? FloatTypeSuffix?
private final int slot259() {
  if (!slot258.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot259);
    return L0;
  }
  if (slot259.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot261, slot258);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= [.] Digits ExponentPart? . FloatTypeSuffix?
private final int slot261() {
  if (!slot260.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot261);
    return L0;
  }
  if (slot261.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot262, slot260);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= [.] Digits ExponentPart? FloatTypeSuffix? .
private final int slot262() {
  if (slot248.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= . Digits [.] Digits? ExponentPart? FloatTypeSuffix?
private final int slot263() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot263);
    return L0;
  }
  if (slot263.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot264, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits . [.] Digits? ExponentPart? FloatTypeSuffix?
private final int slot264() {
if (slot264.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 14);
  if (length < 0) {
    recordParseError(slot264);
    return L0;
  }
  if (slot264.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(14, ci, length);
  cn = slot264.getNodeCreator().create(this, slot265, cn, cr);
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits [.] . Digits? ExponentPart? FloatTypeSuffix?
private final int slot265() {
  if (!slot113.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot265);
    return L0;
  }
  if (slot265.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot266, slot113);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits [.] Digits? . ExponentPart? FloatTypeSuffix?
private final int slot266() {
  if (!slot258.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot266);
    return L0;
  }
  if (slot266.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot267, slot258);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits [.] Digits? ExponentPart? . FloatTypeSuffix?
private final int slot267() {
  if (!slot260.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot267);
    return L0;
  }
  if (slot267.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot268, slot260);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits [.] Digits? ExponentPart? FloatTypeSuffix? .
private final int slot268() {
  if (slot248.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= . Digits ExponentPart FloatTypeSuffix
private final int slot269() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot269);
    return L0;
  }
  if (slot269.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot270, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits . ExponentPart FloatTypeSuffix
private final int slot270() {
  if (!slot118.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot270);
    return L0;
  }
  if (slot270.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot271, slot118);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits ExponentPart . FloatTypeSuffix
private final int slot271() {
  if (!slot250.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot271);
    return L0;
  }
  if (slot271.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot272, slot250);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalFloatingPointLiteral ::= Digits ExponentPart FloatTypeSuffix .
private final int slot272() {
  if (slot248.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FloatTypeSuffix
private final int slot250() {
  Set<Integer> set = slot250.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot250.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot250.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot250.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot250.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FloatTypeSuffix ::= . [fFdD]
private final int slot945() {
  if (slot945.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 80);
  if (length < 0) {
    recordParseError(slot945);
    return L0;
  }
  if (slot945.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(80, ci, length);
  cn = slot945.getNodeCreator().create(this, slot946, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FloatTypeSuffix ::= [fFdD] .
private final int slot946() {
  if (slot250.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExponentPart?
private final int slot258() {
  Set<Integer> set = slot258.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot258.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot258.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot258.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot258.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExponentPart? ::= .
private final int slot775() {
  if (slot258.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot258, ci, ci);
    sppfLookup.addPackedNode(node, slot775, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ExponentPart? ::= . ExponentPart
private final int slot776() {
  if (!slot118.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot776);
    return L0;
  }
  if (slot776.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot777, slot118);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExponentPart? ::= ExponentPart .
private final int slot777() {
  if (slot258.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FloatTypeSuffix?
private final int slot260() {
  Set<Integer> set = slot260.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot260.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot260.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot260.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot260.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FloatTypeSuffix? ::= .
private final int slot815() {
  if (slot260.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot260, ci, ci);
    sppfLookup.addPackedNode(node, slot815, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// FloatTypeSuffix? ::= . FloatTypeSuffix
private final int slot816() {
  if (!slot250.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot816);
    return L0;
  }
  if (slot816.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot817, slot250);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FloatTypeSuffix? ::= FloatTypeSuffix .
private final int slot817() {
  if (slot260.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Block
private final int slot273() {
  Set<Integer> set = slot273.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot273.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot273.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot273.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot273.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Block ::= . \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot274() {
if (slot274.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot274);
    return L0;
  }
  if (slot274.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot274.getNodeCreator().create(this, slot275, cn, cr);
  return L0;
}

// Block ::= \"{\" . layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot275() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot275);
    return L0;
  }
  if (slot275.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot276, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Block ::= \"{\" layout[\"Layout\"] . {BlockStatement}* layout[\"Layout\"] \"}\"
private final int slot276() {
  if (!slot59.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot276);
    return L0;
  }
  if (slot276.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot277, slot59);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* . layout[\"Layout\"] \"}\"
private final int slot277() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot277);
    return L0;
  }
  if (slot277.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot278, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] . \"}\"
private final int slot278() {
  if (slot278.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot278);
    return L0;
  }
  if (slot278.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot278.getNodeCreator().create(this, slot279, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Block ::= \"{\" layout[\"Layout\"] {BlockStatement}* layout[\"Layout\"] \"}\" .
private final int slot279() {
  if (slot273.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExceptionType
private final int slot280() {
  Set<Integer> set = slot280.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot280.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot280.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot280.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot280.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExceptionType ::= . TypeName
private final int slot281() {
  if (!slot140.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot281);
    return L0;
  }
  if (slot281.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot282, slot140);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExceptionType ::= TypeName .
private final int slot282() {
  if (slot280.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeParameters
private final int slot283() {
  Set<Integer> set = slot283.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot283.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot283.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot283.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot283.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeParameters ::= . \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot284() {
if (slot284.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 15);
  if (length < 0) {
    recordParseError(slot284);
    return L0;
  }
  if (slot284.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(15, ci, length);
  cn = slot284.getNodeCreator().create(this, slot285, cn, cr);
  return L0;
}

// TypeParameters ::= \"<\" . layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot285() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot285);
    return L0;
  }
  if (slot285.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot287, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameters ::= \"<\" layout[\"Layout\"] . {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot287() {
  if (!slot286.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot287);
    return L0;
  }
  if (slot287.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot288, slot286);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"
private final int slot288() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot288);
    return L0;
  }
  if (slot288.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot289, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"
private final int slot289() {
  if (slot289.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 16);
  if (length < 0) {
    recordParseError(slot289);
    return L0;
  }
  if (slot289.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(16, ci, length);
  cn = slot289.getNodeCreator().create(this, slot290, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// TypeParameters ::= \"<\" layout[\"Layout\"] {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .
private final int slot290() {
  if (slot283.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot286() {
  Set<Integer> set = slot286.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot286.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot286.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot286.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot286.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter
private final int slot411() {
  if (!slot286.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot411);
    return L0;
  }
  if (slot411.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot412, slot286);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter
private final int slot412() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot412);
    return L0;
  }
  if (slot412.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot413, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] TypeParameter
private final int slot413() {
if (slot413.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot413);
    return L0;
  }
  if (slot413.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot413.getNodeCreator().create(this, slot414, cn, cr);
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] TypeParameter
private final int slot414() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot414);
    return L0;
  }
  if (slot414.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot416, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . TypeParameter
private final int slot416() {
  if (!slot415.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot416);
    return L0;
  }
  if (slot416.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot417, slot415);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeParameter .
private final int slot417() {
  if (slot286.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . TypeParameter
private final int slot418() {
  if (!slot415.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot418);
    return L0;
  }
  if (slot418.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot419, slot415);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeParameter layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= TypeParameter .
private final int slot419() {
  if (slot286.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+
private final int slot291() {
  Set<Integer> set = slot291.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot291.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot291.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot291.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot291.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+ ::= . {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] SwitchLabel
private final int slot292() {
  if (!slot291.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot292);
    return L0;
  }
  if (slot292.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot293, slot291);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ . layout[\"Layout\"] SwitchLabel
private final int slot293() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot293);
    return L0;
  }
  if (slot293.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot295, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] . SwitchLabel
private final int slot295() {
  if (!slot294.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot295);
    return L0;
  }
  if (slot295.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot296, slot294);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+ ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] SwitchLabel .
private final int slot296() {
  if (slot291.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+ ::= . SwitchLabel
private final int slot297() {
  if (!slot294.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot297);
    return L0;
  }
  if (slot297.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot298, slot294);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchLabel layout[\"Layout\"]}+ ::= SwitchLabel .
private final int slot298() {
  if (slot291.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// SwitchLabel
private final int slot294() {
  Set<Integer> set = slot294.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot294.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot294.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot294.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot294.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// SwitchLabel ::= . \"default\" layout[\"Layout\"] \":\"
private final int slot1454() {
if (slot1454.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 4);
  if (length < 0) {
    recordParseError(slot1454);
    return L0;
  }
  if (slot1454.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(4, ci, length);
  cn = slot1454.getNodeCreator().create(this, slot1455, cn, cr);
  return L0;
}

// SwitchLabel ::= \"default\" . layout[\"Layout\"] \":\"
private final int slot1455() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1455);
    return L0;
  }
  if (slot1455.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1456, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchLabel ::= \"default\" layout[\"Layout\"] . \":\"
private final int slot1456() {
  if (slot1456.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot1456);
    return L0;
  }
  if (slot1456.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot1456.getNodeCreator().create(this, slot1457, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// SwitchLabel ::= \"default\" layout[\"Layout\"] \":\" .
private final int slot1457() {
  if (slot294.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// SwitchLabel ::= . \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\"
private final int slot1458() {
if (slot1458.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 48);
  if (length < 0) {
    recordParseError(slot1458);
    return L0;
  }
  if (slot1458.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(48, ci, length);
  cn = slot1458.getNodeCreator().create(this, slot1459, cn, cr);
  return L0;
}

// SwitchLabel ::= \"case\" . layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\"
private final int slot1459() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1459);
    return L0;
  }
  if (slot1459.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1461, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchLabel ::= \"case\" layout[\"Layout\"] . ConstantExpression layout[\"Layout\"] \":\"
private final int slot1461() {
  if (!slot1460.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1461);
    return L0;
  }
  if (slot1461.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1462, slot1460);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression . layout[\"Layout\"] \":\"
private final int slot1462() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1462);
    return L0;
  }
  if (slot1462.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1463, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] . \":\"
private final int slot1463() {
  if (slot1463.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot1463);
    return L0;
  }
  if (slot1463.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot1463.getNodeCreator().create(this, slot1464, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// SwitchLabel ::= \"case\" layout[\"Layout\"] ConstantExpression layout[\"Layout\"] \":\" .
private final int slot1464() {
  if (slot294.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot299() {
  Set<Integer> set = slot299.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot299.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot299.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot299.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot299.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ElementValue
private final int slot300() {
  if (!slot37.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot300);
    return L0;
  }
  if (slot300.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot301, slot37);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ElementValue .
private final int slot301() {
  if (slot299.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue
private final int slot302() {
  if (!slot299.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot302);
    return L0;
  }
  if (slot302.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot303, slot299);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue
private final int slot303() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot303);
    return L0;
  }
  if (slot303.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot304, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ElementValue
private final int slot304() {
if (slot304.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot304);
    return L0;
  }
  if (slot304.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot304.getNodeCreator().create(this, slot305, cn, cr);
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ElementValue
private final int slot305() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot305);
    return L0;
  }
  if (slot305.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot306, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ElementValue
private final int slot306() {
  if (!slot37.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot306);
    return L0;
  }
  if (slot306.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot307, slot37);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValue .
private final int slot307() {
  if (slot299.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StringCharacter
private final int slot308() {
  Set<Integer> set = slot308.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot308.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot308.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot308.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot308.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StringCharacter ::= . InputCharacter
private final int slot310() {
  if (!slot309.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot310);
    return L0;
  }
  if (slot310.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot311, slot309);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StringCharacter ::= InputCharacter .
private final int slot311() {
  if (slot308.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StringCharacter ::= . EscapeSequence
private final int slot313() {
  if (!slot312.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot313);
    return L0;
  }
  if (slot313.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot314, slot312);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StringCharacter ::= EscapeSequence .
private final int slot314() {
  if (slot308.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InputCharacter
private final int slot309() {
  Set<Integer> set = slot309.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot309.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot309.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot309.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot309.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InputCharacter ::= . UnicodeInputCharacter
private final int slot2629() {
  if (!slot554.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2629);
    return L0;
  }
  if (slot2629.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2630, slot554);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InputCharacter ::= UnicodeInputCharacter .
private final int slot2630() {
  if (slot309.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InputCharacter ::= . [\\a00]
private final int slot2631() {
  if (slot2631.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 136);
  if (length < 0) {
    recordParseError(slot2631);
    return L0;
  }
  if (slot2631.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(136, ci, length);
  cn = slot2631.getNodeCreator().create(this, slot2632, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InputCharacter ::= [\\a00] .
private final int slot2632() {
  if (slot309.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence
private final int slot312() {
  Set<Integer> set = slot312.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot312.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot312.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot312.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot312.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EscapeSequence ::= . OctalEscape
private final int slot1286() {
  if (!slot1285.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1286);
    return L0;
  }
  if (slot1286.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1287, slot1285);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= OctalEscape .
private final int slot1287() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC]
private final int slot1288() {
if (slot1288.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1288);
    return L0;
  }
  if (slot1288.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1288.getNodeCreator().create(this, slot1289, cn, cr);
  return L0;
}

// EscapeSequence ::= [\\\\] . [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC]
private final int slot1289() {
  if (!slot864.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1289);
    return L0;
  }
  if (slot1289.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1290, slot864);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ . \"005\" [cC] [\\\\] [u]+ \"005\" [cC]
private final int slot1290() {
if (slot1290.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 91);
  if (length < 0) {
    recordParseError(slot1290);
    return L0;
  }
  if (slot1290.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(91, ci, length);
  cn = slot1290.getNodeCreator().create(this, slot1291, cn, cr);
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ \"005\" . [cC] [\\\\] [u]+ \"005\" [cC]
private final int slot1291() {
if (slot1291.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 92);
  if (length < 0) {
    recordParseError(slot1291);
    return L0;
  }
  if (slot1291.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(92, ci, length);
  cn = slot1291.getNodeCreator().create(this, slot1292, cn, cr);
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] . [\\\\] [u]+ \"005\" [cC]
private final int slot1292() {
if (slot1292.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1292);
    return L0;
  }
  if (slot1292.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1292.getNodeCreator().create(this, slot1293, cn, cr);
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] . [u]+ \"005\" [cC]
private final int slot1293() {
  if (!slot864.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1293);
    return L0;
  }
  if (slot1293.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1294, slot864);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ . \"005\" [cC]
private final int slot1294() {
if (slot1294.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 91);
  if (length < 0) {
    recordParseError(slot1294);
    return L0;
  }
  if (slot1294.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(91, ci, length);
  cn = slot1294.getNodeCreator().create(this, slot1295, cn, cr);
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" . [cC]
private final int slot1295() {
  if (slot1295.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 92);
  if (length < 0) {
    recordParseError(slot1295);
    return L0;
  }
  if (slot1295.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(92, ci, length);
  cn = slot1295.getNodeCreator().create(this, slot1296, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= [\\\\] [u]+ \"005\" [cC] [\\\\] [u]+ \"005\" [cC] .
private final int slot1296() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [\\\"]
private final int slot1298() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1298);
    return L0;
  }
  if (slot1298.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1299, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [\\\"]
private final int slot1299() {
  if (slot1299.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 93);
  if (length < 0) {
    recordParseError(slot1299);
    return L0;
  }
  if (slot1299.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(93, ci, length);
  cn = slot1299.getNodeCreator().create(this, slot1300, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [\\\"] .
private final int slot1300() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [\\']
private final int slot1301() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1301);
    return L0;
  }
  if (slot1301.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1302, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [\\']
private final int slot1302() {
  if (slot1302.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 94);
  if (length < 0) {
    recordParseError(slot1302);
    return L0;
  }
  if (slot1302.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(94, ci, length);
  cn = slot1302.getNodeCreator().create(this, slot1303, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [\\'] .
private final int slot1303() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [t]
private final int slot1304() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1304);
    return L0;
  }
  if (slot1304.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1305, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [t]
private final int slot1305() {
  if (slot1305.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 95);
  if (length < 0) {
    recordParseError(slot1305);
    return L0;
  }
  if (slot1305.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(95, ci, length);
  cn = slot1305.getNodeCreator().create(this, slot1306, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [t] .
private final int slot1306() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [f]
private final int slot1307() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1307);
    return L0;
  }
  if (slot1307.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1308, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [f]
private final int slot1308() {
  if (slot1308.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 96);
  if (length < 0) {
    recordParseError(slot1308);
    return L0;
  }
  if (slot1308.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(96, ci, length);
  cn = slot1308.getNodeCreator().create(this, slot1309, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [f] .
private final int slot1309() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [b]
private final int slot1310() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1310);
    return L0;
  }
  if (slot1310.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1311, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [b]
private final int slot1311() {
  if (slot1311.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 97);
  if (length < 0) {
    recordParseError(slot1311);
    return L0;
  }
  if (slot1311.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(97, ci, length);
  cn = slot1311.getNodeCreator().create(this, slot1312, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [b] .
private final int slot1312() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [r]
private final int slot1313() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1313);
    return L0;
  }
  if (slot1313.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1314, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [r]
private final int slot1314() {
  if (slot1314.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 98);
  if (length < 0) {
    recordParseError(slot1314);
    return L0;
  }
  if (slot1314.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(98, ci, length);
  cn = slot1314.getNodeCreator().create(this, slot1315, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [r] .
private final int slot1315() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EscapeSequence ::= . Backslash [n]
private final int slot1316() {
  if (!slot1297.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1316);
    return L0;
  }
  if (slot1316.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1317, slot1297);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash . [n]
private final int slot1317() {
  if (slot1317.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 99);
  if (length < 0) {
    recordParseError(slot1317);
    return L0;
  }
  if (slot1317.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(99, ci, length);
  cn = slot1317.getNodeCreator().create(this, slot1318, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EscapeSequence ::= Backslash [n] .
private final int slot1318() {
  if (slot312.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// QualifiedIdentifierList
private final int slot315() {
  Set<Integer> set = slot315.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot315.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot315.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot315.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot315.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// QualifiedIdentifierList ::= . {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot317() {
  if (!slot316.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot317);
    return L0;
  }
  if (slot317.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot318, slot316);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// QualifiedIdentifierList ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot318() {
  if (slot315.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot316() {
  Set<Integer> set = slot316.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot316.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot316.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot316.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot316.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier
private final int slot2700() {
  if (!slot316.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2700);
    return L0;
  }
  if (slot2700.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2701, slot316);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier
private final int slot2701() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2701);
    return L0;
  }
  if (slot2701.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2702, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] QualifiedIdentifier
private final int slot2702() {
if (slot2702.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot2702);
    return L0;
  }
  if (slot2702.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot2702.getNodeCreator().create(this, slot2703, cn, cr);
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] QualifiedIdentifier
private final int slot2703() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2703);
    return L0;
  }
  if (slot2703.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2704, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . QualifiedIdentifier
private final int slot2704() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2704);
    return L0;
  }
  if (slot2704.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2705, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] QualifiedIdentifier .
private final int slot2705() {
  if (slot316.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . QualifiedIdentifier
private final int slot2706() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2706);
    return L0;
  }
  if (slot2706.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2707, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= QualifiedIdentifier .
private final int slot2707() {
  if (slot316.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// WhiteSpace
private final int slot319() {
  Set<Integer> set = slot319.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot319.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot319.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot319.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot319.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// WhiteSpace ::= . [\\ \\t\\a0c\\r\\n\\a1a]
private final int slot320() {
  if (slot320.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 18);
  if (length < 0) {
    recordParseError(slot320);
    return L0;
  }
  if (slot320.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(18, ci, length);
  cn = slot320.getNodeCreator().create(this, slot321, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// WhiteSpace ::= [\\ \\t\\a0c\\r\\n\\a1a] .
private final int slot321() {
  if (slot319.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot322() {
  Set<Integer> set = slot322.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot322.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot322.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot322.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot322.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair
private final int slot1136() {
  if (!slot322.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1136);
    return L0;
  }
  if (slot1136.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1137, slot322);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair
private final int slot1137() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1137);
    return L0;
  }
  if (slot1137.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1138, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ElementValuePair
private final int slot1138() {
if (slot1138.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot1138);
    return L0;
  }
  if (slot1138.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot1138.getNodeCreator().create(this, slot1139, cn, cr);
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ElementValuePair
private final int slot1139() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1139);
    return L0;
  }
  if (slot1139.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1141, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ElementValuePair
private final int slot1141() {
  if (!slot1140.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1141);
    return L0;
  }
  if (slot1141.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1142, slot1140);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ElementValuePair .
private final int slot1142() {
  if (slot322.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ElementValuePair
private final int slot1143() {
  if (!slot1140.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1143);
    return L0;
  }
  if (slot1143.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1144, slot1140);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ElementValuePair layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ElementValuePair .
private final int slot1144() {
  if (slot322.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+
private final int slot326() {
  Set<Integer> set = slot326.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot326.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot326.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot326.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot326.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+ ::= . ConstantModifier
private final int slot328() {
  if (!slot327.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot328);
    return L0;
  }
  if (slot328.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot329, slot327);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+ ::= ConstantModifier .
private final int slot329() {
  if (slot326.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+ ::= . {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstantModifier
private final int slot330() {
  if (!slot326.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot330);
    return L0;
  }
  if (slot330.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot331, slot326);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ConstantModifier
private final int slot331() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot331);
    return L0;
  }
  if (slot331.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot332, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ConstantModifier
private final int slot332() {
  if (!slot327.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot332);
    return L0;
  }
  if (slot332.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot333, slot327);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstantModifier layout[\"Layout\"]}+ ::= {ConstantModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstantModifier .
private final int slot333() {
  if (slot326.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstantModifier
private final int slot327() {
  Set<Integer> set = slot327.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot327.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot327.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot327.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot327.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstantModifier ::= . \"final\"
private final int slot2601() {
  if (slot2601.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 69);
  if (length < 0) {
    recordParseError(slot2601);
    return L0;
  }
  if (slot2601.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(69, ci, length);
  cn = slot2601.getNodeCreator().create(this, slot2602, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstantModifier ::= \"final\" .
private final int slot2602() {
  if (slot327.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstantModifier ::= . Annotation
private final int slot2603() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2603);
    return L0;
  }
  if (slot2603.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2604, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantModifier ::= Annotation .
private final int slot2604() {
  if (slot327.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstantModifier ::= . \"public\"
private final int slot2605() {
  if (slot2605.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot2605);
    return L0;
  }
  if (slot2605.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot2605.getNodeCreator().create(this, slot2606, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstantModifier ::= \"public\" .
private final int slot2606() {
  if (slot327.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstantModifier ::= . \"static\"
private final int slot2607() {
  if (slot2607.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot2607);
    return L0;
  }
  if (slot2607.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot2607.getNodeCreator().create(this, slot2608, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstantModifier ::= \"static\" .
private final int slot2608() {
  if (slot327.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+
private final int slot334() {
  Set<Integer> set = slot334.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot334.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot334.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot334.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot334.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= . {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] Resource
private final int slot335() {
  if (!slot334.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot335);
    return L0;
  }
  if (slot335.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot336, slot334);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ . layout[\"Layout\"] \";\" layout[\"Layout\"] Resource
private final int slot336() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot336);
    return L0;
  }
  if (slot336.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot337, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] . \";\" layout[\"Layout\"] Resource
private final int slot337() {
if (slot337.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot337);
    return L0;
  }
  if (slot337.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot337.getNodeCreator().create(this, slot338, cn, cr);
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" . layout[\"Layout\"] Resource
private final int slot338() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot338);
    return L0;
  }
  if (slot338.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot340, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] . Resource
private final int slot340() {
  if (!slot339.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot340);
    return L0;
  }
  if (slot340.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot341, slot339);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ layout[\"Layout\"] \";\" layout[\"Layout\"] Resource .
private final int slot341() {
  if (slot334.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= . Resource
private final int slot342() {
  if (!slot339.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot342);
    return L0;
  }
  if (slot342.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot343, slot339);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ ::= Resource .
private final int slot343() {
  if (slot334.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Resource
private final int slot339() {
  Set<Integer> set = slot339.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot339.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot339.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot339.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot339.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Resource ::= . {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
private final int slot543() {
  if (!slot542.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot543);
    return L0;
  }
  if (slot543.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot544, slot542);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* . layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
private final int slot544() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot544);
    return L0;
  }
  if (slot544.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot545, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] . ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
private final int slot545() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot545);
    return L0;
  }
  if (slot545.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot546, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType . layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
private final int slot546() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot546);
    return L0;
  }
  if (slot546.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot548, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] . VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
private final int slot548() {
  if (!slot547.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot548);
    return L0;
  }
  if (slot548.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot549, slot547);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId . layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression
private final int slot549() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot549);
    return L0;
  }
  if (slot549.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot550, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] . \"=\" layout[\"Layout\"] Expression
private final int slot550() {
if (slot550.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 36);
  if (length < 0) {
    recordParseError(slot550);
    return L0;
  }
  if (slot550.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(36, ci, length);
  cn = slot550.getNodeCreator().create(this, slot551, cn, cr);
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" . layout[\"Layout\"] Expression
private final int slot551() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot551);
    return L0;
  }
  if (slot551.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot552, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] . Expression
private final int slot552() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot552);
    return L0;
  }
  if (slot552.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot553, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resource ::= {VariableModifier}* layout[\"Layout\"] ReferenceType layout[\"Layout\"] VariableDeclaratorId layout[\"Layout\"] \"=\" layout[\"Layout\"] Expression .
private final int slot553() {
  if (slot339.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
private final int slot344() {
  Set<Integer> set = slot344.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot344.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot344.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot344.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot344.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= . {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType
private final int slot345() {
  if (!slot344.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot345);
    return L0;
  }
  if (slot345.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot346, slot344);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ . layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType
private final int slot346() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot346);
    return L0;
  }
  if (slot346.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot347, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] . \"&\" layout[\"Layout\"] ReferenceType
private final int slot347() {
if (slot347.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 20);
  if (length < 0) {
    recordParseError(slot347);
    return L0;
  }
  if (slot347.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(20, ci, length);
  cn = slot347.getNodeCreator().create(this, slot348, cn, cr);
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" . layout[\"Layout\"] ReferenceType
private final int slot348() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot348);
    return L0;
  }
  if (slot348.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot349, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] . ReferenceType
private final int slot349() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot349);
    return L0;
  }
  if (slot349.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot350, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ layout[\"Layout\"] \"&\" layout[\"Layout\"] ReferenceType .
private final int slot350() {
  if (slot344.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= . ReferenceType
private final int slot351() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot351);
    return L0;
  }
  if (slot351.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot352, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ ::= ReferenceType .
private final int slot352() {
  if (slot344.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigits
private final int slot353() {
  Set<Integer> set = slot353.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot353.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot353.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot353.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot353.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexDigits ::= . HexDigit HexDigitOrUnderscore* HexDigit
private final int slot355() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot355);
    return L0;
  }
  if (slot355.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot357, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigits ::= HexDigit . HexDigitOrUnderscore* HexDigit
private final int slot357() {
  if (!slot356.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot357);
    return L0;
  }
  if (slot357.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot358, slot356);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigits ::= HexDigit HexDigitOrUnderscore* . HexDigit
private final int slot358() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot358);
    return L0;
  }
  if (slot358.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot359, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigits ::= HexDigit HexDigitOrUnderscore* HexDigit .
private final int slot359() {
  if (slot353.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigits ::= . HexDigit
private final int slot360() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot360);
    return L0;
  }
  if (slot360.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot361, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigits ::= HexDigit .
private final int slot361() {
  if (slot353.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigit
private final int slot354() {
  Set<Integer> set = slot354.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot354.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot354.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot354.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot354.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexDigit ::= . [0-9a-fA-F]
private final int slot787() {
  if (slot787.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 75);
  if (length < 0) {
    recordParseError(slot787);
    return L0;
  }
  if (slot787.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(75, ci, length);
  cn = slot787.getNodeCreator().create(this, slot788, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// HexDigit ::= [0-9a-fA-F] .
private final int slot788() {
  if (slot354.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigitOrUnderscore*
private final int slot356() {
  Set<Integer> set = slot356.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot356.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot356.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot356.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot356.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexDigitOrUnderscore* ::= .
private final int slot1742() {
  if (slot356.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot356, ci, ci);
    sppfLookup.addPackedNode(node, slot1742, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigitOrUnderscore* ::= . HexDigitOrUnderscore* HexDigitOrUnderscore
private final int slot1743() {
  if (!slot356.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1743);
    return L0;
  }
  if (slot1743.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1745, slot356);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigitOrUnderscore* ::= HexDigitOrUnderscore* . HexDigitOrUnderscore
private final int slot1745() {
  if (!slot1744.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1745);
    return L0;
  }
  if (slot1745.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1746, slot1744);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigitOrUnderscore* ::= HexDigitOrUnderscore* HexDigitOrUnderscore .
private final int slot1746() {
  if (slot356.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+
private final int slot362() {
  Set<Integer> set = slot362.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot362.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot362.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot362.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot362.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+ ::= . {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] FieldModifier
private final int slot363() {
  if (!slot362.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot363);
    return L0;
  }
  if (slot363.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot364, slot362);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ . layout[\"Layout\"] FieldModifier
private final int slot364() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot364);
    return L0;
  }
  if (slot364.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot366, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] . FieldModifier
private final int slot366() {
  if (!slot365.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot366);
    return L0;
  }
  if (slot366.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot367, slot365);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+ ::= {FieldModifier layout[\"Layout\"]}+ layout[\"Layout\"] FieldModifier .
private final int slot367() {
  if (slot362.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+ ::= . FieldModifier
private final int slot368() {
  if (!slot365.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot368);
    return L0;
  }
  if (slot368.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot369, slot365);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {FieldModifier layout[\"Layout\"]}+ ::= FieldModifier .
private final int slot369() {
  if (slot362.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier
private final int slot365() {
  Set<Integer> set = slot365.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot365.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot365.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot365.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot365.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FieldModifier ::= . \"final\"
private final int slot2040() {
  if (slot2040.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 69);
  if (length < 0) {
    recordParseError(slot2040);
    return L0;
  }
  if (slot2040.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(69, ci, length);
  cn = slot2040.getNodeCreator().create(this, slot2041, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"final\" .
private final int slot2041() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . \"transient\"
private final int slot2042() {
  if (slot2042.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 54);
  if (length < 0) {
    recordParseError(slot2042);
    return L0;
  }
  if (slot2042.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(54, ci, length);
  cn = slot2042.getNodeCreator().create(this, slot2043, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"transient\" .
private final int slot2043() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . Annotation
private final int slot2044() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2044);
    return L0;
  }
  if (slot2044.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2045, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= Annotation .
private final int slot2045() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . \"protected\"
private final int slot2046() {
  if (slot2046.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 46);
  if (length < 0) {
    recordParseError(slot2046);
    return L0;
  }
  if (slot2046.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(46, ci, length);
  cn = slot2046.getNodeCreator().create(this, slot2047, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"protected\" .
private final int slot2047() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . \"volatile\"
private final int slot2048() {
  if (slot2048.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 57);
  if (length < 0) {
    recordParseError(slot2048);
    return L0;
  }
  if (slot2048.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(57, ci, length);
  cn = slot2048.getNodeCreator().create(this, slot2049, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"volatile\" .
private final int slot2049() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . \"private\"
private final int slot2050() {
  if (slot2050.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 60);
  if (length < 0) {
    recordParseError(slot2050);
    return L0;
  }
  if (slot2050.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(60, ci, length);
  cn = slot2050.getNodeCreator().create(this, slot2051, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"private\" .
private final int slot2051() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . \"static\"
private final int slot2052() {
  if (slot2052.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot2052);
    return L0;
  }
  if (slot2052.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot2052.getNodeCreator().create(this, slot2053, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"static\" .
private final int slot2053() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FieldModifier ::= . \"public\"
private final int slot2054() {
  if (slot2054.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot2054);
    return L0;
  }
  if (slot2054.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot2054.getNodeCreator().create(this, slot2055, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldModifier ::= \"public\" .
private final int slot2055() {
  if (slot365.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ResourceSpecification
private final int slot370() {
  Set<Integer> set = slot370.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot370.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot370.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot370.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot370.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ResourceSpecification ::= . \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
private final int slot371() {
if (slot371.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot371);
    return L0;
  }
  if (slot371.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot371.getNodeCreator().create(this, slot372, cn, cr);
  return L0;
}

// ResourceSpecification ::= \"(\" . layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
private final int slot372() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot372);
    return L0;
  }
  if (slot372.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot374, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ResourceSpecification ::= \"(\" layout[\"Layout\"] . Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
private final int slot374() {
  if (!slot373.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot374);
    return L0;
  }
  if (slot374.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot375, slot373);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources . layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\"
private final int slot375() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot375);
    return L0;
  }
  if (slot375.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot377, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] . \";\"? layout[\"Layout\"] \")\"
private final int slot377() {
  if (!slot376.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot377);
    return L0;
  }
  if (slot377.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot378, slot376);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? . layout[\"Layout\"] \")\"
private final int slot378() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot378);
    return L0;
  }
  if (slot378.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot379, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] . \")\"
private final int slot379() {
  if (slot379.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot379);
    return L0;
  }
  if (slot379.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot379.getNodeCreator().create(this, slot380, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ResourceSpecification ::= \"(\" layout[\"Layout\"] Resources layout[\"Layout\"] \";\"? layout[\"Layout\"] \")\" .
private final int slot380() {
  if (slot370.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Resources
private final int slot373() {
  Set<Integer> set = slot373.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot373.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot373.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot373.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot373.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Resources ::= . {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+
private final int slot2612() {
  if (!slot334.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2612);
    return L0;
  }
  if (slot2612.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2613, slot334);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Resources ::= {Resource layout[\"Layout\"] \";\" layout[\"Layout\"]}+ .
private final int slot2613() {
  if (slot373.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// \";\"?
private final int slot376() {
  Set<Integer> set = slot376.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot376.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot376.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot376.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot376.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// \";\"? ::= .
private final int slot789() {
  if (slot376.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot376, ci, ci);
    sppfLookup.addPackedNode(node, slot789, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// \";\"? ::= . \";\"
private final int slot790() {
  if (slot790.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot790);
    return L0;
  }
  if (slot790.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot790.getNodeCreator().create(this, slot791, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// \";\"? ::= \";\" .
private final int slot791() {
  if (slot376.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BooleanLiteral
private final int slot381() {
  Set<Integer> set = slot381.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot381.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot381.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot381.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot381.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BooleanLiteral ::= . \"false\"
private final int slot382() {
  if (slot382.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 21);
  if (length < 0) {
    recordParseError(slot382);
    return L0;
  }
  if (slot382.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(21, ci, length);
  cn = slot382.getNodeCreator().create(this, slot383, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// BooleanLiteral ::= \"false\" .
private final int slot383() {
  if (slot381.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BooleanLiteral ::= . \"true\"
private final int slot384() {
  if (slot384.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 22);
  if (length < 0) {
    recordParseError(slot384);
    return L0;
  }
  if (slot384.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(22, ci, length);
  cn = slot384.getNodeCreator().create(this, slot385, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// BooleanLiteral ::= \"true\" .
private final int slot385() {
  if (slot381.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// VariableInitializer
private final int slot386() {
  Set<Integer> set = slot386.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot386.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot386.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot386.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot386.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// VariableInitializer ::= . Expression
private final int slot387() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot387);
    return L0;
  }
  if (slot387.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot388, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableInitializer ::= Expression .
private final int slot388() {
  if (slot386.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// VariableInitializer ::= . ArrayInitializer
private final int slot390() {
  if (!slot389.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot390);
    return L0;
  }
  if (slot390.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot391, slot389);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableInitializer ::= ArrayInitializer .
private final int slot391() {
  if (slot386.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArrayInitializer
private final int slot389() {
  Set<Integer> set = slot389.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot389.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot389.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot389.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot389.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ArrayInitializer ::= . \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot778() {
if (slot778.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot778);
    return L0;
  }
  if (slot778.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot778.getNodeCreator().create(this, slot779, cn, cr);
  return L0;
}

// ArrayInitializer ::= \"{\" . layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot779() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot779);
    return L0;
  }
  if (slot779.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot781, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayInitializer ::= \"{\" layout[\"Layout\"] . {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot781() {
  if (!slot780.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot781);
    return L0;
  }
  if (slot781.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot782, slot780);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* . layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot782() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot782);
    return L0;
  }
  if (slot782.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot783, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] . \",\"? layout[\"Layout\"] \"}\"
private final int slot783() {
  if (!slot430.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot783);
    return L0;
  }
  if (slot783.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot784, slot430);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? . layout[\"Layout\"] \"}\"
private final int slot784() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot784);
    return L0;
  }
  if (slot784.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot785, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] . \"}\"
private final int slot785() {
  if (slot785.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot785);
    return L0;
  }
  if (slot785.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot785.getNodeCreator().create(this, slot786, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ArrayInitializer ::= \"{\" layout[\"Layout\"] {VariableInitializer \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\" .
private final int slot786() {
  if (slot389.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FormalParameterList
private final int slot392() {
  Set<Integer> set = slot392.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot392.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot392.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot392.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot392.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FormalParameterList ::= . {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] LastFormalParameter
private final int slot394() {
  if (!slot393.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot394);
    return L0;
  }
  if (slot394.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot395, slot393);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* . layout[\"Layout\"] LastFormalParameter
private final int slot395() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot395);
    return L0;
  }
  if (slot395.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot397, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] . LastFormalParameter
private final int slot397() {
  if (!slot396.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot397);
    return L0;
  }
  if (slot397.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot398, slot396);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameterList ::= {(FormalParameter layout[\"Layout\"] \",\")}* layout[\"Layout\"] LastFormalParameter .
private final int slot398() {
  if (slot392.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\")}*
private final int slot393() {
  Set<Integer> set = slot393.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot393.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot393.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot393.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot393.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\")}* ::= .
private final int slot907() {
  if (slot393.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot393, ci, ci);
    sppfLookup.addPackedNode(node, slot907, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\")}* ::= . {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+
private final int slot909() {
  if (!slot908.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot909);
    return L0;
  }
  if (slot909.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot910, slot908);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\")}* ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ .
private final int slot910() {
  if (slot393.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LastFormalParameter
private final int slot396() {
  Set<Integer> set = slot396.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot396.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot396.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot396.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot396.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// LastFormalParameter ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
private final int slot2152() {
  if (!slot542.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2152);
    return L0;
  }
  if (slot2152.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2153, slot542);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
private final int slot2153() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2153);
    return L0;
  }
  if (slot2153.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2154, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
private final int slot2154() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2154);
    return L0;
  }
  if (slot2154.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2155, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId
private final int slot2155() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2155);
    return L0;
  }
  if (slot2155.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2156, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . \"...\" layout[\"Layout\"] VariableDeclaratorId
private final int slot2156() {
if (slot2156.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 128);
  if (length < 0) {
    recordParseError(slot2156);
    return L0;
  }
  if (slot2156.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(128, ci, length);
  cn = slot2156.getNodeCreator().create(this, slot2157, cn, cr);
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" . layout[\"Layout\"] VariableDeclaratorId
private final int slot2157() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2157);
    return L0;
  }
  if (slot2157.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2158, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] . VariableDeclaratorId
private final int slot2158() {
  if (!slot547.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2158);
    return L0;
  }
  if (slot2158.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2159, slot547);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] \"...\" layout[\"Layout\"] VariableDeclaratorId .
private final int slot2159() {
  if (slot396.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LastFormalParameter ::= . FormalParameter
private final int slot2160() {
  if (!slot1076.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2160);
    return L0;
  }
  if (slot2160.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2161, slot1076);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LastFormalParameter ::= FormalParameter .
private final int slot2161() {
  if (slot396.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EnumConstant
private final int slot399() {
  Set<Integer> set = slot399.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot399.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot399.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot399.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot399.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EnumConstant ::= . {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
private final int slot401() {
  if (!slot400.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot401);
    return L0;
  }
  if (slot401.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot402, slot400);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* . layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
private final int slot402() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot402);
    return L0;
  }
  if (slot402.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot403, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* layout[\"Layout\"] . Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
private final int slot403() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot403);
    return L0;
  }
  if (slot403.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot404, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier . layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody?
private final int slot404() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot404);
    return L0;
  }
  if (slot404.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot406, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] . Arguments? layout[\"Layout\"] ClassBody?
private final int slot406() {
  if (!slot405.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot406);
    return L0;
  }
  if (slot406.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot407, slot405);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? . layout[\"Layout\"] ClassBody?
private final int slot407() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot407);
    return L0;
  }
  if (slot407.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot409, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] . ClassBody?
private final int slot409() {
  if (!slot408.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot409);
    return L0;
  }
  if (slot409.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot410, slot408);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumConstant ::= {Annotation}* layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? layout[\"Layout\"] ClassBody? .
private final int slot410() {
  if (slot399.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Annotation}*
private final int slot400() {
  Set<Integer> set = slot400.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot400.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot400.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot400.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot400.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {Annotation}* ::= .
private final int slot2662() {
  if (slot400.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot400, ci, ci);
    sppfLookup.addPackedNode(node, slot2662, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {Annotation}* ::= . {Annotation layout[\"Layout\"]}+
private final int slot2663() {
  if (!slot2067.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2663);
    return L0;
  }
  if (slot2663.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2664, slot2067);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Annotation}* ::= {Annotation layout[\"Layout\"]}+ .
private final int slot2664() {
  if (slot400.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Arguments?
private final int slot405() {
  Set<Integer> set = slot405.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot405.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot405.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot405.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot405.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Arguments? ::= .
private final int slot2496() {
  if (slot405.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot405, ci, ci);
    sppfLookup.addPackedNode(node, slot2496, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// Arguments? ::= . Arguments
private final int slot2497() {
  if (!slot1016.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2497);
    return L0;
  }
  if (slot2497.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2498, slot1016);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Arguments? ::= Arguments .
private final int slot2498() {
  if (slot405.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBody?
private final int slot408() {
  Set<Integer> set = slot408.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot408.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot408.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot408.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot408.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassBody? ::= . ClassBody
private final int slot421() {
  if (!slot420.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot421);
    return L0;
  }
  if (slot421.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot422, slot420);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBody? ::= ClassBody .
private final int slot422() {
  if (slot408.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBody? ::= .
private final int slot423() {
  if (slot408.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot408, ci, ci);
    sppfLookup.addPackedNode(node, slot423, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// TypeParameter
private final int slot415() {
  Set<Integer> set = slot415.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot415.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot415.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot415.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot415.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeParameter ::= . TypeVariable layout[\"Layout\"] TypeBound?
private final int slot2542() {
  if (!slot2541.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2542);
    return L0;
  }
  if (slot2542.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2543, slot2541);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameter ::= TypeVariable . layout[\"Layout\"] TypeBound?
private final int slot2543() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2543);
    return L0;
  }
  if (slot2543.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2545, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameter ::= TypeVariable layout[\"Layout\"] . TypeBound?
private final int slot2545() {
  if (!slot2544.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2545);
    return L0;
  }
  if (slot2545.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2546, slot2544);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameter ::= TypeVariable layout[\"Layout\"] TypeBound? .
private final int slot2546() {
  if (slot415.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBody
private final int slot420() {
  Set<Integer> set = slot420.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot420.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot420.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot420.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot420.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassBody ::= . \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"
private final int slot2335() {
if (slot2335.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot2335);
    return L0;
  }
  if (slot2335.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot2335.getNodeCreator().create(this, slot2336, cn, cr);
  return L0;
}

// ClassBody ::= \"{\" . layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"
private final int slot2336() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2336);
    return L0;
  }
  if (slot2336.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2337, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBody ::= \"{\" layout[\"Layout\"] . {ClassBodyDeclaration}* layout[\"Layout\"] \"}\"
private final int slot2337() {
  if (!slot1369.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2337);
    return L0;
  }
  if (slot2337.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2338, slot1369);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* . layout[\"Layout\"] \"}\"
private final int slot2338() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2338);
    return L0;
  }
  if (slot2338.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2339, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] . \"}\"
private final int slot2339() {
  if (slot2339.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot2339);
    return L0;
  }
  if (slot2339.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot2339.getNodeCreator().create(this, slot2340, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassBody ::= \"{\" layout[\"Layout\"] {ClassBodyDeclaration}* layout[\"Layout\"] \"}\" .
private final int slot2340() {
  if (slot420.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValueArrayInitializer
private final int slot424() {
  Set<Integer> set = slot424.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot424.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot424.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot424.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot424.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ElementValueArrayInitializer ::= . \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot425() {
if (slot425.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot425);
    return L0;
  }
  if (slot425.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot425.getNodeCreator().create(this, slot426, cn, cr);
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" . layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot426() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot426);
    return L0;
  }
  if (slot426.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot428, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] . ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot428() {
  if (!slot427.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot428);
    return L0;
  }
  if (slot428.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot429, slot427);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? . layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\"
private final int slot429() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot429);
    return L0;
  }
  if (slot429.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot431, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] . \",\"? layout[\"Layout\"] \"}\"
private final int slot431() {
  if (!slot430.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot431);
    return L0;
  }
  if (slot431.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot432, slot430);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? . layout[\"Layout\"] \"}\"
private final int slot432() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot432);
    return L0;
  }
  if (slot432.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot433, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] . \"}\"
private final int slot433() {
  if (slot433.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot433);
    return L0;
  }
  if (slot433.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot433.getNodeCreator().create(this, slot434, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ElementValueArrayInitializer ::= \"{\" layout[\"Layout\"] ElementValues? layout[\"Layout\"] \",\"? layout[\"Layout\"] \"}\" .
private final int slot434() {
  if (slot424.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValues?
private final int slot427() {
  Set<Integer> set = slot427.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot427.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot427.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot427.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot427.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ElementValues? ::= . ElementValues
private final int slot1622() {
  if (!slot840.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1622);
    return L0;
  }
  if (slot1622.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1623, slot840);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValues? ::= ElementValues .
private final int slot1623() {
  if (slot427.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValues? ::= .
private final int slot1624() {
  if (slot427.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot427, ci, ci);
    sppfLookup.addPackedNode(node, slot1624, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// \",\"?
private final int slot430() {
  Set<Integer> set = slot430.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot430.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot430.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot430.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot430.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// \",\"? ::= .
private final int slot2522() {
  if (slot430.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot430, ci, ci);
    sppfLookup.addPackedNode(node, slot2522, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// \",\"? ::= . \",\"
private final int slot2523() {
  if (slot2523.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot2523);
    return L0;
  }
  if (slot2523.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot2523.getNodeCreator().create(this, slot2524, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// \",\"? ::= \",\" .
private final int slot2524() {
  if (slot430.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AbstractMethodModifier
private final int slot435() {
  Set<Integer> set = slot435.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot435.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot435.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot435.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot435.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AbstractMethodModifier ::= . \"abstract\"
private final int slot436() {
  if (slot436.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 23);
  if (length < 0) {
    recordParseError(slot436);
    return L0;
  }
  if (slot436.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(23, ci, length);
  cn = slot436.getNodeCreator().create(this, slot437, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodModifier ::= \"abstract\" .
private final int slot437() {
  if (slot435.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AbstractMethodModifier ::= . Annotation
private final int slot438() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot438);
    return L0;
  }
  if (slot438.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot439, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodModifier ::= Annotation .
private final int slot439() {
  if (slot435.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AbstractMethodModifier ::= . \"public\"
private final int slot440() {
  if (slot440.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot440);
    return L0;
  }
  if (slot440.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot440.getNodeCreator().create(this, slot441, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodModifier ::= \"public\" .
private final int slot441() {
  if (slot435.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeDeclSpecifier
private final int slot442() {
  Set<Integer> set = slot442.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot442.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot442.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot442.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot442.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeDeclSpecifier ::= . Identifier layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
private final int slot927() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot927);
    return L0;
  }
  if (slot927.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot928, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeDeclSpecifier ::= Identifier . layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
private final int slot928() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot928);
    return L0;
  }
  if (slot928.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot930, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeDeclSpecifier ::= Identifier layout[\"Layout\"] . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
private final int slot930() {
  if (!slot929.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot930);
    return L0;
  }
  if (slot930.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot931, slot929);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeDeclSpecifier ::= Identifier layout[\"Layout\"] {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* .
private final int slot931() {
  if (slot442.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArguments?
private final int slot445() {
  Set<Integer> set = slot445.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot445.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot445.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot445.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot445.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeArguments? ::= .
private final int slot1809() {
  if (slot445.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot445, ci, ci);
    sppfLookup.addPackedNode(node, slot1809, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArguments? ::= . TypeArguments
private final int slot1810() {
  if (!slot1019.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1810);
    return L0;
  }
  if (slot1810.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1811, slot1019);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArguments? ::= TypeArguments .
private final int slot1811() {
  if (slot445.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArrayType
private final int slot448() {
  Set<Integer> set = slot448.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot448.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot448.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot448.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot448.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ArrayType ::= . Type layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
private final int slot2477() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2477);
    return L0;
  }
  if (slot2477.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2478, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayType ::= Type . layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
private final int slot2478() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2478);
    return L0;
  }
  if (slot2478.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2479, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayType ::= Type layout[\"Layout\"] . \"[\" layout[\"Layout\"] \"]\"
private final int slot2479() {
if (slot2479.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 8);
  if (length < 0) {
    recordParseError(slot2479);
    return L0;
  }
  if (slot2479.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(8, ci, length);
  cn = slot2479.getNodeCreator().create(this, slot2480, cn, cr);
  return L0;
}

// ArrayType ::= Type layout[\"Layout\"] \"[\" . layout[\"Layout\"] \"]\"
private final int slot2480() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2480);
    return L0;
  }
  if (slot2480.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2481, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayType ::= Type layout[\"Layout\"] \"[\" layout[\"Layout\"] . \"]\"
private final int slot2481() {
  if (slot2481.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 9);
  if (length < 0) {
    recordParseError(slot2481);
    return L0;
  }
  if (slot2481.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(9, ci, length);
  cn = slot2481.getNodeCreator().create(this, slot2482, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ArrayType ::= Type layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\" .
private final int slot2482() {
  if (slot448.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot451() {
  Set<Integer> set = slot451.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot451.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot451.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot451.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot451.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator
private final int slot452() {
  if (!slot451.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot452);
    return L0;
  }
  if (slot452.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot453, slot451);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator
private final int slot453() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot453);
    return L0;
  }
  if (slot453.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot454, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] VariableDeclarator
private final int slot454() {
if (slot454.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot454);
    return L0;
  }
  if (slot454.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot454.getNodeCreator().create(this, slot455, cn, cr);
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] VariableDeclarator
private final int slot455() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot455);
    return L0;
  }
  if (slot455.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot457, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . VariableDeclarator
private final int slot457() {
  if (!slot456.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot457);
    return L0;
  }
  if (slot457.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot458, slot456);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableDeclarator .
private final int slot458() {
  if (slot451.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . VariableDeclarator
private final int slot459() {
  if (!slot456.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot459);
    return L0;
  }
  if (slot459.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot460, slot456);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= VariableDeclarator .
private final int slot460() {
  if (slot451.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// VariableDeclarator
private final int slot456() {
  Set<Integer> set = slot456.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot456.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot456.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot456.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot456.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// VariableDeclarator ::= . VariableDeclaratorId layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)?
private final int slot1446() {
  if (!slot547.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1446);
    return L0;
  }
  if (slot1446.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1447, slot547);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclarator ::= VariableDeclaratorId . layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)?
private final int slot1447() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1447);
    return L0;
  }
  if (slot1447.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1448, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclarator ::= VariableDeclaratorId layout[\"Layout\"] . (\"=\" layout[\"Layout\"] VariableInitializer)?
private final int slot1448() {
  if (!slot532.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1448);
    return L0;
  }
  if (slot1448.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1449, slot532);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclarator ::= VariableDeclaratorId layout[\"Layout\"] (\"=\" layout[\"Layout\"] VariableInitializer)? .
private final int slot1449() {
  if (slot456.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IdentifierChars
private final int slot461() {
  Set<Integer> set = slot461.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot461.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot461.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot461.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot461.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// IdentifierChars ::= . JavaLetter
private final int slot871() {
  if (!slot870.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot871);
    return L0;
  }
  if (slot871.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot872, slot870);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IdentifierChars ::= JavaLetter .
private final int slot872() {
  if (slot461.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IdentifierChars ::= . IdentifierChars JavaLetterOrDigit
private final int slot873() {
  if (!slot461.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot873);
    return L0;
  }
  if (slot873.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot875, slot461);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IdentifierChars ::= IdentifierChars . JavaLetterOrDigit
private final int slot875() {
  if (!slot874.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot875);
    return L0;
  }
  if (slot875.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot876, slot874);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IdentifierChars ::= IdentifierChars JavaLetterOrDigit .
private final int slot876() {
  if (slot461.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PostIncrementExpression
private final int slot464() {
  Set<Integer> set = slot464.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot464.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot464.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot464.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot464.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PostIncrementExpression ::= . PostfixExpression layout[\"Layout\"] \"++\"
private final int slot466() {
  if (!slot465.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot466);
    return L0;
  }
  if (slot466.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot467, slot465);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostIncrementExpression ::= PostfixExpression . layout[\"Layout\"] \"++\"
private final int slot467() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot467);
    return L0;
  }
  if (slot467.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot468, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostIncrementExpression ::= PostfixExpression layout[\"Layout\"] . \"++\"
private final int slot468() {
  if (slot468.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 25);
  if (length < 0) {
    recordParseError(slot468);
    return L0;
  }
  if (slot468.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(25, ci, length);
  cn = slot468.getNodeCreator().create(this, slot469, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PostIncrementExpression ::= PostfixExpression layout[\"Layout\"] \"++\" .
private final int slot469() {
  if (slot464.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PostfixExpression
private final int slot465() {
  Set<Integer> set = slot465.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot465.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot465.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot465.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot465.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PostfixExpression ::= . PostIncrementExpression
private final int slot1218() {
  if (!slot464.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1218);
    return L0;
  }
  if (slot1218.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1219, slot464);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostfixExpression ::= PostIncrementExpression .
private final int slot1219() {
  if (slot465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PostfixExpression ::= . PostDecrementExpression
private final int slot1221() {
  if (!slot1220.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1221);
    return L0;
  }
  if (slot1221.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1222, slot1220);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostfixExpression ::= PostDecrementExpression .
private final int slot1222() {
  if (slot465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PostfixExpression ::= . Primary
private final int slot1223() {
  if (!slot16.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1223);
    return L0;
  }
  if (slot1223.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1224, slot16);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostfixExpression ::= Primary .
private final int slot1224() {
  if (slot465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PostfixExpression ::= . ExpressionName
private final int slot1225() {
  if (!slot85.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1225);
    return L0;
  }
  if (slot1225.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1226, slot85);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostfixExpression ::= ExpressionName .
private final int slot1226() {
  if (slot465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForUpdate
private final int slot470() {
  Set<Integer> set = slot470.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot470.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot470.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot470.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot470.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ForUpdate ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot472() {
  if (!slot471.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot472);
    return L0;
  }
  if (slot472.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot473, slot471);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForUpdate ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot473() {
  if (slot470.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot471() {
  Set<Integer> set = slot471.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot471.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot471.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot471.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot471.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression
private final int slot1105() {
  if (!slot471.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1105);
    return L0;
  }
  if (slot1105.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1106, slot471);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression
private final int slot1106() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1106);
    return L0;
  }
  if (slot1106.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1107, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] StatementExpression
private final int slot1107() {
if (slot1107.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot1107);
    return L0;
  }
  if (slot1107.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot1107.getNodeCreator().create(this, slot1108, cn, cr);
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] StatementExpression
private final int slot1108() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1108);
    return L0;
  }
  if (slot1108.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1110, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . StatementExpression
private final int slot1110() {
  if (!slot1109.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1110);
    return L0;
  }
  if (slot1110.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1111, slot1109);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] StatementExpression .
private final int slot1111() {
  if (slot471.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . StatementExpression
private final int slot1112() {
  if (!slot1109.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1112);
    return L0;
  }
  if (slot1112.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1113, slot1109);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= StatementExpression .
private final int slot1113() {
  if (slot471.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigits
private final int slot474() {
  Set<Integer> set = slot474.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot474.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot474.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot474.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot474.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalDigits ::= . OctalDigit OctalDigitOrUnderscore* OctalDigit
private final int slot475() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot475);
    return L0;
  }
  if (slot475.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot477, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigits ::= OctalDigit . OctalDigitOrUnderscore* OctalDigit
private final int slot477() {
  if (!slot476.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot477);
    return L0;
  }
  if (slot477.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot478, slot476);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigits ::= OctalDigit OctalDigitOrUnderscore* . OctalDigit
private final int slot478() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot478);
    return L0;
  }
  if (slot478.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot479, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigits ::= OctalDigit OctalDigitOrUnderscore* OctalDigit .
private final int slot479() {
  if (slot474.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigits ::= . OctalDigit
private final int slot480() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot480);
    return L0;
  }
  if (slot480.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot481, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigits ::= OctalDigit .
private final int slot481() {
  if (slot474.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigitOrUnderscore*
private final int slot476() {
  Set<Integer> set = slot476.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot476.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot476.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot476.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot476.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalDigitOrUnderscore* ::= .
private final int slot2311() {
  if (slot476.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot476, ci, ci);
    sppfLookup.addPackedNode(node, slot2311, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// OctalDigitOrUnderscore* ::= . OctalDigitOrUnderscore* OctalDigitOrUnderscore
private final int slot2312() {
  if (!slot476.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2312);
    return L0;
  }
  if (slot2312.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2313, slot476);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigitOrUnderscore* ::= OctalDigitOrUnderscore* . OctalDigitOrUnderscore
private final int slot2313() {
  if (!slot47.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2313);
    return L0;
  }
  if (slot2313.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2314, slot47);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalDigitOrUnderscore* ::= OctalDigitOrUnderscore* OctalDigitOrUnderscore .
private final int slot2314() {
  if (slot476.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DefaultValue?
private final int slot498() {
  Set<Integer> set = slot498.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot498.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot498.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot498.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot498.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DefaultValue? ::= .
private final int slot499() {
  if (slot498.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot498, ci, ci);
    sppfLookup.addPackedNode(node, slot499, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// DefaultValue? ::= . DefaultValue
private final int slot500() {
  if (!slot34.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot500);
    return L0;
  }
  if (slot500.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot501, slot34);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DefaultValue? ::= DefaultValue .
private final int slot501() {
  if (slot498.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArrayCreationExpression
private final int slot502() {
  Set<Integer> set = slot502.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot502.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot502.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot502.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot502.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ArrayCreationExpression ::= . \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
private final int slot503() {
if (slot503.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 34);
  if (length < 0) {
    recordParseError(slot503);
    return L0;
  }
  if (slot503.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(34, ci, length);
  cn = slot503.getNodeCreator().create(this, slot504, cn, cr);
  return L0;
}

// ArrayCreationExpression ::= \"new\" . layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
private final int slot504() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot504);
    return L0;
  }
  if (slot504.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot506, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] . ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
private final int slot506() {
  if (!slot505.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot506);
    return L0;
  }
  if (slot506.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot507, slot505);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
private final int slot507() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot507);
    return L0;
  }
  if (slot507.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot509, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer
private final int slot509() {
  if (!slot508.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot509);
    return L0;
  }
  if (slot509.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot510, slot508);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ . layout[\"Layout\"] ArrayInitializer
private final int slot510() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot510);
    return L0;
  }
  if (slot510.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot511, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] . ArrayInitializer
private final int slot511() {
  if (!slot389.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot511);
    return L0;
  }
  if (slot511.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot512, slot389);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | ReferenceTypeNonArrayTypePrimitiveType) layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] ArrayInitializer .
private final int slot512() {
  if (slot502.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArrayCreationExpression ::= . \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot513() {
if (slot513.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 34);
  if (length < 0) {
    recordParseError(slot513);
    return L0;
  }
  if (slot513.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(34, ci, length);
  cn = slot513.getNodeCreator().create(this, slot514, cn, cr);
  return L0;
}

// ArrayCreationExpression ::= \"new\" . layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot514() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot514);
    return L0;
  }
  if (slot514.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot515, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] . ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot515() {
  if (!slot0.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot515);
    return L0;
  }
  if (slot515.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot516, slot0);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) . layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot516() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot516);
    return L0;
  }
  if (slot516.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot518, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] . {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot518() {
  if (!slot517.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot518);
    return L0;
  }
  if (slot518.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot519, slot517);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot519() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot519);
    return L0;
  }
  if (slot519.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot521, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot521() {
  if (!slot520.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot521);
    return L0;
  }
  if (slot521.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot522, slot520);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArrayCreationExpression ::= \"new\" layout[\"Layout\"] ( | PrimitiveTypeReferenceType) layout[\"Layout\"] {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* .
private final int slot522() {
  if (slot502.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | ReferenceTypeNonArrayTypePrimitiveType)
private final int slot505() {
  Set<Integer> set = slot505.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot505.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot505.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot505.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot505.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= . ReferenceTypeNonArrayType
private final int slot1801() {
  if (!slot1058.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1801);
    return L0;
  }
  if (slot1801.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1802, slot1058);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= ReferenceTypeNonArrayType .
private final int slot1802() {
  if (slot505.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= . PrimitiveType
private final int slot1803() {
  if (!slot1.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1803);
    return L0;
  }
  if (slot1803.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1804, slot1);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | ReferenceTypeNonArrayTypePrimitiveType) ::= PrimitiveType .
private final int slot1804() {
  if (slot505.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+
private final int slot508() {
  Set<Integer> set = slot508.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot508.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot508.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot508.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot508.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= . (\"[\" layout[\"Layout\"] \"]\")
private final int slot2483() {
  if (!slot1674.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2483);
    return L0;
  }
  if (slot2483.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2484, slot1674);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= (\"[\" layout[\"Layout\"] \"]\") .
private final int slot2484() {
  if (slot508.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\")
private final int slot2485() {
  if (!slot508.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2485);
    return L0;
  }
  if (slot2485.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2486, slot508);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ . layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\")
private final int slot2486() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2486);
    return L0;
  }
  if (slot2486.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2487, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] . (\"[\" layout[\"Layout\"] \"]\")
private final int slot2487() {
  if (!slot1674.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2487);
    return L0;
  }
  if (slot2487.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2488, slot1674);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ layout[\"Layout\"] (\"[\" layout[\"Layout\"] \"]\") .
private final int slot2488() {
  if (slot508.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+
private final int slot517() {
  Set<Integer> set = slot517.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot517.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot517.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot517.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot517.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+ ::= . {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] DimExpr
private final int slot754() {
  if (!slot517.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot754);
    return L0;
  }
  if (slot754.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot755, slot517);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ . layout[\"Layout\"] DimExpr
private final int slot755() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot755);
    return L0;
  }
  if (slot755.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot757, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] . DimExpr
private final int slot757() {
  if (!slot756.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot757);
    return L0;
  }
  if (slot757.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot758, slot756);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+ ::= {DimExpr layout[\"Layout\"]}+ layout[\"Layout\"] DimExpr .
private final int slot758() {
  if (slot517.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+ ::= . DimExpr
private final int slot759() {
  if (!slot756.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot759);
    return L0;
  }
  if (slot759.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot760, slot756);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {DimExpr layout[\"Layout\"]}+ ::= DimExpr .
private final int slot760() {
  if (slot517.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot520() {
  Set<Integer> set = slot520.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot520.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot520.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot520.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot520.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\")}* ::= . {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+
private final int slot1762() {
  if (!slot508.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1762);
    return L0;
  }
  if (slot1762.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1763, slot508);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\")}* ::= {(\"[\" layout[\"Layout\"] \"]\") layout[\"Layout\"]}+ .
private final int slot1763() {
  if (slot520.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(\"[\" layout[\"Layout\"] \"]\")}* ::= .
private final int slot1764() {
  if (slot520.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot520, ci, ci);
    sppfLookup.addPackedNode(node, slot1764, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// OctalNumeral
private final int slot523() {
  Set<Integer> set = slot523.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot523.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot523.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot523.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot523.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalNumeral ::= . [0] OctalDigits
private final int slot524() {
if (slot524.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot524);
    return L0;
  }
  if (slot524.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot524.getNodeCreator().create(this, slot525, cn, cr);
  return L0;
}

// OctalNumeral ::= [0] . OctalDigits
private final int slot525() {
  if (!slot474.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot525);
    return L0;
  }
  if (slot525.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot526, slot474);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalNumeral ::= [0] OctalDigits .
private final int slot526() {
  if (slot523.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalNumeral ::= . [0] [_]+ OctalDigits
private final int slot527() {
if (slot527.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot527);
    return L0;
  }
  if (slot527.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot527.getNodeCreator().create(this, slot529, cn, cr);
  return L0;
}

// OctalNumeral ::= [0] . [_]+ OctalDigits
private final int slot529() {
  if (!slot528.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot529);
    return L0;
  }
  if (slot529.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot530, slot528);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalNumeral ::= [0] [_]+ . OctalDigits
private final int slot530() {
  if (!slot474.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot530);
    return L0;
  }
  if (slot530.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot531, slot474);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalNumeral ::= [0] [_]+ OctalDigits .
private final int slot531() {
  if (slot523.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// [_]+
private final int slot528() {
  Set<Integer> set = slot528.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot528.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot528.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot528.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot528.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// [_]+ ::= . [_]
private final int slot2294() {
  if (slot2294.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 5);
  if (length < 0) {
    recordParseError(slot2294);
    return L0;
  }
  if (slot2294.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(5, ci, length);
  cn = slot2294.getNodeCreator().create(this, slot2295, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// [_]+ ::= [_] .
private final int slot2295() {
  if (slot528.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// [_]+ ::= . [_]+ [_]
private final int slot2296() {
  if (!slot528.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2296);
    return L0;
  }
  if (slot2296.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2297, slot528);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// [_]+ ::= [_]+ . [_]
private final int slot2297() {
  if (slot2297.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 5);
  if (length < 0) {
    recordParseError(slot2297);
    return L0;
  }
  if (slot2297.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(5, ci, length);
  cn = slot2297.getNodeCreator().create(this, slot2298, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// [_]+ ::= [_]+ [_] .
private final int slot2298() {
  if (slot528.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer)?
private final int slot532() {
  Set<Integer> set = slot532.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot532.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot532.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot532.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot532.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer)? ::= . (\"=\" layout[\"Layout\"] VariableInitializer)
private final int slot534() {
  if (!slot533.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot534);
    return L0;
  }
  if (slot534.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot535, slot533);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer)? ::= (\"=\" layout[\"Layout\"] VariableInitializer) .
private final int slot535() {
  if (slot532.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer)? ::= .
private final int slot536() {
  if (slot532.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot532, ci, ci);
    sppfLookup.addPackedNode(node, slot536, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer)
private final int slot533() {
  Set<Integer> set = slot533.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot533.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot533.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot533.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot533.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= . \"=\" layout[\"Layout\"] VariableInitializer
private final int slot1589() {
if (slot1589.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 36);
  if (length < 0) {
    recordParseError(slot1589);
    return L0;
  }
  if (slot1589.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(36, ci, length);
  cn = slot1589.getNodeCreator().create(this, slot1590, cn, cr);
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" . layout[\"Layout\"] VariableInitializer
private final int slot1590() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1590);
    return L0;
  }
  if (slot1590.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1591, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" layout[\"Layout\"] . VariableInitializer
private final int slot1591() {
  if (!slot386.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1591);
    return L0;
  }
  if (slot1591.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1592, slot386);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"=\" layout[\"Layout\"] VariableInitializer) ::= \"=\" layout[\"Layout\"] VariableInitializer .
private final int slot1592() {
  if (slot533.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceModifier}*
private final int slot537() {
  Set<Integer> set = slot537.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot537.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot537.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot537.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot537.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {InterfaceModifier}* ::= .
private final int slot538() {
  if (slot537.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot537, ci, ci);
    sppfLookup.addPackedNode(node, slot538, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceModifier}* ::= . {InterfaceModifier layout[\"Layout\"]}+
private final int slot540() {
  if (!slot539.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot540);
    return L0;
  }
  if (slot540.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot541, slot539);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceModifier}* ::= {InterfaceModifier layout[\"Layout\"]}+ .
private final int slot541() {
  if (slot537.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+
private final int slot539() {
  Set<Integer> set = slot539.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot539.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot539.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot539.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot539.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+ ::= . {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceModifier
private final int slot1662() {
  if (!slot539.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1662);
    return L0;
  }
  if (slot1662.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1663, slot539);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ . layout[\"Layout\"] InterfaceModifier
private final int slot1663() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1663);
    return L0;
  }
  if (slot1663.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1664, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] . InterfaceModifier
private final int slot1664() {
  if (!slot1243.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1664);
    return L0;
  }
  if (slot1664.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1665, slot1243);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+ ::= {InterfaceModifier layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceModifier .
private final int slot1665() {
  if (slot539.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+ ::= . InterfaceModifier
private final int slot1666() {
  if (!slot1243.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1666);
    return L0;
  }
  if (slot1666.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1667, slot1243);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceModifier layout[\"Layout\"]}+ ::= InterfaceModifier .
private final int slot1667() {
  if (slot539.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableModifier}*
private final int slot542() {
  Set<Integer> set = slot542.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot542.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot542.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot542.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot542.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {VariableModifier}* ::= . {VariableModifier layout[\"Layout\"]}+
private final int slot1647() {
  if (!slot1646.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1647);
    return L0;
  }
  if (slot1647.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1648, slot1646);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableModifier}* ::= {VariableModifier layout[\"Layout\"]}+ .
private final int slot1648() {
  if (slot542.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableModifier}* ::= .
private final int slot1649() {
  if (slot542.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot542, ci, ci);
    sppfLookup.addPackedNode(node, slot1649, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// VariableDeclaratorId
private final int slot547() {
  Set<Integer> set = slot547.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot547.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot547.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot547.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot547.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// VariableDeclaratorId ::= . Identifier layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot2418() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2418);
    return L0;
  }
  if (slot2418.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2419, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclaratorId ::= Identifier . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot2419() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2419);
    return L0;
  }
  if (slot2419.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2420, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclaratorId ::= Identifier layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}*
private final int slot2420() {
  if (!slot520.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2420);
    return L0;
  }
  if (slot2420.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2421, slot520);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclaratorId ::= Identifier layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* .
private final int slot2421() {
  if (slot547.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnicodeInputCharacter
private final int slot554() {
  Set<Integer> set = slot554.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot554.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot554.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot554.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot554.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// UnicodeInputCharacter ::= . RawInputCharacter
private final int slot556() {
  if (!slot555.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot556);
    return L0;
  }
  if (slot556.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot557, slot555);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeInputCharacter ::= RawInputCharacter .
private final int slot557() {
  if (slot554.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnicodeInputCharacter ::= . UnicodeEscape
private final int slot559() {
  if (!slot558.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot559);
    return L0;
  }
  if (slot559.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot560, slot558);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeInputCharacter ::= UnicodeEscape .
private final int slot560() {
  if (slot554.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RawInputCharacter
private final int slot555() {
  Set<Integer> set = slot555.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot555.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot555.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot555.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot555.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// RawInputCharacter ::= . [\\a01-[]-􏿿]
private final int slot2669() {
  if (slot2669.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 137);
  if (length < 0) {
    recordParseError(slot2669);
    return L0;
  }
  if (slot2669.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(137, ci, length);
  cn = slot2669.getNodeCreator().create(this, slot2670, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// RawInputCharacter ::= [\\a01-[]-􏿿] .
private final int slot2670() {
  if (slot555.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RawInputCharacter ::= . [\\\\] [\\\\]
private final int slot2671() {
if (slot2671.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot2671);
    return L0;
  }
  if (slot2671.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot2671.getNodeCreator().create(this, slot2672, cn, cr);
  return L0;
}

// RawInputCharacter ::= [\\\\] . [\\\\]
private final int slot2672() {
  if (slot2672.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot2672);
    return L0;
  }
  if (slot2672.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot2672.getNodeCreator().create(this, slot2673, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// RawInputCharacter ::= [\\\\] [\\\\] .
private final int slot2673() {
  if (slot555.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RawInputCharacter ::= . [\\\\]
private final int slot2674() {
  if (slot2674.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot2674);
    return L0;
  }
  if (slot2674.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot2674.getNodeCreator().create(this, slot2675, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// RawInputCharacter ::= [\\\\] .
private final int slot2675() {
  if (slot555.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnicodeEscape
private final int slot558() {
  Set<Integer> set = slot558.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot558.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot558.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot558.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot558.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// UnicodeEscape ::= . [\\\\] [u]+ HexDigit HexDigit HexDigit HexDigit
private final int slot2712() {
if (slot2712.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot2712);
    return L0;
  }
  if (slot2712.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot2712.getNodeCreator().create(this, slot2713, cn, cr);
  return L0;
}

// UnicodeEscape ::= [\\\\] . [u]+ HexDigit HexDigit HexDigit HexDigit
private final int slot2713() {
  if (!slot864.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2713);
    return L0;
  }
  if (slot2713.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2714, slot864);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeEscape ::= [\\\\] [u]+ . HexDigit HexDigit HexDigit HexDigit
private final int slot2714() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2714);
    return L0;
  }
  if (slot2714.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2715, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeEscape ::= [\\\\] [u]+ HexDigit . HexDigit HexDigit HexDigit
private final int slot2715() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2715);
    return L0;
  }
  if (slot2715.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2716, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit . HexDigit HexDigit
private final int slot2716() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2716);
    return L0;
  }
  if (slot2716.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2717, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit HexDigit . HexDigit
private final int slot2717() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2717);
    return L0;
  }
  if (slot2717.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2718, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnicodeEscape ::= [\\\\] [u]+ HexDigit HexDigit HexDigit HexDigit .
private final int slot2718() {
  if (slot558.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword
private final int slot561() {
  Set<Integer> set = slot561.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot561.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot561.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot561.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot561.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Keyword ::= . \"double\"
private final int slot562() {
  if (slot562.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 28);
  if (length < 0) {
    recordParseError(slot562);
    return L0;
  }
  if (slot562.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(28, ci, length);
  cn = slot562.getNodeCreator().create(this, slot563, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"double\" .
private final int slot563() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"int\"
private final int slot564() {
  if (slot564.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 29);
  if (length < 0) {
    recordParseError(slot564);
    return L0;
  }
  if (slot564.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(29, ci, length);
  cn = slot564.getNodeCreator().create(this, slot565, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"int\" .
private final int slot565() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"catch\"
private final int slot566() {
  if (slot566.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 37);
  if (length < 0) {
    recordParseError(slot566);
    return L0;
  }
  if (slot566.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(37, ci, length);
  cn = slot566.getNodeCreator().create(this, slot567, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"catch\" .
private final int slot567() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"throw\"
private final int slot568() {
  if (slot568.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 38);
  if (length < 0) {
    recordParseError(slot568);
    return L0;
  }
  if (slot568.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(38, ci, length);
  cn = slot568.getNodeCreator().create(this, slot569, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"throw\" .
private final int slot569() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"strictfp\"
private final int slot570() {
  if (slot570.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 39);
  if (length < 0) {
    recordParseError(slot570);
    return L0;
  }
  if (slot570.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(39, ci, length);
  cn = slot570.getNodeCreator().create(this, slot571, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"strictfp\" .
private final int slot571() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"continue\"
private final int slot572() {
  if (slot572.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 40);
  if (length < 0) {
    recordParseError(slot572);
    return L0;
  }
  if (slot572.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(40, ci, length);
  cn = slot572.getNodeCreator().create(this, slot573, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"continue\" .
private final int slot573() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"for\"
private final int slot574() {
  if (slot574.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 41);
  if (length < 0) {
    recordParseError(slot574);
    return L0;
  }
  if (slot574.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(41, ci, length);
  cn = slot574.getNodeCreator().create(this, slot575, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"for\" .
private final int slot575() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"break\"
private final int slot576() {
  if (slot576.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 42);
  if (length < 0) {
    recordParseError(slot576);
    return L0;
  }
  if (slot576.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(42, ci, length);
  cn = slot576.getNodeCreator().create(this, slot577, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"break\" .
private final int slot577() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"native\"
private final int slot578() {
  if (slot578.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 43);
  if (length < 0) {
    recordParseError(slot578);
    return L0;
  }
  if (slot578.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(43, ci, length);
  cn = slot578.getNodeCreator().create(this, slot579, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"native\" .
private final int slot579() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"package\"
private final int slot580() {
  if (slot580.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 44);
  if (length < 0) {
    recordParseError(slot580);
    return L0;
  }
  if (slot580.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(44, ci, length);
  cn = slot580.getNodeCreator().create(this, slot581, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"package\" .
private final int slot581() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"short\"
private final int slot582() {
  if (slot582.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 32);
  if (length < 0) {
    recordParseError(slot582);
    return L0;
  }
  if (slot582.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(32, ci, length);
  cn = slot582.getNodeCreator().create(this, slot583, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"short\" .
private final int slot583() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"import\"
private final int slot584() {
  if (slot584.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 45);
  if (length < 0) {
    recordParseError(slot584);
    return L0;
  }
  if (slot584.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(45, ci, length);
  cn = slot584.getNodeCreator().create(this, slot585, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"import\" .
private final int slot585() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"protected\"
private final int slot586() {
  if (slot586.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 46);
  if (length < 0) {
    recordParseError(slot586);
    return L0;
  }
  if (slot586.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(46, ci, length);
  cn = slot586.getNodeCreator().create(this, slot587, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"protected\" .
private final int slot587() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"implements\"
private final int slot588() {
  if (slot588.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 47);
  if (length < 0) {
    recordParseError(slot588);
    return L0;
  }
  if (slot588.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(47, ci, length);
  cn = slot588.getNodeCreator().create(this, slot589, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"implements\" .
private final int slot589() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"case\"
private final int slot590() {
  if (slot590.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 48);
  if (length < 0) {
    recordParseError(slot590);
    return L0;
  }
  if (slot590.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(48, ci, length);
  cn = slot590.getNodeCreator().create(this, slot591, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"case\" .
private final int slot591() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"while\"
private final int slot592() {
  if (slot592.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 49);
  if (length < 0) {
    recordParseError(slot592);
    return L0;
  }
  if (slot592.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(49, ci, length);
  cn = slot592.getNodeCreator().create(this, slot593, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"while\" .
private final int slot593() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"switch\"
private final int slot594() {
  if (slot594.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 50);
  if (length < 0) {
    recordParseError(slot594);
    return L0;
  }
  if (slot594.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(50, ci, length);
  cn = slot594.getNodeCreator().create(this, slot595, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"switch\" .
private final int slot595() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"assert\"
private final int slot596() {
  if (slot596.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 51);
  if (length < 0) {
    recordParseError(slot596);
    return L0;
  }
  if (slot596.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(51, ci, length);
  cn = slot596.getNodeCreator().create(this, slot597, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"assert\" .
private final int slot597() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"char\"
private final int slot598() {
  if (slot598.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 30);
  if (length < 0) {
    recordParseError(slot598);
    return L0;
  }
  if (slot598.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(30, ci, length);
  cn = slot598.getNodeCreator().create(this, slot599, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"char\" .
private final int slot599() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"super\"
private final int slot600() {
  if (slot600.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot600);
    return L0;
  }
  if (slot600.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot600.getNodeCreator().create(this, slot601, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"super\" .
private final int slot601() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"const\"
private final int slot602() {
  if (slot602.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 52);
  if (length < 0) {
    recordParseError(slot602);
    return L0;
  }
  if (slot602.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(52, ci, length);
  cn = slot602.getNodeCreator().create(this, slot603, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"const\" .
private final int slot603() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"this\"
private final int slot604() {
  if (slot604.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 53);
  if (length < 0) {
    recordParseError(slot604);
    return L0;
  }
  if (slot604.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(53, ci, length);
  cn = slot604.getNodeCreator().create(this, slot605, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"this\" .
private final int slot605() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"transient\"
private final int slot606() {
  if (slot606.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 54);
  if (length < 0) {
    recordParseError(slot606);
    return L0;
  }
  if (slot606.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(54, ci, length);
  cn = slot606.getNodeCreator().create(this, slot607, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"transient\" .
private final int slot607() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"default\"
private final int slot608() {
  if (slot608.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 4);
  if (length < 0) {
    recordParseError(slot608);
    return L0;
  }
  if (slot608.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(4, ci, length);
  cn = slot608.getNodeCreator().create(this, slot609, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"default\" .
private final int slot609() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"throws\"
private final int slot610() {
  if (slot610.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 55);
  if (length < 0) {
    recordParseError(slot610);
    return L0;
  }
  if (slot610.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(55, ci, length);
  cn = slot610.getNodeCreator().create(this, slot611, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"throws\" .
private final int slot611() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"float\"
private final int slot612() {
  if (slot612.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 26);
  if (length < 0) {
    recordParseError(slot612);
    return L0;
  }
  if (slot612.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(26, ci, length);
  cn = slot612.getNodeCreator().create(this, slot613, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"float\" .
private final int slot613() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"long\"
private final int slot614() {
  if (slot614.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 27);
  if (length < 0) {
    recordParseError(slot614);
    return L0;
  }
  if (slot614.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(27, ci, length);
  cn = slot614.getNodeCreator().create(this, slot615, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"long\" .
private final int slot615() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"static\"
private final int slot616() {
  if (slot616.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot616);
    return L0;
  }
  if (slot616.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot616.getNodeCreator().create(this, slot617, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"static\" .
private final int slot617() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"public\"
private final int slot618() {
  if (slot618.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot618);
    return L0;
  }
  if (slot618.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot618.getNodeCreator().create(this, slot619, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"public\" .
private final int slot619() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"volatile\"
private final int slot620() {
  if (slot620.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 57);
  if (length < 0) {
    recordParseError(slot620);
    return L0;
  }
  if (slot620.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(57, ci, length);
  cn = slot620.getNodeCreator().create(this, slot621, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"volatile\" .
private final int slot621() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"void\"
private final int slot622() {
  if (slot622.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 58);
  if (length < 0) {
    recordParseError(slot622);
    return L0;
  }
  if (slot622.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(58, ci, length);
  cn = slot622.getNodeCreator().create(this, slot623, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"void\" .
private final int slot623() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"finally\"
private final int slot624() {
  if (slot624.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 59);
  if (length < 0) {
    recordParseError(slot624);
    return L0;
  }
  if (slot624.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(59, ci, length);
  cn = slot624.getNodeCreator().create(this, slot625, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"finally\" .
private final int slot625() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"private\"
private final int slot626() {
  if (slot626.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 60);
  if (length < 0) {
    recordParseError(slot626);
    return L0;
  }
  if (slot626.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(60, ci, length);
  cn = slot626.getNodeCreator().create(this, slot627, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"private\" .
private final int slot627() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"try\"
private final int slot628() {
  if (slot628.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 61);
  if (length < 0) {
    recordParseError(slot628);
    return L0;
  }
  if (slot628.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(61, ci, length);
  cn = slot628.getNodeCreator().create(this, slot629, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"try\" .
private final int slot629() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"new\"
private final int slot630() {
  if (slot630.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 34);
  if (length < 0) {
    recordParseError(slot630);
    return L0;
  }
  if (slot630.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(34, ci, length);
  cn = slot630.getNodeCreator().create(this, slot631, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"new\" .
private final int slot631() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"byte\"
private final int slot632() {
  if (slot632.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 33);
  if (length < 0) {
    recordParseError(slot632);
    return L0;
  }
  if (slot632.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(33, ci, length);
  cn = slot632.getNodeCreator().create(this, slot633, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"byte\" .
private final int slot633() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"enum\"
private final int slot634() {
  if (slot634.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 62);
  if (length < 0) {
    recordParseError(slot634);
    return L0;
  }
  if (slot634.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(62, ci, length);
  cn = slot634.getNodeCreator().create(this, slot635, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"enum\" .
private final int slot635() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"synchronized\"
private final int slot636() {
  if (slot636.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 63);
  if (length < 0) {
    recordParseError(slot636);
    return L0;
  }
  if (slot636.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(63, ci, length);
  cn = slot636.getNodeCreator().create(this, slot637, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"synchronized\" .
private final int slot637() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"if\"
private final int slot638() {
  if (slot638.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 64);
  if (length < 0) {
    recordParseError(slot638);
    return L0;
  }
  if (slot638.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(64, ci, length);
  cn = slot638.getNodeCreator().create(this, slot639, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"if\" .
private final int slot639() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"interface\"
private final int slot640() {
  if (slot640.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 65);
  if (length < 0) {
    recordParseError(slot640);
    return L0;
  }
  if (slot640.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(65, ci, length);
  cn = slot640.getNodeCreator().create(this, slot641, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"interface\" .
private final int slot641() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"instanceof\"
private final int slot642() {
  if (slot642.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 66);
  if (length < 0) {
    recordParseError(slot642);
    return L0;
  }
  if (slot642.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(66, ci, length);
  cn = slot642.getNodeCreator().create(this, slot643, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"instanceof\" .
private final int slot643() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"return\"
private final int slot644() {
  if (slot644.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 67);
  if (length < 0) {
    recordParseError(slot644);
    return L0;
  }
  if (slot644.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(67, ci, length);
  cn = slot644.getNodeCreator().create(this, slot645, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"return\" .
private final int slot645() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"else\"
private final int slot646() {
  if (slot646.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 68);
  if (length < 0) {
    recordParseError(slot646);
    return L0;
  }
  if (slot646.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(68, ci, length);
  cn = slot646.getNodeCreator().create(this, slot647, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"else\" .
private final int slot647() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"final\"
private final int slot648() {
  if (slot648.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 69);
  if (length < 0) {
    recordParseError(slot648);
    return L0;
  }
  if (slot648.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(69, ci, length);
  cn = slot648.getNodeCreator().create(this, slot649, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"final\" .
private final int slot649() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"class\"
private final int slot650() {
  if (slot650.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 70);
  if (length < 0) {
    recordParseError(slot650);
    return L0;
  }
  if (slot650.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(70, ci, length);
  cn = slot650.getNodeCreator().create(this, slot651, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"class\" .
private final int slot651() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"goto\"
private final int slot652() {
  if (slot652.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 71);
  if (length < 0) {
    recordParseError(slot652);
    return L0;
  }
  if (slot652.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(71, ci, length);
  cn = slot652.getNodeCreator().create(this, slot653, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"goto\" .
private final int slot653() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"extends\"
private final int slot654() {
  if (slot654.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 72);
  if (length < 0) {
    recordParseError(slot654);
    return L0;
  }
  if (slot654.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(72, ci, length);
  cn = slot654.getNodeCreator().create(this, slot655, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"extends\" .
private final int slot655() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"do\"
private final int slot656() {
  if (slot656.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 73);
  if (length < 0) {
    recordParseError(slot656);
    return L0;
  }
  if (slot656.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(73, ci, length);
  cn = slot656.getNodeCreator().create(this, slot657, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"do\" .
private final int slot657() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"abstract\"
private final int slot658() {
  if (slot658.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 23);
  if (length < 0) {
    recordParseError(slot658);
    return L0;
  }
  if (slot658.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(23, ci, length);
  cn = slot658.getNodeCreator().create(this, slot659, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"abstract\" .
private final int slot659() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Keyword ::= . \"boolean\"
private final int slot660() {
  if (slot660.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 31);
  if (length < 0) {
    recordParseError(slot660);
    return L0;
  }
  if (slot660.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(31, ci, length);
  cn = slot660.getNodeCreator().create(this, slot661, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Keyword ::= \"boolean\" .
private final int slot661() {
  if (slot561.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Comment
private final int slot662() {
  Set<Integer> set = slot662.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot662.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot662.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot662.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot662.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Comment ::= . TraditionalComment
private final int slot664() {
  if (!slot663.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot664);
    return L0;
  }
  if (slot664.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot665, slot663);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Comment ::= TraditionalComment .
private final int slot665() {
  if (slot662.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Comment ::= . EndOfLineComment
private final int slot667() {
  if (!slot666.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot667);
    return L0;
  }
  if (slot667.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot668, slot666);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Comment ::= EndOfLineComment .
private final int slot668() {
  if (slot662.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TraditionalComment
private final int slot663() {
  Set<Integer> set = slot663.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot663.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot663.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot663.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot663.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TraditionalComment ::= . \"/*\" CommentTail
private final int slot1866() {
if (slot1866.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 112);
  if (length < 0) {
    recordParseError(slot1866);
    return L0;
  }
  if (slot1866.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(112, ci, length);
  cn = slot1866.getNodeCreator().create(this, slot1867, cn, cr);
  return L0;
}

// TraditionalComment ::= \"/*\" . CommentTail
private final int slot1867() {
  if (!slot1729.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1867);
    return L0;
  }
  if (slot1867.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1868, slot1729);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TraditionalComment ::= \"/*\" CommentTail .
private final int slot1868() {
  if (slot663.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EndOfLineComment
private final int slot666() {
  Set<Integer> set = slot666.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot666.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot666.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot666.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot666.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EndOfLineComment ::= . \"//\" InputCharacter*
private final int slot1654() {
if (slot1654.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 108);
  if (length < 0) {
    recordParseError(slot1654);
    return L0;
  }
  if (slot1654.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(108, ci, length);
  cn = slot1654.getNodeCreator().create(this, slot1655, cn, cr);
  return L0;
}

// EndOfLineComment ::= \"//\" . InputCharacter*
private final int slot1655() {
  if (!slot1364.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1655);
    return L0;
  }
  if (slot1655.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1656, slot1364);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EndOfLineComment ::= \"//\" InputCharacter* .
private final int slot1656() {
  if (slot666.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexadecimalFloatingPointLiteral
private final int slot669() {
  Set<Integer> set = slot669.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot669.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot669.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot669.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot669.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexadecimalFloatingPointLiteral ::= . HexSignificand BinaryExponent FloatTypeSuffix?
private final int slot671() {
  if (!slot670.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot671);
    return L0;
  }
  if (slot671.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot672, slot670);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexadecimalFloatingPointLiteral ::= HexSignificand . BinaryExponent FloatTypeSuffix?
private final int slot672() {
  if (!slot102.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot672);
    return L0;
  }
  if (slot672.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot673, slot102);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent . FloatTypeSuffix?
private final int slot673() {
  if (!slot260.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot673);
    return L0;
  }
  if (slot673.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot674, slot260);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexadecimalFloatingPointLiteral ::= HexSignificand BinaryExponent FloatTypeSuffix? .
private final int slot674() {
  if (slot669.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexSignificand
private final int slot670() {
  Set<Integer> set = slot670.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot670.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot670.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot670.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot670.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexSignificand ::= . HexNumeral [.]
private final int slot2550() {
  if (!slot2299.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2550);
    return L0;
  }
  if (slot2550.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2551, slot2299);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= HexNumeral . [.]
private final int slot2551() {
  if (slot2551.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 14);
  if (length < 0) {
    recordParseError(slot2551);
    return L0;
  }
  if (slot2551.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(14, ci, length);
  cn = slot2551.getNodeCreator().create(this, slot2552, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= HexNumeral [.] .
private final int slot2552() {
  if (slot670.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexSignificand ::= . [0] [X] HexDigits? [.] HexDigits
private final int slot2553() {
if (slot2553.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot2553);
    return L0;
  }
  if (slot2553.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot2553.getNodeCreator().create(this, slot2554, cn, cr);
  return L0;
}

// HexSignificand ::= [0] . [X] HexDigits? [.] HexDigits
private final int slot2554() {
if (slot2554.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 135);
  if (length < 0) {
    recordParseError(slot2554);
    return L0;
  }
  if (slot2554.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(135, ci, length);
  cn = slot2554.getNodeCreator().create(this, slot2555, cn, cr);
  return L0;
}

// HexSignificand ::= [0] [X] . HexDigits? [.] HexDigits
private final int slot2555() {
  if (!slot2321.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2555);
    return L0;
  }
  if (slot2555.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2556, slot2321);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= [0] [X] HexDigits? . [.] HexDigits
private final int slot2556() {
if (slot2556.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 14);
  if (length < 0) {
    recordParseError(slot2556);
    return L0;
  }
  if (slot2556.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(14, ci, length);
  cn = slot2556.getNodeCreator().create(this, slot2557, cn, cr);
  return L0;
}

// HexSignificand ::= [0] [X] HexDigits? [.] . HexDigits
private final int slot2557() {
  if (!slot353.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2557);
    return L0;
  }
  if (slot2557.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2558, slot353);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= [0] [X] HexDigits? [.] HexDigits .
private final int slot2558() {
  if (slot670.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexSignificand ::= . [0] [x] HexDigits? [.] HexDigits
private final int slot2559() {
if (slot2559.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot2559);
    return L0;
  }
  if (slot2559.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot2559.getNodeCreator().create(this, slot2560, cn, cr);
  return L0;
}

// HexSignificand ::= [0] . [x] HexDigits? [.] HexDigits
private final int slot2560() {
if (slot2560.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 134);
  if (length < 0) {
    recordParseError(slot2560);
    return L0;
  }
  if (slot2560.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(134, ci, length);
  cn = slot2560.getNodeCreator().create(this, slot2561, cn, cr);
  return L0;
}

// HexSignificand ::= [0] [x] . HexDigits? [.] HexDigits
private final int slot2561() {
  if (!slot2321.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2561);
    return L0;
  }
  if (slot2561.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2562, slot2321);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= [0] [x] HexDigits? . [.] HexDigits
private final int slot2562() {
if (slot2562.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 14);
  if (length < 0) {
    recordParseError(slot2562);
    return L0;
  }
  if (slot2562.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(14, ci, length);
  cn = slot2562.getNodeCreator().create(this, slot2563, cn, cr);
  return L0;
}

// HexSignificand ::= [0] [x] HexDigits? [.] . HexDigits
private final int slot2563() {
  if (!slot353.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2563);
    return L0;
  }
  if (slot2563.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2564, slot353);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= [0] [x] HexDigits? [.] HexDigits .
private final int slot2564() {
  if (slot670.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexSignificand ::= . HexNumeral
private final int slot2565() {
  if (!slot2299.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2565);
    return L0;
  }
  if (slot2565.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2566, slot2299);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexSignificand ::= HexNumeral .
private final int slot2566() {
  if (slot670.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementNoShortIf
private final int slot675() {
  Set<Integer> set = slot675.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot675.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot675.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot675.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot675.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StatementNoShortIf ::= . StatementWithoutTrailingSubstatement
private final int slot677() {
  if (!slot676.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot677);
    return L0;
  }
  if (slot677.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot678, slot676);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= StatementWithoutTrailingSubstatement .
private final int slot678() {
  if (slot675.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementNoShortIf ::= . Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf
private final int slot679() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot679);
    return L0;
  }
  if (slot679.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot680, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= Identifier . layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf
private final int slot680() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot680);
    return L0;
  }
  if (slot680.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot681, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= Identifier layout[\"Layout\"] . \":\" layout[\"Layout\"] StatementNoShortIf
private final int slot681() {
if (slot681.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot681);
    return L0;
  }
  if (slot681.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot681.getNodeCreator().create(this, slot682, cn, cr);
  return L0;
}

// StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" . layout[\"Layout\"] StatementNoShortIf
private final int slot682() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot682);
    return L0;
  }
  if (slot682.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot683, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] . StatementNoShortIf
private final int slot683() {
  if (!slot675.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot683);
    return L0;
  }
  if (slot683.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot684, slot675);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= Identifier layout[\"Layout\"] \":\" layout[\"Layout\"] StatementNoShortIf .
private final int slot684() {
  if (slot675.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementNoShortIf ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot685() {
if (slot685.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 41);
  if (length < 0) {
    recordParseError(slot685);
    return L0;
  }
  if (slot685.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(41, ci, length);
  cn = slot685.getNodeCreator().create(this, slot686, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot686() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot686);
    return L0;
  }
  if (slot686.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot687, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot687() {
if (slot687.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot687);
    return L0;
  }
  if (slot687.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot687.getNodeCreator().create(this, slot688, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot688() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot688);
    return L0;
  }
  if (slot688.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot690, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot690() {
  if (!slot689.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot690);
    return L0;
  }
  if (slot690.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot691, slot689);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? . layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot691() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot691);
    return L0;
  }
  if (slot691.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot692, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] . \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot692() {
if (slot692.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot692);
    return L0;
  }
  if (slot692.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot692.getNodeCreator().create(this, slot693, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot693() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot693);
    return L0;
  }
  if (slot693.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot695, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot695() {
  if (!slot694.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot695);
    return L0;
  }
  if (slot695.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot696, slot694);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot696() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot696);
    return L0;
  }
  if (slot696.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot697, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot697() {
if (slot697.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot697);
    return L0;
  }
  if (slot697.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot697.getNodeCreator().create(this, slot698, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" . layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot698() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot698);
    return L0;
  }
  if (slot698.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot700, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] . ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot700() {
  if (!slot699.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot700);
    return L0;
  }
  if (slot700.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot701, slot699);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot701() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot701);
    return L0;
  }
  if (slot701.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot702, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot702() {
if (slot702.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot702);
    return L0;
  }
  if (slot702.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot702.getNodeCreator().create(this, slot703, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf
private final int slot703() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot703);
    return L0;
  }
  if (slot703.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot704, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf
private final int slot704() {
  if (!slot675.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot704);
    return L0;
  }
  if (slot704.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot705, slot675);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf .
private final int slot705() {
  if (slot675.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementNoShortIf ::= . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot706() {
if (slot706.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 49);
  if (length < 0) {
    recordParseError(slot706);
    return L0;
  }
  if (slot706.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(49, ci, length);
  cn = slot706.getNodeCreator().create(this, slot707, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot707() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot707);
    return L0;
  }
  if (slot707.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot708, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot708() {
if (slot708.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot708);
    return L0;
  }
  if (slot708.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot708.getNodeCreator().create(this, slot709, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot709() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot709);
    return L0;
  }
  if (slot709.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot710, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot710() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot710);
    return L0;
  }
  if (slot710.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot711, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot711() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot711);
    return L0;
  }
  if (slot711.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot712, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf
private final int slot712() {
if (slot712.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot712);
    return L0;
  }
  if (slot712.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot712.getNodeCreator().create(this, slot713, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf
private final int slot713() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot713);
    return L0;
  }
  if (slot713.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot714, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf
private final int slot714() {
  if (!slot675.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot714);
    return L0;
  }
  if (slot714.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot715, slot675);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf .
private final int slot715() {
  if (slot675.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementNoShortIf ::= . \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot716() {
if (slot716.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 64);
  if (length < 0) {
    recordParseError(slot716);
    return L0;
  }
  if (slot716.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(64, ci, length);
  cn = slot716.getNodeCreator().create(this, slot717, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"if\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot717() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot717);
    return L0;
  }
  if (slot717.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot718, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot718() {
if (slot718.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot718);
    return L0;
  }
  if (slot718.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot718.getNodeCreator().create(this, slot719, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot719() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot719);
    return L0;
  }
  if (slot719.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot720, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot720() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot720);
    return L0;
  }
  if (slot720.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot721, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot721() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot721);
    return L0;
  }
  if (slot721.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot722, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot722() {
if (slot722.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot722);
    return L0;
  }
  if (slot722.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot722.getNodeCreator().create(this, slot723, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot723() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot723);
    return L0;
  }
  if (slot723.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot724, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot724() {
  if (!slot675.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot724);
    return L0;
  }
  if (slot724.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot725, slot675);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf . layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot725() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot725);
    return L0;
  }
  if (slot725.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot726, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] . \"else\" layout[\"Layout\"] StatementNoShortIf
private final int slot726() {
if (slot726.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 68);
  if (length < 0) {
    recordParseError(slot726);
    return L0;
  }
  if (slot726.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(68, ci, length);
  cn = slot726.getNodeCreator().create(this, slot727, cn, cr);
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" . layout[\"Layout\"] StatementNoShortIf
private final int slot727() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot727);
    return L0;
  }
  if (slot727.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot728, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] . StatementNoShortIf
private final int slot728() {
  if (!slot675.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot728);
    return L0;
  }
  if (slot728.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot729, slot675);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementNoShortIf ::= \"if\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] StatementNoShortIf layout[\"Layout\"] \"else\" layout[\"Layout\"] StatementNoShortIf .
private final int slot729() {
  if (slot675.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement
private final int slot676() {
  Set<Integer> set = slot676.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot676.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot676.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot676.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot676.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1916() {
if (slot1916.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 61);
  if (length < 0) {
    recordParseError(slot1916);
    return L0;
  }
  if (slot1916.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(61, ci, length);
  cn = slot1916.getNodeCreator().create(this, slot1917, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" . layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1917() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1917);
    return L0;
  }
  if (slot1917.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1918, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] . ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1918() {
  if (!slot370.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1918);
    return L0;
  }
  if (slot1918.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1919, slot370);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification . layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1919() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1919);
    return L0;
  }
  if (slot1919.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1920, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] . Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1920() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1920);
    return L0;
  }
  if (slot1920.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1921, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block . layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1921() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1921);
    return L0;
  }
  if (slot1921.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1922, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] . {CatchClause}* layout[\"Layout\"] Finally?
private final int slot1922() {
  if (!slot1738.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1922);
    return L0;
  }
  if (slot1922.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1923, slot1738);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* . layout[\"Layout\"] Finally?
private final int slot1923() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1923);
    return L0;
  }
  if (slot1923.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1924, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] . Finally?
private final int slot1924() {
  if (!slot801.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1924);
    return L0;
  }
  if (slot1924.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1925, slot801);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] ResourceSpecification layout[\"Layout\"] Block layout[\"Layout\"] {CatchClause}* layout[\"Layout\"] Finally? .
private final int slot1925() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] \";\"
private final int slot1926() {
if (slot1926.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 38);
  if (length < 0) {
    recordParseError(slot1926);
    return L0;
  }
  if (slot1926.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(38, ci, length);
  cn = slot1926.getNodeCreator().create(this, slot1927, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"throw\" . layout[\"Layout\"] Expression layout[\"Layout\"] \";\"
private final int slot1927() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1927);
    return L0;
  }
  if (slot1927.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1928, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] . Expression layout[\"Layout\"] \";\"
private final int slot1928() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1928);
    return L0;
  }
  if (slot1928.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1929, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression . layout[\"Layout\"] \";\"
private final int slot1929() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1929);
    return L0;
  }
  if (slot1929.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1930, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] . \";\"
private final int slot1930() {
  if (slot1930.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1930);
    return L0;
  }
  if (slot1930.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1930.getNodeCreator().create(this, slot1931, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"throw\" layout[\"Layout\"] Expression layout[\"Layout\"] \";\" .
private final int slot1931() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1932() {
if (slot1932.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 50);
  if (length < 0) {
    recordParseError(slot1932);
    return L0;
  }
  if (slot1932.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(50, ci, length);
  cn = slot1932.getNodeCreator().create(this, slot1933, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1933() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1933);
    return L0;
  }
  if (slot1933.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1934, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1934() {
if (slot1934.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1934);
    return L0;
  }
  if (slot1934.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1934.getNodeCreator().create(this, slot1935, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1935() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1935);
    return L0;
  }
  if (slot1935.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1936, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1936() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1936);
    return L0;
  }
  if (slot1936.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1937, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1937() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1937);
    return L0;
  }
  if (slot1937.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1938, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1938() {
if (slot1938.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1938);
    return L0;
  }
  if (slot1938.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1938.getNodeCreator().create(this, slot1939, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1939() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1939);
    return L0;
  }
  if (slot1939.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1940, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1940() {
if (slot1940.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot1940);
    return L0;
  }
  if (slot1940.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot1940.getNodeCreator().create(this, slot1941, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" . layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1941() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1941);
    return L0;
  }
  if (slot1941.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1943, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] . {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1943() {
  if (!slot1942.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1943);
    return L0;
  }
  if (slot1943.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1944, slot1942);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* . layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1944() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1944);
    return L0;
  }
  if (slot1944.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1945, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] . {SwitchLabel}* layout[\"Layout\"] \"}\"
private final int slot1945() {
  if (!slot1642.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1945);
    return L0;
  }
  if (slot1945.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1946, slot1642);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* . layout[\"Layout\"] \"}\"
private final int slot1946() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1946);
    return L0;
  }
  if (slot1946.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1947, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] . \"}\"
private final int slot1947() {
  if (slot1947.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot1947);
    return L0;
  }
  if (slot1947.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot1947.getNodeCreator().create(this, slot1948, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"switch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \"{\" layout[\"Layout\"] {SwitchBlockStatementGroup}* layout[\"Layout\"] {SwitchLabel}* layout[\"Layout\"] \"}\" .
private final int slot1948() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\"
private final int slot1949() {
if (slot1949.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 67);
  if (length < 0) {
    recordParseError(slot1949);
    return L0;
  }
  if (slot1949.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(67, ci, length);
  cn = slot1949.getNodeCreator().create(this, slot1950, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"return\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\"
private final int slot1950() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1950);
    return L0;
  }
  if (slot1950.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1951, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\"
private final int slot1951() {
  if (!slot694.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1951);
    return L0;
  }
  if (slot1951.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1952, slot694);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\"
private final int slot1952() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1952);
    return L0;
  }
  if (slot1952.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1953, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\"
private final int slot1953() {
  if (slot1953.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1953);
    return L0;
  }
  if (slot1953.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1953.getNodeCreator().create(this, slot1954, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"return\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" .
private final int slot1954() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \";\"
private final int slot1955() {
  if (slot1955.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1955);
    return L0;
  }
  if (slot1955.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1955.getNodeCreator().create(this, slot1956, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \";\" .
private final int slot1956() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1957() {
if (slot1957.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 73);
  if (length < 0) {
    recordParseError(slot1957);
    return L0;
  }
  if (slot1957.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(73, ci, length);
  cn = slot1957.getNodeCreator().create(this, slot1958, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" . layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1958() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1958);
    return L0;
  }
  if (slot1958.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1959, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] . Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1959() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1959);
    return L0;
  }
  if (slot1959.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1960, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement . layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1960() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1960);
    return L0;
  }
  if (slot1960.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1961, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] . \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1961() {
if (slot1961.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 49);
  if (length < 0) {
    recordParseError(slot1961);
    return L0;
  }
  if (slot1961.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(49, ci, length);
  cn = slot1961.getNodeCreator().create(this, slot1962, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1962() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1962);
    return L0;
  }
  if (slot1962.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1963, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1963() {
if (slot1963.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1963);
    return L0;
  }
  if (slot1963.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1963.getNodeCreator().create(this, slot1964, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1964() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1964);
    return L0;
  }
  if (slot1964.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1965, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1965() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1965);
    return L0;
  }
  if (slot1965.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1966, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot1966() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1966);
    return L0;
  }
  if (slot1966.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1967, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
private final int slot1967() {
if (slot1967.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1967);
    return L0;
  }
  if (slot1967.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1967.getNodeCreator().create(this, slot1968, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
private final int slot1968() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1968);
    return L0;
  }
  if (slot1968.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1969, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
private final int slot1969() {
  if (slot1969.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1969);
    return L0;
  }
  if (slot1969.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1969.getNodeCreator().create(this, slot1970, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"do\" layout[\"Layout\"] Statement layout[\"Layout\"] \"while\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
private final int slot1970() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"try\" layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
private final int slot1971() {
if (slot1971.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 61);
  if (length < 0) {
    recordParseError(slot1971);
    return L0;
  }
  if (slot1971.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(61, ci, length);
  cn = slot1971.getNodeCreator().create(this, slot1972, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" . layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
private final int slot1972() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1972);
    return L0;
  }
  if (slot1972.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1973, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] . Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
private final int slot1973() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1973);
    return L0;
  }
  if (slot1973.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1974, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block . layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
private final int slot1974() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1974);
    return L0;
  }
  if (slot1974.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1975, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block layout[\"Layout\"] . ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
private final int slot1975() {
  if (!slot1700.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1975);
    return L0;
  }
  if (slot1975.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1976, slot1700);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"try\" layout[\"Layout\"] Block layout[\"Layout\"] ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) .
private final int slot1976() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
private final int slot1977() {
if (slot1977.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 42);
  if (length < 0) {
    recordParseError(slot1977);
    return L0;
  }
  if (slot1977.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(42, ci, length);
  cn = slot1977.getNodeCreator().create(this, slot1978, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"break\" . layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
private final int slot1978() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1978);
    return L0;
  }
  if (slot1978.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1979, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] . Identifier? layout[\"Layout\"] \";\"
private final int slot1979() {
  if (!slot1805.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1979);
    return L0;
  }
  if (slot1979.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1980, slot1805);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? . layout[\"Layout\"] \";\"
private final int slot1980() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1980);
    return L0;
  }
  if (slot1980.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1981, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] . \";\"
private final int slot1981() {
  if (slot1981.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1981);
    return L0;
  }
  if (slot1981.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1981.getNodeCreator().create(this, slot1982, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"break\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\" .
private final int slot1982() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot1983() {
if (slot1983.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 63);
  if (length < 0) {
    recordParseError(slot1983);
    return L0;
  }
  if (slot1983.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(63, ci, length);
  cn = slot1983.getNodeCreator().create(this, slot1984, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot1984() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1984);
    return L0;
  }
  if (slot1984.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1985, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot1985() {
if (slot1985.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1985);
    return L0;
  }
  if (slot1985.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1985.getNodeCreator().create(this, slot1986, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot1986() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1986);
    return L0;
  }
  if (slot1986.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1987, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot1987() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1987);
    return L0;
  }
  if (slot1987.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1988, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot1988() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1988);
    return L0;
  }
  if (slot1988.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1989, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Block
private final int slot1989() {
if (slot1989.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1989);
    return L0;
  }
  if (slot1989.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1989.getNodeCreator().create(this, slot1990, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Block
private final int slot1990() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1990);
    return L0;
  }
  if (slot1990.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1991, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Block
private final int slot1991() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1991);
    return L0;
  }
  if (slot1991.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1992, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"synchronized\" layout[\"Layout\"] \"(\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Block .
private final int slot1992() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
private final int slot1993() {
if (slot1993.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 51);
  if (length < 0) {
    recordParseError(slot1993);
    return L0;
  }
  if (slot1993.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(51, ci, length);
  cn = slot1993.getNodeCreator().create(this, slot1994, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" . layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
private final int slot1994() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1994);
    return L0;
  }
  if (slot1994.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1995, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] . Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
private final int slot1995() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1995);
    return L0;
  }
  if (slot1995.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1996, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression . layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
private final int slot1996() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1996);
    return L0;
  }
  if (slot1996.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1997, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] . (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\"
private final int slot1997() {
  if (!slot1585.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1997);
    return L0;
  }
  if (slot1997.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1998, slot1585);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? . layout[\"Layout\"] \";\"
private final int slot1998() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1998);
    return L0;
  }
  if (slot1998.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1999, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] . \";\"
private final int slot1999() {
  if (slot1999.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1999);
    return L0;
  }
  if (slot1999.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1999.getNodeCreator().create(this, slot2000, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"assert\" layout[\"Layout\"] Expression layout[\"Layout\"] (\":\" layout[\"Layout\"] Expression)? layout[\"Layout\"] \";\" .
private final int slot2000() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . StatementExpression layout[\"Layout\"] \";\"
private final int slot2001() {
  if (!slot1109.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2001);
    return L0;
  }
  if (slot2001.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2002, slot1109);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= StatementExpression . layout[\"Layout\"] \";\"
private final int slot2002() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2002);
    return L0;
  }
  if (slot2002.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2003, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= StatementExpression layout[\"Layout\"] . \";\"
private final int slot2003() {
  if (slot2003.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot2003);
    return L0;
  }
  if (slot2003.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot2003.getNodeCreator().create(this, slot2004, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= StatementExpression layout[\"Layout\"] \";\" .
private final int slot2004() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
private final int slot2005() {
if (slot2005.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 40);
  if (length < 0) {
    recordParseError(slot2005);
    return L0;
  }
  if (slot2005.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(40, ci, length);
  cn = slot2005.getNodeCreator().create(this, slot2006, cn, cr);
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"continue\" . layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\"
private final int slot2006() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2006);
    return L0;
  }
  if (slot2006.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2007, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] . Identifier? layout[\"Layout\"] \";\"
private final int slot2007() {
  if (!slot1805.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2007);
    return L0;
  }
  if (slot2007.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2008, slot1805);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? . layout[\"Layout\"] \";\"
private final int slot2008() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2008);
    return L0;
  }
  if (slot2008.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2009, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] . \";\"
private final int slot2009() {
  if (slot2009.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot2009);
    return L0;
  }
  if (slot2009.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot2009.getNodeCreator().create(this, slot2010, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= \"continue\" layout[\"Layout\"] Identifier? layout[\"Layout\"] \";\" .
private final int slot2010() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= . Block
private final int slot2011() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2011);
    return L0;
  }
  if (slot2011.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2012, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementWithoutTrailingSubstatement ::= Block .
private final int slot2012() {
  if (slot676.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForInit?
private final int slot689() {
  Set<Integer> set = slot689.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot689.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot689.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot689.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot689.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ForInit? ::= .
private final int slot1186() {
  if (slot689.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot689, ci, ci);
    sppfLookup.addPackedNode(node, slot1186, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ForInit? ::= . ForInit
private final int slot1188() {
  if (!slot1187.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1188);
    return L0;
  }
  if (slot1188.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1189, slot1187);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForInit? ::= ForInit .
private final int slot1189() {
  if (slot689.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Expression?
private final int slot694() {
  Set<Integer> set = slot694.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot694.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot694.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot694.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot694.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Expression? ::= . Expression
private final int slot1400() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1400);
    return L0;
  }
  if (slot1400.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1401, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Expression? ::= Expression .
private final int slot1401() {
  if (slot694.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Expression? ::= .
private final int slot1402() {
  if (slot694.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot694, ci, ci);
    sppfLookup.addPackedNode(node, slot1402, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ForUpdate?
private final int slot699() {
  Set<Integer> set = slot699.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot699.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot699.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot699.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot699.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ForUpdate? ::= . ForUpdate
private final int slot2499() {
  if (!slot470.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2499);
    return L0;
  }
  if (slot2499.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2500, slot470);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForUpdate? ::= ForUpdate .
private final int slot2500() {
  if (slot699.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForUpdate? ::= .
private final int slot2501() {
  if (slot699.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot699, ci, ci);
    sppfLookup.addPackedNode(node, slot2501, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// EnumBodyDeclarations?
private final int slot730() {
  Set<Integer> set = slot730.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot730.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot730.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot730.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot730.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EnumBodyDeclarations? ::= .
private final int slot731() {
  if (slot730.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot730, ci, ci);
    sppfLookup.addPackedNode(node, slot731, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// EnumBodyDeclarations? ::= . EnumBodyDeclarations
private final int slot733() {
  if (!slot732.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot733);
    return L0;
  }
  if (slot733.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot734, slot732);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBodyDeclarations? ::= EnumBodyDeclarations .
private final int slot734() {
  if (slot730.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EnumBodyDeclarations
private final int slot732() {
  Set<Integer> set = slot732.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot732.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot732.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot732.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot732.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EnumBodyDeclarations ::= . \";\" layout[\"Layout\"] {ClassBodyDeclaration}*
private final int slot2458() {
if (slot2458.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot2458);
    return L0;
  }
  if (slot2458.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot2458.getNodeCreator().create(this, slot2459, cn, cr);
  return L0;
}

// EnumBodyDeclarations ::= \";\" . layout[\"Layout\"] {ClassBodyDeclaration}*
private final int slot2459() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2459);
    return L0;
  }
  if (slot2459.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2460, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBodyDeclarations ::= \";\" layout[\"Layout\"] . {ClassBodyDeclaration}*
private final int slot2460() {
  if (!slot1369.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2460);
    return L0;
  }
  if (slot2460.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2461, slot1369);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBodyDeclarations ::= \";\" layout[\"Layout\"] {ClassBodyDeclaration}* .
private final int slot2461() {
  if (slot732.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ArgumentList
private final int slot736() {
  Set<Integer> set = slot736.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot736.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot736.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot736.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot736.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ArgumentList ::= . {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot1227() {
  if (!slot898.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1227);
    return L0;
  }
  if (slot1227.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1228, slot898);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ArgumentList ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot1228() {
  if (slot736.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\")
private final int slot739() {
  Set<Integer> set = slot739.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot739.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot739.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot739.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot739.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= . \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\"
private final int slot1713() {
if (slot1713.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1713);
    return L0;
  }
  if (slot1713.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1713.getNodeCreator().create(this, slot1714, cn, cr);
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" . layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\"
private final int slot1714() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1714);
    return L0;
  }
  if (slot1714.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1715, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] . ElementValue layout[\"Layout\"] \")\"
private final int slot1715() {
  if (!slot37.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1715);
    return L0;
  }
  if (slot1715.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1716, slot37);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue . layout[\"Layout\"] \")\"
private final int slot1716() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1716);
    return L0;
  }
  if (slot1716.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1717, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] . \")\"
private final int slot1717() {
  if (slot1717.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1717);
    return L0;
  }
  if (slot1717.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1717.getNodeCreator().create(this, slot1718, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// (\"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\") ::= \"(\" layout[\"Layout\"] ElementValue layout[\"Layout\"] \")\" .
private final int slot1718() {
  if (slot739.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalNumeral
private final int slot743() {
  Set<Integer> set = slot743.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot743.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot743.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot743.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot743.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DecimalNumeral ::= . [0]
private final int slot1885() {
  if (slot1885.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot1885);
    return L0;
  }
  if (slot1885.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot1885.getNodeCreator().create(this, slot1886, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// DecimalNumeral ::= [0] .
private final int slot1886() {
  if (slot743.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalNumeral ::= . NonZeroDigit Digits?
private final int slot1887() {
  if (!slot1156.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1887);
    return L0;
  }
  if (slot1887.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1888, slot1156);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalNumeral ::= NonZeroDigit . Digits?
private final int slot1888() {
  if (!slot113.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1888);
    return L0;
  }
  if (slot1888.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1889, slot113);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalNumeral ::= NonZeroDigit Digits? .
private final int slot1889() {
  if (slot743.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DecimalNumeral ::= . NonZeroDigit [_]+ Digits
private final int slot1890() {
  if (!slot1156.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1890);
    return L0;
  }
  if (slot1890.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1891, slot1156);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalNumeral ::= NonZeroDigit . [_]+ Digits
private final int slot1891() {
  if (!slot528.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1891);
    return L0;
  }
  if (slot1891.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1892, slot528);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalNumeral ::= NonZeroDigit [_]+ . Digits
private final int slot1892() {
  if (!slot115.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1892);
    return L0;
  }
  if (slot1892.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1893, slot115);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DecimalNumeral ::= NonZeroDigit [_]+ Digits .
private final int slot1893() {
  if (slot743.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerTypeSuffix?
private final int slot745() {
  Set<Integer> set = slot745.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot745.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot745.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot745.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot745.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// IntegerTypeSuffix? ::= .
private final int slot1044() {
  if (slot745.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot745, ci, ci);
    sppfLookup.addPackedNode(node, slot1044, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerTypeSuffix? ::= . IntegerTypeSuffix
private final int slot1046() {
  if (!slot1045.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1046);
    return L0;
  }
  if (slot1046.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1047, slot1045);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// IntegerTypeSuffix? ::= IntegerTypeSuffix .
private final int slot1047() {
  if (slot745.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type)
private final int slot748() {
  Set<Integer> set = slot748.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot748.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot748.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot748.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot748.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type) ::= . \"extends\" layout[\"Layout\"] Type
private final int slot749() {
if (slot749.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 72);
  if (length < 0) {
    recordParseError(slot749);
    return L0;
  }
  if (slot749.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(72, ci, length);
  cn = slot749.getNodeCreator().create(this, slot750, cn, cr);
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type) ::= \"extends\" . layout[\"Layout\"] Type
private final int slot750() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot750);
    return L0;
  }
  if (slot750.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot752, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type) ::= \"extends\" layout[\"Layout\"] . Type
private final int slot752() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot752);
    return L0;
  }
  if (slot752.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot753, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type) ::= \"extends\" layout[\"Layout\"] Type .
private final int slot753() {
  if (slot748.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Type
private final int slot751() {
  Set<Integer> set = slot751.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot751.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot751.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot751.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot751.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Type ::= . ReferenceType
private final int slot1450() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1450);
    return L0;
  }
  if (slot1450.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1451, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Type ::= ReferenceType .
private final int slot1451() {
  if (slot751.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Type ::= . PrimitiveType
private final int slot1452() {
  if (!slot1.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1452);
    return L0;
  }
  if (slot1452.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1453, slot1);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Type ::= PrimitiveType .
private final int slot1453() {
  if (slot751.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// DimExpr
private final int slot756() {
  Set<Integer> set = slot756.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot756.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot756.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot756.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot756.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// DimExpr ::= . \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot1533() {
if (slot1533.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 8);
  if (length < 0) {
    recordParseError(slot1533);
    return L0;
  }
  if (slot1533.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(8, ci, length);
  cn = slot1533.getNodeCreator().create(this, slot1534, cn, cr);
  return L0;
}

// DimExpr ::= \"[\" . layout[\"Layout\"] Expression layout[\"Layout\"] \"]\"
private final int slot1534() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1534);
    return L0;
  }
  if (slot1534.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1535, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DimExpr ::= \"[\" layout[\"Layout\"] . Expression layout[\"Layout\"] \"]\"
private final int slot1535() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1535);
    return L0;
  }
  if (slot1535.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1536, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DimExpr ::= \"[\" layout[\"Layout\"] Expression . layout[\"Layout\"] \"]\"
private final int slot1536() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1536);
    return L0;
  }
  if (slot1536.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1537, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// DimExpr ::= \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] . \"]\"
private final int slot1537() {
  if (slot1537.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 9);
  if (length < 0) {
    recordParseError(slot1537);
    return L0;
  }
  if (slot1537.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(9, ci, length);
  cn = slot1537.getNodeCreator().create(this, slot1538, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// DimExpr ::= \"[\" layout[\"Layout\"] Expression layout[\"Layout\"] \"]\" .
private final int slot1538() {
  if (slot756.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PreDecrementExpression
private final int slot761() {
  Set<Integer> set = slot761.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot761.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot761.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot761.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot761.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PreDecrementExpression ::= . \"--\" layout[\"Layout\"] UnaryExpression
private final int slot762() {
if (slot762.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 74);
  if (length < 0) {
    recordParseError(slot762);
    return L0;
  }
  if (slot762.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(74, ci, length);
  cn = slot762.getNodeCreator().create(this, slot763, cn, cr);
  return L0;
}

// PreDecrementExpression ::= \"--\" . layout[\"Layout\"] UnaryExpression
private final int slot763() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot763);
    return L0;
  }
  if (slot763.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot765, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PreDecrementExpression ::= \"--\" layout[\"Layout\"] . UnaryExpression
private final int slot765() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot765);
    return L0;
  }
  if (slot765.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot766, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PreDecrementExpression ::= \"--\" layout[\"Layout\"] UnaryExpression .
private final int slot766() {
  if (slot761.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpression
private final int slot764() {
  Set<Integer> set = slot764.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot764.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot764.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot764.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot764.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// UnaryExpression ::= . PreIncrementExpression
private final int slot1787() {
  if (!slot1558.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1787);
    return L0;
  }
  if (slot1787.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1788, slot1558);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= PreIncrementExpression .
private final int slot1788() {
  if (slot764.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpression ::= . \"-\" layout[\"Layout\"] UnaryExpression
private final int slot1789() {
if (slot1789.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 78);
  if (length < 0) {
    recordParseError(slot1789);
    return L0;
  }
  if (slot1789.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(78, ci, length);
  cn = slot1789.getNodeCreator().create(this, slot1790, cn, cr);
  return L0;
}

// UnaryExpression ::= \"-\" . layout[\"Layout\"] UnaryExpression
private final int slot1790() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1790);
    return L0;
  }
  if (slot1790.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1791, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= \"-\" layout[\"Layout\"] . UnaryExpression
private final int slot1791() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1791);
    return L0;
  }
  if (slot1791.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1792, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= \"-\" layout[\"Layout\"] UnaryExpression .
private final int slot1792() {
  if (slot764.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpression ::= . \"+\" layout[\"Layout\"] UnaryExpression
private final int slot1793() {
if (slot1793.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 79);
  if (length < 0) {
    recordParseError(slot1793);
    return L0;
  }
  if (slot1793.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(79, ci, length);
  cn = slot1793.getNodeCreator().create(this, slot1794, cn, cr);
  return L0;
}

// UnaryExpression ::= \"+\" . layout[\"Layout\"] UnaryExpression
private final int slot1794() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1794);
    return L0;
  }
  if (slot1794.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1795, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= \"+\" layout[\"Layout\"] . UnaryExpression
private final int slot1795() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1795);
    return L0;
  }
  if (slot1795.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1796, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= \"+\" layout[\"Layout\"] UnaryExpression .
private final int slot1796() {
  if (slot764.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpression ::= . PreDecrementExpression
private final int slot1797() {
  if (!slot761.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1797);
    return L0;
  }
  if (slot1797.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1798, slot761);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= PreDecrementExpression .
private final int slot1798() {
  if (slot764.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpression ::= . UnaryExpressionNotPlusMinus
private final int slot1799() {
  if (!slot1488.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1799);
    return L0;
  }
  if (slot1799.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1800, slot1488);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpression ::= UnaryExpressionNotPlusMinus .
private final int slot1800() {
  if (slot764.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitConstructorInvocation
private final int slot767() {
  Set<Integer> set = slot767.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot767.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot767.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot767.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot767.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExplicitConstructorInvocation ::= . NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot947() {
  if (!slot164.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot947);
    return L0;
  }
  if (slot947.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot948, slot164);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? . layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot948() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot948);
    return L0;
  }
  if (slot948.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot949, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] . \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot949() {
if (slot949.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 53);
  if (length < 0) {
    recordParseError(slot949);
    return L0;
  }
  if (slot949.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(53, ci, length);
  cn = slot949.getNodeCreator().create(this, slot950, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot950() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot950);
    return L0;
  }
  if (slot950.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot951, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot951() {
if (slot951.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot951);
    return L0;
  }
  if (slot951.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot951.getNodeCreator().create(this, slot952, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot952() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot952);
    return L0;
  }
  if (slot952.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot953, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot953() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot953);
    return L0;
  }
  if (slot953.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot954, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot954() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot954);
    return L0;
  }
  if (slot954.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot955, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
private final int slot955() {
if (slot955.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot955);
    return L0;
  }
  if (slot955.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot955.getNodeCreator().create(this, slot956, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
private final int slot956() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot956);
    return L0;
  }
  if (slot956.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot957, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
private final int slot957() {
  if (slot957.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot957);
    return L0;
  }
  if (slot957.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot957.getNodeCreator().create(this, slot958, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"this\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
private final int slot958() {
  if (slot767.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitConstructorInvocation ::= . Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot959() {
  if (!slot16.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot959);
    return L0;
  }
  if (slot959.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot960, slot16);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary . layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot960() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot960);
    return L0;
  }
  if (slot960.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot961, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] . \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot961() {
if (slot961.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot961);
    return L0;
  }
  if (slot961.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot961.getNodeCreator().create(this, slot962, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" . layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot962() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot962);
    return L0;
  }
  if (slot962.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot963, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] . NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot963() {
  if (!slot164.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot963);
    return L0;
  }
  if (slot963.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot964, slot164);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? . layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot964() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot964);
    return L0;
  }
  if (slot964.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot965, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] . \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot965() {
if (slot965.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot965);
    return L0;
  }
  if (slot965.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot965.getNodeCreator().create(this, slot966, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot966() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot966);
    return L0;
  }
  if (slot966.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot967, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot967() {
if (slot967.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot967);
    return L0;
  }
  if (slot967.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot967.getNodeCreator().create(this, slot968, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot968() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot968);
    return L0;
  }
  if (slot968.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot969, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot969() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot969);
    return L0;
  }
  if (slot969.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot970, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot970() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot970);
    return L0;
  }
  if (slot970.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot971, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
private final int slot971() {
if (slot971.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot971);
    return L0;
  }
  if (slot971.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot971.getNodeCreator().create(this, slot972, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
private final int slot972() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot972);
    return L0;
  }
  if (slot972.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot973, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
private final int slot973() {
  if (slot973.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot973);
    return L0;
  }
  if (slot973.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot973.getNodeCreator().create(this, slot974, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= Primary layout[\"Layout\"] \".\" layout[\"Layout\"] NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
private final int slot974() {
  if (slot767.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitConstructorInvocation ::= . NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot975() {
  if (!slot164.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot975);
    return L0;
  }
  if (slot975.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot976, slot164);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? . layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot976() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot976);
    return L0;
  }
  if (slot976.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot977, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] . \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot977() {
if (slot977.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot977);
    return L0;
  }
  if (slot977.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot977.getNodeCreator().create(this, slot978, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot978() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot978);
    return L0;
  }
  if (slot978.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot979, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot979() {
if (slot979.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot979);
    return L0;
  }
  if (slot979.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot979.getNodeCreator().create(this, slot980, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot980() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot980);
    return L0;
  }
  if (slot980.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot981, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot981() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot981);
    return L0;
  }
  if (slot981.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot982, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] \";\"
private final int slot982() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot982);
    return L0;
  }
  if (slot982.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot983, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] \";\"
private final int slot983() {
if (slot983.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot983);
    return L0;
  }
  if (slot983.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot983.getNodeCreator().create(this, slot984, cn, cr);
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] \";\"
private final int slot984() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot984);
    return L0;
  }
  if (slot984.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot985, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . \";\"
private final int slot985() {
  if (slot985.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot985);
    return L0;
  }
  if (slot985.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot985.getNodeCreator().create(this, slot986, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ExplicitConstructorInvocation ::= NonWildTypeArguments? layout[\"Layout\"] \"super\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] \";\" .
private final int slot986() {
  if (slot767.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeParameters?
private final int slot771() {
  Set<Integer> set = slot771.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot771.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot771.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot771.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot771.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeParameters? ::= .
private final int slot772() {
  if (slot771.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot771, ci, ci);
    sppfLookup.addPackedNode(node, slot772, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// TypeParameters? ::= . TypeParameters
private final int slot773() {
  if (!slot283.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot773);
    return L0;
  }
  if (slot773.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot774, slot283);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeParameters? ::= TypeParameters .
private final int slot774() {
  if (slot771.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableInitializer \",\"}*
private final int slot780() {
  Set<Integer> set = slot780.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot780.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot780.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot780.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot780.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {VariableInitializer \",\"}* ::= .
private final int slot2502() {
  if (slot780.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot780, ci, ci);
    sppfLookup.addPackedNode(node, slot2502, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableInitializer \",\"}* ::= . {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2504() {
  if (!slot2503.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2504);
    return L0;
  }
  if (slot2504.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2505, slot2503);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableInitializer \",\"}* ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot2505() {
  if (slot780.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// \"static\"?
private final int slot792() {
  Set<Integer> set = slot792.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot792.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot792.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot792.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot792.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// \"static\"? ::= . \"static\"
private final int slot793() {
  if (slot793.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot793);
    return L0;
  }
  if (slot793.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot793.getNodeCreator().create(this, slot794, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// \"static\"? ::= \"static\" .
private final int slot794() {
  if (slot792.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// \"static\"? ::= .
private final int slot795() {
  if (slot792.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot792, ci, ci);
    sppfLookup.addPackedNode(node, slot795, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {AbstractMethodModifier}*
private final int slot796() {
  Set<Integer> set = slot796.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot796.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot796.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot796.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot796.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {AbstractMethodModifier}* ::= .
private final int slot797() {
  if (slot796.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot796, ci, ci);
    sppfLookup.addPackedNode(node, slot797, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {AbstractMethodModifier}* ::= . {AbstractMethodModifier layout[\"Layout\"]}+
private final int slot799() {
  if (!slot798.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot799);
    return L0;
  }
  if (slot799.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot800, slot798);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AbstractMethodModifier}* ::= {AbstractMethodModifier layout[\"Layout\"]}+ .
private final int slot800() {
  if (slot796.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+
private final int slot798() {
  Set<Integer> set = slot798.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot798.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot798.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot798.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot798.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= . AbstractMethodModifier
private final int slot1322() {
  if (!slot435.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1322);
    return L0;
  }
  if (slot1322.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1323, slot435);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= AbstractMethodModifier .
private final int slot1323() {
  if (slot798.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= . {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] AbstractMethodModifier
private final int slot1324() {
  if (!slot798.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1324);
    return L0;
  }
  if (slot1324.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1325, slot798);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ . layout[\"Layout\"] AbstractMethodModifier
private final int slot1325() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1325);
    return L0;
  }
  if (slot1325.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1326, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] . AbstractMethodModifier
private final int slot1326() {
  if (!slot435.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1326);
    return L0;
  }
  if (slot1326.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1327, slot435);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AbstractMethodModifier layout[\"Layout\"]}+ ::= {AbstractMethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] AbstractMethodModifier .
private final int slot1327() {
  if (slot798.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Finally?
private final int slot801() {
  Set<Integer> set = slot801.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot801.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot801.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot801.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot801.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Finally? ::= .
private final int slot802() {
  if (slot801.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot801, ci, ci);
    sppfLookup.addPackedNode(node, slot802, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// Finally? ::= . Finally
private final int slot804() {
  if (!slot803.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot804);
    return L0;
  }
  if (slot804.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot805, slot803);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Finally? ::= Finally .
private final int slot805() {
  if (slot801.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Finally
private final int slot803() {
  Set<Integer> set = slot803.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot803.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot803.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot803.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot803.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Finally ::= . \"finally\" layout[\"Layout\"] Block
private final int slot2412() {
if (slot2412.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 59);
  if (length < 0) {
    recordParseError(slot2412);
    return L0;
  }
  if (slot2412.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(59, ci, length);
  cn = slot2412.getNodeCreator().create(this, slot2413, cn, cr);
  return L0;
}

// Finally ::= \"finally\" . layout[\"Layout\"] Block
private final int slot2413() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2413);
    return L0;
  }
  if (slot2413.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2414, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Finally ::= \"finally\" layout[\"Layout\"] . Block
private final int slot2414() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2414);
    return L0;
  }
  if (slot2414.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2415, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Finally ::= \"finally\" layout[\"Layout\"] Block .
private final int slot2415() {
  if (slot803.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorModifier
private final int slot806() {
  Set<Integer> set = slot806.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot806.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot806.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot806.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot806.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstructorModifier ::= . \"private\"
private final int slot807() {
  if (slot807.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 60);
  if (length < 0) {
    recordParseError(slot807);
    return L0;
  }
  if (slot807.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(60, ci, length);
  cn = slot807.getNodeCreator().create(this, slot808, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstructorModifier ::= \"private\" .
private final int slot808() {
  if (slot806.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorModifier ::= . \"public\"
private final int slot809() {
  if (slot809.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot809);
    return L0;
  }
  if (slot809.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot809.getNodeCreator().create(this, slot810, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstructorModifier ::= \"public\" .
private final int slot810() {
  if (slot806.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorModifier ::= . Annotation
private final int slot811() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot811);
    return L0;
  }
  if (slot811.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot812, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorModifier ::= Annotation .
private final int slot812() {
  if (slot806.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorModifier ::= . \"protected\"
private final int slot813() {
  if (slot813.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 46);
  if (length < 0) {
    recordParseError(slot813);
    return L0;
  }
  if (slot813.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(46, ci, length);
  cn = slot813.getNodeCreator().create(this, slot814, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstructorModifier ::= \"protected\" .
private final int slot814() {
  if (slot806.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type)?
private final int slot822() {
  Set<Integer> set = slot822.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot822.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot822.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot822.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot822.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type)? ::= .
private final int slot823() {
  if (slot822.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot822, ci, ci);
    sppfLookup.addPackedNode(node, slot823, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type)? ::= . (\"extends\" layout[\"Layout\"] Type)
private final int slot824() {
  if (!slot748.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot824);
    return L0;
  }
  if (slot824.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot825, slot748);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] Type)? ::= (\"extends\" layout[\"Layout\"] Type) .
private final int slot825() {
  if (slot822.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConditionalExpression
private final int slot826() {
  Set<Integer> set = slot826.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot826.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot826.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot826.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot826.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConditionalExpression ::= . ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
private final int slot828() {
  if (!slot827.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot828);
    return L0;
  }
  if (slot828.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot829, slot827);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression . layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
private final int slot829() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot829);
    return L0;
  }
  if (slot829.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot830, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] . \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
private final int slot830() {
if (slot830.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 76);
  if (length < 0) {
    recordParseError(slot830);
    return L0;
  }
  if (slot830.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(76, ci, length);
  cn = slot830.getNodeCreator().create(this, slot831, cn, cr);
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" . layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
private final int slot831() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot831);
    return L0;
  }
  if (slot831.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot832, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] . Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
private final int slot832() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot832);
    return L0;
  }
  if (slot832.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot833, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression . layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression
private final int slot833() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot833);
    return L0;
  }
  if (slot833.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot834, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] . \":\" layout[\"Layout\"] ConditionalExpression
private final int slot834() {
if (slot834.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot834);
    return L0;
  }
  if (slot834.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot834.getNodeCreator().create(this, slot835, cn, cr);
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" . layout[\"Layout\"] ConditionalExpression
private final int slot835() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot835);
    return L0;
  }
  if (slot835.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot836, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] . ConditionalExpression
private final int slot836() {
  if (!slot826.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot836);
    return L0;
  }
  if (slot836.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot837, slot826);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression layout[\"Layout\"] \"?\" layout[\"Layout\"] Expression layout[\"Layout\"] \":\" layout[\"Layout\"] ConditionalExpression .
private final int slot837() {
  if (slot826.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConditionalExpression ::= . ConditionalOrExpression
private final int slot838() {
  if (!slot827.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot838);
    return L0;
  }
  if (slot838.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot839, slot827);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalExpression ::= ConditionalOrExpression .
private final int slot839() {
  if (slot826.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConditionalOrExpression
private final int slot827() {
  Set<Integer> set = slot827.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot827.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot827.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot827.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot827.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConditionalOrExpression ::= . ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression
private final int slot2169() {
  if (!slot827.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2169);
    return L0;
  }
  if (slot2169.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2170, slot827);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalOrExpression ::= ConditionalOrExpression . layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression
private final int slot2170() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2170);
    return L0;
  }
  if (slot2170.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2171, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] . \"||\" layout[\"Layout\"] ConditionalAndExpression
private final int slot2171() {
if (slot2171.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 129);
  if (length < 0) {
    recordParseError(slot2171);
    return L0;
  }
  if (slot2171.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(129, ci, length);
  cn = slot2171.getNodeCreator().create(this, slot2172, cn, cr);
  return L0;
}

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" . layout[\"Layout\"] ConditionalAndExpression
private final int slot2172() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2172);
    return L0;
  }
  if (slot2172.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2173, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] . ConditionalAndExpression
private final int slot2173() {
  if (!slot1048.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2173);
    return L0;
  }
  if (slot2173.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2174, slot1048);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalOrExpression ::= ConditionalOrExpression layout[\"Layout\"] \"||\" layout[\"Layout\"] ConditionalAndExpression .
private final int slot2174() {
  if (slot827.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConditionalOrExpression ::= . ConditionalAndExpression
private final int slot2175() {
  if (!slot1048.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2175);
    return L0;
  }
  if (slot2175.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2176, slot1048);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalOrExpression ::= ConditionalAndExpression .
private final int slot2176() {
  if (slot827.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValues
private final int slot840() {
  Set<Integer> set = slot840.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot840.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot840.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot840.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot840.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ElementValues ::= . {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot841() {
  if (!slot299.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot841);
    return L0;
  }
  if (slot841.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot842, slot299);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValues ::= {ElementValue layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot842() {
  if (slot840.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Result
private final int slot843() {
  Set<Integer> set = slot843.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot843.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot843.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot843.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot843.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Result ::= . \"void\"
private final int slot844() {
  if (slot844.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 58);
  if (length < 0) {
    recordParseError(slot844);
    return L0;
  }
  if (slot844.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(58, ci, length);
  cn = slot844.getNodeCreator().create(this, slot845, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Result ::= \"void\" .
private final int slot845() {
  if (slot843.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Result ::= . Type
private final int slot846() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot846);
    return L0;
  }
  if (slot846.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot847, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Result ::= Type .
private final int slot847() {
  if (slot843.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+
private final int slot848() {
  Set<Integer> set = slot848.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot848.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot848.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot848.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot848.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+ ::= . BlockStatement
private final int slot849() {
  if (!slot64.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot849);
    return L0;
  }
  if (slot849.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot850, slot64);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+ ::= BlockStatement .
private final int slot850() {
  if (slot848.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+ ::= . {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] BlockStatement
private final int slot851() {
  if (!slot848.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot851);
    return L0;
  }
  if (slot851.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot852, slot848);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ . layout[\"Layout\"] BlockStatement
private final int slot852() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot852);
    return L0;
  }
  if (slot852.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot853, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] . BlockStatement
private final int slot853() {
  if (!slot64.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot853);
    return L0;
  }
  if (slot853.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot854, slot64);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {BlockStatement layout[\"Layout\"]}+ ::= {BlockStatement layout[\"Layout\"]}+ layout[\"Layout\"] BlockStatement .
private final int slot854() {
  if (slot848.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// VariableDeclarators
private final int slot859() {
  Set<Integer> set = slot859.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot859.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot859.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot859.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot859.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// VariableDeclarators ::= . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2416() {
  if (!slot451.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2416);
    return L0;
  }
  if (slot2416.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2417, slot451);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableDeclarators ::= {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot2417() {
  if (slot859.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// [u]+
private final int slot864() {
  Set<Integer> set = slot864.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot864.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot864.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot864.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot864.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// [u]+ ::= . [u]
private final int slot865() {
  if (slot865.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 77);
  if (length < 0) {
    recordParseError(slot865);
    return L0;
  }
  if (slot865.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(77, ci, length);
  cn = slot865.getNodeCreator().create(this, slot866, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// [u]+ ::= [u] .
private final int slot866() {
  if (slot864.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// [u]+ ::= . [u]+ [u]
private final int slot867() {
  if (!slot864.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot867);
    return L0;
  }
  if (slot867.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot868, slot864);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// [u]+ ::= [u]+ . [u]
private final int slot868() {
  if (slot868.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 77);
  if (length < 0) {
    recordParseError(slot868);
    return L0;
  }
  if (slot868.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(77, ci, length);
  cn = slot868.getNodeCreator().create(this, slot869, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// [u]+ ::= [u]+ [u] .
private final int slot869() {
  if (slot864.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// JavaLetter
private final int slot870() {
  Set<Integer> set = slot870.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot870.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot870.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot870.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot870.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// JavaLetter ::= . [A-Za-z$_]
private final int slot2074() {
  if (slot2074.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 113);
  if (length < 0) {
    recordParseError(slot2074);
    return L0;
  }
  if (slot2074.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(113, ci, length);
  cn = slot2074.getNodeCreator().create(this, slot2075, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// JavaLetter ::= [A-Za-z$_] .
private final int slot2075() {
  if (slot870.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// JavaLetterOrDigit
private final int slot874() {
  Set<Integer> set = slot874.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot874.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot874.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot874.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot874.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// JavaLetterOrDigit ::= . [A-Za-z$_0-9]
private final int slot1069() {
  if (slot1069.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 84);
  if (length < 0) {
    recordParseError(slot1069);
    return L0;
  }
  if (slot1069.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(84, ci, length);
  cn = slot1069.getNodeCreator().create(this, slot1070, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// JavaLetterOrDigit ::= [A-Za-z$_0-9] .
private final int slot1070() {
  if (slot874.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AdditiveExpression
private final int slot877() {
  Set<Integer> set = slot877.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot877.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot877.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot877.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot877.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AdditiveExpression ::= . MultiplicativeExpression
private final int slot879() {
  if (!slot878.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot879);
    return L0;
  }
  if (slot879.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot880, slot878);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= MultiplicativeExpression .
private final int slot880() {
  if (slot877.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AdditiveExpression ::= . AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression
private final int slot881() {
  if (!slot877.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot881);
    return L0;
  }
  if (slot881.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot882, slot877);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression . layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression
private final int slot882() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot882);
    return L0;
  }
  if (slot882.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot883, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] . \"-\" layout[\"Layout\"] MultiplicativeExpression
private final int slot883() {
if (slot883.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 78);
  if (length < 0) {
    recordParseError(slot883);
    return L0;
  }
  if (slot883.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(78, ci, length);
  cn = slot883.getNodeCreator().create(this, slot884, cn, cr);
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" . layout[\"Layout\"] MultiplicativeExpression
private final int slot884() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot884);
    return L0;
  }
  if (slot884.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot885, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] . MultiplicativeExpression
private final int slot885() {
  if (!slot878.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot885);
    return L0;
  }
  if (slot885.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot886, slot878);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"-\" layout[\"Layout\"] MultiplicativeExpression .
private final int slot886() {
  if (slot877.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AdditiveExpression ::= . AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression
private final int slot887() {
  if (!slot877.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot887);
    return L0;
  }
  if (slot887.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot888, slot877);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression . layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression
private final int slot888() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot888);
    return L0;
  }
  if (slot888.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot889, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] . \"+\" layout[\"Layout\"] MultiplicativeExpression
private final int slot889() {
if (slot889.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 79);
  if (length < 0) {
    recordParseError(slot889);
    return L0;
  }
  if (slot889.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(79, ci, length);
  cn = slot889.getNodeCreator().create(this, slot890, cn, cr);
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" . layout[\"Layout\"] MultiplicativeExpression
private final int slot890() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot890);
    return L0;
  }
  if (slot890.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot891, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] . MultiplicativeExpression
private final int slot891() {
  if (!slot878.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot891);
    return L0;
  }
  if (slot891.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot892, slot878);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AdditiveExpression ::= AdditiveExpression layout[\"Layout\"] \"+\" layout[\"Layout\"] MultiplicativeExpression .
private final int slot892() {
  if (slot877.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MultiplicativeExpression
private final int slot878() {
  Set<Integer> set = slot878.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot878.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot878.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot878.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot878.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression
private final int slot2091() {
  if (!slot878.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2091);
    return L0;
  }
  if (slot2091.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2092, slot878);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression
private final int slot2092() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2092);
    return L0;
  }
  if (slot2092.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2093, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"%\" layout[\"Layout\"] UnaryExpression
private final int slot2093() {
if (slot2093.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 115);
  if (length < 0) {
    recordParseError(slot2093);
    return L0;
  }
  if (slot2093.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(115, ci, length);
  cn = slot2093.getNodeCreator().create(this, slot2094, cn, cr);
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" . layout[\"Layout\"] UnaryExpression
private final int slot2094() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2094);
    return L0;
  }
  if (slot2094.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2095, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] . UnaryExpression
private final int slot2095() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2095);
    return L0;
  }
  if (slot2095.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2096, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"%\" layout[\"Layout\"] UnaryExpression .
private final int slot2096() {
  if (slot878.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MultiplicativeExpression ::= . UnaryExpression
private final int slot2097() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2097);
    return L0;
  }
  if (slot2097.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2098, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= UnaryExpression .
private final int slot2098() {
  if (slot878.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression
private final int slot2099() {
  if (!slot878.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2099);
    return L0;
  }
  if (slot2099.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2100, slot878);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression
private final int slot2100() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2100);
    return L0;
  }
  if (slot2100.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2101, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"*\" layout[\"Layout\"] UnaryExpression
private final int slot2101() {
if (slot2101.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 109);
  if (length < 0) {
    recordParseError(slot2101);
    return L0;
  }
  if (slot2101.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(109, ci, length);
  cn = slot2101.getNodeCreator().create(this, slot2102, cn, cr);
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" . layout[\"Layout\"] UnaryExpression
private final int slot2102() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2102);
    return L0;
  }
  if (slot2102.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2103, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] . UnaryExpression
private final int slot2103() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2103);
    return L0;
  }
  if (slot2103.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2104, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"*\" layout[\"Layout\"] UnaryExpression .
private final int slot2104() {
  if (slot878.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MultiplicativeExpression ::= . MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression
private final int slot2105() {
  if (!slot878.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2105);
    return L0;
  }
  if (slot2105.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2106, slot878);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression . layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression
private final int slot2106() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2106);
    return L0;
  }
  if (slot2106.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2107, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] . \"/\" layout[\"Layout\"] UnaryExpression
private final int slot2107() {
if (slot2107.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 116);
  if (length < 0) {
    recordParseError(slot2107);
    return L0;
  }
  if (slot2107.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(116, ci, length);
  cn = slot2107.getNodeCreator().create(this, slot2108, cn, cr);
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" . layout[\"Layout\"] UnaryExpression
private final int slot2108() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2108);
    return L0;
  }
  if (slot2108.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2109, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] . UnaryExpression
private final int slot2109() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2109);
    return L0;
  }
  if (slot2109.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2110, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MultiplicativeExpression ::= MultiplicativeExpression layout[\"Layout\"] \"/\" layout[\"Layout\"] UnaryExpression .
private final int slot2110() {
  if (slot878.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {EnumConstant \",\"}*
private final int slot893() {
  Set<Integer> set = slot893.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot893.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot893.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot893.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot893.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {EnumConstant \",\"}* ::= .
private final int slot894() {
  if (slot893.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot893, ci, ci);
    sppfLookup.addPackedNode(node, slot894, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {EnumConstant \",\"}* ::= . {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot896() {
  if (!slot895.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot896);
    return L0;
  }
  if (slot896.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot897, slot895);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {EnumConstant \",\"}* ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot897() {
  if (slot893.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot895() {
  Set<Integer> set = slot895.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot895.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot895.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot895.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot895.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant
private final int slot2614() {
  if (!slot895.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2614);
    return L0;
  }
  if (slot2614.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2615, slot895);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant
private final int slot2615() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2615);
    return L0;
  }
  if (slot2615.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2616, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] EnumConstant
private final int slot2616() {
if (slot2616.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot2616);
    return L0;
  }
  if (slot2616.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot2616.getNodeCreator().create(this, slot2617, cn, cr);
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] EnumConstant
private final int slot2617() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2617);
    return L0;
  }
  if (slot2617.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2618, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . EnumConstant
private final int slot2618() {
  if (!slot399.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2618);
    return L0;
  }
  if (slot2618.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2619, slot399);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] EnumConstant .
private final int slot2619() {
  if (slot895.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . EnumConstant
private final int slot2620() {
  if (!slot399.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2620);
    return L0;
  }
  if (slot2620.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2621, slot399);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {EnumConstant layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= EnumConstant .
private final int slot2621() {
  if (slot895.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot898() {
  Set<Integer> set = slot898.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot898.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot898.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot898.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot898.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Expression
private final int slot899() {
  if (!slot898.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot899);
    return L0;
  }
  if (slot899.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot900, slot898);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] Expression
private final int slot900() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot900);
    return L0;
  }
  if (slot900.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot901, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] Expression
private final int slot901() {
if (slot901.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot901);
    return L0;
  }
  if (slot901.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot901.getNodeCreator().create(this, slot902, cn, cr);
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] Expression
private final int slot902() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot902);
    return L0;
  }
  if (slot902.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot903, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . Expression
private final int slot903() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot903);
    return L0;
  }
  if (slot903.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot904, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Expression .
private final int slot904() {
  if (slot898.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . Expression
private final int slot905() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot905);
    return L0;
  }
  if (slot905.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot906, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Expression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= Expression .
private final int slot906() {
  if (slot898.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+
private final int slot908() {
  Set<Integer> set = slot908.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot908.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot908.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot908.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot908.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= . (FormalParameter layout[\"Layout\"] \",\")
private final int slot1264() {
  if (!slot1263.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1264);
    return L0;
  }
  if (slot1264.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1265, slot1263);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= (FormalParameter layout[\"Layout\"] \",\") .
private final int slot1265() {
  if (slot908.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= . {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\")
private final int slot1266() {
  if (!slot908.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1266);
    return L0;
  }
  if (slot1266.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1267, slot908);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ . layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\")
private final int slot1267() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1267);
    return L0;
  }
  if (slot1267.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1268, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] . (FormalParameter layout[\"Layout\"] \",\")
private final int slot1268() {
  if (!slot1263.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1268);
    return L0;
  }
  if (slot1268.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1269, slot1263);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ ::= {(FormalParameter layout[\"Layout\"] \",\") layout[\"Layout\"]}+ layout[\"Layout\"] (FormalParameter layout[\"Layout\"] \",\") .
private final int slot1269() {
  if (slot908.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {FieldModifier}*
private final int slot911() {
  Set<Integer> set = slot911.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot911.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot911.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot911.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot911.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {FieldModifier}* ::= . {FieldModifier layout[\"Layout\"]}+
private final int slot912() {
  if (!slot362.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot912);
    return L0;
  }
  if (slot912.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot913, slot362);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {FieldModifier}* ::= {FieldModifier layout[\"Layout\"]}+ .
private final int slot913() {
  if (slot911.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {FieldModifier}* ::= .
private final int slot914() {
  if (slot911.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot911, ci, ci);
    sppfLookup.addPackedNode(node, slot914, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// Throws
private final int slot915() {
  Set<Integer> set = slot915.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot915.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot915.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot915.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot915.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Throws ::= . \"throws\" layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot916() {
if (slot916.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 55);
  if (length < 0) {
    recordParseError(slot916);
    return L0;
  }
  if (slot916.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(55, ci, length);
  cn = slot916.getNodeCreator().create(this, slot917, cn, cr);
  return L0;
}

// Throws ::= \"throws\" . layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot917() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot917);
    return L0;
  }
  if (slot917.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot919, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Throws ::= \"throws\" layout[\"Layout\"] . {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot919() {
  if (!slot918.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot919);
    return L0;
  }
  if (slot919.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot920, slot918);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Throws ::= \"throws\" layout[\"Layout\"] {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot920() {
  if (slot915.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot918() {
  Set<Integer> set = slot918.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot918.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot918.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot918.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot918.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType
private final int slot2719() {
  if (!slot918.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2719);
    return L0;
  }
  if (slot2719.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2720, slot918);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType
private final int slot2720() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2720);
    return L0;
  }
  if (slot2720.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2721, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ExceptionType
private final int slot2721() {
if (slot2721.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot2721);
    return L0;
  }
  if (slot2721.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot2721.getNodeCreator().create(this, slot2722, cn, cr);
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ExceptionType
private final int slot2722() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2722);
    return L0;
  }
  if (slot2722.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2723, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ExceptionType
private final int slot2723() {
  if (!slot280.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2723);
    return L0;
  }
  if (slot2723.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2724, slot280);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ExceptionType .
private final int slot2724() {
  if (slot918.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ExceptionType
private final int slot2725() {
  if (!slot280.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2725);
    return L0;
  }
  if (slot2725.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2726, slot280);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ExceptionType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ExceptionType .
private final int slot2726() {
  if (slot918.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigitOrUnderscore
private final int slot921() {
  Set<Integer> set = slot921.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot921.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot921.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot921.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot921.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryDigitOrUnderscore ::= . BinaryDigit
private final int slot923() {
  if (!slot922.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot923);
    return L0;
  }
  if (slot923.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot924, slot922);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigitOrUnderscore ::= BinaryDigit .
private final int slot924() {
  if (slot921.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigitOrUnderscore ::= . [_]
private final int slot925() {
  if (slot925.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 5);
  if (length < 0) {
    recordParseError(slot925);
    return L0;
  }
  if (slot925.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(5, ci, length);
  cn = slot925.getNodeCreator().create(this, slot926, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// BinaryDigitOrUnderscore ::= [_] .
private final int slot926() {
  if (slot921.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigit
private final int slot922() {
  Set<Integer> set = slot922.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot922.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot922.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot922.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot922.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryDigit ::= . [0-1]
private final int slot1027() {
  if (slot1027.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 81);
  if (length < 0) {
    recordParseError(slot1027);
    return L0;
  }
  if (slot1027.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(81, ci, length);
  cn = slot1027.getNodeCreator().create(this, slot1028, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// BinaryDigit ::= [0-1] .
private final int slot1028() {
  if (slot922.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}*
private final int slot929() {
  Set<Integer> set = slot929.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot929.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot929.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot929.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot929.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+
private final int slot1146() {
  if (!slot1145.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1146);
    return L0;
  }
  if (slot1146.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1147, slot1145);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ .
private final int slot1147() {
  if (slot929.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)}* ::= .
private final int slot1148() {
  if (slot929.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot929, ci, ci);
    sppfLookup.addPackedNode(node, slot1148, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// EnumDeclaration
private final int slot932() {
  Set<Integer> set = slot932.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot932.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot932.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot932.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot932.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EnumDeclaration ::= . {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot933() {
  if (!slot108.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot933);
    return L0;
  }
  if (slot933.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot934, slot108);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* . layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot934() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot934);
    return L0;
  }
  if (slot934.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot935, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] . \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot935() {
if (slot935.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 62);
  if (length < 0) {
    recordParseError(slot935);
    return L0;
  }
  if (slot935.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(62, ci, length);
  cn = slot935.getNodeCreator().create(this, slot936, cn, cr);
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" . layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot936() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot936);
    return L0;
  }
  if (slot936.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot937, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] . Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot937() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot937);
    return L0;
  }
  if (slot937.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot938, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier . layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot938() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot938);
    return L0;
  }
  if (slot938.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot940, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] . (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody
private final int slot940() {
  if (!slot939.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot940);
    return L0;
  }
  if (slot940.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot941, slot939);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] EnumBody
private final int slot941() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot941);
    return L0;
  }
  if (slot941.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot943, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . EnumBody
private final int slot943() {
  if (!slot942.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot943);
    return L0;
  }
  if (slot943.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot944, slot942);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"enum\" layout[\"Layout\"] Identifier layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] EnumBody .
private final int slot944() {
  if (slot932.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList)?
private final int slot939() {
  Set<Integer> set = slot939.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot939.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot939.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot939.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot939.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList)? ::= .
private final int slot2432() {
  if (slot939.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot939, ci, ci);
    sppfLookup.addPackedNode(node, slot2432, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList)? ::= . (\"implements\" layout[\"Layout\"] TypeList)
private final int slot2433() {
  if (!slot1657.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2433);
    return L0;
  }
  if (slot2433.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2434, slot1657);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList)? ::= (\"implements\" layout[\"Layout\"] TypeList) .
private final int slot2434() {
  if (slot939.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EnumBody
private final int slot942() {
  Set<Integer> set = slot942.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot942.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot942.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot942.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot942.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EnumBody ::= . \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot999() {
if (slot999.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot999);
    return L0;
  }
  if (slot999.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot999.getNodeCreator().create(this, slot1000, cn, cr);
  return L0;
}

// EnumBody ::= \"{\" . layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot1000() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1000);
    return L0;
  }
  if (slot1000.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1001, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] . {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot1001() {
  if (!slot893.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1001);
    return L0;
  }
  if (slot1001.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1002, slot893);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* . layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot1002() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1002);
    return L0;
  }
  if (slot1002.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1003, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] . \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot1003() {
  if (!slot430.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1003);
    return L0;
  }
  if (slot1003.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1004, slot430);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? . layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot1004() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1004);
    return L0;
  }
  if (slot1004.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1005, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] . EnumBodyDeclarations? layout[\"Layout\"] \"}\"
private final int slot1005() {
  if (!slot730.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1005);
    return L0;
  }
  if (slot1005.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1006, slot730);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? . layout[\"Layout\"] \"}\"
private final int slot1006() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1006);
    return L0;
  }
  if (slot1006.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1007, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] . \"}\"
private final int slot1007() {
  if (slot1007.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot1007);
    return L0;
  }
  if (slot1007.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot1007.getNodeCreator().create(this, slot1008, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// EnumBody ::= \"{\" layout[\"Layout\"] {EnumConstant \",\"}* layout[\"Layout\"] \",\"? layout[\"Layout\"] EnumBodyDeclarations? layout[\"Layout\"] \"}\" .
private final int slot1008() {
  if (slot942.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorDeclaration
private final int slot987() {
  Set<Integer> set = slot987.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot987.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot987.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot987.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot987.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstructorDeclaration ::= . {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
private final int slot989() {
  if (!slot988.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot989);
    return L0;
  }
  if (slot989.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot990, slot988);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* . layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
private final int slot990() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot990);
    return L0;
  }
  if (slot990.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot992, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] . ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
private final int slot992() {
  if (!slot991.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot992);
    return L0;
  }
  if (slot992.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot993, slot991);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator . layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody
private final int slot993() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot993);
    return L0;
  }
  if (slot993.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot995, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] . Throws? layout[\"Layout\"] ConstructorBody
private final int slot995() {
  if (!slot994.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot995);
    return L0;
  }
  if (slot995.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot996, slot994);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? . layout[\"Layout\"] ConstructorBody
private final int slot996() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot996);
    return L0;
  }
  if (slot996.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot997, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] . ConstructorBody
private final int slot997() {
  if (!slot53.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot997);
    return L0;
  }
  if (slot997.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot998, slot53);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclaration ::= {ConstructorModifier}* layout[\"Layout\"] ConstructorDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] ConstructorBody .
private final int slot998() {
  if (slot987.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstructorModifier}*
private final int slot988() {
  Set<Integer> set = slot988.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot988.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot988.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot988.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot988.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ConstructorModifier}* ::= . {ConstructorModifier layout[\"Layout\"]}+
private final int slot1582() {
  if (!slot1581.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1582);
    return L0;
  }
  if (slot1582.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1583, slot1581);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstructorModifier}* ::= {ConstructorModifier layout[\"Layout\"]}+ .
private final int slot1583() {
  if (slot988.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstructorModifier}* ::= .
private final int slot1584() {
  if (slot988.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot988, ci, ci);
    sppfLookup.addPackedNode(node, slot1584, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ConstructorDeclarator
private final int slot991() {
  Set<Integer> set = slot991.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot991.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot991.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot991.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot991.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstructorDeclarator ::= . TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1328() {
  if (!slot771.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1328);
    return L0;
  }
  if (slot1328.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1329, slot771);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1329() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1329);
    return L0;
  }
  if (slot1329.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1330, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1330() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1330);
    return L0;
  }
  if (slot1330.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1331, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1331() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1331);
    return L0;
  }
  if (slot1331.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1332, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1332() {
if (slot1332.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1332);
    return L0;
  }
  if (slot1332.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1332.getNodeCreator().create(this, slot1333, cn, cr);
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1333() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1333);
    return L0;
  }
  if (slot1333.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1334, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1334() {
  if (!slot1280.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1334);
    return L0;
  }
  if (slot1334.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1335, slot1280);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? . layout[\"Layout\"] \")\"
private final int slot1335() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1335);
    return L0;
  }
  if (slot1335.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1336, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] . \")\"
private final int slot1336() {
  if (slot1336.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1336);
    return L0;
  }
  if (slot1336.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1336.getNodeCreator().create(this, slot1337, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstructorDeclarator ::= TypeParameters? layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\" .
private final int slot1337() {
  if (slot991.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Throws?
private final int slot994() {
  Set<Integer> set = slot994.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot994.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot994.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot994.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot994.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Throws? ::= . Throws
private final int slot2332() {
  if (!slot915.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2332);
    return L0;
  }
  if (slot2332.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2333, slot915);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Throws? ::= Throws .
private final int slot2333() {
  if (slot994.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Throws? ::= .
private final int slot2334() {
  if (slot994.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot994, ci, ci);
    sppfLookup.addPackedNode(node, slot2334, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// SuperSuffix
private final int slot1009() {
  Set<Integer> set = slot1009.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1009.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1009.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1009.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1009.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// SuperSuffix ::= . \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments?
private final int slot1010() {
if (slot1010.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot1010);
    return L0;
  }
  if (slot1010.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot1010.getNodeCreator().create(this, slot1011, cn, cr);
  return L0;
}

// SuperSuffix ::= \".\" . layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments?
private final int slot1011() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1011);
    return L0;
  }
  if (slot1011.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1012, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SuperSuffix ::= \".\" layout[\"Layout\"] . Identifier layout[\"Layout\"] Arguments?
private final int slot1012() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1012);
    return L0;
  }
  if (slot1012.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1013, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SuperSuffix ::= \".\" layout[\"Layout\"] Identifier . layout[\"Layout\"] Arguments?
private final int slot1013() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1013);
    return L0;
  }
  if (slot1013.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1014, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SuperSuffix ::= \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] . Arguments?
private final int slot1014() {
  if (!slot405.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1014);
    return L0;
  }
  if (slot1014.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1015, slot405);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SuperSuffix ::= \".\" layout[\"Layout\"] Identifier layout[\"Layout\"] Arguments? .
private final int slot1015() {
  if (slot1009.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// SuperSuffix ::= . Arguments
private final int slot1017() {
  if (!slot1016.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1017);
    return L0;
  }
  if (slot1017.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1018, slot1016);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SuperSuffix ::= Arguments .
private final int slot1018() {
  if (slot1009.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Arguments
private final int slot1016() {
  Set<Integer> set = slot1016.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1016.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1016.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1016.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1016.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Arguments ::= . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot1159() {
if (slot1159.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1159);
    return L0;
  }
  if (slot1159.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1159.getNodeCreator().create(this, slot1160, cn, cr);
  return L0;
}

// Arguments ::= \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\"
private final int slot1160() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1160);
    return L0;
  }
  if (slot1160.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1161, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Arguments ::= \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\"
private final int slot1161() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1161);
    return L0;
  }
  if (slot1161.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1162, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\"
private final int slot1162() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1162);
    return L0;
  }
  if (slot1162.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1163, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\"
private final int slot1163() {
  if (slot1163.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1163);
    return L0;
  }
  if (slot1163.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1163.getNodeCreator().create(this, slot1164, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Arguments ::= \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" .
private final int slot1164() {
  if (slot1016.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArguments
private final int slot1019() {
  Set<Integer> set = slot1019.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1019.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1019.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1019.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1019.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeArguments ::= . \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot1020() {
if (slot1020.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 15);
  if (length < 0) {
    recordParseError(slot1020);
    return L0;
  }
  if (slot1020.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(15, ci, length);
  cn = slot1020.getNodeCreator().create(this, slot1021, cn, cr);
  return L0;
}

// TypeArguments ::= \"<\" . layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot1021() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1021);
    return L0;
  }
  if (slot1021.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1023, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArguments ::= \"<\" layout[\"Layout\"] . {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\"
private final int slot1023() {
  if (!slot1022.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1023);
    return L0;
  }
  if (slot1023.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1024, slot1022);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \">\"
private final int slot1024() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1024);
    return L0;
  }
  if (slot1024.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1025, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \">\"
private final int slot1025() {
  if (slot1025.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 16);
  if (length < 0) {
    recordParseError(slot1025);
    return L0;
  }
  if (slot1025.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(16, ci, length);
  cn = slot1025.getNodeCreator().create(this, slot1026, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// TypeArguments ::= \"<\" layout[\"Layout\"] {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \">\" .
private final int slot1026() {
  if (slot1019.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot1022() {
  Set<Integer> set = slot1022.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1022.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1022.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1022.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1022.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . TypeArgument
private final int slot1419() {
  if (!slot1418.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1419);
    return L0;
  }
  if (slot1419.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1420, slot1418);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= TypeArgument .
private final int slot1420() {
  if (slot1022.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument
private final int slot1421() {
  if (!slot1022.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1421);
    return L0;
  }
  if (slot1421.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1422, slot1022);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument
private final int slot1422() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1422);
    return L0;
  }
  if (slot1422.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1423, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] TypeArgument
private final int slot1423() {
if (slot1423.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot1423);
    return L0;
  }
  if (slot1423.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot1423.getNodeCreator().create(this, slot1424, cn, cr);
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] TypeArgument
private final int slot1424() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1424);
    return L0;
  }
  if (slot1424.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1425, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . TypeArgument
private final int slot1425() {
  if (!slot1418.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1425);
    return L0;
  }
  if (slot1425.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1426, slot1418);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {TypeArgument layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] TypeArgument .
private final int slot1426() {
  if (slot1022.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeDeclaration
private final int slot1029() {
  Set<Integer> set = slot1029.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1029.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1029.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1029.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1029.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AnnotationTypeDeclaration ::= . {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1030() {
  if (!slot537.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1030);
    return L0;
  }
  if (slot1030.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1031, slot537);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* . layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1031() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1031);
    return L0;
  }
  if (slot1031.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1032, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] . \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1032() {
if (slot1032.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 13);
  if (length < 0) {
    recordParseError(slot1032);
    return L0;
  }
  if (slot1032.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(13, ci, length);
  cn = slot1032.getNodeCreator().create(this, slot1033, cn, cr);
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" . layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1033() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1033);
    return L0;
  }
  if (slot1033.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1034, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] . \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1034() {
if (slot1034.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 65);
  if (length < 0) {
    recordParseError(slot1034);
    return L0;
  }
  if (slot1034.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(65, ci, length);
  cn = slot1034.getNodeCreator().create(this, slot1035, cn, cr);
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" . layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1035() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1035);
    return L0;
  }
  if (slot1035.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1036, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] . Identifier layout[\"Layout\"] AnnotationTypeBody
private final int slot1036() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1036);
    return L0;
  }
  if (slot1036.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1037, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier . layout[\"Layout\"] AnnotationTypeBody
private final int slot1037() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1037);
    return L0;
  }
  if (slot1037.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1039, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] . AnnotationTypeBody
private final int slot1039() {
  if (!slot1038.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1039);
    return L0;
  }
  if (slot1039.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1040, slot1038);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"@\" layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] AnnotationTypeBody .
private final int slot1040() {
  if (slot1029.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeBody
private final int slot1038() {
  Set<Integer> set = slot1038.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1038.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1038.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1038.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1038.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AnnotationTypeBody ::= . \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"
private final int slot1597() {
if (slot1597.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot1597);
    return L0;
  }
  if (slot1597.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot1597.getNodeCreator().create(this, slot1598, cn, cr);
  return L0;
}

// AnnotationTypeBody ::= \"{\" . layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"
private final int slot1598() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1598);
    return L0;
  }
  if (slot1598.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1600, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] . {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\"
private final int slot1600() {
  if (!slot1599.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1600);
    return L0;
  }
  if (slot1600.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1601, slot1599);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* . layout[\"Layout\"] \"}\"
private final int slot1601() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1601);
    return L0;
  }
  if (slot1601.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1602, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] . \"}\"
private final int slot1602() {
  if (slot1602.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot1602);
    return L0;
  }
  if (slot1602.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot1602.getNodeCreator().create(this, slot1603, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeBody ::= \"{\" layout[\"Layout\"] {AnnotationTypeElementDeclaration}* layout[\"Layout\"] \"}\" .
private final int slot1603() {
  if (slot1038.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ZeroToThree
private final int slot1041() {
  Set<Integer> set = slot1041.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1041.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1041.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1041.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1041.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ZeroToThree ::= . [0-3]
private final int slot1042() {
  if (slot1042.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 82);
  if (length < 0) {
    recordParseError(slot1042);
    return L0;
  }
  if (slot1042.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(82, ci, length);
  cn = slot1042.getNodeCreator().create(this, slot1043, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ZeroToThree ::= [0-3] .
private final int slot1043() {
  if (slot1041.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerTypeSuffix
private final int slot1045() {
  Set<Integer> set = slot1045.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1045.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1045.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1045.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1045.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// IntegerTypeSuffix ::= . [L]
private final int slot1149() {
  if (slot1149.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 85);
  if (length < 0) {
    recordParseError(slot1149);
    return L0;
  }
  if (slot1149.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(85, ci, length);
  cn = slot1149.getNodeCreator().create(this, slot1150, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// IntegerTypeSuffix ::= [L] .
private final int slot1150() {
  if (slot1045.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// IntegerTypeSuffix ::= . [l]
private final int slot1151() {
  if (slot1151.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 86);
  if (length < 0) {
    recordParseError(slot1151);
    return L0;
  }
  if (slot1151.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(86, ci, length);
  cn = slot1151.getNodeCreator().create(this, slot1152, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// IntegerTypeSuffix ::= [l] .
private final int slot1152() {
  if (slot1045.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConditionalAndExpression
private final int slot1048() {
  Set<Integer> set = slot1048.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1048.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1048.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1048.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1048.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConditionalAndExpression ::= . ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression
private final int slot1049() {
  if (!slot1048.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1049);
    return L0;
  }
  if (slot1049.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1050, slot1048);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalAndExpression ::= ConditionalAndExpression . layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression
private final int slot1050() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1050);
    return L0;
  }
  if (slot1050.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1051, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] . \"&&\" layout[\"Layout\"] InclusiveOrExpression
private final int slot1051() {
if (slot1051.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 83);
  if (length < 0) {
    recordParseError(slot1051);
    return L0;
  }
  if (slot1051.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(83, ci, length);
  cn = slot1051.getNodeCreator().create(this, slot1052, cn, cr);
  return L0;
}

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" . layout[\"Layout\"] InclusiveOrExpression
private final int slot1052() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1052);
    return L0;
  }
  if (slot1052.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1054, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] . InclusiveOrExpression
private final int slot1054() {
  if (!slot1053.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1054);
    return L0;
  }
  if (slot1054.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1055, slot1053);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalAndExpression ::= ConditionalAndExpression layout[\"Layout\"] \"&&\" layout[\"Layout\"] InclusiveOrExpression .
private final int slot1055() {
  if (slot1048.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConditionalAndExpression ::= . InclusiveOrExpression
private final int slot1056() {
  if (!slot1053.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1056);
    return L0;
  }
  if (slot1056.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1057, slot1053);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConditionalAndExpression ::= InclusiveOrExpression .
private final int slot1057() {
  if (slot1048.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InclusiveOrExpression
private final int slot1053() {
  Set<Integer> set = slot1053.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1053.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1053.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1053.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1053.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InclusiveOrExpression ::= . ExclusiveOrExpression
private final int slot2303() {
  if (!slot1338.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2303);
    return L0;
  }
  if (slot2303.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2304, slot1338);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InclusiveOrExpression ::= ExclusiveOrExpression .
private final int slot2304() {
  if (slot1053.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InclusiveOrExpression ::= . InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression
private final int slot2305() {
  if (!slot1053.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2305);
    return L0;
  }
  if (slot2305.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2306, slot1053);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InclusiveOrExpression ::= InclusiveOrExpression . layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression
private final int slot2306() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2306);
    return L0;
  }
  if (slot2306.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2307, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] . \"|\" layout[\"Layout\"] ExclusiveOrExpression
private final int slot2307() {
if (slot2307.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 133);
  if (length < 0) {
    recordParseError(slot2307);
    return L0;
  }
  if (slot2307.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(133, ci, length);
  cn = slot2307.getNodeCreator().create(this, slot2308, cn, cr);
  return L0;
}

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" . layout[\"Layout\"] ExclusiveOrExpression
private final int slot2308() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2308);
    return L0;
  }
  if (slot2308.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2309, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] . ExclusiveOrExpression
private final int slot2309() {
  if (!slot1338.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2309);
    return L0;
  }
  if (slot2309.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2310, slot1338);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InclusiveOrExpression ::= InclusiveOrExpression layout[\"Layout\"] \"|\" layout[\"Layout\"] ExclusiveOrExpression .
private final int slot2310() {
  if (slot1053.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ReferenceTypeNonArrayType
private final int slot1058() {
  Set<Integer> set = slot1058.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1058.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1058.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1058.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1058.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ReferenceTypeNonArrayType ::= . TypeDeclSpecifier layout[\"Layout\"] TypeArguments?
private final int slot1059() {
  if (!slot442.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1059);
    return L0;
  }
  if (slot1059.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1060, slot442);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceTypeNonArrayType ::= TypeDeclSpecifier . layout[\"Layout\"] TypeArguments?
private final int slot1060() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1060);
    return L0;
  }
  if (slot1060.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1061, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceTypeNonArrayType ::= TypeDeclSpecifier layout[\"Layout\"] . TypeArguments?
private final int slot1061() {
  if (!slot445.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1061);
    return L0;
  }
  if (slot1061.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1062, slot445);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ReferenceTypeNonArrayType ::= TypeDeclSpecifier layout[\"Layout\"] TypeArguments? .
private final int slot1062() {
  if (slot1058.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceDeclaration
private final int slot1063() {
  Set<Integer> set = slot1063.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1063.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1063.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1063.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1063.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InterfaceDeclaration ::= . NormalInterfaceDeclaration
private final int slot1065() {
  if (!slot1064.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1065);
    return L0;
  }
  if (slot1065.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1066, slot1064);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceDeclaration ::= NormalInterfaceDeclaration .
private final int slot1066() {
  if (slot1063.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceDeclaration ::= . AnnotationTypeDeclaration
private final int slot1067() {
  if (!slot1029.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1067);
    return L0;
  }
  if (slot1067.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1068, slot1029);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceDeclaration ::= AnnotationTypeDeclaration .
private final int slot1068() {
  if (slot1063.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NormalInterfaceDeclaration
private final int slot1064() {
  Set<Integer> set = slot1064.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1064.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1064.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1064.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1064.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NormalInterfaceDeclaration ::= . {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2465() {
  if (!slot537.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2465);
    return L0;
  }
  if (slot2465.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2466, slot537);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* . layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2466() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2466);
    return L0;
  }
  if (slot2466.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2467, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] . \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2467() {
if (slot2467.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 65);
  if (length < 0) {
    recordParseError(slot2467);
    return L0;
  }
  if (slot2467.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(65, ci, length);
  cn = slot2467.getNodeCreator().create(this, slot2468, cn, cr);
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2468() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2468);
    return L0;
  }
  if (slot2468.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2469, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2469() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2469);
    return L0;
  }
  if (slot2469.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2470, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2470() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2470);
    return L0;
  }
  if (slot2470.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2471, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2471() {
  if (!slot771.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2471);
    return L0;
  }
  if (slot2471.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2472, slot771);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2472() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2472);
    return L0;
  }
  if (slot2472.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2473, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody
private final int slot2473() {
  if (!slot2356.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2473);
    return L0;
  }
  if (slot2473.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2474, slot2356);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] InterfaceBody
private final int slot2474() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2474);
    return L0;
  }
  if (slot2474.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2475, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . InterfaceBody
private final int slot2475() {
  if (!slot1403.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2475);
    return L0;
  }
  if (slot2475.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2476, slot1403);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalInterfaceDeclaration ::= {InterfaceModifier}* layout[\"Layout\"] \"interface\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] InterfaceBody .
private final int slot2476() {
  if (slot1064.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForStatement
private final int slot1071() {
  Set<Integer> set = slot1071.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1071.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1071.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1071.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1071.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ForStatement ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1072() {
if (slot1072.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 41);
  if (length < 0) {
    recordParseError(slot1072);
    return L0;
  }
  if (slot1072.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(41, ci, length);
  cn = slot1072.getNodeCreator().create(this, slot1073, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1073() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1073);
    return L0;
  }
  if (slot1073.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1074, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1074() {
if (slot1074.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1074);
    return L0;
  }
  if (slot1074.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1074.getNodeCreator().create(this, slot1075, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1075() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1075);
    return L0;
  }
  if (slot1075.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1077, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1077() {
  if (!slot1076.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1077);
    return L0;
  }
  if (slot1077.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1078, slot1076);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter . layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1078() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1078);
    return L0;
  }
  if (slot1078.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1079, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] . \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1079() {
if (slot1079.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 10);
  if (length < 0) {
    recordParseError(slot1079);
    return L0;
  }
  if (slot1079.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(10, ci, length);
  cn = slot1079.getNodeCreator().create(this, slot1080, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" . layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1080() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1080);
    return L0;
  }
  if (slot1080.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1081, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] . Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1081() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1081);
    return L0;
  }
  if (slot1081.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1082, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1082() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1082);
    return L0;
  }
  if (slot1082.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1083, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
private final int slot1083() {
if (slot1083.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1083);
    return L0;
  }
  if (slot1083.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1083.getNodeCreator().create(this, slot1084, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
private final int slot1084() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1084);
    return L0;
  }
  if (slot1084.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1085, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
private final int slot1085() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1085);
    return L0;
  }
  if (slot1085.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1086, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameter layout[\"Layout\"] \":\" layout[\"Layout\"] Expression layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
private final int slot1086() {
  if (slot1071.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForStatement ::= . \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1087() {
if (slot1087.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 41);
  if (length < 0) {
    recordParseError(slot1087);
    return L0;
  }
  if (slot1087.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(41, ci, length);
  cn = slot1087.getNodeCreator().create(this, slot1088, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1088() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1088);
    return L0;
  }
  if (slot1088.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1089, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1089() {
if (slot1089.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1089);
    return L0;
  }
  if (slot1089.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1089.getNodeCreator().create(this, slot1090, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1090() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1090);
    return L0;
  }
  if (slot1090.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1091, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1091() {
  if (!slot689.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1091);
    return L0;
  }
  if (slot1091.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1092, slot689);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? . layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1092() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1092);
    return L0;
  }
  if (slot1092.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1093, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] . \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1093() {
if (slot1093.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1093);
    return L0;
  }
  if (slot1093.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1093.getNodeCreator().create(this, slot1094, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" . layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1094() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1094);
    return L0;
  }
  if (slot1094.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1095, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] . Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1095() {
  if (!slot694.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1095);
    return L0;
  }
  if (slot1095.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1096, slot694);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? . layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1096() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1096);
    return L0;
  }
  if (slot1096.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1097, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] . \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1097() {
if (slot1097.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1097);
    return L0;
  }
  if (slot1097.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1097.getNodeCreator().create(this, slot1098, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" . layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1098() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1098);
    return L0;
  }
  if (slot1098.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1099, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] . ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1099() {
  if (!slot699.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1099);
    return L0;
  }
  if (slot1099.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1100, slot699);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? . layout[\"Layout\"] \")\" layout[\"Layout\"] Statement
private final int slot1100() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1100);
    return L0;
  }
  if (slot1100.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1101, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] . \")\" layout[\"Layout\"] Statement
private final int slot1101() {
if (slot1101.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1101);
    return L0;
  }
  if (slot1101.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1101.getNodeCreator().create(this, slot1102, cn, cr);
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" . layout[\"Layout\"] Statement
private final int slot1102() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1102);
    return L0;
  }
  if (slot1102.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1103, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] . Statement
private final int slot1103() {
  if (!slot71.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1103);
    return L0;
  }
  if (slot1103.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1104, slot71);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForStatement ::= \"for\" layout[\"Layout\"] \"(\" layout[\"Layout\"] ForInit? layout[\"Layout\"] \";\" layout[\"Layout\"] Expression? layout[\"Layout\"] \";\" layout[\"Layout\"] ForUpdate? layout[\"Layout\"] \")\" layout[\"Layout\"] Statement .
private final int slot1104() {
  if (slot1071.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FormalParameter
private final int slot1076() {
  Set<Integer> set = slot1076.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1076.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1076.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1076.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1076.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FormalParameter ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId
private final int slot1707() {
  if (!slot542.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1707);
    return L0;
  }
  if (slot1707.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1708, slot542);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameter ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId
private final int slot1708() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1708);
    return L0;
  }
  if (slot1708.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1709, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclaratorId
private final int slot1709() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1709);
    return L0;
  }
  if (slot1709.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1710, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclaratorId
private final int slot1710() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1710);
    return L0;
  }
  if (slot1710.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1711, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclaratorId
private final int slot1711() {
  if (!slot547.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1711);
    return L0;
  }
  if (slot1711.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1712, slot547);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameter ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclaratorId .
private final int slot1712() {
  if (slot1076.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression
private final int slot1109() {
  Set<Integer> set = slot1109.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1109.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1109.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1109.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1109.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StatementExpression ::= . PostIncrementExpression
private final int slot1549() {
  if (!slot464.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1549);
    return L0;
  }
  if (slot1549.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1550, slot464);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= PostIncrementExpression .
private final int slot1550() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression ::= . PostDecrementExpression
private final int slot1551() {
  if (!slot1220.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1551);
    return L0;
  }
  if (slot1551.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1552, slot1220);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= PostDecrementExpression .
private final int slot1552() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression ::= . Assignment
private final int slot1553() {
  if (!slot1539.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1553);
    return L0;
  }
  if (slot1553.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1554, slot1539);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= Assignment .
private final int slot1554() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression ::= . ClassInstanceCreationExpression
private final int slot1556() {
  if (!slot1555.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1556);
    return L0;
  }
  if (slot1556.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1557, slot1555);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= ClassInstanceCreationExpression .
private final int slot1557() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression ::= . PreIncrementExpression
private final int slot1559() {
  if (!slot1558.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1559);
    return L0;
  }
  if (slot1559.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1560, slot1558);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= PreIncrementExpression .
private final int slot1560() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression ::= . PreDecrementExpression
private final int slot1561() {
  if (!slot761.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1561);
    return L0;
  }
  if (slot1561.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1562, slot761);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= PreDecrementExpression .
private final int slot1562() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StatementExpression ::= . MethodInvocation
private final int slot1563() {
  if (!slot129.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1563);
    return L0;
  }
  if (slot1563.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1564, slot129);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StatementExpression ::= MethodInvocation .
private final int slot1564() {
  if (slot1109.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\")?
private final int slot1114() {
  Set<Integer> set = slot1114.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1114.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1114.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1114.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1114.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\")? ::= .
private final int slot1115() {
  if (slot1114.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1114, ci, ci);
    sppfLookup.addPackedNode(node, slot1115, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\")? ::= . (\".\" layout[\"Layout\"] \"*\")
private final int slot1117() {
  if (!slot1116.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1117);
    return L0;
  }
  if (slot1117.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1118, slot1116);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\")? ::= (\".\" layout[\"Layout\"] \"*\") .
private final int slot1118() {
  if (slot1114.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\")
private final int slot1116() {
  Set<Integer> set = slot1116.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1116.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1116.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1116.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1116.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\") ::= . \".\" layout[\"Layout\"] \"*\"
private final int slot2665() {
if (slot2665.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot2665);
    return L0;
  }
  if (slot2665.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot2665.getNodeCreator().create(this, slot2666, cn, cr);
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\") ::= \".\" . layout[\"Layout\"] \"*\"
private final int slot2666() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2666);
    return L0;
  }
  if (slot2666.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2667, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\") ::= \".\" layout[\"Layout\"] . \"*\"
private final int slot2667() {
  if (slot2667.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 109);
  if (length < 0) {
    recordParseError(slot2667);
    return L0;
  }
  if (slot2667.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(109, ci, length);
  cn = slot2667.getNodeCreator().create(this, slot2668, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// (\".\" layout[\"Layout\"] \"*\") ::= \".\" layout[\"Layout\"] \"*\" .
private final int slot2668() {
  if (slot1116.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot1119() {
  Set<Integer> set = slot1119.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1119.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1119.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1119.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1119.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Type
private final int slot1120() {
  if (!slot1119.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1120);
    return L0;
  }
  if (slot1120.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1121, slot1119);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] Type
private final int slot1121() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1121);
    return L0;
  }
  if (slot1121.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1122, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] Type
private final int slot1122() {
if (slot1122.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot1122);
    return L0;
  }
  if (slot1122.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot1122.getNodeCreator().create(this, slot1123, cn, cr);
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] Type
private final int slot1123() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1123);
    return L0;
  }
  if (slot1123.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1124, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . Type
private final int slot1124() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1124);
    return L0;
  }
  if (slot1124.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1125, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] Type .
private final int slot1125() {
  if (slot1119.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . Type
private final int slot1126() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1126);
    return L0;
  }
  if (slot1126.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1127, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= Type .
private final int slot1127() {
  if (slot1119.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeDeclaration}*
private final int slot1131() {
  Set<Integer> set = slot1131.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1131.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1131.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1131.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1131.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {TypeDeclaration}* ::= . {TypeDeclaration layout[\"Layout\"]}+
private final int slot1133() {
  if (!slot1132.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1133);
    return L0;
  }
  if (slot1133.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1134, slot1132);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeDeclaration}* ::= {TypeDeclaration layout[\"Layout\"]}+ .
private final int slot1134() {
  if (slot1131.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeDeclaration}* ::= .
private final int slot1135() {
  if (slot1131.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1131, ci, ci);
    sppfLookup.addPackedNode(node, slot1135, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+
private final int slot1132() {
  Set<Integer> set = slot1132.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1132.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1132.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1132.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1132.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+ ::= . {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] TypeDeclaration
private final int slot1691() {
  if (!slot1132.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1691);
    return L0;
  }
  if (slot1691.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1692, slot1132);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] TypeDeclaration
private final int slot1692() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1692);
    return L0;
  }
  if (slot1692.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1693, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . TypeDeclaration
private final int slot1693() {
  if (!slot1465.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1693);
    return L0;
  }
  if (slot1693.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1694, slot1465);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+ ::= {TypeDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] TypeDeclaration .
private final int slot1694() {
  if (slot1132.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+ ::= . TypeDeclaration
private final int slot1695() {
  if (!slot1465.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1695);
    return L0;
  }
  if (slot1695.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1696, slot1465);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {TypeDeclaration layout[\"Layout\"]}+ ::= TypeDeclaration .
private final int slot1696() {
  if (slot1132.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ElementValuePair
private final int slot1140() {
  Set<Integer> set = slot1140.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1140.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1140.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1140.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1140.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ElementValuePair ::= . Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue
private final int slot2733() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2733);
    return L0;
  }
  if (slot2733.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2734, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValuePair ::= Identifier . layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue
private final int slot2734() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2734);
    return L0;
  }
  if (slot2734.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2735, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValuePair ::= Identifier layout[\"Layout\"] . \"=\" layout[\"Layout\"] ElementValue
private final int slot2735() {
if (slot2735.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 36);
  if (length < 0) {
    recordParseError(slot2735);
    return L0;
  }
  if (slot2735.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(36, ci, length);
  cn = slot2735.getNodeCreator().create(this, slot2736, cn, cr);
  return L0;
}

// ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" . layout[\"Layout\"] ElementValue
private final int slot2736() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2736);
    return L0;
  }
  if (slot2736.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2737, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] . ElementValue
private final int slot2737() {
  if (!slot37.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2737);
    return L0;
  }
  if (slot2737.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2738, slot37);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ElementValuePair ::= Identifier layout[\"Layout\"] \"=\" layout[\"Layout\"] ElementValue .
private final int slot2738() {
  if (slot1140.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+
private final int slot1145() {
  Set<Integer> set = slot1145.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1145.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1145.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1145.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1145.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= . {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
private final int slot1910() {
  if (!slot1145.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1910);
    return L0;
  }
  if (slot1910.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1911, slot1145);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ . layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
private final int slot1911() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1911);
    return L0;
  }
  if (slot1911.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1912, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] . (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
private final int slot1912() {
  if (!slot1604.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1912);
    return L0;
  }
  if (slot1912.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1913, slot1604);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ layout[\"Layout\"] (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) .
private final int slot1913() {
  if (slot1145.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= . (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
private final int slot1914() {
  if (!slot1604.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1914);
    return L0;
  }
  if (slot1914.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1915, slot1604);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {(TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) layout[\"Layout\"]}+ ::= (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) .
private final int slot1915() {
  if (slot1145.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Digit
private final int slot1153() {
  Set<Integer> set = slot1153.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1153.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1153.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1153.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1153.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Digit ::= . [0]
private final int slot1154() {
  if (slot1154.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot1154);
    return L0;
  }
  if (slot1154.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot1154.getNodeCreator().create(this, slot1155, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Digit ::= [0] .
private final int slot1155() {
  if (slot1153.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Digit ::= . NonZeroDigit
private final int slot1157() {
  if (!slot1156.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1157);
    return L0;
  }
  if (slot1157.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1158, slot1156);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Digit ::= NonZeroDigit .
private final int slot1158() {
  if (slot1153.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NonZeroDigit
private final int slot1156() {
  Set<Integer> set = slot1156.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1156.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1156.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1156.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1156.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NonZeroDigit ::= . [1-9]
private final int slot1812() {
  if (slot1812.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 111);
  if (length < 0) {
    recordParseError(slot1812);
    return L0;
  }
  if (slot1812.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(111, ci, length);
  cn = slot1812.getNodeCreator().create(this, slot1813, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// NonZeroDigit ::= [1-9] .
private final int slot1813() {
  if (slot1156.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ShiftExpression
private final int slot1165() {
  Set<Integer> set = slot1165.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1165.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1165.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1165.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1165.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression
private final int slot1166() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1166);
    return L0;
  }
  if (slot1166.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1167, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression
private final int slot1167() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1167);
    return L0;
  }
  if (slot1167.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1168, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \"<<\" layout[\"Layout\"] AdditiveExpression
private final int slot1168() {
if (slot1168.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 87);
  if (length < 0) {
    recordParseError(slot1168);
    return L0;
  }
  if (slot1168.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(87, ci, length);
  cn = slot1168.getNodeCreator().create(this, slot1169, cn, cr);
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" . layout[\"Layout\"] AdditiveExpression
private final int slot1169() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1169);
    return L0;
  }
  if (slot1169.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1170, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] . AdditiveExpression
private final int slot1170() {
  if (!slot877.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1170);
    return L0;
  }
  if (slot1170.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1171, slot877);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \"<<\" layout[\"Layout\"] AdditiveExpression .
private final int slot1171() {
  if (slot1165.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression
private final int slot1172() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1172);
    return L0;
  }
  if (slot1172.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1173, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression
private final int slot1173() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1173);
    return L0;
  }
  if (slot1173.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1174, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \">>\" layout[\"Layout\"] AdditiveExpression
private final int slot1174() {
if (slot1174.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 88);
  if (length < 0) {
    recordParseError(slot1174);
    return L0;
  }
  if (slot1174.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(88, ci, length);
  cn = slot1174.getNodeCreator().create(this, slot1175, cn, cr);
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" . layout[\"Layout\"] AdditiveExpression
private final int slot1175() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1175);
    return L0;
  }
  if (slot1175.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1176, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] . AdditiveExpression
private final int slot1176() {
  if (!slot877.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1176);
    return L0;
  }
  if (slot1176.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1177, slot877);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>\" layout[\"Layout\"] AdditiveExpression .
private final int slot1177() {
  if (slot1165.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ShiftExpression ::= . AdditiveExpression
private final int slot1178() {
  if (!slot877.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1178);
    return L0;
  }
  if (slot1178.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1179, slot877);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= AdditiveExpression .
private final int slot1179() {
  if (slot1165.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ShiftExpression ::= . ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression
private final int slot1180() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1180);
    return L0;
  }
  if (slot1180.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1181, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression . layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression
private final int slot1181() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1181);
    return L0;
  }
  if (slot1181.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1182, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] . \">>>\" layout[\"Layout\"] AdditiveExpression
private final int slot1182() {
if (slot1182.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 89);
  if (length < 0) {
    recordParseError(slot1182);
    return L0;
  }
  if (slot1182.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(89, ci, length);
  cn = slot1182.getNodeCreator().create(this, slot1183, cn, cr);
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" . layout[\"Layout\"] AdditiveExpression
private final int slot1183() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1183);
    return L0;
  }
  if (slot1183.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1184, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] . AdditiveExpression
private final int slot1184() {
  if (!slot877.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1184);
    return L0;
  }
  if (slot1184.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1185, slot877);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ShiftExpression ::= ShiftExpression layout[\"Layout\"] \">>>\" layout[\"Layout\"] AdditiveExpression .
private final int slot1185() {
  if (slot1165.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForInit
private final int slot1187() {
  Set<Integer> set = slot1187.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1187.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1187.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1187.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1187.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ForInit ::= . {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2187() {
  if (!slot471.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2187);
    return L0;
  }
  if (slot2187.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2188, slot471);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForInit ::= {StatementExpression layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot2188() {
  if (slot1187.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ForInit ::= . LocalVariableDeclaration
private final int slot2190() {
  if (!slot2189.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2190);
    return L0;
  }
  if (slot2190.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2191, slot2189);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ForInit ::= LocalVariableDeclaration .
private final int slot2191() {
  if (slot1187.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeElementDeclaration
private final int slot1190() {
  Set<Integer> set = slot1190.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1190.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1190.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1190.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1190.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= . AnnotationTypeDeclaration
private final int slot1191() {
  if (!slot1029.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1191);
    return L0;
  }
  if (slot1191.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1192, slot1029);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration .
private final int slot1192() {
  if (slot1190.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= . InterfaceDeclaration
private final int slot1193() {
  if (!slot1063.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1193);
    return L0;
  }
  if (slot1193.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1194, slot1063);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= InterfaceDeclaration .
private final int slot1194() {
  if (slot1190.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= . ConstantDeclaration
private final int slot1196() {
  if (!slot1195.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1196);
    return L0;
  }
  if (slot1196.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1197, slot1195);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= ConstantDeclaration .
private final int slot1197() {
  if (slot1190.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= . \";\"
private final int slot1198() {
  if (slot1198.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1198);
    return L0;
  }
  if (slot1198.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1198.getNodeCreator().create(this, slot1199, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= \";\" .
private final int slot1199() {
  if (slot1190.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= . {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1200() {
  if (!slot796.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1200);
    return L0;
  }
  if (slot1200.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1201, slot796);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1201() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1201);
    return L0;
  }
  if (slot1201.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1202, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1202() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1202);
    return L0;
  }
  if (slot1202.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1203, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1203() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1203);
    return L0;
  }
  if (slot1203.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1204, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1204() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1204);
    return L0;
  }
  if (slot1204.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1205, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1205() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1205);
    return L0;
  }
  if (slot1205.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1206, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1206() {
if (slot1206.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1206);
    return L0;
  }
  if (slot1206.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1206.getNodeCreator().create(this, slot1207, cn, cr);
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1207() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1207);
    return L0;
  }
  if (slot1207.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1208, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1208() {
if (slot1208.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1208);
    return L0;
  }
  if (slot1208.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1208.getNodeCreator().create(this, slot1209, cn, cr);
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" . layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1209() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1209);
    return L0;
  }
  if (slot1209.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1210, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] . {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1210() {
  if (!slot520.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1210);
    return L0;
  }
  if (slot1210.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1211, slot520);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* . layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\"
private final int slot1211() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1211);
    return L0;
  }
  if (slot1211.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1212, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] . DefaultValue? layout[\"Layout\"] \";\"
private final int slot1212() {
  if (!slot498.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1212);
    return L0;
  }
  if (slot1212.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1213, slot498);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? . layout[\"Layout\"] \";\"
private final int slot1213() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1213);
    return L0;
  }
  if (slot1213.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1214, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] . \";\"
private final int slot1214() {
  if (slot1214.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1214);
    return L0;
  }
  if (slot1214.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1214.getNodeCreator().create(this, slot1215, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] Type layout[\"Layout\"] Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] \")\" layout[\"Layout\"] {(\"[\" layout[\"Layout\"] \"]\")}* layout[\"Layout\"] DefaultValue? layout[\"Layout\"] \";\" .
private final int slot1215() {
  if (slot1190.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= . ClassDeclaration
private final int slot1216() {
  if (!slot68.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1216);
    return L0;
  }
  if (slot1216.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1217, slot68);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AnnotationTypeElementDeclaration ::= ClassDeclaration .
private final int slot1217() {
  if (slot1190.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstantDeclaration
private final int slot1195() {
  Set<Integer> set = slot1195.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1195.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1195.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1195.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1195.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstantDeclaration ::= . {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2404() {
  if (!slot1480.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2404);
    return L0;
  }
  if (slot2404.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2405, slot1480);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2405() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2405);
    return L0;
  }
  if (slot2405.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2406, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2406() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2406);
    return L0;
  }
  if (slot2406.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2407, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2407() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2407);
    return L0;
  }
  if (slot2407.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2408, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2408() {
  if (!slot859.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2408);
    return L0;
  }
  if (slot2408.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2409, slot859);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"
private final int slot2409() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2409);
    return L0;
  }
  if (slot2409.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2410, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"
private final int slot2410() {
  if (slot2410.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot2410);
    return L0;
  }
  if (slot2410.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot2410.getNodeCreator().create(this, slot2411, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ConstantDeclaration ::= {ConstantModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .
private final int slot2411() {
  if (slot1195.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PostDecrementExpression
private final int slot1220() {
  Set<Integer> set = slot1220.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1220.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1220.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1220.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1220.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PostDecrementExpression ::= . PostfixExpression layout[\"Layout\"] \"--\"
private final int slot2708() {
  if (!slot465.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2708);
    return L0;
  }
  if (slot2708.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2709, slot465);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostDecrementExpression ::= PostfixExpression . layout[\"Layout\"] \"--\"
private final int slot2709() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2709);
    return L0;
  }
  if (slot2709.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2710, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PostDecrementExpression ::= PostfixExpression layout[\"Layout\"] . \"--\"
private final int slot2710() {
  if (slot2710.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 74);
  if (length < 0) {
    recordParseError(slot2710);
    return L0;
  }
  if (slot2710.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(74, ci, length);
  cn = slot2710.getNodeCreator().create(this, slot2711, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PostDecrementExpression ::= PostfixExpression layout[\"Layout\"] \"--\" .
private final int slot2711() {
  if (slot1220.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AbstractMethodDeclaration
private final int slot1229() {
  Set<Integer> set = slot1229.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1229.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1229.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1229.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1229.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AbstractMethodDeclaration ::= . {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1230() {
  if (!slot796.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1230);
    return L0;
  }
  if (slot1230.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1231, slot796);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1231() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1231);
    return L0;
  }
  if (slot1231.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1232, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1232() {
  if (!slot771.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1232);
    return L0;
  }
  if (slot1232.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1233, slot771);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1233() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1233);
    return L0;
  }
  if (slot1233.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1234, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1234() {
  if (!slot843.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1234);
    return L0;
  }
  if (slot1234.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1235, slot843);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result . layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1235() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1235);
    return L0;
  }
  if (slot1235.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1237, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] . MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1237() {
  if (!slot1236.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1237);
    return L0;
  }
  if (slot1237.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1238, slot1236);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator . layout[\"Layout\"] Throws? layout[\"Layout\"] \";\"
private final int slot1238() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1238);
    return L0;
  }
  if (slot1238.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1239, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] . Throws? layout[\"Layout\"] \";\"
private final int slot1239() {
  if (!slot994.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1239);
    return L0;
  }
  if (slot1239.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1240, slot994);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? . layout[\"Layout\"] \";\"
private final int slot1240() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1240);
    return L0;
  }
  if (slot1240.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1241, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] . \";\"
private final int slot1241() {
  if (slot1241.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1241);
    return L0;
  }
  if (slot1241.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1241.getNodeCreator().create(this, slot1242, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AbstractMethodDeclaration ::= {AbstractMethodModifier}* layout[\"Layout\"] TypeParameters? layout[\"Layout\"] Result layout[\"Layout\"] MethodDeclarator layout[\"Layout\"] Throws? layout[\"Layout\"] \";\" .
private final int slot1242() {
  if (slot1229.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodDeclarator
private final int slot1236() {
  Set<Integer> set = slot1236.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1236.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1236.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1236.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1236.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodDeclarator ::= . MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
private final int slot1270() {
  if (!slot1236.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1270);
    return L0;
  }
  if (slot1270.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1271, slot1236);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= MethodDeclarator . layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\"
private final int slot1271() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1271);
    return L0;
  }
  if (slot1271.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1272, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] . \"[\" layout[\"Layout\"] \"]\"
private final int slot1272() {
if (slot1272.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 8);
  if (length < 0) {
    recordParseError(slot1272);
    return L0;
  }
  if (slot1272.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(8, ci, length);
  cn = slot1272.getNodeCreator().create(this, slot1273, cn, cr);
  return L0;
}

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" . layout[\"Layout\"] \"]\"
private final int slot1273() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1273);
    return L0;
  }
  if (slot1273.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1274, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] . \"]\"
private final int slot1274() {
  if (slot1274.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 9);
  if (length < 0) {
    recordParseError(slot1274);
    return L0;
  }
  if (slot1274.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(9, ci, length);
  cn = slot1274.getNodeCreator().create(this, slot1275, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= MethodDeclarator layout[\"Layout\"] \"[\" layout[\"Layout\"] \"]\" .
private final int slot1275() {
  if (slot1236.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodDeclarator ::= . Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1276() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1276);
    return L0;
  }
  if (slot1276.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1277, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= Identifier . layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1277() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1277);
    return L0;
  }
  if (slot1277.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1278, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= Identifier layout[\"Layout\"] . \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1278() {
if (slot1278.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1278);
    return L0;
  }
  if (slot1278.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1278.getNodeCreator().create(this, slot1279, cn, cr);
  return L0;
}

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" . layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1279() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1279);
    return L0;
  }
  if (slot1279.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1281, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] . FormalParameterList? layout[\"Layout\"] \")\"
private final int slot1281() {
  if (!slot1280.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1281);
    return L0;
  }
  if (slot1281.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1282, slot1280);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? . layout[\"Layout\"] \")\"
private final int slot1282() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1282);
    return L0;
  }
  if (slot1282.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1283, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] . \")\"
private final int slot1283() {
  if (slot1283.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1283);
    return L0;
  }
  if (slot1283.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1283.getNodeCreator().create(this, slot1284, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodDeclarator ::= Identifier layout[\"Layout\"] \"(\" layout[\"Layout\"] FormalParameterList? layout[\"Layout\"] \")\" .
private final int slot1284() {
  if (slot1236.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier
private final int slot1243() {
  Set<Integer> set = slot1243.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1243.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1243.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1243.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1243.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InterfaceModifier ::= . \"abstract\"
private final int slot1244() {
  if (slot1244.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 23);
  if (length < 0) {
    recordParseError(slot1244);
    return L0;
  }
  if (slot1244.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(23, ci, length);
  cn = slot1244.getNodeCreator().create(this, slot1245, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= \"abstract\" .
private final int slot1245() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier ::= . \"private\"
private final int slot1246() {
  if (slot1246.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 60);
  if (length < 0) {
    recordParseError(slot1246);
    return L0;
  }
  if (slot1246.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(60, ci, length);
  cn = slot1246.getNodeCreator().create(this, slot1247, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= \"private\" .
private final int slot1247() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier ::= . \"strictfp\"
private final int slot1248() {
  if (slot1248.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 39);
  if (length < 0) {
    recordParseError(slot1248);
    return L0;
  }
  if (slot1248.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(39, ci, length);
  cn = slot1248.getNodeCreator().create(this, slot1249, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= \"strictfp\" .
private final int slot1249() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier ::= . \"protected\"
private final int slot1250() {
  if (slot1250.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 46);
  if (length < 0) {
    recordParseError(slot1250);
    return L0;
  }
  if (slot1250.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(46, ci, length);
  cn = slot1250.getNodeCreator().create(this, slot1251, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= \"protected\" .
private final int slot1251() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier ::= . Annotation
private final int slot1252() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1252);
    return L0;
  }
  if (slot1252.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1253, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= Annotation .
private final int slot1253() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier ::= . \"public\"
private final int slot1254() {
  if (slot1254.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot1254);
    return L0;
  }
  if (slot1254.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot1254.getNodeCreator().create(this, slot1255, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= \"public\" .
private final int slot1255() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceModifier ::= . \"static\"
private final int slot1256() {
  if (slot1256.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot1256);
    return L0;
  }
  if (slot1256.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot1256.getNodeCreator().create(this, slot1257, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceModifier ::= \"static\" .
private final int slot1257() {
  if (slot1243.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ImportDeclaration}*
private final int slot1258() {
  Set<Integer> set = slot1258.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1258.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1258.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1258.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1258.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ImportDeclaration}* ::= . {ImportDeclaration layout[\"Layout\"]}+
private final int slot1260() {
  if (!slot1259.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1260);
    return L0;
  }
  if (slot1260.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1261, slot1259);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ImportDeclaration}* ::= {ImportDeclaration layout[\"Layout\"]}+ .
private final int slot1261() {
  if (slot1258.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ImportDeclaration}* ::= .
private final int slot1262() {
  if (slot1258.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1258, ci, ci);
    sppfLookup.addPackedNode(node, slot1262, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+
private final int slot1259() {
  Set<Integer> set = slot1259.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1259.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1259.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1259.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1259.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+ ::= . {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ImportDeclaration
private final int slot2350() {
  if (!slot1259.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2350);
    return L0;
  }
  if (slot2350.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2351, slot1259);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] ImportDeclaration
private final int slot2351() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2351);
    return L0;
  }
  if (slot2351.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2352, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . ImportDeclaration
private final int slot2352() {
  if (!slot1429.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2352);
    return L0;
  }
  if (slot2352.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2353, slot1429);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+ ::= {ImportDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ImportDeclaration .
private final int slot2353() {
  if (slot1259.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+ ::= . ImportDeclaration
private final int slot2354() {
  if (!slot1429.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2354);
    return L0;
  }
  if (slot2354.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2355, slot1429);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ImportDeclaration layout[\"Layout\"]}+ ::= ImportDeclaration .
private final int slot2355() {
  if (slot1259.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (FormalParameter layout[\"Layout\"] \",\")
private final int slot1263() {
  Set<Integer> set = slot1263.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1263.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1263.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1263.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1263.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (FormalParameter layout[\"Layout\"] \",\") ::= . FormalParameter layout[\"Layout\"] \",\"
private final int slot2641() {
  if (!slot1076.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2641);
    return L0;
  }
  if (slot2641.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2642, slot1076);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter . layout[\"Layout\"] \",\"
private final int slot2642() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2642);
    return L0;
  }
  if (slot2642.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2643, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter layout[\"Layout\"] . \",\"
private final int slot2643() {
  if (slot2643.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot2643);
    return L0;
  }
  if (slot2643.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot2643.getNodeCreator().create(this, slot2644, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// (FormalParameter layout[\"Layout\"] \",\") ::= FormalParameter layout[\"Layout\"] \",\" .
private final int slot2644() {
  if (slot1263.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FormalParameterList?
private final int slot1280() {
  Set<Integer> set = slot1280.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1280.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1280.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1280.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1280.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FormalParameterList? ::= .
private final int slot1472() {
  if (slot1280.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1280, ci, ci);
    sppfLookup.addPackedNode(node, slot1472, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// FormalParameterList? ::= . FormalParameterList
private final int slot1473() {
  if (!slot392.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1473);
    return L0;
  }
  if (slot1473.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1474, slot392);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FormalParameterList? ::= FormalParameterList .
private final int slot1474() {
  if (slot1280.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalEscape
private final int slot1285() {
  Set<Integer> set = slot1285.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1285.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1285.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1285.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1285.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// OctalEscape ::= . [\\\\] ZeroToThree OctalDigit OctalDigit
private final int slot1679() {
if (slot1679.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1679);
    return L0;
  }
  if (slot1679.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1679.getNodeCreator().create(this, slot1680, cn, cr);
  return L0;
}

// OctalEscape ::= [\\\\] . ZeroToThree OctalDigit OctalDigit
private final int slot1680() {
  if (!slot1041.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1680);
    return L0;
  }
  if (slot1680.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1681, slot1041);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalEscape ::= [\\\\] ZeroToThree . OctalDigit OctalDigit
private final int slot1681() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1681);
    return L0;
  }
  if (slot1681.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1682, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalEscape ::= [\\\\] ZeroToThree OctalDigit . OctalDigit
private final int slot1682() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1682);
    return L0;
  }
  if (slot1682.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1683, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalEscape ::= [\\\\] ZeroToThree OctalDigit OctalDigit .
private final int slot1683() {
  if (slot1285.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalEscape ::= . [\\\\] OctalDigit OctalDigit
private final int slot1684() {
if (slot1684.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1684);
    return L0;
  }
  if (slot1684.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1684.getNodeCreator().create(this, slot1685, cn, cr);
  return L0;
}

// OctalEscape ::= [\\\\] . OctalDigit OctalDigit
private final int slot1685() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1685);
    return L0;
  }
  if (slot1685.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1686, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalEscape ::= [\\\\] OctalDigit . OctalDigit
private final int slot1686() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1686);
    return L0;
  }
  if (slot1686.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1687, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalEscape ::= [\\\\] OctalDigit OctalDigit .
private final int slot1687() {
  if (slot1285.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// OctalEscape ::= . [\\\\] OctalDigit
private final int slot1688() {
if (slot1688.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1688);
    return L0;
  }
  if (slot1688.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1688.getNodeCreator().create(this, slot1689, cn, cr);
  return L0;
}

// OctalEscape ::= [\\\\] . OctalDigit
private final int slot1689() {
  if (!slot48.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1689);
    return L0;
  }
  if (slot1689.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1690, slot48);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// OctalEscape ::= [\\\\] OctalDigit .
private final int slot1690() {
  if (slot1285.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Backslash
private final int slot1297() {
  Set<Integer> set = slot1297.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1297.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1297.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1297.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1297.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Backslash ::= . [\\\\]
private final int slot1770() {
  if (slot1770.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1770);
    return L0;
  }
  if (slot1770.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1770.getNodeCreator().create(this, slot1771, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Backslash ::= [\\\\] .
private final int slot1771() {
  if (slot1297.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Backslash ::= . [\\\\] [u]+ \"005\" [cC]
private final int slot1772() {
if (slot1772.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 90);
  if (length < 0) {
    recordParseError(slot1772);
    return L0;
  }
  if (slot1772.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(90, ci, length);
  cn = slot1772.getNodeCreator().create(this, slot1773, cn, cr);
  return L0;
}

// Backslash ::= [\\\\] . [u]+ \"005\" [cC]
private final int slot1773() {
  if (!slot864.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1773);
    return L0;
  }
  if (slot1773.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1774, slot864);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Backslash ::= [\\\\] [u]+ . \"005\" [cC]
private final int slot1774() {
if (slot1774.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 91);
  if (length < 0) {
    recordParseError(slot1774);
    return L0;
  }
  if (slot1774.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(91, ci, length);
  cn = slot1774.getNodeCreator().create(this, slot1775, cn, cr);
  return L0;
}

// Backslash ::= [\\\\] [u]+ \"005\" . [cC]
private final int slot1775() {
  if (slot1775.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 92);
  if (length < 0) {
    recordParseError(slot1775);
    return L0;
  }
  if (slot1775.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(92, ci, length);
  cn = slot1775.getNodeCreator().create(this, slot1776, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Backslash ::= [\\\\] [u]+ \"005\" [cC] .
private final int slot1776() {
  if (slot1297.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeList
private final int slot1319() {
  Set<Integer> set = slot1319.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1319.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1319.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1319.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1319.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeList ::= . {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot1320() {
  if (!slot1119.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1320);
    return L0;
  }
  if (slot1320.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1321, slot1119);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeList ::= {Type layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot1321() {
  if (slot1319.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExclusiveOrExpression
private final int slot1338() {
  Set<Integer> set = slot1338.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1338.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1338.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1338.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1338.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExclusiveOrExpression ::= . ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression
private final int slot1339() {
  if (!slot1338.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1339);
    return L0;
  }
  if (slot1339.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1340, slot1338);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExclusiveOrExpression ::= ExclusiveOrExpression . layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression
private final int slot1340() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1340);
    return L0;
  }
  if (slot1340.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1341, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] . \"^\" layout[\"Layout\"] AndExpression
private final int slot1341() {
if (slot1341.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 100);
  if (length < 0) {
    recordParseError(slot1341);
    return L0;
  }
  if (slot1341.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(100, ci, length);
  cn = slot1341.getNodeCreator().create(this, slot1342, cn, cr);
  return L0;
}

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" . layout[\"Layout\"] AndExpression
private final int slot1342() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1342);
    return L0;
  }
  if (slot1342.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1344, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] . AndExpression
private final int slot1344() {
  if (!slot1343.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1344);
    return L0;
  }
  if (slot1344.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1345, slot1343);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExclusiveOrExpression ::= ExclusiveOrExpression layout[\"Layout\"] \"^\" layout[\"Layout\"] AndExpression .
private final int slot1345() {
  if (slot1338.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExclusiveOrExpression ::= . AndExpression
private final int slot1346() {
  if (!slot1343.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1346);
    return L0;
  }
  if (slot1346.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1347, slot1343);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExclusiveOrExpression ::= AndExpression .
private final int slot1347() {
  if (slot1338.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AndExpression
private final int slot1343() {
  Set<Integer> set = slot1343.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1343.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1343.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1343.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1343.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AndExpression ::= . EqualityExpression
private final int slot2514() {
  if (!slot1348.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2514);
    return L0;
  }
  if (slot2514.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2515, slot1348);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AndExpression ::= EqualityExpression .
private final int slot2515() {
  if (slot1343.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AndExpression ::= . AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression
private final int slot2516() {
  if (!slot1343.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2516);
    return L0;
  }
  if (slot2516.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2517, slot1343);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AndExpression ::= AndExpression . layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression
private final int slot2517() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2517);
    return L0;
  }
  if (slot2517.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2518, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AndExpression ::= AndExpression layout[\"Layout\"] . \"&\" layout[\"Layout\"] EqualityExpression
private final int slot2518() {
if (slot2518.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 20);
  if (length < 0) {
    recordParseError(slot2518);
    return L0;
  }
  if (slot2518.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(20, ci, length);
  cn = slot2518.getNodeCreator().create(this, slot2519, cn, cr);
  return L0;
}

// AndExpression ::= AndExpression layout[\"Layout\"] \"&\" . layout[\"Layout\"] EqualityExpression
private final int slot2519() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2519);
    return L0;
  }
  if (slot2519.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2520, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AndExpression ::= AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] . EqualityExpression
private final int slot2520() {
  if (!slot1348.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2520);
    return L0;
  }
  if (slot2520.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2521, slot1348);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AndExpression ::= AndExpression layout[\"Layout\"] \"&\" layout[\"Layout\"] EqualityExpression .
private final int slot2521() {
  if (slot1343.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EqualityExpression
private final int slot1348() {
  Set<Integer> set = slot1348.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1348.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1348.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1348.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1348.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// EqualityExpression ::= . RelationalExpression
private final int slot1350() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1350);
    return L0;
  }
  if (slot1350.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1351, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= RelationalExpression .
private final int slot1351() {
  if (slot1348.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EqualityExpression ::= . EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression
private final int slot1352() {
  if (!slot1348.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1352);
    return L0;
  }
  if (slot1352.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1353, slot1348);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression . layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression
private final int slot1353() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1353);
    return L0;
  }
  if (slot1353.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1354, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] . \"!=\" layout[\"Layout\"] RelationalExpression
private final int slot1354() {
if (slot1354.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 101);
  if (length < 0) {
    recordParseError(slot1354);
    return L0;
  }
  if (slot1354.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(101, ci, length);
  cn = slot1354.getNodeCreator().create(this, slot1355, cn, cr);
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" . layout[\"Layout\"] RelationalExpression
private final int slot1355() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1355);
    return L0;
  }
  if (slot1355.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1356, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] . RelationalExpression
private final int slot1356() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1356);
    return L0;
  }
  if (slot1356.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1357, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"!=\" layout[\"Layout\"] RelationalExpression .
private final int slot1357() {
  if (slot1348.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// EqualityExpression ::= . EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression
private final int slot1358() {
  if (!slot1348.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1358);
    return L0;
  }
  if (slot1358.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1359, slot1348);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression . layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression
private final int slot1359() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1359);
    return L0;
  }
  if (slot1359.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1360, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] . \"==\" layout[\"Layout\"] RelationalExpression
private final int slot1360() {
if (slot1360.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 102);
  if (length < 0) {
    recordParseError(slot1360);
    return L0;
  }
  if (slot1360.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(102, ci, length);
  cn = slot1360.getNodeCreator().create(this, slot1361, cn, cr);
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" . layout[\"Layout\"] RelationalExpression
private final int slot1361() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1361);
    return L0;
  }
  if (slot1361.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1362, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] . RelationalExpression
private final int slot1362() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1362);
    return L0;
  }
  if (slot1362.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1363, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// EqualityExpression ::= EqualityExpression layout[\"Layout\"] \"==\" layout[\"Layout\"] RelationalExpression .
private final int slot1363() {
  if (slot1348.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RelationalExpression
private final int slot1349() {
  Set<Integer> set = slot1349.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1349.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1349.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1349.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1349.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// RelationalExpression ::= . ShiftExpression
private final int slot2203() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2203);
    return L0;
  }
  if (slot2203.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2204, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= ShiftExpression .
private final int slot2204() {
  if (slot1349.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression
private final int slot2205() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2205);
    return L0;
  }
  if (slot2205.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2206, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression
private final int slot2206() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2206);
    return L0;
  }
  if (slot2206.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2207, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"<=\" layout[\"Layout\"] ShiftExpression
private final int slot2207() {
if (slot2207.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 131);
  if (length < 0) {
    recordParseError(slot2207);
    return L0;
  }
  if (slot2207.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(131, ci, length);
  cn = slot2207.getNodeCreator().create(this, slot2208, cn, cr);
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" . layout[\"Layout\"] ShiftExpression
private final int slot2208() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2208);
    return L0;
  }
  if (slot2208.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2209, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] . ShiftExpression
private final int slot2209() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2209);
    return L0;
  }
  if (slot2209.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2210, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<=\" layout[\"Layout\"] ShiftExpression .
private final int slot2210() {
  if (slot1349.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression
private final int slot2211() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2211);
    return L0;
  }
  if (slot2211.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2212, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression
private final int slot2212() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2212);
    return L0;
  }
  if (slot2212.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2213, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \">=\" layout[\"Layout\"] ShiftExpression
private final int slot2213() {
if (slot2213.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 132);
  if (length < 0) {
    recordParseError(slot2213);
    return L0;
  }
  if (slot2213.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(132, ci, length);
  cn = slot2213.getNodeCreator().create(this, slot2214, cn, cr);
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" . layout[\"Layout\"] ShiftExpression
private final int slot2214() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2214);
    return L0;
  }
  if (slot2214.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2215, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] . ShiftExpression
private final int slot2215() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2215);
    return L0;
  }
  if (slot2215.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2216, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">=\" layout[\"Layout\"] ShiftExpression .
private final int slot2216() {
  if (slot1349.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType
private final int slot2217() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2217);
    return L0;
  }
  if (slot2217.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2218, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType
private final int slot2218() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2218);
    return L0;
  }
  if (slot2218.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2219, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"instanceof\" layout[\"Layout\"] ReferenceType
private final int slot2219() {
if (slot2219.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 66);
  if (length < 0) {
    recordParseError(slot2219);
    return L0;
  }
  if (slot2219.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(66, ci, length);
  cn = slot2219.getNodeCreator().create(this, slot2220, cn, cr);
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" . layout[\"Layout\"] ReferenceType
private final int slot2220() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2220);
    return L0;
  }
  if (slot2220.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2221, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] . ReferenceType
private final int slot2221() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2221);
    return L0;
  }
  if (slot2221.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2222, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"instanceof\" layout[\"Layout\"] ReferenceType .
private final int slot2222() {
  if (slot1349.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression
private final int slot2223() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2223);
    return L0;
  }
  if (slot2223.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2224, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression
private final int slot2224() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2224);
    return L0;
  }
  if (slot2224.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2225, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \">\" layout[\"Layout\"] ShiftExpression
private final int slot2225() {
if (slot2225.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 16);
  if (length < 0) {
    recordParseError(slot2225);
    return L0;
  }
  if (slot2225.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(16, ci, length);
  cn = slot2225.getNodeCreator().create(this, slot2226, cn, cr);
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" . layout[\"Layout\"] ShiftExpression
private final int slot2226() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2226);
    return L0;
  }
  if (slot2226.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2227, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] . ShiftExpression
private final int slot2227() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2227);
    return L0;
  }
  if (slot2227.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2228, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \">\" layout[\"Layout\"] ShiftExpression .
private final int slot2228() {
  if (slot1349.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// RelationalExpression ::= . RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression
private final int slot2229() {
  if (!slot1349.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2229);
    return L0;
  }
  if (slot2229.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2230, slot1349);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression . layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression
private final int slot2230() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2230);
    return L0;
  }
  if (slot2230.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2231, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] . \"<\" layout[\"Layout\"] ShiftExpression
private final int slot2231() {
if (slot2231.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 15);
  if (length < 0) {
    recordParseError(slot2231);
    return L0;
  }
  if (slot2231.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(15, ci, length);
  cn = slot2231.getNodeCreator().create(this, slot2232, cn, cr);
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" . layout[\"Layout\"] ShiftExpression
private final int slot2232() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2232);
    return L0;
  }
  if (slot2232.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2233, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] . ShiftExpression
private final int slot2233() {
  if (!slot1165.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2233);
    return L0;
  }
  if (slot2233.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2234, slot1165);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// RelationalExpression ::= RelationalExpression layout[\"Layout\"] \"<\" layout[\"Layout\"] ShiftExpression .
private final int slot2234() {
  if (slot1349.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InputCharacter*
private final int slot1364() {
  Set<Integer> set = slot1364.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1364.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1364.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1364.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1364.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InputCharacter* ::= . InputCharacter* InputCharacter
private final int slot1365() {
  if (!slot1364.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1365);
    return L0;
  }
  if (slot1365.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1366, slot1364);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InputCharacter* ::= InputCharacter* . InputCharacter
private final int slot1366() {
  if (!slot309.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1366);
    return L0;
  }
  if (slot1366.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1367, slot309);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InputCharacter* ::= InputCharacter* InputCharacter .
private final int slot1367() {
  if (slot1364.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InputCharacter* ::= .
private final int slot1368() {
  if (slot1364.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1364, ci, ci);
    sppfLookup.addPackedNode(node, slot1368, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassBodyDeclaration}*
private final int slot1369() {
  Set<Integer> set = slot1369.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1369.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1369.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1369.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1369.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ClassBodyDeclaration}* ::= . {ClassBodyDeclaration layout[\"Layout\"]}+
private final int slot1371() {
  if (!slot1370.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1371);
    return L0;
  }
  if (slot1371.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1372, slot1370);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassBodyDeclaration}* ::= {ClassBodyDeclaration layout[\"Layout\"]}+ .
private final int slot1372() {
  if (slot1369.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassBodyDeclaration}* ::= .
private final int slot1373() {
  if (slot1369.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1369, ci, ci);
    sppfLookup.addPackedNode(node, slot1373, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+
private final int slot1370() {
  Set<Integer> set = slot1370.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1370.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1370.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1370.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1370.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= . {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ClassBodyDeclaration
private final int slot1777() {
  if (!slot1370.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1777);
    return L0;
  }
  if (slot1777.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1778, slot1370);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] ClassBodyDeclaration
private final int slot1778() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1778);
    return L0;
  }
  if (slot1778.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1780, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . ClassBodyDeclaration
private final int slot1780() {
  if (!slot1779.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1780);
    return L0;
  }
  if (slot1780.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1781, slot1779);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= {ClassBodyDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] ClassBodyDeclaration .
private final int slot1781() {
  if (slot1370.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= . ClassBodyDeclaration
private final int slot1782() {
  if (!slot1779.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1782);
    return L0;
  }
  if (slot1782.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1783, slot1779);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ClassBodyDeclaration layout[\"Layout\"]}+ ::= ClassBodyDeclaration .
private final int slot1783() {
  if (slot1370.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier
private final int slot1374() {
  Set<Integer> set = slot1374.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1374.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1374.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1374.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1374.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// MethodModifier ::= . \"private\"
private final int slot1375() {
  if (slot1375.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 60);
  if (length < 0) {
    recordParseError(slot1375);
    return L0;
  }
  if (slot1375.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(60, ci, length);
  cn = slot1375.getNodeCreator().create(this, slot1376, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"private\" .
private final int slot1376() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"synchronized\"
private final int slot1377() {
  if (slot1377.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 63);
  if (length < 0) {
    recordParseError(slot1377);
    return L0;
  }
  if (slot1377.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(63, ci, length);
  cn = slot1377.getNodeCreator().create(this, slot1378, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"synchronized\" .
private final int slot1378() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"final\"
private final int slot1379() {
  if (slot1379.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 69);
  if (length < 0) {
    recordParseError(slot1379);
    return L0;
  }
  if (slot1379.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(69, ci, length);
  cn = slot1379.getNodeCreator().create(this, slot1380, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"final\" .
private final int slot1380() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"strictfp\"
private final int slot1381() {
  if (slot1381.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 39);
  if (length < 0) {
    recordParseError(slot1381);
    return L0;
  }
  if (slot1381.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(39, ci, length);
  cn = slot1381.getNodeCreator().create(this, slot1382, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"strictfp\" .
private final int slot1382() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"abstract\"
private final int slot1383() {
  if (slot1383.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 23);
  if (length < 0) {
    recordParseError(slot1383);
    return L0;
  }
  if (slot1383.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(23, ci, length);
  cn = slot1383.getNodeCreator().create(this, slot1384, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"abstract\" .
private final int slot1384() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"native\"
private final int slot1385() {
  if (slot1385.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 43);
  if (length < 0) {
    recordParseError(slot1385);
    return L0;
  }
  if (slot1385.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(43, ci, length);
  cn = slot1385.getNodeCreator().create(this, slot1386, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"native\" .
private final int slot1386() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"protected\"
private final int slot1387() {
  if (slot1387.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 46);
  if (length < 0) {
    recordParseError(slot1387);
    return L0;
  }
  if (slot1387.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(46, ci, length);
  cn = slot1387.getNodeCreator().create(this, slot1388, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"protected\" .
private final int slot1388() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . Annotation
private final int slot1389() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1389);
    return L0;
  }
  if (slot1389.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1390, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= Annotation .
private final int slot1390() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"public\"
private final int slot1391() {
  if (slot1391.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 24);
  if (length < 0) {
    recordParseError(slot1391);
    return L0;
  }
  if (slot1391.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(24, ci, length);
  cn = slot1391.getNodeCreator().create(this, slot1392, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"public\" .
private final int slot1392() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// MethodModifier ::= . \"static\"
private final int slot1393() {
  if (slot1393.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot1393);
    return L0;
  }
  if (slot1393.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot1393.getNodeCreator().create(this, slot1394, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// MethodModifier ::= \"static\" .
private final int slot1394() {
  if (slot1374.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StaticInitializer
private final int slot1395() {
  Set<Integer> set = slot1395.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1395.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1395.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1395.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1395.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StaticInitializer ::= . \"static\" layout[\"Layout\"] Block
private final int slot1396() {
if (slot1396.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 56);
  if (length < 0) {
    recordParseError(slot1396);
    return L0;
  }
  if (slot1396.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(56, ci, length);
  cn = slot1396.getNodeCreator().create(this, slot1397, cn, cr);
  return L0;
}

// StaticInitializer ::= \"static\" . layout[\"Layout\"] Block
private final int slot1397() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1397);
    return L0;
  }
  if (slot1397.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1398, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StaticInitializer ::= \"static\" layout[\"Layout\"] . Block
private final int slot1398() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1398);
    return L0;
  }
  if (slot1398.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1399, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StaticInitializer ::= \"static\" layout[\"Layout\"] Block .
private final int slot1399() {
  if (slot1395.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceBody
private final int slot1403() {
  Set<Integer> set = slot1403.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1403.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1403.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1403.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1403.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InterfaceBody ::= . \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"
private final int slot1404() {
if (slot1404.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 6);
  if (length < 0) {
    recordParseError(slot1404);
    return L0;
  }
  if (slot1404.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(6, ci, length);
  cn = slot1404.getNodeCreator().create(this, slot1405, cn, cr);
  return L0;
}

// InterfaceBody ::= \"{\" . layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"
private final int slot1405() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1405);
    return L0;
  }
  if (slot1405.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1407, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceBody ::= \"{\" layout[\"Layout\"] . {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\"
private final int slot1407() {
  if (!slot1406.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1407);
    return L0;
  }
  if (slot1407.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1408, slot1406);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* . layout[\"Layout\"] \"}\"
private final int slot1408() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1408);
    return L0;
  }
  if (slot1408.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1409, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] . \"}\"
private final int slot1409() {
  if (slot1409.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 7);
  if (length < 0) {
    recordParseError(slot1409);
    return L0;
  }
  if (slot1409.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(7, ci, length);
  cn = slot1409.getNodeCreator().create(this, slot1410, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceBody ::= \"{\" layout[\"Layout\"] {InterfaceMemberDeclaration}* layout[\"Layout\"] \"}\" .
private final int slot1410() {
  if (slot1403.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceMemberDeclaration}*
private final int slot1406() {
  Set<Integer> set = slot1406.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1406.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1406.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1406.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1406.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {InterfaceMemberDeclaration}* ::= .
private final int slot2659() {
  if (slot1406.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1406, ci, ci);
    sppfLookup.addPackedNode(node, slot2659, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceMemberDeclaration}* ::= . {InterfaceMemberDeclaration layout[\"Layout\"]}+
private final int slot2660() {
  if (!slot2325.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2660);
    return L0;
  }
  if (slot2660.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2661, slot2325);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceMemberDeclaration}* ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ .
private final int slot2661() {
  if (slot1406.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+
private final int slot1411() {
  Set<Integer> set = slot1411.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1411.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1411.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1411.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1411.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= . {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] AnnotationTypeElementDeclaration
private final int slot1412() {
  if (!slot1411.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1412);
    return L0;
  }
  if (slot1412.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1413, slot1411);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] AnnotationTypeElementDeclaration
private final int slot1413() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1413);
    return L0;
  }
  if (slot1413.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1414, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . AnnotationTypeElementDeclaration
private final int slot1414() {
  if (!slot1190.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1414);
    return L0;
  }
  if (slot1414.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1415, slot1190);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] AnnotationTypeElementDeclaration .
private final int slot1415() {
  if (slot1411.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= . AnnotationTypeElementDeclaration
private final int slot1416() {
  if (!slot1190.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1416);
    return L0;
  }
  if (slot1416.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1417, slot1190);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ ::= AnnotationTypeElementDeclaration .
private final int slot1417() {
  if (slot1411.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArgument
private final int slot1418() {
  Set<Integer> set = slot1418.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1418.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1418.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1418.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1418.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeArgument ::= . \"?\" layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
private final int slot1878() {
if (slot1878.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 76);
  if (length < 0) {
    recordParseError(slot1878);
    return L0;
  }
  if (slot1878.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(76, ci, length);
  cn = slot1878.getNodeCreator().create(this, slot1879, cn, cr);
  return L0;
}

// TypeArgument ::= \"?\" . layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
private final int slot1879() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1879);
    return L0;
  }
  if (slot1879.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1881, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArgument ::= \"?\" layout[\"Layout\"] . (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
private final int slot1881() {
  if (!slot1880.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1881);
    return L0;
  }
  if (slot1881.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1882, slot1880);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArgument ::= \"?\" layout[\"Layout\"] (( | \"extends\"\"super\") layout[\"Layout\"] Type)? .
private final int slot1882() {
  if (slot1418.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArgument ::= . Type
private final int slot1883() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1883);
    return L0;
  }
  if (slot1883.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1884, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArgument ::= Type .
private final int slot1884() {
  if (slot1418.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ImportDeclaration
private final int slot1429() {
  Set<Integer> set = slot1429.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1429.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1429.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1429.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1429.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ImportDeclaration ::= . \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1430() {
if (slot1430.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 45);
  if (length < 0) {
    recordParseError(slot1430);
    return L0;
  }
  if (slot1430.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(45, ci, length);
  cn = slot1430.getNodeCreator().create(this, slot1431, cn, cr);
  return L0;
}

// ImportDeclaration ::= \"import\" . layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1431() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1431);
    return L0;
  }
  if (slot1431.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1432, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] . \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1432() {
  if (!slot792.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1432);
    return L0;
  }
  if (slot1432.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1433, slot792);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? . layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1433() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1433);
    return L0;
  }
  if (slot1433.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1435, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1435() {
  if (!slot1434.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1435);
    return L0;
  }
  if (slot1435.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1436, slot1434);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ . layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1436() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1436);
    return L0;
  }
  if (slot1436.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1437, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] . (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\"
private final int slot1437() {
  if (!slot1114.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1437);
    return L0;
  }
  if (slot1437.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1438, slot1114);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? . layout[\"Layout\"] \";\"
private final int slot1438() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1438);
    return L0;
  }
  if (slot1438.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1439, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] . \";\"
private final int slot1439() {
  if (slot1439.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1439);
    return L0;
  }
  if (slot1439.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1439.getNodeCreator().create(this, slot1440, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ImportDeclaration ::= \"import\" layout[\"Layout\"] \"static\"? layout[\"Layout\"] {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] (\".\" layout[\"Layout\"] \"*\")? layout[\"Layout\"] \";\" .
private final int slot1440() {
  if (slot1429.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+
private final int slot1434() {
  Set<Integer> set = slot1434.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1434.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1434.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1434.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1434.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= . {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot2017() {
  if (!slot1434.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2017);
    return L0;
  }
  if (slot2017.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2018, slot1434);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot2018() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2018);
    return L0;
  }
  if (slot2018.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2019, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
private final int slot2019() {
if (slot2019.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot2019);
    return L0;
  }
  if (slot2019.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot2019.getNodeCreator().create(this, slot2020, cn, cr);
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
private final int slot2020() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2020);
    return L0;
  }
  if (slot2020.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2021, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
private final int slot2021() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2021);
    return L0;
  }
  if (slot2021.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2022, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
private final int slot2022() {
  if (slot1434.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= . Identifier
private final int slot2023() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2023);
    return L0;
  }
  if (slot2023.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2024, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Identifier layout[\"Layout\"] \".\" layout[\"Layout\"]}+ ::= Identifier .
private final int slot2024() {
  if (slot1434.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | \"extends\"\"super\")
private final int slot1441() {
  Set<Integer> set = slot1441.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1441.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1441.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1441.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1441.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | \"extends\"\"super\") ::= . \"super\"
private final int slot1442() {
  if (slot1442.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot1442);
    return L0;
  }
  if (slot1442.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot1442.getNodeCreator().create(this, slot1443, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ( | \"extends\"\"super\") ::= \"super\" .
private final int slot1443() {
  if (slot1441.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | \"extends\"\"super\") ::= . \"extends\"
private final int slot1444() {
  if (slot1444.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 72);
  if (length < 0) {
    recordParseError(slot1444);
    return L0;
  }
  if (slot1444.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(72, ci, length);
  cn = slot1444.getNodeCreator().create(this, slot1445, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ( | \"extends\"\"super\") ::= \"extends\" .
private final int slot1445() {
  if (slot1441.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ConstantExpression
private final int slot1460() {
  Set<Integer> set = slot1460.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1460.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1460.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1460.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1460.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ConstantExpression ::= . Expression
private final int slot1531() {
  if (!slot80.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1531);
    return L0;
  }
  if (slot1531.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1532, slot80);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ConstantExpression ::= Expression .
private final int slot1532() {
  if (slot1460.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeDeclaration
private final int slot1465() {
  Set<Integer> set = slot1465.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1465.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1465.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1465.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1465.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeDeclaration ::= . InterfaceDeclaration
private final int slot1466() {
  if (!slot1063.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1466);
    return L0;
  }
  if (slot1466.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1467, slot1063);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeDeclaration ::= InterfaceDeclaration .
private final int slot1467() {
  if (slot1465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeDeclaration ::= . \";\"
private final int slot1468() {
  if (slot1468.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1468);
    return L0;
  }
  if (slot1468.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1468.getNodeCreator().create(this, slot1469, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// TypeDeclaration ::= \";\" .
private final int slot1469() {
  if (slot1465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeDeclaration ::= . ClassDeclaration
private final int slot1470() {
  if (!slot68.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1470);
    return L0;
  }
  if (slot1470.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1471, slot68);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeDeclaration ::= ClassDeclaration .
private final int slot1471() {
  if (slot1465.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FloatingPointLiteral
private final int slot1475() {
  Set<Integer> set = slot1475.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1475.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1475.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1475.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1475.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FloatingPointLiteral ::= . HexadecimalFloatingPointLiteral
private final int slot1476() {
  if (!slot669.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1476);
    return L0;
  }
  if (slot1476.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1477, slot669);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FloatingPointLiteral ::= HexadecimalFloatingPointLiteral .
private final int slot1477() {
  if (slot1475.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// FloatingPointLiteral ::= . DecimalFloatingPointLiteral
private final int slot1478() {
  if (!slot248.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1478);
    return L0;
  }
  if (slot1478.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1479, slot248);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FloatingPointLiteral ::= DecimalFloatingPointLiteral .
private final int slot1479() {
  if (slot1475.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstantModifier}*
private final int slot1480() {
  Set<Integer> set = slot1480.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1480.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1480.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1480.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1480.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ConstantModifier}* ::= . {ConstantModifier layout[\"Layout\"]}+
private final int slot1481() {
  if (!slot326.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1481);
    return L0;
  }
  if (slot1481.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1482, slot326);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstantModifier}* ::= {ConstantModifier layout[\"Layout\"]}+ .
private final int slot1482() {
  if (slot1480.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstantModifier}* ::= .
private final int slot1483() {
  if (slot1480.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1480, ci, ci);
    sppfLookup.addPackedNode(node, slot1483, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpressionNotPlusMinus
private final int slot1488() {
  Set<Integer> set = slot1488.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1488.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1488.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1488.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1488.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= . CastExpression
private final int slot1490() {
  if (!slot1489.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1490);
    return L0;
  }
  if (slot1490.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1491, slot1489);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= CastExpression .
private final int slot1491() {
  if (slot1488.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= . PostfixExpression
private final int slot1492() {
  if (!slot465.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1492);
    return L0;
  }
  if (slot1492.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1493, slot465);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= PostfixExpression .
private final int slot1493() {
  if (slot1488.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= . \"~\" layout[\"Layout\"] UnaryExpression
private final int slot1494() {
if (slot1494.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 104);
  if (length < 0) {
    recordParseError(slot1494);
    return L0;
  }
  if (slot1494.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(104, ci, length);
  cn = slot1494.getNodeCreator().create(this, slot1495, cn, cr);
  return L0;
}

// UnaryExpressionNotPlusMinus ::= \"~\" . layout[\"Layout\"] UnaryExpression
private final int slot1495() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1495);
    return L0;
  }
  if (slot1495.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1496, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= \"~\" layout[\"Layout\"] . UnaryExpression
private final int slot1496() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1496);
    return L0;
  }
  if (slot1496.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1497, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= \"~\" layout[\"Layout\"] UnaryExpression .
private final int slot1497() {
  if (slot1488.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= . \"!\" layout[\"Layout\"] UnaryExpression
private final int slot1498() {
if (slot1498.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 105);
  if (length < 0) {
    recordParseError(slot1498);
    return L0;
  }
  if (slot1498.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(105, ci, length);
  cn = slot1498.getNodeCreator().create(this, slot1499, cn, cr);
  return L0;
}

// UnaryExpressionNotPlusMinus ::= \"!\" . layout[\"Layout\"] UnaryExpression
private final int slot1499() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1499);
    return L0;
  }
  if (slot1499.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1500, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= \"!\" layout[\"Layout\"] . UnaryExpression
private final int slot1500() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1500);
    return L0;
  }
  if (slot1500.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1501, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// UnaryExpressionNotPlusMinus ::= \"!\" layout[\"Layout\"] UnaryExpression .
private final int slot1501() {
  if (slot1488.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CastExpression
private final int slot1489() {
  Set<Integer> set = slot1489.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1489.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1489.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1489.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1489.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CastExpression ::= . \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
private final int slot1894() {
if (slot1894.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1894);
    return L0;
  }
  if (slot1894.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1894.getNodeCreator().create(this, slot1895, cn, cr);
  return L0;
}

// CastExpression ::= \"(\" . layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
private final int slot1895() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1895);
    return L0;
  }
  if (slot1895.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1896, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] . ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
private final int slot1896() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1896);
    return L0;
  }
  if (slot1896.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1897, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType . layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
private final int slot1897() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1897);
    return L0;
  }
  if (slot1897.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1898, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] . \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus
private final int slot1898() {
if (slot1898.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1898);
    return L0;
  }
  if (slot1898.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1898.getNodeCreator().create(this, slot1899, cn, cr);
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" . layout[\"Layout\"] UnaryExpressionNotPlusMinus
private final int slot1899() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1899);
    return L0;
  }
  if (slot1899.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1900, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] . UnaryExpressionNotPlusMinus
private final int slot1900() {
  if (!slot1488.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1900);
    return L0;
  }
  if (slot1900.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1901, slot1488);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] ReferenceType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpressionNotPlusMinus .
private final int slot1901() {
  if (slot1489.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CastExpression ::= . \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
private final int slot1902() {
if (slot1902.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot1902);
    return L0;
  }
  if (slot1902.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot1902.getNodeCreator().create(this, slot1903, cn, cr);
  return L0;
}

// CastExpression ::= \"(\" . layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
private final int slot1903() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1903);
    return L0;
  }
  if (slot1903.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1904, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] . PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
private final int slot1904() {
  if (!slot1.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1904);
    return L0;
  }
  if (slot1904.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1905, slot1);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType . layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression
private final int slot1905() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1905);
    return L0;
  }
  if (slot1905.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1906, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] . \")\" layout[\"Layout\"] UnaryExpression
private final int slot1906() {
if (slot1906.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot1906);
    return L0;
  }
  if (slot1906.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot1906.getNodeCreator().create(this, slot1907, cn, cr);
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" . layout[\"Layout\"] UnaryExpression
private final int slot1907() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1907);
    return L0;
  }
  if (slot1907.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1908, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] . UnaryExpression
private final int slot1908() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1908);
    return L0;
  }
  if (slot1908.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1909, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CastExpression ::= \"(\" layout[\"Layout\"] PrimitiveType layout[\"Layout\"] \")\" layout[\"Layout\"] UnaryExpression .
private final int slot1909() {
  if (slot1489.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryNumeral
private final int slot1506() {
  Set<Integer> set = slot1506.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1506.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1506.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1506.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1506.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryNumeral ::= . [0] [B] BinaryDigits
private final int slot1510() {
if (slot1510.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot1510);
    return L0;
  }
  if (slot1510.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot1510.getNodeCreator().create(this, slot1511, cn, cr);
  return L0;
}

// BinaryNumeral ::= [0] . [B] BinaryDigits
private final int slot1511() {
if (slot1511.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 106);
  if (length < 0) {
    recordParseError(slot1511);
    return L0;
  }
  if (slot1511.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(106, ci, length);
  cn = slot1511.getNodeCreator().create(this, slot1513, cn, cr);
  return L0;
}

// BinaryNumeral ::= [0] [B] . BinaryDigits
private final int slot1513() {
  if (!slot1512.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1513);
    return L0;
  }
  if (slot1513.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1514, slot1512);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryNumeral ::= [0] [B] BinaryDigits .
private final int slot1514() {
  if (slot1506.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryNumeral ::= . [0] [b] BinaryDigits
private final int slot1515() {
if (slot1515.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot1515);
    return L0;
  }
  if (slot1515.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot1515.getNodeCreator().create(this, slot1516, cn, cr);
  return L0;
}

// BinaryNumeral ::= [0] . [b] BinaryDigits
private final int slot1516() {
if (slot1516.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 97);
  if (length < 0) {
    recordParseError(slot1516);
    return L0;
  }
  if (slot1516.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(97, ci, length);
  cn = slot1516.getNodeCreator().create(this, slot1517, cn, cr);
  return L0;
}

// BinaryNumeral ::= [0] [b] . BinaryDigits
private final int slot1517() {
  if (!slot1512.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1517);
    return L0;
  }
  if (slot1517.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1518, slot1512);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryNumeral ::= [0] [b] BinaryDigits .
private final int slot1518() {
  if (slot1506.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigits
private final int slot1512() {
  Set<Integer> set = slot1512.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1512.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1512.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1512.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1512.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryDigits ::= . BinaryDigit BinaryDigitOrUnderscore* BinaryDigit
private final int slot2443() {
  if (!slot922.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2443);
    return L0;
  }
  if (slot2443.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2444, slot922);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigits ::= BinaryDigit . BinaryDigitOrUnderscore* BinaryDigit
private final int slot2444() {
  if (!slot1861.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2444);
    return L0;
  }
  if (slot2444.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2445, slot1861);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* . BinaryDigit
private final int slot2445() {
  if (!slot922.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2445);
    return L0;
  }
  if (slot2445.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2446, slot922);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigits ::= BinaryDigit BinaryDigitOrUnderscore* BinaryDigit .
private final int slot2446() {
  if (slot1512.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigits ::= . BinaryDigit
private final int slot2447() {
  if (!slot922.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2447);
    return L0;
  }
  if (slot2447.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2448, slot922);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigits ::= BinaryDigit .
private final int slot2448() {
  if (slot1512.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// VariableModifier
private final int slot1519() {
  Set<Integer> set = slot1519.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1519.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1519.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1519.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1519.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// VariableModifier ::= . \"final\"
private final int slot1520() {
  if (slot1520.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 69);
  if (length < 0) {
    recordParseError(slot1520);
    return L0;
  }
  if (slot1520.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(69, ci, length);
  cn = slot1520.getNodeCreator().create(this, slot1521, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// VariableModifier ::= \"final\" .
private final int slot1521() {
  if (slot1519.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// VariableModifier ::= . Annotation
private final int slot1522() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1522);
    return L0;
  }
  if (slot1522.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1523, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// VariableModifier ::= Annotation .
private final int slot1523() {
  if (slot1519.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// SwitchBlockStatementGroup
private final int slot1526() {
  Set<Integer> set = slot1526.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1526.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1526.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1526.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1526.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// SwitchBlockStatementGroup ::= . {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+
private final int slot1527() {
  if (!slot291.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1527);
    return L0;
  }
  if (slot1527.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1528, slot291);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ . layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+
private final int slot1528() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1528);
    return L0;
  }
  if (slot1528.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1529, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] . {BlockStatement layout[\"Layout\"]}+
private final int slot1529() {
  if (!slot848.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1529);
    return L0;
  }
  if (slot1529.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1530, slot848);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SwitchBlockStatementGroup ::= {SwitchLabel layout[\"Layout\"]}+ layout[\"Layout\"] {BlockStatement layout[\"Layout\"]}+ .
private final int slot1530() {
  if (slot1526.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Assignment
private final int slot1539() {
  Set<Integer> set = slot1539.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1539.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1539.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1539.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1539.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Assignment ::= . LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression
private final int slot1541() {
  if (!slot1540.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1541);
    return L0;
  }
  if (slot1541.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1542, slot1540);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Assignment ::= LeftHandSide . layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression
private final int slot1542() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1542);
    return L0;
  }
  if (slot1542.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1544, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Assignment ::= LeftHandSide layout[\"Layout\"] . AssignmentOperator layout[\"Layout\"] AssignmentExpression
private final int slot1544() {
  if (!slot1543.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1544);
    return L0;
  }
  if (slot1544.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1545, slot1543);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator . layout[\"Layout\"] AssignmentExpression
private final int slot1545() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1545);
    return L0;
  }
  if (slot1545.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1547, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] . AssignmentExpression
private final int slot1547() {
  if (!slot1546.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1547);
    return L0;
  }
  if (slot1547.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1548, slot1546);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Assignment ::= LeftHandSide layout[\"Layout\"] AssignmentOperator layout[\"Layout\"] AssignmentExpression .
private final int slot1548() {
  if (slot1539.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LeftHandSide
private final int slot1540() {
  Set<Integer> set = slot1540.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1540.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1540.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1540.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1540.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// LeftHandSide ::= . \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\"
private final int slot2581() {
if (slot2581.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2581);
    return L0;
  }
  if (slot2581.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2581.getNodeCreator().create(this, slot2582, cn, cr);
  return L0;
}

// LeftHandSide ::= \"(\" . layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\"
private final int slot2582() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2582);
    return L0;
  }
  if (slot2582.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2583, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= \"(\" layout[\"Layout\"] . LeftHandSide layout[\"Layout\"] \")\"
private final int slot2583() {
  if (!slot1540.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2583);
    return L0;
  }
  if (slot2583.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2584, slot1540);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide . layout[\"Layout\"] \")\"
private final int slot2584() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2584);
    return L0;
  }
  if (slot2584.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2585, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] . \")\"
private final int slot2585() {
  if (slot2585.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2585);
    return L0;
  }
  if (slot2585.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2585.getNodeCreator().create(this, slot2586, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= \"(\" layout[\"Layout\"] LeftHandSide layout[\"Layout\"] \")\" .
private final int slot2586() {
  if (slot1540.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LeftHandSide ::= . FieldAccess
private final int slot2587() {
  if (!slot7.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2587);
    return L0;
  }
  if (slot2587.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2588, slot7);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= FieldAccess .
private final int slot2588() {
  if (slot1540.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LeftHandSide ::= . ExpressionName
private final int slot2589() {
  if (!slot85.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2589);
    return L0;
  }
  if (slot2589.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2590, slot85);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= ExpressionName .
private final int slot2590() {
  if (slot1540.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LeftHandSide ::= . ArrayAccess
private final int slot2591() {
  if (!slot74.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2591);
    return L0;
  }
  if (slot2591.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2592, slot74);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LeftHandSide ::= ArrayAccess .
private final int slot2592() {
  if (slot1540.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator
private final int slot1543() {
  Set<Integer> set = slot1543.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1543.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1543.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1543.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1543.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AssignmentOperator ::= . \"&=\"
private final int slot2128() {
  if (slot2128.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 117);
  if (length < 0) {
    recordParseError(slot2128);
    return L0;
  }
  if (slot2128.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(117, ci, length);
  cn = slot2128.getNodeCreator().create(this, slot2129, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"&=\" .
private final int slot2129() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"=\"
private final int slot2130() {
  if (slot2130.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 36);
  if (length < 0) {
    recordParseError(slot2130);
    return L0;
  }
  if (slot2130.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(36, ci, length);
  cn = slot2130.getNodeCreator().create(this, slot2131, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"=\" .
private final int slot2131() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \">>=\"
private final int slot2132() {
  if (slot2132.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 118);
  if (length < 0) {
    recordParseError(slot2132);
    return L0;
  }
  if (slot2132.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(118, ci, length);
  cn = slot2132.getNodeCreator().create(this, slot2133, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \">>=\" .
private final int slot2133() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"-=\"
private final int slot2134() {
  if (slot2134.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 119);
  if (length < 0) {
    recordParseError(slot2134);
    return L0;
  }
  if (slot2134.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(119, ci, length);
  cn = slot2134.getNodeCreator().create(this, slot2135, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"-=\" .
private final int slot2135() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"/=\"
private final int slot2136() {
  if (slot2136.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 120);
  if (length < 0) {
    recordParseError(slot2136);
    return L0;
  }
  if (slot2136.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(120, ci, length);
  cn = slot2136.getNodeCreator().create(this, slot2137, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"/=\" .
private final int slot2137() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"*=\"
private final int slot2138() {
  if (slot2138.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 121);
  if (length < 0) {
    recordParseError(slot2138);
    return L0;
  }
  if (slot2138.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(121, ci, length);
  cn = slot2138.getNodeCreator().create(this, slot2139, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"*=\" .
private final int slot2139() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"+=\"
private final int slot2140() {
  if (slot2140.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 122);
  if (length < 0) {
    recordParseError(slot2140);
    return L0;
  }
  if (slot2140.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(122, ci, length);
  cn = slot2140.getNodeCreator().create(this, slot2141, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"+=\" .
private final int slot2141() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"^=\"
private final int slot2142() {
  if (slot2142.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 123);
  if (length < 0) {
    recordParseError(slot2142);
    return L0;
  }
  if (slot2142.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(123, ci, length);
  cn = slot2142.getNodeCreator().create(this, slot2143, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"^=\" .
private final int slot2143() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"|=\"
private final int slot2144() {
  if (slot2144.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 124);
  if (length < 0) {
    recordParseError(slot2144);
    return L0;
  }
  if (slot2144.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(124, ci, length);
  cn = slot2144.getNodeCreator().create(this, slot2145, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"|=\" .
private final int slot2145() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \">>>=\"
private final int slot2146() {
  if (slot2146.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 125);
  if (length < 0) {
    recordParseError(slot2146);
    return L0;
  }
  if (slot2146.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(125, ci, length);
  cn = slot2146.getNodeCreator().create(this, slot2147, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \">>>=\" .
private final int slot2147() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"%=\"
private final int slot2148() {
  if (slot2148.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 126);
  if (length < 0) {
    recordParseError(slot2148);
    return L0;
  }
  if (slot2148.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(126, ci, length);
  cn = slot2148.getNodeCreator().create(this, slot2149, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"%=\" .
private final int slot2149() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentOperator ::= . \"<<=\"
private final int slot2150() {
  if (slot2150.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 127);
  if (length < 0) {
    recordParseError(slot2150);
    return L0;
  }
  if (slot2150.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(127, ci, length);
  cn = slot2150.getNodeCreator().create(this, slot2151, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// AssignmentOperator ::= \"<<=\" .
private final int slot2151() {
  if (slot1543.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentExpression
private final int slot1546() {
  Set<Integer> set = slot1546.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1546.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1546.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1546.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1546.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// AssignmentExpression ::= . Assignment
private final int slot1850() {
  if (!slot1539.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1850);
    return L0;
  }
  if (slot1850.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1851, slot1539);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AssignmentExpression ::= Assignment .
private final int slot1851() {
  if (slot1546.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// AssignmentExpression ::= . ConditionalExpression
private final int slot1852() {
  if (!slot826.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1852);
    return L0;
  }
  if (slot1852.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1853, slot826);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// AssignmentExpression ::= ConditionalExpression .
private final int slot1853() {
  if (slot1546.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassInstanceCreationExpression
private final int slot1555() {
  Set<Integer> set = slot1555.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1555.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1555.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1555.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1555.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassInstanceCreationExpression ::= . \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2250() {
if (slot2250.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 34);
  if (length < 0) {
    recordParseError(slot2250);
    return L0;
  }
  if (slot2250.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(34, ci, length);
  cn = slot2250.getNodeCreator().create(this, slot2251, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" . layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2251() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2251);
    return L0;
  }
  if (slot2251.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2252, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] . TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2252() {
  if (!slot445.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2252);
    return L0;
  }
  if (slot2252.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2253, slot445);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? . layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2253() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2253);
    return L0;
  }
  if (slot2253.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2254, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] . TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2254() {
  if (!slot442.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2254);
    return L0;
  }
  if (slot2254.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2255, slot442);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier . layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2255() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2255);
    return L0;
  }
  if (slot2255.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2257, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] . TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2257() {
  if (!slot2256.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2257);
    return L0;
  }
  if (slot2257.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2258, slot2256);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2258() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2258);
    return L0;
  }
  if (slot2258.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2259, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2259() {
if (slot2259.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2259);
    return L0;
  }
  if (slot2259.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2259.getNodeCreator().create(this, slot2260, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2260() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2260);
    return L0;
  }
  if (slot2260.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2261, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2261() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2261);
    return L0;
  }
  if (slot2261.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2262, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2262() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2262);
    return L0;
  }
  if (slot2262.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2263, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] ClassBody?
private final int slot2263() {
if (slot2263.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2263);
    return L0;
  }
  if (slot2263.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2263.getNodeCreator().create(this, slot2264, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] ClassBody?
private final int slot2264() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2264);
    return L0;
  }
  if (slot2264.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2265, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . ClassBody?
private final int slot2265() {
  if (!slot408.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2265);
    return L0;
  }
  if (slot2265.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2266, slot408);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] TypeDeclSpecifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody? .
private final int slot2266() {
  if (slot1555.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassInstanceCreationExpression ::= . ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2268() {
  if (!slot2267.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2268);
    return L0;
  }
  if (slot2268.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2269, slot2267);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) . layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2269() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2269);
    return L0;
  }
  if (slot2269.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2270, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] . \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2270() {
if (slot2270.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot2270);
    return L0;
  }
  if (slot2270.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot2270.getNodeCreator().create(this, slot2271, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" . layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2271() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2271);
    return L0;
  }
  if (slot2271.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2272, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] . \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2272() {
if (slot2272.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 34);
  if (length < 0) {
    recordParseError(slot2272);
    return L0;
  }
  if (slot2272.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(34, ci, length);
  cn = slot2272.getNodeCreator().create(this, slot2273, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" . layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2273() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2273);
    return L0;
  }
  if (slot2273.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2274, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] . TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2274() {
  if (!slot445.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2274);
    return L0;
  }
  if (slot2274.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2275, slot445);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2275() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2275);
    return L0;
  }
  if (slot2275.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2276, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2276() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2276);
    return L0;
  }
  if (slot2276.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2277, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2277() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2277);
    return L0;
  }
  if (slot2277.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2278, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2278() {
  if (!slot2256.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2278);
    return L0;
  }
  if (slot2278.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2279, slot2256);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? . layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2279() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2279);
    return L0;
  }
  if (slot2279.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2280, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] . \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2280() {
if (slot2280.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2280);
    return L0;
  }
  if (slot2280.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2280.getNodeCreator().create(this, slot2281, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" . layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2281() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2281);
    return L0;
  }
  if (slot2281.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2282, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] . ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2282() {
  if (!slot135.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2282);
    return L0;
  }
  if (slot2282.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2283, slot135);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? . layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody?
private final int slot2283() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2283);
    return L0;
  }
  if (slot2283.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2284, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] . \")\" layout[\"Layout\"] ClassBody?
private final int slot2284() {
if (slot2284.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2284);
    return L0;
  }
  if (slot2284.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2284.getNodeCreator().create(this, slot2285, cn, cr);
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" . layout[\"Layout\"] ClassBody?
private final int slot2285() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2285);
    return L0;
  }
  if (slot2285.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2286, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] . ClassBody?
private final int slot2286() {
  if (!slot408.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2286);
    return L0;
  }
  if (slot2286.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2287, slot408);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassInstanceCreationExpression ::= ( | PrimaryQualifiedIdentifier) layout[\"Layout\"] \".\" layout[\"Layout\"] \"new\" layout[\"Layout\"] TypeArguments? layout[\"Layout\"] Identifier layout[\"Layout\"] TypeArgumentsOrDiamond? layout[\"Layout\"] \"(\" layout[\"Layout\"] ArgumentList? layout[\"Layout\"] \")\" layout[\"Layout\"] ClassBody? .
private final int slot2287() {
  if (slot1555.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PreIncrementExpression
private final int slot1558() {
  Set<Integer> set = slot1558.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1558.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1558.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1558.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1558.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PreIncrementExpression ::= . \"++\" layout[\"Layout\"] UnaryExpression
private final int slot2537() {
if (slot2537.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 25);
  if (length < 0) {
    recordParseError(slot2537);
    return L0;
  }
  if (slot2537.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(25, ci, length);
  cn = slot2537.getNodeCreator().create(this, slot2538, cn, cr);
  return L0;
}

// PreIncrementExpression ::= \"++\" . layout[\"Layout\"] UnaryExpression
private final int slot2538() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2538);
    return L0;
  }
  if (slot2538.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2539, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PreIncrementExpression ::= \"++\" layout[\"Layout\"] . UnaryExpression
private final int slot2539() {
  if (!slot764.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2539);
    return L0;
  }
  if (slot2539.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2540, slot764);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PreIncrementExpression ::= \"++\" layout[\"Layout\"] UnaryExpression .
private final int slot2540() {
  if (slot1558.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Literal
private final int slot1565() {
  Set<Integer> set = slot1565.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1565.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1565.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1565.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1565.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Literal ::= . CharacterLiteral
private final int slot1567() {
  if (!slot1566.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1567);
    return L0;
  }
  if (slot1567.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1568, slot1566);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Literal ::= CharacterLiteral .
private final int slot1568() {
  if (slot1565.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Literal ::= . NullLiteral
private final int slot1570() {
  if (!slot1569.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1570);
    return L0;
  }
  if (slot1570.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1571, slot1569);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Literal ::= NullLiteral .
private final int slot1571() {
  if (slot1565.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Literal ::= . IntegerLiteral
private final int slot1572() {
  if (!slot216.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1572);
    return L0;
  }
  if (slot1572.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1573, slot216);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Literal ::= IntegerLiteral .
private final int slot1573() {
  if (slot1565.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Literal ::= . StringLiteral
private final int slot1575() {
  if (!slot1574.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1575);
    return L0;
  }
  if (slot1575.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1576, slot1574);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Literal ::= StringLiteral .
private final int slot1576() {
  if (slot1565.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Literal ::= . BooleanLiteral
private final int slot1577() {
  if (!slot381.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1577);
    return L0;
  }
  if (slot1577.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1578, slot381);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Literal ::= BooleanLiteral .
private final int slot1578() {
  if (slot1565.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Literal ::= . FloatingPointLiteral
private final int slot1579() {
  if (!slot1475.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1579);
    return L0;
  }
  if (slot1579.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1580, slot1475);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Literal ::= FloatingPointLiteral .
private final int slot1580() {
  if (slot1565.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CharacterLiteral
private final int slot1566() {
  Set<Integer> set = slot1566.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1566.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1566.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1566.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1566.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CharacterLiteral ::= . [\\'] SingleCharacter [\\']
private final int slot2025() {
if (slot2025.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 94);
  if (length < 0) {
    recordParseError(slot2025);
    return L0;
  }
  if (slot2025.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(94, ci, length);
  cn = slot2025.getNodeCreator().create(this, slot2027, cn, cr);
  return L0;
}

// CharacterLiteral ::= [\\'] . SingleCharacter [\\']
private final int slot2027() {
  if (!slot2026.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2027);
    return L0;
  }
  if (slot2027.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2028, slot2026);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CharacterLiteral ::= [\\'] SingleCharacter . [\\']
private final int slot2028() {
  if (slot2028.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 94);
  if (length < 0) {
    recordParseError(slot2028);
    return L0;
  }
  if (slot2028.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(94, ci, length);
  cn = slot2028.getNodeCreator().create(this, slot2029, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// CharacterLiteral ::= [\\'] SingleCharacter [\\'] .
private final int slot2029() {
  if (slot1566.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CharacterLiteral ::= . [\\'] EscapeSequence [\\']
private final int slot2030() {
if (slot2030.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 94);
  if (length < 0) {
    recordParseError(slot2030);
    return L0;
  }
  if (slot2030.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(94, ci, length);
  cn = slot2030.getNodeCreator().create(this, slot2031, cn, cr);
  return L0;
}

// CharacterLiteral ::= [\\'] . EscapeSequence [\\']
private final int slot2031() {
  if (!slot312.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2031);
    return L0;
  }
  if (slot2031.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2032, slot312);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CharacterLiteral ::= [\\'] EscapeSequence . [\\']
private final int slot2032() {
  if (slot2032.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 94);
  if (length < 0) {
    recordParseError(slot2032);
    return L0;
  }
  if (slot2032.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(94, ci, length);
  cn = slot2032.getNodeCreator().create(this, slot2033, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// CharacterLiteral ::= [\\'] EscapeSequence [\\'] .
private final int slot2033() {
  if (slot1566.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NullLiteral
private final int slot1569() {
  Set<Integer> set = slot1569.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1569.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1569.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1569.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1569.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NullLiteral ::= . \"null\"
private final int slot1620() {
  if (slot1620.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 107);
  if (length < 0) {
    recordParseError(slot1620);
    return L0;
  }
  if (slot1620.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(107, ci, length);
  cn = slot1620.getNodeCreator().create(this, slot1621, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// NullLiteral ::= \"null\" .
private final int slot1621() {
  if (slot1569.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StringLiteral
private final int slot1574() {
  Set<Integer> set = slot1574.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1574.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1574.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1574.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1574.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StringLiteral ::= . [\\\"] StringCharacter* [\\\"]
private final int slot2345() {
if (slot2345.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 93);
  if (length < 0) {
    recordParseError(slot2345);
    return L0;
  }
  if (slot2345.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(93, ci, length);
  cn = slot2345.getNodeCreator().create(this, slot2347, cn, cr);
  return L0;
}

// StringLiteral ::= [\\\"] . StringCharacter* [\\\"]
private final int slot2347() {
  if (!slot2346.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2347);
    return L0;
  }
  if (slot2347.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2348, slot2346);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StringLiteral ::= [\\\"] StringCharacter* . [\\\"]
private final int slot2348() {
  if (slot2348.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 93);
  if (length < 0) {
    recordParseError(slot2348);
    return L0;
  }
  if (slot2348.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(93, ci, length);
  cn = slot2348.getNodeCreator().create(this, slot2349, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// StringLiteral ::= [\\\"] StringCharacter* [\\\"] .
private final int slot2349() {
  if (slot1574.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+
private final int slot1581() {
  Set<Integer> set = slot1581.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1581.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1581.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1581.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1581.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+ ::= . {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstructorModifier
private final int slot2424() {
  if (!slot1581.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2424);
    return L0;
  }
  if (slot2424.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2425, slot1581);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ . layout[\"Layout\"] ConstructorModifier
private final int slot2425() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2425);
    return L0;
  }
  if (slot2425.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2426, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] . ConstructorModifier
private final int slot2426() {
  if (!slot806.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2426);
    return L0;
  }
  if (slot2426.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2427, slot806);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+ ::= {ConstructorModifier layout[\"Layout\"]}+ layout[\"Layout\"] ConstructorModifier .
private final int slot2427() {
  if (slot1581.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+ ::= . ConstructorModifier
private final int slot2428() {
  if (!slot806.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2428);
    return L0;
  }
  if (slot2428.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2429, slot806);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ConstructorModifier layout[\"Layout\"]}+ ::= ConstructorModifier .
private final int slot2429() {
  if (slot1581.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression)?
private final int slot1585() {
  Set<Integer> set = slot1585.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1585.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1585.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1585.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1585.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression)? ::= . (\":\" layout[\"Layout\"] Expression)
private final int slot1586() {
  if (!slot94.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1586);
    return L0;
  }
  if (slot1586.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1587, slot94);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression)? ::= (\":\" layout[\"Layout\"] Expression) .
private final int slot1587() {
  if (slot1585.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\":\" layout[\"Layout\"] Expression)? ::= .
private final int slot1588() {
  if (slot1585.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1585, ci, ci);
    sppfLookup.addPackedNode(node, slot1588, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {AnnotationTypeElementDeclaration}*
private final int slot1599() {
  Set<Integer> set = slot1599.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1599.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1599.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1599.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1599.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {AnnotationTypeElementDeclaration}* ::= .
private final int slot1697() {
  if (slot1599.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1599, ci, ci);
    sppfLookup.addPackedNode(node, slot1697, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {AnnotationTypeElementDeclaration}* ::= . {AnnotationTypeElementDeclaration layout[\"Layout\"]}+
private final int slot1698() {
  if (!slot1411.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1698);
    return L0;
  }
  if (slot1698.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1699, slot1411);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {AnnotationTypeElementDeclaration}* ::= {AnnotationTypeElementDeclaration layout[\"Layout\"]}+ .
private final int slot1699() {
  if (slot1599.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier)
private final int slot1604() {
  Set<Integer> set = slot1604.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1604.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1604.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1604.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1604.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= . TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot1605() {
  if (!slot445.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1605);
    return L0;
  }
  if (slot1605.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1606, slot445);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? . layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier
private final int slot1606() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1606);
    return L0;
  }
  if (slot1606.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1607, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] . \".\" layout[\"Layout\"] Identifier
private final int slot1607() {
if (slot1607.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 3);
  if (length < 0) {
    recordParseError(slot1607);
    return L0;
  }
  if (slot1607.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(3, ci, length);
  cn = slot1607.getNodeCreator().create(this, slot1608, cn, cr);
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" . layout[\"Layout\"] Identifier
private final int slot1608() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1608);
    return L0;
  }
  if (slot1608.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1609, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] . Identifier
private final int slot1609() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1609);
    return L0;
  }
  if (slot1609.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1610, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier) ::= TypeArguments? layout[\"Layout\"] \".\" layout[\"Layout\"] Identifier .
private final int slot1610() {
  if (slot1604.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitGenericInvocationSuffix
private final int slot1611() {
  Set<Integer> set = slot1611.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1611.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1611.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1611.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1611.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= . \"super\" layout[\"Layout\"] SuperSuffix
private final int slot1612() {
if (slot1612.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 2);
  if (length < 0) {
    recordParseError(slot1612);
    return L0;
  }
  if (slot1612.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(2, ci, length);
  cn = slot1612.getNodeCreator().create(this, slot1613, cn, cr);
  return L0;
}

// ExplicitGenericInvocationSuffix ::= \"super\" . layout[\"Layout\"] SuperSuffix
private final int slot1613() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1613);
    return L0;
  }
  if (slot1613.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1614, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= \"super\" layout[\"Layout\"] . SuperSuffix
private final int slot1614() {
  if (!slot1009.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1614);
    return L0;
  }
  if (slot1614.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1615, slot1009);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= \"super\" layout[\"Layout\"] SuperSuffix .
private final int slot1615() {
  if (slot1611.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= . Identifier layout[\"Layout\"] Arguments
private final int slot1616() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1616);
    return L0;
  }
  if (slot1616.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1617, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= Identifier . layout[\"Layout\"] Arguments
private final int slot1617() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1617);
    return L0;
  }
  if (slot1617.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1618, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= Identifier layout[\"Layout\"] . Arguments
private final int slot1618() {
  if (!slot1016.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1618);
    return L0;
  }
  if (slot1618.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1619, slot1016);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ExplicitGenericInvocationSuffix ::= Identifier layout[\"Layout\"] Arguments .
private final int slot1619() {
  if (slot1611.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceMemberDeclaration
private final int slot1631() {
  Set<Integer> set = slot1631.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1631.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1631.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1631.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1631.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InterfaceMemberDeclaration ::= . InterfaceDeclaration
private final int slot1632() {
  if (!slot1063.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1632);
    return L0;
  }
  if (slot1632.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1633, slot1063);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceMemberDeclaration ::= InterfaceDeclaration .
private final int slot1633() {
  if (slot1631.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceMemberDeclaration ::= . ConstantDeclaration
private final int slot1634() {
  if (!slot1195.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1634);
    return L0;
  }
  if (slot1634.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1635, slot1195);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceMemberDeclaration ::= ConstantDeclaration .
private final int slot1635() {
  if (slot1631.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceMemberDeclaration ::= . \";\"
private final int slot1636() {
  if (slot1636.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1636);
    return L0;
  }
  if (slot1636.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1636.getNodeCreator().create(this, slot1637, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// InterfaceMemberDeclaration ::= \";\" .
private final int slot1637() {
  if (slot1631.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceMemberDeclaration ::= . AbstractMethodDeclaration
private final int slot1638() {
  if (!slot1229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1638);
    return L0;
  }
  if (slot1638.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1639, slot1229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceMemberDeclaration ::= AbstractMethodDeclaration .
private final int slot1639() {
  if (slot1631.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// InterfaceMemberDeclaration ::= . ClassDeclaration
private final int slot1640() {
  if (!slot68.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1640);
    return L0;
  }
  if (slot1640.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1641, slot68);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InterfaceMemberDeclaration ::= ClassDeclaration .
private final int slot1641() {
  if (slot1631.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchLabel}*
private final int slot1642() {
  Set<Integer> set = slot1642.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1642.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1642.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1642.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1642.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {SwitchLabel}* ::= . {SwitchLabel layout[\"Layout\"]}+
private final int slot1643() {
  if (!slot291.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1643);
    return L0;
  }
  if (slot1643.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1644, slot291);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchLabel}* ::= {SwitchLabel layout[\"Layout\"]}+ .
private final int slot1644() {
  if (slot1642.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchLabel}* ::= .
private final int slot1645() {
  if (slot1642.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1642, ci, ci);
    sppfLookup.addPackedNode(node, slot1645, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+
private final int slot1646() {
  Set<Integer> set = slot1646.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1646.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1646.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1646.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1646.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+ ::= . VariableModifier
private final int slot1668() {
  if (!slot1519.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1668);
    return L0;
  }
  if (slot1668.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1669, slot1519);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+ ::= VariableModifier .
private final int slot1669() {
  if (slot1646.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+ ::= . {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] VariableModifier
private final int slot1670() {
  if (!slot1646.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1670);
    return L0;
  }
  if (slot1670.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1671, slot1646);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ . layout[\"Layout\"] VariableModifier
private final int slot1671() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1671);
    return L0;
  }
  if (slot1671.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1672, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] . VariableModifier
private final int slot1672() {
  if (!slot1519.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1672);
    return L0;
  }
  if (slot1672.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1673, slot1519);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableModifier layout[\"Layout\"]}+ ::= {VariableModifier layout[\"Layout\"]}+ layout[\"Layout\"] VariableModifier .
private final int slot1673() {
  if (slot1646.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList)
private final int slot1657() {
  Set<Integer> set = slot1657.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1657.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1657.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1657.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1657.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList) ::= . \"implements\" layout[\"Layout\"] TypeList
private final int slot1658() {
if (slot1658.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 47);
  if (length < 0) {
    recordParseError(slot1658);
    return L0;
  }
  if (slot1658.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(47, ci, length);
  cn = slot1658.getNodeCreator().create(this, slot1659, cn, cr);
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" . layout[\"Layout\"] TypeList
private final int slot1659() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1659);
    return L0;
  }
  if (slot1659.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1660, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" layout[\"Layout\"] . TypeList
private final int slot1660() {
  if (!slot1319.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1660);
    return L0;
  }
  if (slot1660.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1661, slot1319);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"implements\" layout[\"Layout\"] TypeList) ::= \"implements\" layout[\"Layout\"] TypeList .
private final int slot1661() {
  if (slot1657.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"[\" layout[\"Layout\"] \"]\")
private final int slot1674() {
  Set<Integer> set = slot1674.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1674.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1674.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1674.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1674.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"[\" layout[\"Layout\"] \"]\") ::= . \"[\" layout[\"Layout\"] \"]\"
private final int slot1675() {
if (slot1675.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 8);
  if (length < 0) {
    recordParseError(slot1675);
    return L0;
  }
  if (slot1675.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(8, ci, length);
  cn = slot1675.getNodeCreator().create(this, slot1676, cn, cr);
  return L0;
}

// (\"[\" layout[\"Layout\"] \"]\") ::= \"[\" . layout[\"Layout\"] \"]\"
private final int slot1676() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1676);
    return L0;
  }
  if (slot1676.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1677, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"[\" layout[\"Layout\"] \"]\") ::= \"[\" layout[\"Layout\"] . \"]\"
private final int slot1677() {
  if (slot1677.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 9);
  if (length < 0) {
    recordParseError(slot1677);
    return L0;
  }
  if (slot1677.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(9, ci, length);
  cn = slot1677.getNodeCreator().create(this, slot1678, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// (\"[\" layout[\"Layout\"] \"]\") ::= \"[\" layout[\"Layout\"] \"]\" .
private final int slot1678() {
  if (slot1674.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally))
private final int slot1700() {
  Set<Integer> set = slot1700.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1700.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1700.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1700.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1700.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= . (CatchClause* layout[\"Layout\"] Finally)
private final int slot1702() {
  if (!slot1701.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1702);
    return L0;
  }
  if (slot1702.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1703, slot1701);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= (CatchClause* layout[\"Layout\"] Finally) .
private final int slot1703() {
  if (slot1700.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= . {CatchClause layout[\"Layout\"]}+
private final int slot1705() {
  if (!slot1704.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1705);
    return L0;
  }
  if (slot1705.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1706, slot1704);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | {CatchClause layout[\"Layout\"]}+(CatchClause* layout[\"Layout\"] Finally)) ::= {CatchClause layout[\"Layout\"]}+ .
private final int slot1706() {
  if (slot1700.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (CatchClause* layout[\"Layout\"] Finally)
private final int slot1701() {
  Set<Integer> set = slot1701.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1701.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1701.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1701.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1701.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (CatchClause* layout[\"Layout\"] Finally) ::= . {CatchClause}* layout[\"Layout\"] Finally
private final int slot2034() {
  if (!slot1738.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2034);
    return L0;
  }
  if (slot2034.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2035, slot1738);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* . layout[\"Layout\"] Finally
private final int slot2035() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2035);
    return L0;
  }
  if (slot2035.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2036, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* layout[\"Layout\"] . Finally
private final int slot2036() {
  if (!slot803.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2036);
    return L0;
  }
  if (slot2036.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2037, slot803);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (CatchClause* layout[\"Layout\"] Finally) ::= {CatchClause}* layout[\"Layout\"] Finally .
private final int slot2037() {
  if (slot1701.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+
private final int slot1704() {
  Set<Integer> set = slot1704.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1704.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1704.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1704.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1704.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+ ::= . {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] CatchClause
private final int slot2727() {
  if (!slot1704.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2727);
    return L0;
  }
  if (slot2727.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2728, slot1704);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ . layout[\"Layout\"] CatchClause
private final int slot2728() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2728);
    return L0;
  }
  if (slot2728.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2729, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] . CatchClause
private final int slot2729() {
  if (!slot2113.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2729);
    return L0;
  }
  if (slot2729.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2730, slot2113);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+ ::= {CatchClause layout[\"Layout\"]}+ layout[\"Layout\"] CatchClause .
private final int slot2730() {
  if (slot1704.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+ ::= . CatchClause
private final int slot2731() {
  if (!slot2113.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2731);
    return L0;
  }
  if (slot2731.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2732, slot2113);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {CatchClause layout[\"Layout\"]}+ ::= CatchClause .
private final int slot2732() {
  if (slot1704.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+
private final int slot1722() {
  Set<Integer> set = slot1722.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1722.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1722.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1722.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1722.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= . {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] SwitchBlockStatementGroup
private final int slot1723() {
  if (!slot1722.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1723);
    return L0;
  }
  if (slot1723.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1724, slot1722);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ . layout[\"Layout\"] SwitchBlockStatementGroup
private final int slot1724() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1724);
    return L0;
  }
  if (slot1724.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1725, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] . SwitchBlockStatementGroup
private final int slot1725() {
  if (!slot1526.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1725);
    return L0;
  }
  if (slot1725.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1726, slot1526);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ layout[\"Layout\"] SwitchBlockStatementGroup .
private final int slot1726() {
  if (slot1722.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= . SwitchBlockStatementGroup
private final int slot1727() {
  if (!slot1526.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1727);
    return L0;
  }
  if (slot1727.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1728, slot1526);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchBlockStatementGroup layout[\"Layout\"]}+ ::= SwitchBlockStatementGroup .
private final int slot1728() {
  if (slot1722.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CommentTail
private final int slot1729() {
  Set<Integer> set = slot1729.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1729.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1729.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1729.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1729.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CommentTail ::= . \"*\" CommentTailStar
private final int slot1730() {
if (slot1730.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 109);
  if (length < 0) {
    recordParseError(slot1730);
    return L0;
  }
  if (slot1730.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(109, ci, length);
  cn = slot1730.getNodeCreator().create(this, slot1732, cn, cr);
  return L0;
}

// CommentTail ::= \"*\" . CommentTailStar
private final int slot1732() {
  if (!slot1731.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1732);
    return L0;
  }
  if (slot1732.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1733, slot1731);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CommentTail ::= \"*\" CommentTailStar .
private final int slot1733() {
  if (slot1729.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CommentTail ::= . NotStar CommentTail
private final int slot1735() {
  if (!slot1734.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1735);
    return L0;
  }
  if (slot1735.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1736, slot1734);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CommentTail ::= NotStar . CommentTail
private final int slot1736() {
  if (!slot1729.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1736);
    return L0;
  }
  if (slot1736.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1737, slot1729);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CommentTail ::= NotStar CommentTail .
private final int slot1737() {
  if (slot1729.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CommentTailStar
private final int slot1731() {
  Set<Integer> set = slot1731.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1731.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1731.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1731.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1731.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CommentTailStar ::= . \"*\" CommentTailStar
private final int slot2593() {
if (slot2593.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 109);
  if (length < 0) {
    recordParseError(slot2593);
    return L0;
  }
  if (slot2593.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(109, ci, length);
  cn = slot2593.getNodeCreator().create(this, slot2594, cn, cr);
  return L0;
}

// CommentTailStar ::= \"*\" . CommentTailStar
private final int slot2594() {
  if (!slot1731.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2594);
    return L0;
  }
  if (slot2594.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2595, slot1731);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CommentTailStar ::= \"*\" CommentTailStar .
private final int slot2595() {
  if (slot1731.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CommentTailStar ::= . \"/\"
private final int slot2596() {
  if (slot2596.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 116);
  if (length < 0) {
    recordParseError(slot2596);
    return L0;
  }
  if (slot2596.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(116, ci, length);
  cn = slot2596.getNodeCreator().create(this, slot2597, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// CommentTailStar ::= \"/\" .
private final int slot2597() {
  if (slot1731.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CommentTailStar ::= . NotStarNotSlash CommentTail
private final int slot2598() {
  if (!slot2192.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2598);
    return L0;
  }
  if (slot2598.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2599, slot2192);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CommentTailStar ::= NotStarNotSlash . CommentTail
private final int slot2599() {
  if (!slot1729.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2599);
    return L0;
  }
  if (slot2599.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2600, slot1729);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CommentTailStar ::= NotStarNotSlash CommentTail .
private final int slot2600() {
  if (slot1731.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NotStar
private final int slot1734() {
  Set<Integer> set = slot1734.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1734.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1734.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1734.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1734.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NotStar ::= . InputCharacter
private final int slot2341() {
  if (!slot309.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2341);
    return L0;
  }
  if (slot2341.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2342, slot309);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NotStar ::= InputCharacter .
private final int slot2342() {
  if (slot1734.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NotStar ::= . LineTerminator
private final int slot2343() {
  if (!slot1784.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2343);
    return L0;
  }
  if (slot2343.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2344, slot1784);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NotStar ::= LineTerminator .
private final int slot2344() {
  if (slot1734.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {CatchClause}*
private final int slot1738() {
  Set<Integer> set = slot1738.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1738.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1738.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1738.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1738.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {CatchClause}* ::= .
private final int slot1739() {
  if (slot1738.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1738, ci, ci);
    sppfLookup.addPackedNode(node, slot1739, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {CatchClause}* ::= . {CatchClause layout[\"Layout\"]}+
private final int slot1740() {
  if (!slot1704.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1740);
    return L0;
  }
  if (slot1740.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1741, slot1704);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {CatchClause}* ::= {CatchClause layout[\"Layout\"]}+ .
private final int slot1741() {
  if (slot1738.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigitOrUnderscore
private final int slot1744() {
  Set<Integer> set = slot1744.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1744.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1744.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1744.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1744.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexDigitOrUnderscore ::= . HexDigit
private final int slot2013() {
  if (!slot354.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2013);
    return L0;
  }
  if (slot2013.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2014, slot354);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigitOrUnderscore ::= HexDigit .
private final int slot2014() {
  if (slot1744.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigitOrUnderscore ::= . [_]
private final int slot2015() {
  if (slot2015.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 5);
  if (length < 0) {
    recordParseError(slot2015);
    return L0;
  }
  if (slot2015.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(5, ci, length);
  cn = slot2015.getNodeCreator().create(this, slot2016, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// HexDigitOrUnderscore ::= [_] .
private final int slot2016() {
  if (slot1744.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot1747() {
  Set<Integer> set = slot1747.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1747.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1747.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1747.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1747.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType
private final int slot1748() {
  if (!slot1747.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1748);
    return L0;
  }
  if (slot1748.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1749, slot1747);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType
private final int slot1749() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1749);
    return L0;
  }
  if (slot1749.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1750, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] ReferenceType
private final int slot1750() {
if (slot1750.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot1750);
    return L0;
  }
  if (slot1750.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot1750.getNodeCreator().create(this, slot1751, cn, cr);
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] ReferenceType
private final int slot1751() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1751);
    return L0;
  }
  if (slot1751.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1752, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . ReferenceType
private final int slot1752() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1752);
    return L0;
  }
  if (slot1752.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1753, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] ReferenceType .
private final int slot1753() {
  if (slot1747.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . ReferenceType
private final int slot1754() {
  if (!slot4.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1754);
    return L0;
  }
  if (slot1754.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1755, slot4);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {ReferenceType layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= ReferenceType .
private final int slot1755() {
  if (slot1747.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList)
private final int slot1765() {
  Set<Integer> set = slot1765.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1765.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1765.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1765.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1765.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList) ::= . \"extends\" layout[\"Layout\"] TypeList
private final int slot1766() {
if (slot1766.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 72);
  if (length < 0) {
    recordParseError(slot1766);
    return L0;
  }
  if (slot1766.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(72, ci, length);
  cn = slot1766.getNodeCreator().create(this, slot1767, cn, cr);
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" . layout[\"Layout\"] TypeList
private final int slot1767() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1767);
    return L0;
  }
  if (slot1767.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1768, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" layout[\"Layout\"] . TypeList
private final int slot1768() {
  if (!slot1319.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1768);
    return L0;
  }
  if (slot1768.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1769, slot1319);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList) ::= \"extends\" layout[\"Layout\"] TypeList .
private final int slot1769() {
  if (slot1765.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBodyDeclaration
private final int slot1779() {
  Set<Integer> set = slot1779.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1779.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1779.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1779.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1779.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassBodyDeclaration ::= . InstanceInitializer
private final int slot2633() {
  if (!slot2567.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2633);
    return L0;
  }
  if (slot2633.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2634, slot2567);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBodyDeclaration ::= InstanceInitializer .
private final int slot2634() {
  if (slot1779.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBodyDeclaration ::= . StaticInitializer
private final int slot2635() {
  if (!slot1395.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2635);
    return L0;
  }
  if (slot2635.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2636, slot1395);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBodyDeclaration ::= StaticInitializer .
private final int slot2636() {
  if (slot1779.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBodyDeclaration ::= . ClassMemberDeclaration
private final int slot2637() {
  if (!slot2570.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2637);
    return L0;
  }
  if (slot2637.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2638, slot2570);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBodyDeclaration ::= ClassMemberDeclaration .
private final int slot2638() {
  if (slot1779.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassBodyDeclaration ::= . ConstructorDeclaration
private final int slot2639() {
  if (!slot987.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2639);
    return L0;
  }
  if (slot2639.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2640, slot987);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassBodyDeclaration ::= ConstructorDeclaration .
private final int slot2640() {
  if (slot1779.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LineTerminator
private final int slot1784() {
  Set<Integer> set = slot1784.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1784.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1784.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1784.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1784.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// LineTerminator ::= . [\\r\\n]
private final int slot1785() {
  if (slot1785.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 110);
  if (length < 0) {
    recordParseError(slot1785);
    return L0;
  }
  if (slot1785.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(110, ci, length);
  cn = slot1785.getNodeCreator().create(this, slot1786, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// LineTerminator ::= [\\r\\n] .
private final int slot1786() {
  if (slot1784.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Identifier?
private final int slot1805() {
  Set<Integer> set = slot1805.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1805.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1805.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1805.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1805.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Identifier? ::= . Identifier
private final int slot1806() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1806);
    return L0;
  }
  if (slot1806.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1807, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Identifier? ::= Identifier .
private final int slot1807() {
  if (slot1805.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Identifier? ::= .
private final int slot1808() {
  if (slot1805.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1805, ci, ci);
    sppfLookup.addPackedNode(node, slot1808, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+
private final int slot1854() {
  Set<Integer> set = slot1854.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1854.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1854.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1854.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1854.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+ ::= . {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] MethodModifier
private final int slot1855() {
  if (!slot1854.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1855);
    return L0;
  }
  if (slot1855.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1856, slot1854);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ . layout[\"Layout\"] MethodModifier
private final int slot1856() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1856);
    return L0;
  }
  if (slot1856.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1857, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] . MethodModifier
private final int slot1857() {
  if (!slot1374.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1857);
    return L0;
  }
  if (slot1857.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1858, slot1374);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+ ::= {MethodModifier layout[\"Layout\"]}+ layout[\"Layout\"] MethodModifier .
private final int slot1858() {
  if (slot1854.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+ ::= . MethodModifier
private final int slot1859() {
  if (!slot1374.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1859);
    return L0;
  }
  if (slot1859.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1860, slot1374);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {MethodModifier layout[\"Layout\"]}+ ::= MethodModifier .
private final int slot1860() {
  if (slot1854.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigitOrUnderscore*
private final int slot1861() {
  Set<Integer> set = slot1861.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1861.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1861.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1861.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1861.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// BinaryDigitOrUnderscore* ::= .
private final int slot1862() {
  if (slot1861.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1861, ci, ci);
    sppfLookup.addPackedNode(node, slot1862, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// BinaryDigitOrUnderscore* ::= . BinaryDigitOrUnderscore* BinaryDigitOrUnderscore
private final int slot1863() {
  if (!slot1861.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1863);
    return L0;
  }
  if (slot1863.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1864, slot1861);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigitOrUnderscore* ::= BinaryDigitOrUnderscore* . BinaryDigitOrUnderscore
private final int slot1864() {
  if (!slot921.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1864);
    return L0;
  }
  if (slot1864.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1865, slot921);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// BinaryDigitOrUnderscore* ::= BinaryDigitOrUnderscore* BinaryDigitOrUnderscore .
private final int slot1865() {
  if (slot1861.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PackageDeclaration
private final int slot1869() {
  Set<Integer> set = slot1869.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1869.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1869.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1869.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1869.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PackageDeclaration ::= . {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
private final int slot1870() {
  if (!slot400.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1870);
    return L0;
  }
  if (slot1870.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1871, slot400);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration ::= {Annotation}* . layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
private final int slot1871() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1871);
    return L0;
  }
  if (slot1871.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1872, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] . \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
private final int slot1872() {
if (slot1872.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 44);
  if (length < 0) {
    recordParseError(slot1872);
    return L0;
  }
  if (slot1872.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(44, ci, length);
  cn = slot1872.getNodeCreator().create(this, slot1873, cn, cr);
  return L0;
}

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" . layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\"
private final int slot1873() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1873);
    return L0;
  }
  if (slot1873.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1874, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] . QualifiedIdentifier layout[\"Layout\"] \";\"
private final int slot1874() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1874);
    return L0;
  }
  if (slot1874.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1875, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier . layout[\"Layout\"] \";\"
private final int slot1875() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot1875);
    return L0;
  }
  if (slot1875.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot1876, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] . \";\"
private final int slot1876() {
  if (slot1876.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot1876);
    return L0;
  }
  if (slot1876.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot1876.getNodeCreator().create(this, slot1877, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration ::= {Annotation}* layout[\"Layout\"] \"package\" layout[\"Layout\"] QualifiedIdentifier layout[\"Layout\"] \";\" .
private final int slot1877() {
  if (slot1869.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)?
private final int slot1880() {
  Set<Integer> set = slot1880.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1880.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1880.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1880.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1880.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= .
private final int slot2676() {
  if (slot1880.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1880, ci, ci);
    sppfLookup.addPackedNode(node, slot2676, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= . (( | \"extends\"\"super\") layout[\"Layout\"] Type)
private final int slot2677() {
  if (!slot2056.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2677);
    return L0;
  }
  if (slot2677.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2678, slot2056);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)? ::= (( | \"extends\"\"super\") layout[\"Layout\"] Type) .
private final int slot2678() {
  if (slot1880.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchBlockStatementGroup}*
private final int slot1942() {
  Set<Integer> set = slot1942.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot1942.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot1942.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot1942.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot1942.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {SwitchBlockStatementGroup}* ::= . {SwitchBlockStatementGroup layout[\"Layout\"]}+
private final int slot2626() {
  if (!slot1722.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2626);
    return L0;
  }
  if (slot2626.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2627, slot1722);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {SwitchBlockStatementGroup}* ::= {SwitchBlockStatementGroup layout[\"Layout\"]}+ .
private final int slot2627() {
  if (slot1942.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {SwitchBlockStatementGroup}* ::= .
private final int slot2628() {
  if (slot1942.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot1942, ci, ci);
    sppfLookup.addPackedNode(node, slot2628, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// SingleCharacter
private final int slot2026() {
  Set<Integer> set = slot2026.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2026.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2026.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2026.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2026.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// SingleCharacter ::= . InputCharacter
private final int slot2645() {
  if (!slot309.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2645);
    return L0;
  }
  if (slot2645.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2646, slot309);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// SingleCharacter ::= InputCharacter .
private final int slot2646() {
  if (slot2026.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// layout[\"$default$\"]
private final int slot2038() {
  Set<Integer> set = slot2038.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2038.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2038.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2038.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2038.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// layout[\"$default$\"] ::= .
private final int slot2039() {
  if (slot2038.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2038, ci, ci);
    sppfLookup.addPackedNode(node, slot2039, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type)
private final int slot2056() {
  Set<Integer> set = slot2056.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2056.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2056.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2056.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2056.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= . ( | \"extends\"\"super\") layout[\"Layout\"] Type
private final int slot2057() {
  if (!slot1441.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2057);
    return L0;
  }
  if (slot2057.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2058, slot1441);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") . layout[\"Layout\"] Type
private final int slot2058() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2058);
    return L0;
  }
  if (slot2058.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2059, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") layout[\"Layout\"] . Type
private final int slot2059() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2059);
    return L0;
  }
  if (slot2059.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2060, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (( | \"extends\"\"super\") layout[\"Layout\"] Type) ::= ( | \"extends\"\"super\") layout[\"Layout\"] Type .
private final int slot2060() {
  if (slot2056.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// start[CompilationUnit]
private final int slot2061() {
  Set<Integer> set = slot2061.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2061.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2061.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2061.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2061.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// start[CompilationUnit] ::= . layout[\"Layout\"] CompilationUnit layout[\"Layout\"]
private final int slot2062() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2062);
    return L0;
  }
  if (slot2062.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2064, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// start[CompilationUnit] ::= layout[\"Layout\"] . CompilationUnit layout[\"Layout\"]
private final int slot2064() {
  if (!slot2063.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2064);
    return L0;
  }
  if (slot2064.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2065, slot2063);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// start[CompilationUnit] ::= layout[\"Layout\"] CompilationUnit . layout[\"Layout\"]
private final int slot2065() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2065);
    return L0;
  }
  if (slot2065.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2066, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// start[CompilationUnit] ::= layout[\"Layout\"] CompilationUnit layout[\"Layout\"] .
private final int slot2066() {
  if (slot2061.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CompilationUnit
private final int slot2063() {
  Set<Integer> set = slot2063.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2063.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2063.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2063.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2063.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CompilationUnit ::= . PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*
private final int slot2163() {
  if (!slot2162.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2163);
    return L0;
  }
  if (slot2163.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2164, slot2162);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CompilationUnit ::= PackageDeclaration? . layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*
private final int slot2164() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2164);
    return L0;
  }
  if (slot2164.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2165, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] . {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}*
private final int slot2165() {
  if (!slot1258.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2165);
    return L0;
  }
  if (slot2165.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2166, slot1258);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* . layout[\"Layout\"] {TypeDeclaration}*
private final int slot2166() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2166);
    return L0;
  }
  if (slot2166.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2167, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] . {TypeDeclaration}*
private final int slot2167() {
  if (!slot1131.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2167);
    return L0;
  }
  if (slot2167.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2168, slot1131);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CompilationUnit ::= PackageDeclaration? layout[\"Layout\"] {ImportDeclaration}* layout[\"Layout\"] {TypeDeclaration}* .
private final int slot2168() {
  if (slot2063.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+
private final int slot2067() {
  Set<Integer> set = slot2067.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2067.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2067.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2067.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2067.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+ ::= . {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] Annotation
private final int slot2068() {
  if (!slot2067.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2068);
    return L0;
  }
  if (slot2068.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2069, slot2067);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ . layout[\"Layout\"] Annotation
private final int slot2069() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2069);
    return L0;
  }
  if (slot2069.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2070, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] . Annotation
private final int slot2070() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2070);
    return L0;
  }
  if (slot2070.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2071, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+ ::= {Annotation layout[\"Layout\"]}+ layout[\"Layout\"] Annotation .
private final int slot2071() {
  if (slot2067.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+ ::= . Annotation
private final int slot2072() {
  if (!slot229.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2072);
    return L0;
  }
  if (slot2072.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2073, slot229);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {Annotation layout[\"Layout\"]}+ ::= Annotation .
private final int slot2073() {
  if (slot2067.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {MethodModifier}*
private final int slot2076() {
  Set<Integer> set = slot2076.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2076.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2076.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2076.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2076.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {MethodModifier}* ::= . {MethodModifier layout[\"Layout\"]}+
private final int slot2077() {
  if (!slot1854.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2077);
    return L0;
  }
  if (slot2077.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2078, slot1854);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {MethodModifier}* ::= {MethodModifier layout[\"Layout\"]}+ .
private final int slot2078() {
  if (slot2076.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {MethodModifier}* ::= .
private final int slot2079() {
  if (slot2076.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2076, ci, ci);
    sppfLookup.addPackedNode(node, slot2079, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// TypeBound
private final int slot2080() {
  Set<Integer> set = slot2080.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2080.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2080.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2080.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2080.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeBound ::= . \"extends\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
private final int slot2081() {
if (slot2081.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 72);
  if (length < 0) {
    recordParseError(slot2081);
    return L0;
  }
  if (slot2081.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(72, ci, length);
  cn = slot2081.getNodeCreator().create(this, slot2082, cn, cr);
  return L0;
}

// TypeBound ::= \"extends\" . layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
private final int slot2082() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2082);
    return L0;
  }
  if (slot2082.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2083, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeBound ::= \"extends\" layout[\"Layout\"] . {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+
private final int slot2083() {
  if (!slot344.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2083);
    return L0;
  }
  if (slot2083.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2084, slot344);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeBound ::= \"extends\" layout[\"Layout\"] {ReferenceType layout[\"Layout\"] \"&\" layout[\"Layout\"]}+ .
private final int slot2084() {
  if (slot2080.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CatchType
private final int slot2085() {
  Set<Integer> set = slot2085.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2085.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2085.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2085.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2085.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CatchType ::= . {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+
private final int slot2087() {
  if (!slot2086.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2087);
    return L0;
  }
  if (slot2087.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2088, slot2086);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchType ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ .
private final int slot2088() {
  if (slot2085.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+
private final int slot2086() {
  Set<Integer> set = slot2086.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2086.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2086.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2086.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2086.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= . {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier
private final int slot2435() {
  if (!slot2086.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2435);
    return L0;
  }
  if (slot2435.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2436, slot2086);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ . layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier
private final int slot2436() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2436);
    return L0;
  }
  if (slot2436.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2437, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] . \"|\" layout[\"Layout\"] QualifiedIdentifier
private final int slot2437() {
if (slot2437.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 133);
  if (length < 0) {
    recordParseError(slot2437);
    return L0;
  }
  if (slot2437.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(133, ci, length);
  cn = slot2437.getNodeCreator().create(this, slot2438, cn, cr);
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" . layout[\"Layout\"] QualifiedIdentifier
private final int slot2438() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2438);
    return L0;
  }
  if (slot2438.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2439, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] . QualifiedIdentifier
private final int slot2439() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2439);
    return L0;
  }
  if (slot2439.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2440, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ layout[\"Layout\"] \"|\" layout[\"Layout\"] QualifiedIdentifier .
private final int slot2440() {
  if (slot2086.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= . QualifiedIdentifier
private final int slot2441() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2441);
    return L0;
  }
  if (slot2441.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2442, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {QualifiedIdentifier layout[\"Layout\"] \"|\" layout[\"Layout\"]}+ ::= QualifiedIdentifier .
private final int slot2442() {
  if (slot2086.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// CatchClause
private final int slot2113() {
  Set<Integer> set = slot2113.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2113.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2113.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2113.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2113.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// CatchClause ::= . \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2114() {
if (slot2114.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 37);
  if (length < 0) {
    recordParseError(slot2114);
    return L0;
  }
  if (slot2114.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(37, ci, length);
  cn = slot2114.getNodeCreator().create(this, slot2115, cn, cr);
  return L0;
}

// CatchClause ::= \"catch\" . layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2115() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2115);
    return L0;
  }
  if (slot2115.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2116, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] . \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2116() {
if (slot2116.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 11);
  if (length < 0) {
    recordParseError(slot2116);
    return L0;
  }
  if (slot2116.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(11, ci, length);
  cn = slot2116.getNodeCreator().create(this, slot2117, cn, cr);
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" . layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2117() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2117);
    return L0;
  }
  if (slot2117.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2118, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] . {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2118() {
  if (!slot542.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2118);
    return L0;
  }
  if (slot2118.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2119, slot542);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* . layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2119() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2119);
    return L0;
  }
  if (slot2119.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2120, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] . CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2120() {
  if (!slot2085.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2120);
    return L0;
  }
  if (slot2120.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2121, slot2085);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType . layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2121() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2121);
    return L0;
  }
  if (slot2121.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2122, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] . Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2122() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2122);
    return L0;
  }
  if (slot2122.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2123, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier . layout[\"Layout\"] \")\" layout[\"Layout\"] Block
private final int slot2123() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2123);
    return L0;
  }
  if (slot2123.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2124, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] . \")\" layout[\"Layout\"] Block
private final int slot2124() {
if (slot2124.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 12);
  if (length < 0) {
    recordParseError(slot2124);
    return L0;
  }
  if (slot2124.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(12, ci, length);
  cn = slot2124.getNodeCreator().create(this, slot2125, cn, cr);
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" . layout[\"Layout\"] Block
private final int slot2125() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2125);
    return L0;
  }
  if (slot2125.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2126, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] . Block
private final int slot2126() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2126);
    return L0;
  }
  if (slot2126.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2127, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// CatchClause ::= \"catch\" layout[\"Layout\"] \"(\" layout[\"Layout\"] {VariableModifier}* layout[\"Layout\"] CatchType layout[\"Layout\"] Identifier layout[\"Layout\"] \")\" layout[\"Layout\"] Block .
private final int slot2127() {
  if (slot2113.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// PackageDeclaration?
private final int slot2162() {
  Set<Integer> set = slot2162.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2162.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2162.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2162.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2162.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// PackageDeclaration? ::= .
private final int slot2609() {
  if (slot2162.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2162, ci, ci);
    sppfLookup.addPackedNode(node, slot2609, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// PackageDeclaration? ::= . PackageDeclaration
private final int slot2610() {
  if (!slot1869.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2610);
    return L0;
  }
  if (slot2610.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2611, slot1869);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// PackageDeclaration? ::= PackageDeclaration .
private final int slot2611() {
  if (slot2162.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArgumentsOrDiamond
private final int slot2177() {
  Set<Integer> set = slot2177.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2177.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2177.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2177.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2177.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeArgumentsOrDiamond ::= . \"<\" layout[\"Layout\"] \">\"
private final int slot2178() {
if (slot2178.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 15);
  if (length < 0) {
    recordParseError(slot2178);
    return L0;
  }
  if (slot2178.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(15, ci, length);
  cn = slot2178.getNodeCreator().create(this, slot2179, cn, cr);
  return L0;
}

// TypeArgumentsOrDiamond ::= \"<\" . layout[\"Layout\"] \">\"
private final int slot2179() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2179);
    return L0;
  }
  if (slot2179.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2180, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArgumentsOrDiamond ::= \"<\" layout[\"Layout\"] . \">\"
private final int slot2180() {
  if (slot2180.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 16);
  if (length < 0) {
    recordParseError(slot2180);
    return L0;
  }
  if (slot2180.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(16, ci, length);
  cn = slot2180.getNodeCreator().create(this, slot2181, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// TypeArgumentsOrDiamond ::= \"<\" layout[\"Layout\"] \">\" .
private final int slot2181() {
  if (slot2177.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArgumentsOrDiamond ::= . TypeArguments
private final int slot2182() {
  if (!slot1019.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2182);
    return L0;
  }
  if (slot2182.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2183, slot1019);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArgumentsOrDiamond ::= TypeArguments .
private final int slot2183() {
  if (slot2177.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Sign
private final int slot2184() {
  Set<Integer> set = slot2184.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2184.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2184.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2184.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2184.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Sign ::= . [+-]
private final int slot2185() {
  if (slot2185.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 130);
  if (length < 0) {
    recordParseError(slot2185);
    return L0;
  }
  if (slot2185.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(130, ci, length);
  cn = slot2185.getNodeCreator().create(this, slot2186, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// Sign ::= [+-] .
private final int slot2186() {
  if (slot2184.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// LocalVariableDeclaration
private final int slot2189() {
  Set<Integer> set = slot2189.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2189.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2189.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2189.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2189.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// LocalVariableDeclaration ::= . {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2288() {
  if (!slot542.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2288);
    return L0;
  }
  if (slot2288.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2289, slot542);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclaration ::= {VariableModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2289() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2289);
    return L0;
  }
  if (slot2289.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2290, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2290() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2290);
    return L0;
  }
  if (slot2290.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2291, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2291() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2291);
    return L0;
  }
  if (slot2291.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2292, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2292() {
  if (!slot451.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2292);
    return L0;
  }
  if (slot2292.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2293, slot451);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// LocalVariableDeclaration ::= {VariableModifier}* layout[\"Layout\"] Type layout[\"Layout\"] {VariableDeclarator layout[\"Layout\"] \",\" layout[\"Layout\"]}+ .
private final int slot2293() {
  if (slot2189.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NotStarNotSlash
private final int slot2192() {
  Set<Integer> set = slot2192.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2192.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2192.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2192.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2192.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NotStarNotSlash ::= . InputCharacter
private final int slot2193() {
  if (!slot309.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2193);
    return L0;
  }
  if (slot2193.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2194, slot309);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NotStarNotSlash ::= InputCharacter .
private final int slot2194() {
  if (slot2192.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NotStarNotSlash ::= . LineTerminator
private final int slot2195() {
  if (!slot1784.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2195);
    return L0;
  }
  if (slot2195.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2196, slot1784);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NotStarNotSlash ::= LineTerminator .
private final int slot2196() {
  if (slot2192.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// NormalClassDeclaration
private final int slot2235() {
  Set<Integer> set = slot2235.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2235.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2235.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2235.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2235.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// NormalClassDeclaration ::= . {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2236() {
  if (!slot108.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2236);
    return L0;
  }
  if (slot2236.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2237, slot108);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* . layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2237() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2237);
    return L0;
  }
  if (slot2237.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2238, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] . \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2238() {
if (slot2238.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 70);
  if (length < 0) {
    recordParseError(slot2238);
    return L0;
  }
  if (slot2238.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(70, ci, length);
  cn = slot2238.getNodeCreator().create(this, slot2239, cn, cr);
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" . layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2239() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2239);
    return L0;
  }
  if (slot2239.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2240, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] . Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2240() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2240);
    return L0;
  }
  if (slot2240.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2241, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier . layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2241() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2241);
    return L0;
  }
  if (slot2241.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2242, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] . TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2242() {
  if (!slot771.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2242);
    return L0;
  }
  if (slot2242.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2243, slot771);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? . layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2243() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2243);
    return L0;
  }
  if (slot2243.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2244, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] . (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2244() {
  if (!slot822.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2244);
    return L0;
  }
  if (slot2244.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2245, slot822);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? . layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2245() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2245);
    return L0;
  }
  if (slot2245.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2246, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] . (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody
private final int slot2246() {
  if (!slot939.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2246);
    return L0;
  }
  if (slot2246.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2247, slot939);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? . layout[\"Layout\"] ClassBody
private final int slot2247() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2247);
    return L0;
  }
  if (slot2247.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2248, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] . ClassBody
private final int slot2248() {
  if (!slot420.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2248);
    return L0;
  }
  if (slot2248.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2249, slot420);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// NormalClassDeclaration ::= {ClassModifier}* layout[\"Layout\"] \"class\" layout[\"Layout\"] Identifier layout[\"Layout\"] TypeParameters? layout[\"Layout\"] (\"extends\" layout[\"Layout\"] Type)? layout[\"Layout\"] (\"implements\" layout[\"Layout\"] TypeList)? layout[\"Layout\"] ClassBody .
private final int slot2249() {
  if (slot2235.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArgumentsOrDiamond?
private final int slot2256() {
  Set<Integer> set = slot2256.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2256.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2256.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2256.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2256.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeArgumentsOrDiamond? ::= . TypeArgumentsOrDiamond
private final int slot2462() {
  if (!slot2177.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2462);
    return L0;
  }
  if (slot2462.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2463, slot2177);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeArgumentsOrDiamond? ::= TypeArgumentsOrDiamond .
private final int slot2463() {
  if (slot2256.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeArgumentsOrDiamond? ::= .
private final int slot2464() {
  if (slot2256.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2256, ci, ci);
    sppfLookup.addPackedNode(node, slot2464, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// ( | PrimaryQualifiedIdentifier)
private final int slot2267() {
  Set<Integer> set = slot2267.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2267.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2267.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2267.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2267.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ( | PrimaryQualifiedIdentifier) ::= . Primary
private final int slot2492() {
  if (!slot16.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2492);
    return L0;
  }
  if (slot2492.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2493, slot16);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | PrimaryQualifiedIdentifier) ::= Primary .
private final int slot2493() {
  if (slot2267.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ( | PrimaryQualifiedIdentifier) ::= . QualifiedIdentifier
private final int slot2494() {
  if (!slot99.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2494);
    return L0;
  }
  if (slot2494.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2495, slot99);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ( | PrimaryQualifiedIdentifier) ::= QualifiedIdentifier .
private final int slot2495() {
  if (slot2267.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexNumeral
private final int slot2299() {
  Set<Integer> set = slot2299.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2299.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2299.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2299.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2299.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexNumeral ::= . [0] [x] HexDigits
private final int slot2506() {
if (slot2506.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot2506);
    return L0;
  }
  if (slot2506.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot2506.getNodeCreator().create(this, slot2507, cn, cr);
  return L0;
}

// HexNumeral ::= [0] . [x] HexDigits
private final int slot2507() {
if (slot2507.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 134);
  if (length < 0) {
    recordParseError(slot2507);
    return L0;
  }
  if (slot2507.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(134, ci, length);
  cn = slot2507.getNodeCreator().create(this, slot2508, cn, cr);
  return L0;
}

// HexNumeral ::= [0] [x] . HexDigits
private final int slot2508() {
  if (!slot353.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2508);
    return L0;
  }
  if (slot2508.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2509, slot353);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexNumeral ::= [0] [x] HexDigits .
private final int slot2509() {
  if (slot2299.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// HexNumeral ::= . [0] [X] HexDigits
private final int slot2510() {
if (slot2510.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 35);
  if (length < 0) {
    recordParseError(slot2510);
    return L0;
  }
  if (slot2510.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(35, ci, length);
  cn = slot2510.getNodeCreator().create(this, slot2511, cn, cr);
  return L0;
}

// HexNumeral ::= [0] . [X] HexDigits
private final int slot2511() {
if (slot2511.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 135);
  if (length < 0) {
    recordParseError(slot2511);
    return L0;
  }
  if (slot2511.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(135, ci, length);
  cn = slot2511.getNodeCreator().create(this, slot2512, cn, cr);
  return L0;
}

// HexNumeral ::= [0] [X] . HexDigits
private final int slot2512() {
  if (!slot353.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2512);
    return L0;
  }
  if (slot2512.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2513, slot353);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexNumeral ::= [0] [X] HexDigits .
private final int slot2513() {
  if (slot2299.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Sign?
private final int slot2315() {
  Set<Integer> set = slot2315.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2315.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2315.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2315.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2315.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// Sign? ::= . Sign
private final int slot2489() {
  if (!slot2184.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2489);
    return L0;
  }
  if (slot2489.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2490, slot2184);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// Sign? ::= Sign .
private final int slot2490() {
  if (slot2315.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// Sign? ::= .
private final int slot2491() {
  if (slot2315.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2315, ci, ci);
    sppfLookup.addPackedNode(node, slot2491, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigits?
private final int slot2321() {
  Set<Integer> set = slot2321.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2321.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2321.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2321.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2321.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// HexDigits? ::= .
private final int slot2322() {
  if (slot2321.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2321, ci, ci);
    sppfLookup.addPackedNode(node, slot2322, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// HexDigits? ::= . HexDigits
private final int slot2323() {
  if (!slot353.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2323);
    return L0;
  }
  if (slot2323.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2324, slot353);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// HexDigits? ::= HexDigits .
private final int slot2324() {
  if (slot2321.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+
private final int slot2325() {
  Set<Integer> set = slot2325.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2325.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2325.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2325.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2325.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= . {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceMemberDeclaration
private final int slot2326() {
  if (!slot2325.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2326);
    return L0;
  }
  if (slot2326.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2327, slot2325);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ . layout[\"Layout\"] InterfaceMemberDeclaration
private final int slot2327() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2327);
    return L0;
  }
  if (slot2327.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2328, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] . InterfaceMemberDeclaration
private final int slot2328() {
  if (!slot1631.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2328);
    return L0;
  }
  if (slot2328.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2329, slot1631);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= {InterfaceMemberDeclaration layout[\"Layout\"]}+ layout[\"Layout\"] InterfaceMemberDeclaration .
private final int slot2329() {
  if (slot2325.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= . InterfaceMemberDeclaration
private final int slot2330() {
  if (!slot1631.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2330);
    return L0;
  }
  if (slot2330.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2331, slot1631);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {InterfaceMemberDeclaration layout[\"Layout\"]}+ ::= InterfaceMemberDeclaration .
private final int slot2331() {
  if (slot2325.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// StringCharacter*
private final int slot2346() {
  Set<Integer> set = slot2346.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2346.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2346.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2346.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2346.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// StringCharacter* ::= .
private final int slot2525() {
  if (slot2346.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2346, ci, ci);
    sppfLookup.addPackedNode(node, slot2525, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// StringCharacter* ::= . StringCharacter* StringCharacter
private final int slot2526() {
  if (!slot2346.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2526);
    return L0;
  }
  if (slot2526.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2527, slot2346);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StringCharacter* ::= StringCharacter* . StringCharacter
private final int slot2527() {
  if (!slot308.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2527);
    return L0;
  }
  if (slot2527.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2528, slot308);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// StringCharacter* ::= StringCharacter* StringCharacter .
private final int slot2528() {
  if (slot2346.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList)?
private final int slot2356() {
  Set<Integer> set = slot2356.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2356.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2356.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2356.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2356.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList)? ::= .
private final int slot2357() {
  if (slot2356.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2356, ci, ci);
    sppfLookup.addPackedNode(node, slot2357, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList)? ::= . (\"extends\" layout[\"Layout\"] TypeList)
private final int slot2358() {
  if (!slot1765.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2358);
    return L0;
  }
  if (slot2358.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2359, slot1765);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// (\"extends\" layout[\"Layout\"] TypeList)? ::= (\"extends\" layout[\"Layout\"] TypeList) .
private final int slot2359() {
  if (slot2356.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// empty()
private final int slot2422() {
  Set<Integer> set = slot2422.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2422.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2422.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2422.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2422.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// empty() ::= .
private final int slot2423() {
  if (slot2422.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2422, ci, ci);
    sppfLookup.addPackedNode(node, slot2423, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// FieldDeclaration
private final int slot2449() {
  Set<Integer> set = slot2449.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2449.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2449.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2449.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2449.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// FieldDeclaration ::= . {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2450() {
  if (!slot911.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2450);
    return L0;
  }
  if (slot2450.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2451, slot911);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* . layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2451() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2451);
    return L0;
  }
  if (slot2451.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2452, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] . Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2452() {
  if (!slot751.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2452);
    return L0;
  }
  if (slot2452.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2453, slot751);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type . layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2453() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2453);
    return L0;
  }
  if (slot2453.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2454, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] . VariableDeclarators layout[\"Layout\"] \";\"
private final int slot2454() {
  if (!slot859.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2454);
    return L0;
  }
  if (slot2454.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2455, slot859);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators . layout[\"Layout\"] \";\"
private final int slot2455() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2455);
    return L0;
  }
  if (slot2455.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2456, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] . \";\"
private final int slot2456() {
  if (slot2456.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot2456);
    return L0;
  }
  if (slot2456.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot2456.getNodeCreator().create(this, slot2457, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// FieldDeclaration ::= {FieldModifier}* layout[\"Layout\"] Type layout[\"Layout\"] VariableDeclarators layout[\"Layout\"] \";\" .
private final int slot2457() {
  if (slot2449.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+
private final int slot2503() {
  Set<Integer> set = slot2503.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2503.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2503.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2503.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2503.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer
private final int slot2529() {
  if (!slot2503.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2529);
    return L0;
  }
  if (slot2529.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2530, slot2503);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ . layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer
private final int slot2530() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2530);
    return L0;
  }
  if (slot2530.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2531, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] . \",\" layout[\"Layout\"] VariableInitializer
private final int slot2531() {
if (slot2531.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 17);
  if (length < 0) {
    recordParseError(slot2531);
    return L0;
  }
  if (slot2531.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(17, ci, length);
  cn = slot2531.getNodeCreator().create(this, slot2532, cn, cr);
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" . layout[\"Layout\"] VariableInitializer
private final int slot2532() {
  if (!slot9.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2532);
    return L0;
  }
  if (slot2532.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2533, slot9);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] . VariableInitializer
private final int slot2533() {
  if (!slot386.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2533);
    return L0;
  }
  if (slot2533.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2534, slot386);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ layout[\"Layout\"] \",\" layout[\"Layout\"] VariableInitializer .
private final int slot2534() {
  if (slot2503.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= . VariableInitializer
private final int slot2535() {
  if (!slot386.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2535);
    return L0;
  }
  if (slot2535.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2536, slot386);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// {VariableInitializer layout[\"Layout\"] \",\" layout[\"Layout\"]}+ ::= VariableInitializer .
private final int slot2536() {
  if (slot2503.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeVariable
private final int slot2541() {
  Set<Integer> set = slot2541.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2541.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2541.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2541.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2541.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeVariable ::= . Identifier
private final int slot2657() {
  if (!slot13.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2657);
    return L0;
  }
  if (slot2657.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2658, slot13);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeVariable ::= Identifier .
private final int slot2658() {
  if (slot2541.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeBound?
private final int slot2544() {
  Set<Integer> set = slot2544.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2544.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2544.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2544.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2544.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// TypeBound? ::= . TypeBound
private final int slot2697() {
  if (!slot2080.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2697);
    return L0;
  }
  if (slot2697.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2698, slot2080);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// TypeBound? ::= TypeBound .
private final int slot2698() {
  if (slot2544.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// TypeBound? ::= .
private final int slot2699() {
  if (slot2544.testFollowSet(lexer.getInput().charAt(ci))) {
    TokenSymbolNode epsilonNode = sppfLookup.getEpsilonNode(ci);
    NonterminalNode node = sppfLookup.getNonterminalNode(slot2544, ci, ci);
    sppfLookup.addPackedNode(node, slot2699, ci, DummyNode.getInstance(), epsilonNode);
    cn = node;
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
      return returnSlot.getId();
    }
  }
  return L0;
}

// InstanceInitializer
private final int slot2567() {
  Set<Integer> set = slot2567.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2567.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2567.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2567.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2567.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// InstanceInitializer ::= . Block
private final int slot2568() {
  if (!slot273.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2568);
    return L0;
  }
  if (slot2568.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2569, slot273);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// InstanceInitializer ::= Block .
private final int slot2569() {
  if (slot2567.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassMemberDeclaration
private final int slot2570() {
  Set<Integer> set = slot2570.getPredictionSet(lexer.getInput().charAt(ci));
  if (set == null) return L0;
  if (set.size() == 1) {
    log.trace("Processing (%s, %d, %s, %s)", slot2570.getFirstSlots()[set.iterator().next()], ci, cu, cn);
    return slot2570.getFirstSlots()[set.iterator().next()].getId();
  }
  for (int alternateIndex : set) {
    if (slot2570.getFirstSlots()[alternateIndex] == null) continue;
    scheduleDescriptor(new Descriptor(slot2570.getFirstSlots()[alternateIndex], cu, ci, DummyNode.getInstance()));
  }
  return L0;
}

// ClassMemberDeclaration ::= . InterfaceDeclaration
private final int slot2571() {
  if (!slot1063.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2571);
    return L0;
  }
  if (slot2571.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2572, slot1063);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassMemberDeclaration ::= InterfaceDeclaration .
private final int slot2572() {
  if (slot2570.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassMemberDeclaration ::= . ClassDeclaration
private final int slot2573() {
  if (!slot68.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2573);
    return L0;
  }
  if (slot2573.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2574, slot68);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassMemberDeclaration ::= ClassDeclaration .
private final int slot2574() {
  if (slot2570.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassMemberDeclaration ::= . MethodDeclaration
private final int slot2575() {
  if (!slot40.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2575);
    return L0;
  }
  if (slot2575.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2576, slot40);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassMemberDeclaration ::= MethodDeclaration .
private final int slot2576() {
  if (slot2570.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassMemberDeclaration ::= . FieldDeclaration
private final int slot2577() {
  if (!slot2449.test(lexer.getInput().charAt(ci))) {
    recordParseError(slot2577);
    return L0;
  }
  if (slot2577.getPreConditions().execute(this, lexer, cu, ci)) {
    return L0;
  }
  GrammarSlot returnSlot = create(slot2578, slot2449);
  if (returnSlot != null) {
    return returnSlot.getId();
  }
  return L0;
}

// ClassMemberDeclaration ::= FieldDeclaration .
private final int slot2578() {
  if (slot2570.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

// ClassMemberDeclaration ::= . \";\"
private final int slot2579() {
  if (slot2579.getPreConditions().execute(this, lexer, cu, ci)) return L0;
  length = lexer.tokenLengthAt(ci, 19);
  if (length < 0) {
    recordParseError(slot2579);
    return L0;
  }
  if (slot2579.getPostConditions().execute(this, lexer, cu, ci + length)) return L0;
  SPPFNode cr = getTokenNode(19, ci, length);
  cn = slot2579.getNodeCreator().create(this, slot2580, cn, cr);
  GrammarSlot returnSlot = pop();
  if (returnSlot != null) {
     return returnSlot.getId();
  }
  return L0;
}

// ClassMemberDeclaration ::= \";\" .
private final int slot2580() {
  if (slot2570.testFollowSet(lexer.getInput().charAt(ci))) {
    GrammarSlot returnSlot = pop();
    if (returnSlot != null) {
       return returnSlot.getId();
    }
  }
  return L0;
}

}
